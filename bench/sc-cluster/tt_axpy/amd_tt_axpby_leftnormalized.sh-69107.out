orthoX: L, orthoY: L
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 64
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->65  [0m[1;34m1->66  [0m[1;34m2->67  [0m[1;34m3->68  [0m[1;34m4->69  [0m[1;34m5->70  [0m[1;34m6->71  [0m[1;34m7->72  [0m[1;34m8->73  [0m[1;34m9->74  [0m[1;34m10->75  [0m[1;34m11->76  [0m[1;34m12->77  [0m[1;34m13->78  [0m[1;34m14->79  [0m[1;34m15->80  [0m[1;34m16->81  [0m[1;34m17->82  [0m[1;34m18->83  [0m[1;34m19->84  [0m[1;34m20->85  [0m[1;34m21->86  [0m[1;34m22->87  [0m[1;34m23->88  [0m[1;34m24->89  [0m[1;34m25->90  [0m[1;34m26->91  [0m[1;34m27->92  [0m[1;34m28->93  [0m[1;34m29->94  [0m[1;34m30->95  [0m[1;34m31->96  [0m[1;34m32->97  [0m[1;34m33->98  [0m[1;34m34->99  [0m[1;34m35->100  [0m[1;34m36->101  [0m[1;34m37->102  [0m[1;34m38->103  [0m[1;34m39->104  [0m[1;34m40->105  [0m[1;34m41->106  [0m[1;34m42->107  [0m[1;34m43->108  [0m[1;34m44->109  [0m[1;34m45->110  [0m[1;34m46->111  [0m[1;34m47->112  [0m[1;34m48->113  [0m[1;34m49->114  [0m[1;34m50->115  [0m[1;34m51->116  [0m[1;34m52->117  [0m[1;34m53->118  [0m[1;34m54->119  [0m[1;34m55->120  [0m[1;34m56->121  [0m[1;34m57->122  [0m[1;34m58->123  [0m[1;34m59->124  [0m[1;34m60->125  [0m[1;34m61->126  [0m[1;34m62->127  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23361452181376 -> hwthread 65 - OK[0m[1;34m
[0m[1;34m	threadid 23361266640896 -> hwthread 66 - OK[0m[1;34m
[0m[1;34m	threadid 23361065314432 -> hwthread 67 - OK[0m[1;34m
[0m[1;34m	threadid 23360863987968 -> hwthread 68 - OK[0m[1;34m
[0m[1;34m	threadid 23360662661504 -> hwthread 69 - OK[0m[1;34m
[0m[1;34m	threadid 23360461335040 -> hwthread 70 - OK[0m[1;34m
[0m[1;34m	threadid 23360260008576 -> hwthread 71 - OK[0m[1;34m
[0m[1;34m	threadid 23360058682112 -> hwthread 72 - OK[0m[1;34m
[0m[1;34m	threadid 23359857355648 -> hwthread 73 - OK[0m[1;34m
[0m[1;34m	threadid 23359656029184 -> hwthread 74 - OK[0m[1;34m
[0m[1;34m	threadid 23359454702720 -> hwthread 75 - OK[0m[1;34m
[0m[1;34m	threadid 23359253376256 -> hwthread 76 - OK[0m[1;34m
[0m[1;34m	threadid 23359052049792 -> hwthread 77 - OK[0m[1;34m
[0m[1;34m	threadid 23358850723328 -> hwthread 78 - OK[0m[1;34m
[0m[1;34m	threadid 23358649396864 -> hwthread 79 - OK[0m[1;34m
[0m[1;34m	threadid 23358448070400 -> hwthread 80 - OK[0m[1;34m
[0m[1;34m	threadid 23358246743936 -> hwthread 81 - OK[0m[1;34m
[0m[1;34m	threadid 23358045417472 -> hwthread 82 - OK[0m[1;34m
[0m[1;34m	threadid 23357844091008 -> hwthread 83 - OK[0m[1;34m
[0m[1;34m	threadid 23357642764544 -> hwthread 84 - OK[0m[1;34m
[0m[1;34m	threadid 23357441438080 -> hwthread 85 - OK[0m[1;34m
[0m[1;34m	threadid 23357240111616 -> hwthread 86 - OK[0m[1;34m
[0m[1;34m	threadid 23357038785152 -> hwthread 87 - OK[0m[1;34m
[0m[1;34m	threadid 23356837458688 -> hwthread 88 - OK[0m[1;34m
[0m[1;34m	threadid 23356636132224 -> hwthread 89 - OK[0m[1;34m
[0m[1;34m	threadid 23356434805760 -> hwthread 90 - OK[0m[1;34m
[0m[1;34m	threadid 23356233479296 -> hwthread 91 - OK[0m[1;34m
[0m[1;34m	threadid 23356032152832 -> hwthread 92 - OK[0m[1;34m
[0m[1;34m	threadid 23355830826368 -> hwthread 93 - OK[0m[1;34m
[0m[1;34m	threadid 23355629499904 -> hwthread 94 - OK[0m[1;34m
[0m[1;34m	threadid 23355428173440 -> hwthread 95 - OK[0m[1;34m
[0m[1;34m	threadid 23355226846976 -> hwthread 96 - OK[0m[1;34m
[0m[1;34m	threadid 23355025516416 -> hwthread 97 - OK[0m[1;34m
[0m[1;34m	threadid 23354824189952 -> hwthread 98 - OK[0m[1;34m
[0m[1;34m	threadid 23354622863488 -> hwthread 99 - OK[0m[1;34m
[0m[1;34m	threadid 23354421537024 -> hwthread 100 - OK[0m[1;34m
[0m[1;34m	threadid 23354220210560 -> hwthread 101 - OK[0m[1;34m
[0m[1;34m	threadid 23354018884096 -> hwthread 102 - OK[0m[1;34m
[0m[1;34m	threadid 23353817557632 -> hwthread 103 - OK[0m[1;34m
[0m[1;34m	threadid 23353616231168 -> hwthread 104 - OK[0m[1;34m
[0m[1;34m	threadid 23353414904704 -> hwthread 105 - OK[0m[1;34m
[0m[1;34m	threadid 23353213578240 -> hwthread 106 - OK[0m[1;34m
[0m[1;34m	threadid 23353012251776 -> hwthread 107 - OK[0m[1;34m
[0m[1;34m	threadid 23352810925312 -> hwthread 108 - OK[0m[1;34m
[0m[1;34m	threadid 23352609598848 -> hwthread 109 - OK[0m[1;34m
[0m[1;34m	threadid 23352408272384 -> hwthread 110 - OK[0m[1;34m
[0m[1;34m	threadid 23352206945920 -> hwthread 111 - OK[0m[1;34m
[0m[1;34m	threadid 23352005619456 -> hwthread 112 - OK[0m[1;34m
[0m[1;34m	threadid 23351804292992 -> hwthread 113 - OK[0m[1;34m
[0m[1;34m	threadid 23351602966528 -> hwthread 114 - OK[0m[1;34m
[0m[1;34m	threadid 23351401640064 -> hwthread 115 - OK[0m[1;34m
[0m[1;34m	threadid 23351200313600 -> hwthread 116 - OK[0m[1;34m
[0m[1;34m	threadid 23350998987136 -> hwthread 117 - OK[0m[1;34m
[0m[1;34m	threadid 23350797660672 -> hwthread 118 - OK[0m[1;34m
[0m[1;34m	threadid 23350596334208 -> hwthread 119 - OK[0m[1;34m
[0m[1;34m	threadid 23350395007744 -> hwthread 120 - OK[0m[1;34m
[0m[1;34m	threadid 23350193681280 -> hwthread 121 - OK[0m[1;34m
[0m[1;34m	threadid 23349992354816 -> hwthread 122 - OK[0m[1;34m
[0m[1;34m	threadid 23349791028352 -> hwthread 123 - OK[0m[1;34m
[0m[1;34m	threadid 23349589701888 -> hwthread 124 - OK[0m[1;34m
[0m[1;34m	threadid 23349388375424 -> hwthread 125 - OK[0m[1;34m
[0m[1;34m	threadid 23349187048960 -> hwthread 126 - OK[0m[1;34m
[0m[1;34m	threadid 23348985722496 -> hwthread 127 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23361346520832 -> hwthread 64 - OK[0m[1;34m
[0m[1;34m	threadid 23361339930368 -> hwthread 65 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                     	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 51, m: 51)                                                                	 0.285458  	 700       	 3.03601   	 0         	 0.154077  	 19.7045   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2550, cols: 51, reductionFactor: 37, colBlockingSize: 12)                 	 0.147139  	 600       	 55.5542   	 0         	 4.32738   	 12.8378   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 51, r: 51, r2: 2550, leftOrthog: 0)       	 0.0901846 	 600       	 88.2529   	 0         	 21.0423   	 4.19408   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 51)                                                                	 0.038533  	 100       	 3.07961   	 0         	 0.158825  	 19.39     
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                	 0.0364027 	 100       	 3.20489   	 0         	 0.165922  	 19.3157   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 51, n: 50, r: 51, r2: 51)            	 0.0308816 	 600       	 257.728   	 0         	 40.8322   	 6.31188   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 1, n: 50, r2: 1)                    	 0.0280933 	 800       	 0         	 0         	 1.16184   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 51, reductionFactor: 37, colBlockingSize: 12)                 	 0.0259391 	 100       	 51.4918   	 0         	 4.01251   	 12.8328   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2550, cols: 50, reductionFactor: 37, colBlockingSize: 12)                 	 0.023951  	 100       	 54.6725   	 0         	 4.3422    	 12.591    
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 2500, m: 1, k: 50)	 0.0204379 	 800       	 9.78572   	 0         	 39.9414   	 0.245002  
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 51, Qr2: 1)       	 0.0169515 	 700       	 0         	 0         	 85.0993   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 1, k: 2500)   	 0.0144543 	 800       	 13.8367   	 0         	 56.4758   	 0.245002  
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 2550, leftOrthog: 0)       	 0.010522  	 100       	 121.175   	 0         	 29.4621   	 4.1129    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 51, r: 51, r2: 2500, leftOrthog: 0)       	 0.00954503	 100       	 136.249   	 0         	 32.4946   	 4.19298   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2550, cols: 1, reductionFactor: 37, colBlockingSize: 12)                  	 0.00762772	 700       	 0.480679  	 0         	 1.87285   	 0.256656  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r: 51, r2: 51)            	 0.00632297	 100       	 205.679   	 0         	 32.5924   	 6.31063   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2550, Xcols: 1, r: 1, streamingCols: 0)                    	 0.00576475	 700       	 0.30964   	 0         	 4.95473   	 0.0624939 
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 51, n: 50, r: 51, r2: 50)            	 0.00453325	 100       	 286.88    	 0         	 45.9008   	 6.25      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 1)                                                                                          	 0.00440876	 1200      	 0         	 0         	 0.217748  	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 50, k: 1)   	 0.00412999	 900       	 1.08959   	 0         	 4.5327    	 0.240385  
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 0, n: 50, r2: 1)                    	 0.00410894	 100       	 0         	 0         	 0.973488  	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 51, reductionFactor: 37, colBlockingSize: 12)                   	 0.00317933	 100       	 8.40209   	 0         	 1.29612   	 6.48247   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 2550, m: 1)                                                                       	 0.0029618 	 700       	 0         	 0         	 9.64278   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2550, m: 1)                                                              	 0.00295926	 700       	 0         	 0         	 9.65106   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 50, Qr2: 1)       	 0.00278441	 100       	 0         	 0         	 73.265    	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 51, r: 50, r2: 50, leftOrthog: 0)         	 0.00158724	 100       	 16.0657   	 0         	 6.37586   	 2.51976   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 1, reductionFactor: 37, colBlockingSize: 12)                  	 0.00112255	 100       	 0.457454  	 0         	 1.78237   	 0.256654  
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                  	 0.000876017	 100       	 0.570765  	 0         	 2.28306   	 0.25      
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 1, r: 1, streamingCols: 0)                    	 0.000840527	 100       	 0.297432  	 0         	 4.75939   	 0.0624938 
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 1, m: 1)                                                                   	 0.000776471	 900       	 0         	 0         	 0.0370909 	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 50, r2: 50)             	 0.000776133	 100       	 32.211    	 0         	 7.73063   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                         	 0.000545414	 100       	 0         	 0         	 7.33388   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 1, reductionFactor: 37, colBlockingSize: 12)                    	 0.000493733	 100       	 0.0208013 	 0         	 0.0826358 	 0.251722  
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 1, Xr2: 50, Qr1: 1, Qr2: 0)         	 0.000474678	 100       	 0         	 0         	 8.42677   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 1)                                                              	 0.000457975	 100       	 0         	 0         	 8.7341    	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                	 0.00044145	 100       	 0.566316  	 0         	 9.06105   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 2500, m: 1)                                                                       	 0.000430147	 100       	 0         	 0         	 9.29915   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                           	 0.000417321	 100       	 1.19812   	 0         	 14.3774   	 0.0833333 
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 1, r1low: 0, n: 50, r2: 1)                     	 0.000400846	 100       	 0         	 0         	 0.199578  	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 1, m: 50, k: 1)    	 0.000369259	 800       	 0.21665   	 0         	 1.75053   	 0.123762  
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 1)                                                                                 	 0.000361879	 100       	 0.0138168 	 0         	 0.221068  	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                	 0.000356921	 100       	 0.700435  	 0         	 11.207    	 0.0625    
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 1)                                                                	 0.000161546	 100       	 0         	 0         	 0.495215  	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 1, k: 50)     	 0.000127035	 100       	 3.93592   	 0         	 16.3734   	 0.240385  
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 1, m: 1, fromLeft: 0)                 	 4.3854e-05	 800       	 0         	 0         	 0.291878  	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 50, m: 1, k: 50)  	 3.5941e-05	 100       	 13.9117   	 0         	 57.8726   	 0.240385  
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 0, m: 50, k: 1)    	 6.96e-06  	 100       	 0         	 0         	 5.74713   	 0         
Timing statistics:
function                                                                                                                                                                                      	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                        	 1.09948   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_normalized(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                     	 1.09944   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::rightNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                            	 0.972905  	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::rightNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                        	 0.971582  	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double]	 0.9154    	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                               	 0.360394  	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                  	 0.209452  	 1800      
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                            	 0.200831  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_leftOrthogonalize(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&) [with T = double]                                   	 0.126458  	 100       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                	 0.111839  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                           	 0.042514  	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                        	 0.0326031 	 1000      
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]           	 0.0278817 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double]       	 0.0204739 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                                       	 0.0202106 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double]          	 0.0145814 	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.00976371	 900       
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                	 0.00765292	 1800      
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                    	 0.00660528	 800       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                	 0.00495418	 1300      
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double]        	 0.00450621	 1800      
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                              	 0.00357878	 900       
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                       	 0.00339195	 800       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                              	 0.00278234	 6300      
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                       	 0.00116025	 300       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                         	 0.00111738	 5000      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                         	 0.000876017	 100       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.000776471	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                                                  	 0.000417321	 100       
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                           	 4.3854e-05	 800       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
orthoX: L, orthoY: L
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 64
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->65  [0m[1;34m1->66  [0m[1;34m2->67  [0m[1;34m3->68  [0m[1;34m4->69  [0m[1;34m5->70  [0m[1;34m6->71  [0m[1;34m7->72  [0m[1;34m8->73  [0m[1;34m9->74  [0m[1;34m10->75  [0m[1;34m11->76  [0m[1;34m12->77  [0m[1;34m13->78  [0m[1;34m14->79  [0m[1;34m15->80  [0m[1;34m16->81  [0m[1;34m17->82  [0m[1;34m18->83  [0m[1;34m19->84  [0m[1;34m20->85  [0m[1;34m21->86  [0m[1;34m22->87  [0m[1;34m23->88  [0m[1;34m24->89  [0m[1;34m25->90  [0m[1;34m26->91  [0m[1;34m27->92  [0m[1;34m28->93  [0m[1;34m29->94  [0m[1;34m30->95  [0m[1;34m31->96  [0m[1;34m32->97  [0m[1;34m33->98  [0m[1;34m34->99  [0m[1;34m35->100  [0m[1;34m36->101  [0m[1;34m37->102  [0m[1;34m38->103  [0m[1;34m39->104  [0m[1;34m40->105  [0m[1;34m41->106  [0m[1;34m42->107  [0m[1;34m43->108  [0m[1;34m44->109  [0m[1;34m45->110  [0m[1;34m46->111  [0m[1;34m47->112  [0m[1;34m48->113  [0m[1;34m49->114  [0m[1;34m50->115  [0m[1;34m51->116  [0m[1;34m52->117  [0m[1;34m53->118  [0m[1;34m54->119  [0m[1;34m55->120  [0m[1;34m56->121  [0m[1;34m57->122  [0m[1;34m58->123  [0m[1;34m59->124  [0m[1;34m60->125  [0m[1;34m61->126  [0m[1;34m62->127  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22632912254848 -> hwthread 65 - OK[0m[1;34m
[0m[1;34m	threadid 22632732813312 -> hwthread 66 - OK[0m[1;34m
[0m[1;34m	threadid 22632531486848 -> hwthread 67 - OK[0m[1;34m
[0m[1;34m	threadid 22632330160384 -> hwthread 68 - OK[0m[1;34m
[0m[1;34m	threadid 22632128833920 -> hwthread 69 - OK[0m[1;34m
[0m[1;34m	threadid 22631927507456 -> hwthread 70 - OK[0m[1;34m
[0m[1;34m	threadid 22631726180992 -> hwthread 71 - OK[0m[1;34m
[0m[1;34m	threadid 22631524854528 -> hwthread 72 - OK[0m[1;34m
[0m[1;34m	threadid 22631323528064 -> hwthread 73 - OK[0m[1;34m
[0m[1;34m	threadid 22631122201600 -> hwthread 74 - OK[0m[1;34m
[0m[1;34m	threadid 22630920875136 -> hwthread 75 - OK[0m[1;34m
[0m[1;34m	threadid 22630719548672 -> hwthread 76 - OK[0m[1;34m
[0m[1;34m	threadid 22630518222208 -> hwthread 77 - OK[0m[1;34m
[0m[1;34m	threadid 22630316895744 -> hwthread 78 - OK[0m[1;34m
[0m[1;34m	threadid 22630115569280 -> hwthread 79 - OK[0m[1;34m
[0m[1;34m	threadid 22629914242816 -> hwthread 80 - OK[0m[1;34m
[0m[1;34m	threadid 22629712916352 -> hwthread 81 - OK[0m[1;34m
[0m[1;34m	threadid 22629511589888 -> hwthread 82 - OK[0m[1;34m
[0m[1;34m	threadid 22629310263424 -> hwthread 83 - OK[0m[1;34m
[0m[1;34m	threadid 22629108936960 -> hwthread 84 - OK[0m[1;34m
[0m[1;34m	threadid 22628907610496 -> hwthread 85 - OK[0m[1;34m
[0m[1;34m	threadid 22628706284032 -> hwthread 86 - OK[0m[1;34m
[0m[1;34m	threadid 22628504957568 -> hwthread 87 - OK[0m[1;34m
[0m[1;34m	threadid 22628303631104 -> hwthread 88 - OK[0m[1;34m
[0m[1;34m	threadid 22628102304640 -> hwthread 89 - OK[0m[1;34m
[0m[1;34m	threadid 22627900978176 -> hwthread 90 - OK[0m[1;34m
[0m[1;34m	threadid 22627699651712 -> hwthread 91 - OK[0m[1;34m
[0m[1;34m	threadid 22627498325248 -> hwthread 92 - OK[0m[1;34m
[0m[1;34m	threadid 22627296998784 -> hwthread 93 - OK[0m[1;34m
[0m[1;34m	threadid 22627095672320 -> hwthread 94 - OK[0m[1;34m
[0m[1;34m	threadid 22626894345856 -> hwthread 95 - OK[0m[1;34m
[0m[1;34m	threadid 22626693019392 -> hwthread 96 - OK[0m[1;34m
[0m[1;34m	threadid 22626491688832 -> hwthread 97 - OK[0m[1;34m
[0m[1;34m	threadid 22626290362368 -> hwthread 98 - OK[0m[1;34m
[0m[1;34m	threadid 22626089035904 -> hwthread 99 - OK[0m[1;34m
[0m[1;34m	threadid 22625887709440 -> hwthread 100 - OK[0m[1;34m
[0m[1;34m	threadid 22625686382976 -> hwthread 101 - OK[0m[1;34m
[0m[1;34m	threadid 22625485056512 -> hwthread 102 - OK[0m[1;34m
[0m[1;34m	threadid 22625283730048 -> hwthread 103 - OK[0m[1;34m
[0m[1;34m	threadid 22625082403584 -> hwthread 104 - OK[0m[1;34m
[0m[1;34m	threadid 22624881077120 -> hwthread 105 - OK[0m[1;34m
[0m[1;34m	threadid 22624679750656 -> hwthread 106 - OK[0m[1;34m
[0m[1;34m	threadid 22624478424192 -> hwthread 107 - OK[0m[1;34m
[0m[1;34m	threadid 22624277097728 -> hwthread 108 - OK[0m[1;34m
[0m[1;34m	threadid 22624075771264 -> hwthread 109 - OK[0m[1;34m
[0m[1;34m	threadid 22623874444800 -> hwthread 110 - OK[0m[1;34m
[0m[1;34m	threadid 22623673118336 -> hwthread 111 - OK[0m[1;34m
[0m[1;34m	threadid 22623471791872 -> hwthread 112 - OK[0m[1;34m
[0m[1;34m	threadid 22623270465408 -> hwthread 113 - OK[0m[1;34m
[0m[1;34m	threadid 22623069138944 -> hwthread 114 - OK[0m[1;34m
[0m[1;34m	threadid 22622867812480 -> hwthread 115 - OK[0m[1;34m
[0m[1;34m	threadid 22622666486016 -> hwthread 116 - OK[0m[1;34m
[0m[1;34m	threadid 22622465159552 -> hwthread 117 - OK[0m[1;34m
[0m[1;34m	threadid 22622263833088 -> hwthread 118 - OK[0m[1;34m
[0m[1;34m	threadid 22622062506624 -> hwthread 119 - OK[0m[1;34m
[0m[1;34m	threadid 22621861180160 -> hwthread 120 - OK[0m[1;34m
[0m[1;34m	threadid 22621659853696 -> hwthread 121 - OK[0m[1;34m
[0m[1;34m	threadid 22621458527232 -> hwthread 122 - OK[0m[1;34m
[0m[1;34m	threadid 22621257200768 -> hwthread 123 - OK[0m[1;34m
[0m[1;34m	threadid 22621055874304 -> hwthread 124 - OK[0m[1;34m
[0m[1;34m	threadid 22620854547840 -> hwthread 125 - OK[0m[1;34m
[0m[1;34m	threadid 22620653221376 -> hwthread 126 - OK[0m[1;34m
[0m[1;34m	threadid 22620451894912 -> hwthread 127 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22632806594304 -> hwthread 64 - OK[0m[1;34m
[0m[1;34m	threadid 22632627951360 -> hwthread 65 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                     	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 52, m: 52)                                                                	 0.25479   	 700       	 3.60547   	 0         	 0.179435  	 20.0934   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2600, cols: 52, reductionFactor: 37, colBlockingSize: 12)                 	 0.15191   	 600       	 57.0371   	 0         	 4.35745   	 13.0896   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 52, r: 52, r2: 2600, leftOrthog: 0)       	 0.095046  	 600       	 88.7621   	 0         	 20.7567   	 4.27632   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 52)                                                                	 0.0397454 	 100       	 3.03599   	 0         	 0.155993  	 19.4624   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                	 0.0359519 	 100       	 3.24508   	 0         	 0.168002  	 19.3157   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 52, n: 50, r: 52, r2: 52)            	 0.0294844 	 600       	 286.134   	 0         	 44.4608   	 6.43564   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 52, reductionFactor: 37, colBlockingSize: 12)                 	 0.0261323 	 100       	 53.1349   	 0         	 4.06252   	 13.0793   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2600, cols: 50, reductionFactor: 37, colBlockingSize: 12)                 	 0.0237525 	 100       	 56.2102   	 0         	 4.46268   	 12.5956   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 52, Qr2: 2)       	 0.0155816 	 700       	 0         	 0         	 95.3842   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 100, k: 2)  	 0.0112754 	 800       	 1.41902   	 0         	 3.00832   	 0.471698  
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 2600, leftOrthog: 0)       	 0.0112529 	 100       	 115.526   	 0         	 28.0816   	 4.11392   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 2, k: 2500)   	 0.0106513 	 800       	 37.5542   	 0         	 78.1728   	 0.4804    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 52, r: 52, r2: 2500, leftOrthog: 0)       	 0.00912861	 100       	 148.106   	 0         	 34.6522   	 4.27407   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2600, cols: 2, reductionFactor: 37, colBlockingSize: 12)                  	 0.00800646	 700       	 1.86768   	 0         	 3.63986   	 0.513119  
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 2500, m: 2, k: 50)	 0.00757311	 800       	 52.8184   	 0         	 109.947   	 0.4804    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r: 52, r2: 52)            	 0.00577473	 100       	 234.124   	 0         	 36.3936   	 6.4331    
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2600, Xcols: 2, r: 2, streamingCols: 0)                    	 0.00560479	 700       	 1.29889   	 0         	 10.3931   	 0.124976  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 52, n: 50, r: 52, r2: 50)            	 0.00513895	 100       	 263.089   	 0         	 41.6895   	 6.31068   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 2, n: 50, r2: 2)                    	 0.00327687	 700       	 0         	 0         	 17.7731   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 2600, m: 2)                                                                       	 0.0031434 	 700       	 0         	 0         	 18.5277   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 52, reductionFactor: 37, colBlockingSize: 12)                   	 0.00313755	 100       	 8.8511    	 0         	 1.35239   	 6.54478   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2600, m: 2)                                                              	 0.00305198	 700       	 0         	 0         	 19.0827   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 2, n: 50, r2: 2)                                                                                          	 0.00268809	 800       	 0         	 0         	 0.95235   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 50, Qr2: 2)       	 0.00264953	 100       	 0         	 0         	 78.5045   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 52, r: 50, r2: 50, leftOrthog: 0)         	 0.00140388	 100       	 18.5201   	 0         	 7.29408   	 2.53906   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2, m: 2)                                                                   	 0.00124823	 900       	 0.00721021	 0         	 0.0807543 	 0.0892857 
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 2, reductionFactor: 37, colBlockingSize: 12)                  	 0.00121921	 100       	 1.68475   	 0         	 3.28345   	 0.513103  
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 2, r: 2, streamingCols: 0)                    	 0.000881624	 100       	 1.13427   	 0         	 9.07598   	 0.124975  
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                  	 0.000832388	 100       	 0.600681  	 0         	 2.40273   	 0.25      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 2)                                                                                          	 0.000808302	 200       	 0         	 0         	 0.395892  	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 50, k: 2)   	 0.000762794	 100       	 1.31097   	 0         	 2.8317    	 0.462963  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 2, n: 50, r2: 1)                                                                                          	 0.000750095	 200       	 0         	 0         	 0.426613  	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 2, m: 100, k: 2)   	 0.000748164	 700       	 0.748499  	 0         	 3.02394   	 0.247525  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 50, r2: 50)             	 0.000742203	 100       	 33.6835   	 0         	 8.08404   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 0, n: 50, r2: 2)                    	 0.000649827	 100       	 0         	 0         	 12.311    	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                         	 0.000551508	 100       	 0         	 0         	 7.25284   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 2, reductionFactor: 37, colBlockingSize: 12)                    	 0.000531254	 100       	 0.0773285 	 0         	 0.156611  	 0.493763  
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 1, Xr2: 50, Qr1: 1, Qr2: 0)         	 0.000496398	 100       	 0         	 0         	 8.05805   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 2)                                                              	 0.000489629	 100       	 0         	 0         	 16.3389   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 2, n: 50, r2: 1)                    	 0.000485226	 100       	 0         	 0         	 8.57332   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 2500, m: 2)                                                                       	 0.000453068	 100       	 0         	 0         	 17.6574   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 1, r1low: 0, n: 50, r2: 2)                     	 0.000432211	 100       	 0         	 0         	 0.37019   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                	 0.000405574	 100       	 0.61641   	 0         	 9.86257   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                           	 0.000403061	 100       	 1.24051   	 0         	 14.8861   	 0.0833333 
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 2, n: 50, r2: 1)                                                                                 	 0.000354792	 100       	 0.0281855 	 0         	 0.450968  	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                	 0.0003424 	 100       	 0.73014   	 0         	 11.6822   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 2, k: 50)     	 0.000275579	 100       	 3.62872   	 0         	 7.83804   	 0.462963  
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 2)                                                                	 0.000173177	 100       	 0         	 0         	 0.92391   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 50, m: 2, k: 50)  	 0.000121963	 100       	 8.19921   	 0         	 17.7103   	 0.462963  
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 2, m: 2, fromLeft: 0)                 	 0.000119453	 800       	 0         	 0         	 0.42862   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 2, m: 50, k: 2)    	 6.5223e-05	 100       	 0.613281  	 0         	 2.50218   	 0.245098  
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 0, m: 100, k: 2)   	 6.251e-06 	 100       	 0         	 0         	 25.5959   	 0         
Timing statistics:
function                                                                                                                                                                                      	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                        	 1.0096    	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_normalized(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                     	 1.00954   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::rightNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                            	 0.918297  	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::rightNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                        	 0.917018  	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double]	 0.864537  	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                               	 0.330488  	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                  	 0.214689  	 1800      
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                            	 0.20554   	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                	 0.116831  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_leftOrthogonalize(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&) [with T = double]                                   	 0.0911637 	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                           	 0.0411402 	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]           	 0.0294134 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                                       	 0.0187275 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double]        	 0.0128578 	 1800      
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double]          	 0.0109269 	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.0102044 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double]       	 0.00769507	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                    	 0.00648641	 800       
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                	 0.00495774	 1800      
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                        	 0.00484413	 1000      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                	 0.00479799	 1300      
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                              	 0.00371479	 900       
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                       	 0.00359646	 800       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                              	 0.00281162	 6300      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                         	 0.00170186	 5200      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.00124823	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                       	 0.00110277	 300       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                         	 0.000832388	 100       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                                                  	 0.000403061	 100       
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                           	 0.000119453	 800       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
orthoX: L, orthoY: L
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 64
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->65  [0m[1;34m1->66  [0m[1;34m2->67  [0m[1;34m3->68  [0m[1;34m4->69  [0m[1;34m5->70  [0m[1;34m6->71  [0m[1;34m7->72  [0m[1;34m8->73  [0m[1;34m9->74  [0m[1;34m10->75  [0m[1;34m11->76  [0m[1;34m12->77  [0m[1;34m13->78  [0m[1;34m14->79  [0m[1;34m15->80  [0m[1;34m16->81  [0m[1;34m17->82  [0m[1;34m18->83  [0m[1;34m19->84  [0m[1;34m20->85  [0m[1;34m21->86  [0m[1;34m22->87  [0m[1;34m23->88  [0m[1;34m24->89  [0m[1;34m25->90  [0m[1;34m26->91  [0m[1;34m27->92  [0m[1;34m28->93  [0m[1;34m29->94  [0m[1;34m30->95  [0m[1;34m31->96  [0m[1;34m32->97  [0m[1;34m33->98  [0m[1;34m34->99  [0m[1;34m35->100  [0m[1;34m36->101  [0m[1;34m37->102  [0m[1;34m38->103  [0m[1;34m39->104  [0m[1;34m40->105  [0m[1;34m41->106  [0m[1;34m42->107  [0m[1;34m43->108  [0m[1;34m44->109  [0m[1;34m45->110  [0m[1;34m46->111  [0m[1;34m47->112  [0m[1;34m48->113  [0m[1;34m49->114  [0m[1;34m50->115  [0m[1;34m51->116  [0m[1;34m52->117  [0m[1;34m53->118  [0m[1;34m54->119  [0m[1;34m55->120  [0m[1;34m56->121  [0m[1;34m57->122  [0m[1;34m58->123  [0m[1;34m59->124  [0m[1;34m60->125  [0m[1;34m61->126  [0m[1;34m62->127  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22572145096576 -> hwthread 65 - OK[0m[1;34m
[0m[1;34m	threadid 22571932182528 -> hwthread 66 - OK[0m[1;34m
[0m[1;34m	threadid 22571730856064 -> hwthread 67 - OK[0m[1;34m
[0m[1;34m	threadid 22571529529600 -> hwthread 68 - OK[0m[1;34m
[0m[1;34m	threadid 22571328203136 -> hwthread 69 - OK[0m[1;34m
[0m[1;34m	threadid 22571126876672 -> hwthread 70 - OK[0m[1;34m
[0m[1;34m	threadid 22570925550208 -> hwthread 71 - OK[0m[1;34m
[0m[1;34m	threadid 22570724223744 -> hwthread 72 - OK[0m[1;34m
[0m[1;34m	threadid 22570522897280 -> hwthread 73 - OK[0m[1;34m
[0m[1;34m	threadid 22570321570816 -> hwthread 74 - OK[0m[1;34m
[0m[1;34m	threadid 22570120244352 -> hwthread 75 - OK[0m[1;34m
[0m[1;34m	threadid 22569918917888 -> hwthread 76 - OK[0m[1;34m
[0m[1;34m	threadid 22569717591424 -> hwthread 77 - OK[0m[1;34m
[0m[1;34m	threadid 22569516264960 -> hwthread 78 - OK[0m[1;34m
[0m[1;34m	threadid 22569314938496 -> hwthread 79 - OK[0m[1;34m
[0m[1;34m	threadid 22569113612032 -> hwthread 80 - OK[0m[1;34m
[0m[1;34m	threadid 22568912285568 -> hwthread 81 - OK[0m[1;34m
[0m[1;34m	threadid 22568710959104 -> hwthread 82 - OK[0m[1;34m
[0m[1;34m	threadid 22568509632640 -> hwthread 83 - OK[0m[1;34m
[0m[1;34m	threadid 22568308306176 -> hwthread 84 - OK[0m[1;34m
[0m[1;34m	threadid 22568106979712 -> hwthread 85 - OK[0m[1;34m
[0m[1;34m	threadid 22567905653248 -> hwthread 86 - OK[0m[1;34m
[0m[1;34m	threadid 22567704326784 -> hwthread 87 - OK[0m[1;34m
[0m[1;34m	threadid 22567503000320 -> hwthread 88 - OK[0m[1;34m
[0m[1;34m	threadid 22567301673856 -> hwthread 89 - OK[0m[1;34m
[0m[1;34m	threadid 22567100347392 -> hwthread 90 - OK[0m[1;34m
[0m[1;34m	threadid 22566899020928 -> hwthread 91 - OK[0m[1;34m
[0m[1;34m	threadid 22566697694464 -> hwthread 92 - OK[0m[1;34m
[0m[1;34m	threadid 22566496368000 -> hwthread 93 - OK[0m[1;34m
[0m[1;34m	threadid 22566295041536 -> hwthread 94 - OK[0m[1;34m
[0m[1;34m	threadid 22566093715072 -> hwthread 95 - OK[0m[1;34m
[0m[1;34m	threadid 22565892388608 -> hwthread 96 - OK[0m[1;34m
[0m[1;34m	threadid 22565691058048 -> hwthread 97 - OK[0m[1;34m
[0m[1;34m	threadid 22565489731584 -> hwthread 98 - OK[0m[1;34m
[0m[1;34m	threadid 22565288405120 -> hwthread 99 - OK[0m[1;34m
[0m[1;34m	threadid 22565087078656 -> hwthread 100 - OK[0m[1;34m
[0m[1;34m	threadid 22564885752192 -> hwthread 101 - OK[0m[1;34m
[0m[1;34m	threadid 22564684425728 -> hwthread 102 - OK[0m[1;34m
[0m[1;34m	threadid 22564483099264 -> hwthread 103 - OK[0m[1;34m
[0m[1;34m	threadid 22564281772800 -> hwthread 104 - OK[0m[1;34m
[0m[1;34m	threadid 22564080446336 -> hwthread 105 - OK[0m[1;34m
[0m[1;34m	threadid 22563879119872 -> hwthread 106 - OK[0m[1;34m
[0m[1;34m	threadid 22563677793408 -> hwthread 107 - OK[0m[1;34m
[0m[1;34m	threadid 22563476466944 -> hwthread 108 - OK[0m[1;34m
[0m[1;34m	threadid 22563275140480 -> hwthread 109 - OK[0m[1;34m
[0m[1;34m	threadid 22563073814016 -> hwthread 110 - OK[0m[1;34m
[0m[1;34m	threadid 22562872487552 -> hwthread 111 - OK[0m[1;34m
[0m[1;34m	threadid 22562671161088 -> hwthread 112 - OK[0m[1;34m
[0m[1;34m	threadid 22562469834624 -> hwthread 113 - OK[0m[1;34m
[0m[1;34m	threadid 22562268508160 -> hwthread 114 - OK[0m[1;34m
[0m[1;34m	threadid 22562067181696 -> hwthread 115 - OK[0m[1;34m
[0m[1;34m	threadid 22561865855232 -> hwthread 116 - OK[0m[1;34m
[0m[1;34m	threadid 22561664528768 -> hwthread 117 - OK[0m[1;34m
[0m[1;34m	threadid 22561463202304 -> hwthread 118 - OK[0m[1;34m
[0m[1;34m	threadid 22561261875840 -> hwthread 119 - OK[0m[1;34m
[0m[1;34m	threadid 22561060549376 -> hwthread 120 - OK[0m[1;34m
[0m[1;34m	threadid 22560859222912 -> hwthread 121 - OK[0m[1;34m
[0m[1;34m	threadid 22560657896448 -> hwthread 122 - OK[0m[1;34m
[0m[1;34m	threadid 22560456569984 -> hwthread 123 - OK[0m[1;34m
[0m[1;34m	threadid 22560255243520 -> hwthread 124 - OK[0m[1;34m
[0m[1;34m	threadid 22560053917056 -> hwthread 125 - OK[0m[1;34m
[0m[1;34m	threadid 22559852590592 -> hwthread 126 - OK[0m[1;34m
[0m[1;34m	threadid 22559651264128 -> hwthread 127 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22572039436032 -> hwthread 64 - OK[0m[1;34m
[0m[1;34m	threadid 22572032845568 -> hwthread 65 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                     	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 53, m: 53)                                                                	 0.273562  	 700       	 3.55554   	 0         	 0.173591  	 20.4823   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2650, cols: 53, reductionFactor: 37, colBlockingSize: 12)                 	 0.154337  	 600       	 59.4415   	 0         	 4.45546   	 13.3413   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 53, r: 53, r2: 2650, leftOrthog: 0)       	 0.101755  	 600       	 87.7855   	 0         	 20.141    	 4.35855   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 53)                                                                	 0.0411646 	 100       	 2.97991   	 0         	 0.152558  	 19.5329   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                	 0.0381807 	 100       	 3.05565   	 0         	 0.158195  	 19.3157   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 53, n: 50, r: 53, r2: 53)            	 0.027435  	 600       	 325.592   	 0         	 49.6375   	 6.55941   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 53, reductionFactor: 37, colBlockingSize: 12)                 	 0.0273257 	 100       	 52.7876   	 0         	 3.96136   	 13.3256   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2650, cols: 50, reductionFactor: 37, colBlockingSize: 12)                 	 0.025334  	 100       	 53.7147   	 0         	 4.26304   	 12.6001   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 53, Qr2: 3)       	 0.0171178 	 700       	 0         	 0         	 89.4416   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 150, k: 3)  	 0.0168596 	 800       	 2.13528   	 0         	 3.0748    	 0.694444  
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 3, k: 2500)   	 0.0118259 	 800       	 50.7359   	 0         	 71.788    	 0.706747  
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 2650, leftOrthog: 0)       	 0.0111881 	 100       	 118.429   	 0         	 28.7805   	 4.11491   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 53, r: 53, r2: 2500, leftOrthog: 0)       	 0.00962058	 100       	 145.989   	 0         	 33.5213   	 4.35511   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2650, cols: 3, reductionFactor: 37, colBlockingSize: 12)                  	 0.00922188	 700       	 3.71859   	 0         	 4.83311   	 0.769399  
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 2500, m: 3, k: 50)	 0.00747375	 800       	 80.281    	 0         	 113.592   	 0.706747  
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2650, Xcols: 3, r: 3, streamingCols: 0)                    	 0.00696141	 700       	 2.39822   	 0         	 12.7941   	 0.187447  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 53, n: 50, r: 53, r2: 50)            	 0.005037  	 100       	 278.837   	 0         	 43.7721   	 6.37019   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r: 53, r2: 53)            	 0.00492388	 100       	 285.242   	 0         	 43.5119   	 6.55551   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 53, reductionFactor: 37, colBlockingSize: 12)                   	 0.00429599	 100       	 6.71538   	 0         	 1.01658   	 6.60588   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 2650, m: 3)                                                                       	 0.0035759 	 700       	 0         	 0         	 24.9      	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2650, m: 3)                                                              	 0.00337491	 700       	 0         	 0         	 26.3829   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 3, n: 50, r2: 3)                    	 0.003345  	 700       	 0         	 0         	 26.6188   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 3, n: 50, r2: 3)                                                                                          	 0.00274707	 800       	 0         	 0         	 2.09678   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 50, Qr2: 3)       	 0.00274279	 100       	 0         	 0         	 77.2934   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 53, r: 50, r2: 50, leftOrthog: 0)         	 0.00153754	 100       	 17.2353   	 0         	 6.73802   	 2.55792   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 3, reductionFactor: 37, colBlockingSize: 12)                  	 0.00147142	 100       	 3.14092   	 0         	 4.08258   	 0.769347  
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 3, m: 3)                                                                   	 0.00142307	 900       	 0.0227677 	 0         	 0.151784  	 0.15      
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 3, m: 150, k: 3)   	 0.00123619	 700       	 1.52889   	 0         	 4.1178    	 0.371287  
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 3, r: 3, streamingCols: 0)                    	 0.00109158	 100       	 2.06123   	 0         	 10.9965   	 0.187444  
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                  	 0.000834538	 100       	 0.599134  	 0         	 2.39654   	 0.25      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 3)                                                                                          	 0.000825947	 200       	 0         	 0         	 0.581151  	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 3, n: 50, r2: 1)                                                                                          	 0.000769115	 200       	 0         	 0         	 0.624094  	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 50, r2: 50)             	 0.000759338	 100       	 32.9234   	 0         	 7.90162   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 0, n: 50, r2: 3)                    	 0.000731444	 100       	 0         	 0         	 16.4059   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 50, k: 3)   	 0.000679033	 100       	 2.20902   	 0         	 3.29881   	 0.669643  
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 2500, m: 3)                                                                       	 0.000586621	 100       	 0         	 0         	 20.4561   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 3)                                                              	 0.00057229	 100       	 0         	 0         	 20.9684   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                         	 0.000559089	 100       	 0         	 0         	 7.1545    	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 3, reductionFactor: 37, colBlockingSize: 12)                    	 0.000554906	 100       	 0.166573  	 0         	 0.229228  	 0.72667   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 3, n: 50, r2: 1)                    	 0.000520113	 100       	 0         	 0         	 8.15207   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 1, Xr2: 50, Qr1: 1, Qr2: 0)         	 0.000467963	 100       	 0         	 0         	 8.54768   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                	 0.000438039	 100       	 0.570725  	 0         	 9.13161   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 1, r1low: 0, n: 50, r2: 3)                     	 0.000437601	 100       	 0         	 0         	 0.548445  	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                           	 0.000420945	 100       	 1.1878    	 0         	 14.2536   	 0.0833333 
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                	 0.000363695	 100       	 0.687389  	 0         	 10.9982   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 3, n: 50, r2: 1)                                                                                 	 0.000362927	 100       	 0.0413306 	 0         	 0.66129   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 3, k: 50)     	 0.000349641	 100       	 4.29011   	 0         	 6.40657   	 0.669643  
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 3)                                                                	 0.000189335	 100       	 0         	 0         	 1.26759   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 50, m: 3, k: 50)  	 0.000128137	 100       	 11.7062   	 0         	 17.4813   	 0.669643  
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 3, m: 3, fromLeft: 0)                 	 0.000121454	 800       	 0         	 0         	 0.948507  	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 3, m: 50, k: 3)    	 7.6307e-05	 100       	 1.17945   	 0         	 3.23955   	 0.364078  
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 0, m: 150, k: 3)   	 7.27e-06  	 100       	 0         	 0         	 49.5186   	 0         
Timing statistics:
function                                                                                                                                                                                      	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                        	 1.08745   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_normalized(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                     	 1.0874    	 100       
<PITTS::TensorTrain<double>> :: T PITTS::rightNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                            	 0.98165   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::rightNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                        	 0.980351  	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double]	 0.92883   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                               	 0.352908  	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                  	 0.222541  	 1800      
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                            	 0.211938  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                	 0.124101  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_leftOrthogonalize(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&) [with T = double]                                   	 0.105677  	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                           	 0.0381552 	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]           	 0.0344728 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                                       	 0.0203285 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double]        	 0.0188584 	 1800      
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double]          	 0.0121756 	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.0116954 	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                    	 0.00805299	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double]       	 0.00760189	 900       
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                	 0.00562193	 1800      
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                        	 0.00503416	 1000      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                	 0.00490122	 1300      
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                       	 0.00416252	 800       
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                              	 0.00413654	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                              	 0.00296132	 6300      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.00142307	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                         	 0.00116769	 5200      
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                       	 0.00116466	 300       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                         	 0.000834538	 100       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                                                  	 0.000420945	 100       
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                           	 0.000121454	 800       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
orthoX: L, orthoY: L
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 64
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->65  [0m[1;34m1->66  [0m[1;34m2->67  [0m[1;34m3->68  [0m[1;34m4->69  [0m[1;34m5->70  [0m[1;34m6->71  [0m[1;34m7->72  [0m[1;34m8->73  [0m[1;34m9->74  [0m[1;34m10->75  [0m[1;34m11->76  [0m[1;34m12->77  [0m[1;34m13->78  [0m[1;34m14->79  [0m[1;34m15->80  [0m[1;34m16->81  [0m[1;34m17->82  [0m[1;34m18->83  [0m[1;34m19->84  [0m[1;34m20->85  [0m[1;34m21->86  [0m[1;34m22->87  [0m[1;34m23->88  [0m[1;34m24->89  [0m[1;34m25->90  [0m[1;34m26->91  [0m[1;34m27->92  [0m[1;34m28->93  [0m[1;34m29->94  [0m[1;34m30->95  [0m[1;34m31->96  [0m[1;34m32->97  [0m[1;34m33->98  [0m[1;34m34->99  [0m[1;34m35->100  [0m[1;34m36->101  [0m[1;34m37->102  [0m[1;34m38->103  [0m[1;34m39->104  [0m[1;34m40->105  [0m[1;34m41->106  [0m[1;34m42->107  [0m[1;34m43->108  [0m[1;34m44->109  [0m[1;34m45->110  [0m[1;34m46->111  [0m[1;34m47->112  [0m[1;34m48->113  [0m[1;34m49->114  [0m[1;34m50->115  [0m[1;34m51->116  [0m[1;34m52->117  [0m[1;34m53->118  [0m[1;34m54->119  [0m[1;34m55->120  [0m[1;34m56->121  [0m[1;34m57->122  [0m[1;34m58->123  [0m[1;34m59->124  [0m[1;34m60->125  [0m[1;34m61->126  [0m[1;34m62->127  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23061496592256 -> hwthread 65 - OK[0m[1;34m
[0m[1;34m	threadid 23061290018816 -> hwthread 66 - OK[0m[1;34m
[0m[1;34m	threadid 23061088692352 -> hwthread 67 - OK[0m[1;34m
[0m[1;34m	threadid 23060887365888 -> hwthread 68 - OK[0m[1;34m
[0m[1;34m	threadid 23060686039424 -> hwthread 69 - OK[0m[1;34m
[0m[1;34m	threadid 23060484712960 -> hwthread 70 - OK[0m[1;34m
[0m[1;34m	threadid 23060283386496 -> hwthread 71 - OK[0m[1;34m
[0m[1;34m	threadid 23060082060032 -> hwthread 72 - OK[0m[1;34m
[0m[1;34m	threadid 23059880733568 -> hwthread 73 - OK[0m[1;34m
[0m[1;34m	threadid 23059679407104 -> hwthread 74 - OK[0m[1;34m
[0m[1;34m	threadid 23059478080640 -> hwthread 75 - OK[0m[1;34m
[0m[1;34m	threadid 23059276754176 -> hwthread 76 - OK[0m[1;34m
[0m[1;34m	threadid 23059075427712 -> hwthread 77 - OK[0m[1;34m
[0m[1;34m	threadid 23058874101248 -> hwthread 78 - OK[0m[1;34m
[0m[1;34m	threadid 23058672774784 -> hwthread 79 - OK[0m[1;34m
[0m[1;34m	threadid 23058471448320 -> hwthread 80 - OK[0m[1;34m
[0m[1;34m	threadid 23058270121856 -> hwthread 81 - OK[0m[1;34m
[0m[1;34m	threadid 23058068795392 -> hwthread 82 - OK[0m[1;34m
[0m[1;34m	threadid 23057867468928 -> hwthread 83 - OK[0m[1;34m
[0m[1;34m	threadid 23057666142464 -> hwthread 84 - OK[0m[1;34m
[0m[1;34m	threadid 23057464816000 -> hwthread 85 - OK[0m[1;34m
[0m[1;34m	threadid 23057263489536 -> hwthread 86 - OK[0m[1;34m
[0m[1;34m	threadid 23057062163072 -> hwthread 87 - OK[0m[1;34m
[0m[1;34m	threadid 23056860836608 -> hwthread 88 - OK[0m[1;34m
[0m[1;34m	threadid 23056659510144 -> hwthread 89 - OK[0m[1;34m
[0m[1;34m	threadid 23056458183680 -> hwthread 90 - OK[0m[1;34m
[0m[1;34m	threadid 23056256857216 -> hwthread 91 - OK[0m[1;34m
[0m[1;34m	threadid 23056055530752 -> hwthread 92 - OK[0m[1;34m
[0m[1;34m	threadid 23055854204288 -> hwthread 93 - OK[0m[1;34m
[0m[1;34m	threadid 23055652877824 -> hwthread 94 - OK[0m[1;34m
[0m[1;34m	threadid 23055451551360 -> hwthread 95 - OK[0m[1;34m
[0m[1;34m	threadid 23055250224896 -> hwthread 96 - OK[0m[1;34m
[0m[1;34m	threadid 23055048894336 -> hwthread 97 - OK[0m[1;34m
[0m[1;34m	threadid 23054847567872 -> hwthread 98 - OK[0m[1;34m
[0m[1;34m	threadid 23054646241408 -> hwthread 99 - OK[0m[1;34m
[0m[1;34m	threadid 23054444914944 -> hwthread 100 - OK[0m[1;34m
[0m[1;34m	threadid 23054243588480 -> hwthread 101 - OK[0m[1;34m
[0m[1;34m	threadid 23054042262016 -> hwthread 102 - OK[0m[1;34m
[0m[1;34m	threadid 23053840935552 -> hwthread 103 - OK[0m[1;34m
[0m[1;34m	threadid 23053639609088 -> hwthread 104 - OK[0m[1;34m
[0m[1;34m	threadid 23053438282624 -> hwthread 105 - OK[0m[1;34m
[0m[1;34m	threadid 23053236956160 -> hwthread 106 - OK[0m[1;34m
[0m[1;34m	threadid 23053035629696 -> hwthread 107 - OK[0m[1;34m
[0m[1;34m	threadid 23052834303232 -> hwthread 108 - OK[0m[1;34m
[0m[1;34m	threadid 23052632976768 -> hwthread 109 - OK[0m[1;34m
[0m[1;34m	threadid 23052431650304 -> hwthread 110 - OK[0m[1;34m
[0m[1;34m	threadid 23052230323840 -> hwthread 111 - OK[0m[1;34m
[0m[1;34m	threadid 23052028997376 -> hwthread 112 - OK[0m[1;34m
[0m[1;34m	threadid 23051827670912 -> hwthread 113 - OK[0m[1;34m
[0m[1;34m	threadid 23051626344448 -> hwthread 114 - OK[0m[1;34m
[0m[1;34m	threadid 23051425017984 -> hwthread 115 - OK[0m[1;34m
[0m[1;34m	threadid 23051223691520 -> hwthread 116 - OK[0m[1;34m
[0m[1;34m	threadid 23051022365056 -> hwthread 117 - OK[0m[1;34m
[0m[1;34m	threadid 23050821038592 -> hwthread 118 - OK[0m[1;34m
[0m[1;34m	threadid 23050619712128 -> hwthread 119 - OK[0m[1;34m
[0m[1;34m	threadid 23050418385664 -> hwthread 120 - OK[0m[1;34m
[0m[1;34m	threadid 23050217059200 -> hwthread 121 - OK[0m[1;34m
[0m[1;34m	threadid 23050015732736 -> hwthread 122 - OK[0m[1;34m
[0m[1;34m	threadid 23049814406272 -> hwthread 123 - OK[0m[1;34m
[0m[1;34m	threadid 23049613079808 -> hwthread 124 - OK[0m[1;34m
[0m[1;34m	threadid 23049411753344 -> hwthread 125 - OK[0m[1;34m
[0m[1;34m	threadid 23049210426880 -> hwthread 126 - OK[0m[1;34m
[0m[1;34m	threadid 23049009100416 -> hwthread 127 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23061390931712 -> hwthread 64 - OK[0m[1;34m
[0m[1;34m	threadid 23061384341248 -> hwthread 65 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                     	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 54, m: 54)                                                                	 0.275492  	 700       	 3.73429   	 0         	 0.178921  	 20.8712   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2700, cols: 54, reductionFactor: 37, colBlockingSize: 12)                 	 0.156974  	 600       	 61.8139   	 0         	 4.54748   	 13.593    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 54, r: 54, r2: 2700, leftOrthog: 0)       	 0.0851556 	 600       	 110.948   	 0         	 24.9838   	 4.44079   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 54)                                                                	 0.0411452 	 100       	 3.02992   	 0         	 0.154575  	 19.6017   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                	 0.0352257 	 100       	 3.31198   	 0         	 0.171466  	 19.3157   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 54, n: 50, r: 54, r2: 54)            	 0.0310734 	 600       	 304.05    	 0         	 45.4948   	 6.68317   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 54, reductionFactor: 37, colBlockingSize: 12)                 	 0.0278266 	 100       	 53.8119   	 0         	 3.96501   	 13.5717   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2700, cols: 50, reductionFactor: 37, colBlockingSize: 12)                 	 0.0235813 	 100       	 58.7961   	 0         	 4.66472   	 12.6044   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 200, k: 4)  	 0.0224398 	 800       	 2.85208   	 0         	 3.13729   	 0.909091  
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 54, Qr2: 4)       	 0.0184795 	 700       	 0         	 0         	 85.3356   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 4, k: 2500)   	 0.0124665 	 800       	 64.172    	 0         	 69.4084   	 0.924556  
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 2700, leftOrthog: 0)       	 0.0115774 	 100       	 116.607   	 0         	 28.3312   	 4.11585   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 54, r: 54, r2: 2500, leftOrthog: 0)       	 0.0099444 	 100       	 146.615   	 0         	 33.0503   	 4.43612   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2700, cols: 4, reductionFactor: 37, colBlockingSize: 12)                  	 0.00958733	 700       	 6.47882   	 0         	 6.31767   	 1.02551   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2700, Xcols: 4, r: 4, streamingCols: 0)                    	 0.00775215	 700       	 3.90085   	 0         	 15.6092   	 0.249907  
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 2500, m: 4, k: 50)	 0.00753102	 800       	 106.227   	 0         	 114.895   	 0.924556  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r: 54, r2: 54)            	 0.00592152	 100       	 246.221   	 0         	 36.8711   	 6.67788   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 54, n: 50, r: 54, r2: 50)            	 0.00582742	 100       	 250.196   	 0         	 38.9194   	 6.42857   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 4, n: 50, r2: 4)                    	 0.00336745	 700       	 0         	 0         	 35.9204   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2700, m: 4)                                                              	 0.00328342	 700       	 0         	 0         	 36.8397   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 2700, m: 4)                                                                       	 0.00319568	 700       	 0         	 0         	 37.8511   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 54, reductionFactor: 37, colBlockingSize: 12)                   	 0.00319123	 100       	 9.38451   	 0         	 1.40786   	 6.6658    
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 50, Qr2: 4)       	 0.00280696	 100       	 0         	 0         	 76.9515   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 4, n: 50, r2: 4)                                                                                          	 0.00278563	 800       	 0         	 0         	 3.67602   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 54, r: 50, r2: 50, leftOrthog: 0)         	 0.00160266	 100       	 16.847    	 0         	 6.53913   	 2.57634   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 4, m: 4)                                                                   	 0.00155789	 900       	 0.0485271 	 0         	 0.240325  	 0.201923  
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 4, reductionFactor: 37, colBlockingSize: 12)                  	 0.00142893	 100       	 5.7499    	 0         	 5.60754   	 1.02539   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 4, r: 4, streamingCols: 0)                    	 0.0011758 	 100       	 3.40195   	 0         	 13.6132   	 0.2499    
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 4, m: 200, k: 4)   	 0.00115881	 700       	 3.86602   	 0         	 7.80936   	 0.49505   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                  	 0.000896366	 100       	 0.557808  	 0         	 2.23123   	 0.25      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 4)                                                                                          	 0.000846985	 200       	 0         	 0         	 0.755621  	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 0, n: 50, r2: 4)                    	 0.000811904	 100       	 0         	 0         	 19.7068   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 4, n: 50, r2: 1)                                                                                          	 0.000794269	 200       	 0         	 0         	 0.805772  	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 50, r2: 50)             	 0.000749325	 100       	 33.3634   	 0         	 8.00721   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 50, k: 4)   	 0.000629961	 100       	 3.1748    	 0         	 3.68277   	 0.862069  
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 4)                                                              	 0.00061956	 100       	 0         	 0         	 25.8248   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 2500, m: 4)                                                                       	 0.000608549	 100       	 0         	 0         	 26.292    	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 4, reductionFactor: 37, colBlockingSize: 12)                    	 0.000536627	 100       	 0.306217  	 0         	 0.322011  	 0.950951  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                         	 0.000509982	 100       	 0         	 0         	 7.84341   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 1, Xr2: 50, Qr1: 1, Qr2: 0)         	 0.00046339	 100       	 0         	 0         	 8.63204   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 4, n: 50, r2: 1)                    	 0.000454881	 100       	 0         	 0         	 9.49699   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 1, r1low: 0, n: 50, r2: 4)                     	 0.000448131	 100       	 0         	 0         	 0.714077  	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                           	 0.000435069	 100       	 1.14924   	 0         	 13.7909   	 0.0833333 
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                	 0.000428562	 100       	 0.583346  	 0         	 9.33354   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 4, n: 50, r2: 1)                                                                                 	 0.000369082	 100       	 0.0541885 	 0         	 0.867016  	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                	 0.000351696	 100       	 0.710841  	 0         	 11.3735   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 4, k: 50)     	 0.000323023	 100       	 6.19151   	 0         	 7.18215   	 0.862069  
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 4)                                                                	 0.000184717	 100       	 0         	 0         	 1.73238   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 50, m: 4, k: 50)  	 0.000131357	 100       	 15.2257   	 0         	 17.6618   	 0.862069  
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 4, m: 4, fromLeft: 0)                 	 7.7534e-05	 800       	 0         	 0         	 2.64142   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 4, m: 50, k: 4)    	 5.6642e-05	 100       	 2.82476   	 0         	 5.8755    	 0.480769  
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 0, m: 200, k: 4)   	 6.99e-06  	 100       	 0         	 0         	 91.5594   	 0         
Timing statistics:
function                                                                                                                                                                                      	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                        	 1.07311   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_normalized(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                     	 1.07307   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::rightNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                            	 0.960469  	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::rightNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                        	 0.959131  	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double]	 0.903922  	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                               	 0.351863  	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                  	 0.223126  	 1800      
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                            	 0.212176  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_leftOrthogonalize(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&) [with T = double]                                   	 0.11253   	 100       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                	 0.10828   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                           	 0.0435716 	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]           	 0.0345119 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double]        	 0.0242922 	 1800      
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                                       	 0.0217499 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double]          	 0.0127895 	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.011978  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                    	 0.00892795	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double]       	 0.00766238	 900       
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                	 0.00664147	 1800      
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                        	 0.00508236	 1000      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                	 0.00493686	 1300      
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                              	 0.00408769	 900       
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                       	 0.00380423	 800       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                              	 0.00247425	 6300      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.00155789	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                       	 0.00114934	 300       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                         	 0.00105688	 5200      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                         	 0.000896366	 100       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                                                  	 0.000435069	 100       
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                           	 7.7534e-05	 800       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
orthoX: L, orthoY: L
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 64
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->65  [0m[1;34m1->66  [0m[1;34m2->67  [0m[1;34m3->68  [0m[1;34m4->69  [0m[1;34m5->70  [0m[1;34m6->71  [0m[1;34m7->72  [0m[1;34m8->73  [0m[1;34m9->74  [0m[1;34m10->75  [0m[1;34m11->76  [0m[1;34m12->77  [0m[1;34m13->78  [0m[1;34m14->79  [0m[1;34m15->80  [0m[1;34m16->81  [0m[1;34m17->82  [0m[1;34m18->83  [0m[1;34m19->84  [0m[1;34m20->85  [0m[1;34m21->86  [0m[1;34m22->87  [0m[1;34m23->88  [0m[1;34m24->89  [0m[1;34m25->90  [0m[1;34m26->91  [0m[1;34m27->92  [0m[1;34m28->93  [0m[1;34m29->94  [0m[1;34m30->95  [0m[1;34m31->96  [0m[1;34m32->97  [0m[1;34m33->98  [0m[1;34m34->99  [0m[1;34m35->100  [0m[1;34m36->101  [0m[1;34m37->102  [0m[1;34m38->103  [0m[1;34m39->104  [0m[1;34m40->105  [0m[1;34m41->106  [0m[1;34m42->107  [0m[1;34m43->108  [0m[1;34m44->109  [0m[1;34m45->110  [0m[1;34m46->111  [0m[1;34m47->112  [0m[1;34m48->113  [0m[1;34m49->114  [0m[1;34m50->115  [0m[1;34m51->116  [0m[1;34m52->117  [0m[1;34m53->118  [0m[1;34m54->119  [0m[1;34m55->120  [0m[1;34m56->121  [0m[1;34m57->122  [0m[1;34m58->123  [0m[1;34m59->124  [0m[1;34m60->125  [0m[1;34m61->126  [0m[1;34m62->127  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23445279356800 -> hwthread 65 - OK[0m[1;34m
[0m[1;34m	threadid 23445085612032 -> hwthread 66 - OK[0m[1;34m
[0m[1;34m	threadid 23444884285568 -> hwthread 67 - OK[0m[1;34m
[0m[1;34m	threadid 23444682959104 -> hwthread 68 - OK[0m[1;34m
[0m[1;34m	threadid 23444481632640 -> hwthread 69 - OK[0m[1;34m
[0m[1;34m	threadid 23444280306176 -> hwthread 70 - OK[0m[1;34m
[0m[1;34m	threadid 23444078979712 -> hwthread 71 - OK[0m[1;34m
[0m[1;34m	threadid 23443877653248 -> hwthread 72 - OK[0m[1;34m
[0m[1;34m	threadid 23443676326784 -> hwthread 73 - OK[0m[1;34m
[0m[1;34m	threadid 23443475000320 -> hwthread 74 - OK[0m[1;34m
[0m[1;34m	threadid 23443273673856 -> hwthread 75 - OK[0m[1;34m
[0m[1;34m	threadid 23443072347392 -> hwthread 76 - OK[0m[1;34m
[0m[1;34m	threadid 23442871020928 -> hwthread 77 - OK[0m[1;34m
[0m[1;34m	threadid 23442669694464 -> hwthread 78 - OK[0m[1;34m
[0m[1;34m	threadid 23442468368000 -> hwthread 79 - OK[0m[1;34m
[0m[1;34m	threadid 23442267041536 -> hwthread 80 - OK[0m[1;34m
[0m[1;34m	threadid 23442065715072 -> hwthread 81 - OK[0m[1;34m
[0m[1;34m	threadid 23441864388608 -> hwthread 82 - OK[0m[1;34m
[0m[1;34m	threadid 23441663062144 -> hwthread 83 - OK[0m[1;34m
[0m[1;34m	threadid 23441461735680 -> hwthread 84 - OK[0m[1;34m
[0m[1;34m	threadid 23441260409216 -> hwthread 85 - OK[0m[1;34m
[0m[1;34m	threadid 23441059082752 -> hwthread 86 - OK[0m[1;34m
[0m[1;34m	threadid 23440857756288 -> hwthread 87 - OK[0m[1;34m
[0m[1;34m	threadid 23440656429824 -> hwthread 88 - OK[0m[1;34m
[0m[1;34m	threadid 23440455103360 -> hwthread 89 - OK[0m[1;34m
[0m[1;34m	threadid 23440253776896 -> hwthread 90 - OK[0m[1;34m
[0m[1;34m	threadid 23440052450432 -> hwthread 91 - OK[0m[1;34m
[0m[1;34m	threadid 23439851123968 -> hwthread 92 - OK[0m[1;34m
[0m[1;34m	threadid 23439649797504 -> hwthread 93 - OK[0m[1;34m
[0m[1;34m	threadid 23439448471040 -> hwthread 94 - OK[0m[1;34m
[0m[1;34m	threadid 23439247144576 -> hwthread 95 - OK[0m[1;34m
[0m[1;34m	threadid 23439045818112 -> hwthread 96 - OK[0m[1;34m
[0m[1;34m	threadid 23438844487552 -> hwthread 97 - OK[0m[1;34m
[0m[1;34m	threadid 23438643161088 -> hwthread 98 - OK[0m[1;34m
[0m[1;34m	threadid 23438441834624 -> hwthread 99 - OK[0m[1;34m
[0m[1;34m	threadid 23438240508160 -> hwthread 100 - OK[0m[1;34m
[0m[1;34m	threadid 23438039181696 -> hwthread 101 - OK[0m[1;34m
[0m[1;34m	threadid 23437837855232 -> hwthread 102 - OK[0m[1;34m
[0m[1;34m	threadid 23437636528768 -> hwthread 103 - OK[0m[1;34m
[0m[1;34m	threadid 23437435202304 -> hwthread 104 - OK[0m[1;34m
[0m[1;34m	threadid 23437233875840 -> hwthread 105 - OK[0m[1;34m
[0m[1;34m	threadid 23437032549376 -> hwthread 106 - OK[0m[1;34m
[0m[1;34m	threadid 23436831222912 -> hwthread 107 - OK[0m[1;34m
[0m[1;34m	threadid 23436629896448 -> hwthread 108 - OK[0m[1;34m
[0m[1;34m	threadid 23436428569984 -> hwthread 109 - OK[0m[1;34m
[0m[1;34m	threadid 23436227243520 -> hwthread 110 - OK[0m[1;34m
[0m[1;34m	threadid 23436025917056 -> hwthread 111 - OK[0m[1;34m
[0m[1;34m	threadid 23435824590592 -> hwthread 112 - OK[0m[1;34m
[0m[1;34m	threadid 23435623264128 -> hwthread 113 - OK[0m[1;34m
[0m[1;34m	threadid 23435421937664 -> hwthread 114 - OK[0m[1;34m
[0m[1;34m	threadid 23435220611200 -> hwthread 115 - OK[0m[1;34m
[0m[1;34m	threadid 23435019284736 -> hwthread 116 - OK[0m[1;34m
[0m[1;34m	threadid 23434817958272 -> hwthread 117 - OK[0m[1;34m
[0m[1;34m	threadid 23434616631808 -> hwthread 118 - OK[0m[1;34m
[0m[1;34m	threadid 23434415305344 -> hwthread 119 - OK[0m[1;34m
[0m[1;34m	threadid 23434213978880 -> hwthread 120 - OK[0m[1;34m
[0m[1;34m	threadid 23434012652416 -> hwthread 121 - OK[0m[1;34m
[0m[1;34m	threadid 23433811325952 -> hwthread 122 - OK[0m[1;34m
[0m[1;34m	threadid 23433609999488 -> hwthread 123 - OK[0m[1;34m
[0m[1;34m	threadid 23433408673024 -> hwthread 124 - OK[0m[1;34m
[0m[1;34m	threadid 23433207346560 -> hwthread 125 - OK[0m[1;34m
[0m[1;34m	threadid 23433006020096 -> hwthread 126 - OK[0m[1;34m
[0m[1;34m	threadid 23432804693632 -> hwthread 127 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23445173696256 -> hwthread 64 - OK[0m[1;34m
[0m[1;34m	threadid 23445167105792 -> hwthread 65 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                     	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 55, m: 55)                                                                	 0.284822  	 700       	 3.81636   	 0         	 0.179509  	 21.26     
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2750, cols: 55, reductionFactor: 37, colBlockingSize: 12)                 	 0.164716  	 600       	 62.2424   	 0         	 4.49575   	 13.8447   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 55, r: 55, r2: 2750, leftOrthog: 0)       	 0.107172  	 600       	 93.1445   	 0         	 20.5934   	 4.52303   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 55)                                                                	 0.0425208 	 100       	 2.97894   	 0         	 0.151455  	 19.6687   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                	 0.0366857 	 100       	 3.18017   	 0         	 0.164642  	 19.3157   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 55, n: 50, r: 55, r2: 55)            	 0.0297932 	 600       	 335.06    	 0         	 49.2234   	 6.80693   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 250, k: 5)  	 0.0296725 	 800       	 3.37012   	 0         	 3.01963   	 1.11607   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 55, reductionFactor: 37, colBlockingSize: 12)                 	 0.0289682 	 100       	 53.6236   	 0         	 3.88081   	 13.8176   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2750, cols: 50, reductionFactor: 37, colBlockingSize: 12)                 	 0.0235539 	 100       	 59.9546   	 0         	 4.75506   	 12.6086   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 55, Qr2: 5)       	 0.0189019 	 700       	 0         	 0         	 85.9171   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 5, k: 2500)   	 0.0135609 	 800       	 73.7413   	 0         	 65.0104   	 1.1343    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 2750, leftOrthog: 0)       	 0.0118058 	 100       	 116.468   	 0         	 28.2912   	 4.11677   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 55, r: 55, r2: 2500, leftOrthog: 0)       	 0.0111456 	 100       	 135.704   	 0         	 30.0425   	 4.51708   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2750, cols: 5, reductionFactor: 37, colBlockingSize: 12)                  	 0.0107103 	 700       	 9.22954   	 0         	 7.2024    	 1.28145   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2750, Xcols: 5, r: 5, streamingCols: 0)                    	 0.0092702 	 700       	 5.19136   	 0         	 16.6199   	 0.312358  
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 2500, m: 5, k: 50)	 0.00792761	 800       	 126.141   	 0         	 111.206   	 1.1343    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 55, n: 50, r: 55, r2: 50)            	 0.0058173 	 100       	 260       	 0         	 40.0873   	 6.48585   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r: 55, r2: 55)            	 0.00571093	 100       	 264.843   	 0         	 38.9463   	 6.8002    
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 55, reductionFactor: 37, colBlockingSize: 12)                   	 0.0040309 	 100       	 7.70735   	 0         	 1.14615   	 6.72458   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 5, n: 50, r2: 5)                    	 0.00373306	 700       	 0         	 0         	 41.253    	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2750, m: 5)                                                              	 0.00366869	 700       	 0         	 0         	 41.9769   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 2750, m: 5)                                                                       	 0.00347203	 700       	 0         	 0         	 44.3545   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 5, n: 50, r2: 5)                                                                                          	 0.0029189 	 800       	 0         	 0         	 5.48153   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 50, Qr2: 5)       	 0.00288794	 100       	 0         	 0         	 76.1789   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 5, m: 250, k: 5)   	 0.00228739	 700       	 3.82532   	 0         	 6.18172   	 0.618812  
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 5, m: 5)                                                                   	 0.00197117	 900       	 0.0757925 	 0         	 0.292212  	 0.259375  
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 5, reductionFactor: 37, colBlockingSize: 12)                  	 0.00174288	 100       	 7.36586   	 0         	 5.7491    	 1.28122   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 55, r: 50, r2: 50, leftOrthog: 0)         	 0.00164403	 100       	 16.7272   	 0         	 6.44759   	 2.59434   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 5, r: 5, streamingCols: 0)                    	 0.00134297	 100       	 4.65386   	 0         	 14.8998   	 0.312344  
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 0, n: 50, r2: 5)                    	 0.000944606	 100       	 0         	 0         	 21.1728   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 50, r2: 50)             	 0.000938631	 100       	 26.6345   	 0         	 6.39229   	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                  	 0.000908201	 100       	 0.550539  	 0         	 2.20216   	 0.25      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 5)                                                                                          	 0.000808803	 200       	 0         	 0         	 0.989116  	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 2500, m: 5)                                                                       	 0.000798397	 100       	 0         	 0         	 25.0502   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 5, n: 50, r2: 1)                                                                                          	 0.000789584	 200       	 0         	 0         	 1.01319   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 50, k: 5)   	 0.000739851	 100       	 3.37906   	 0         	 3.2439    	 1.04167   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 5)                                                              	 0.000701456	 100       	 0         	 0         	 28.5121   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 5, reductionFactor: 37, colBlockingSize: 12)                    	 0.00058618	 100       	 0.438017  	 0         	 0.375311  	 1.16708   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                         	 0.000520617	 100       	 0         	 0         	 7.68319   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 1, r1low: 0, n: 50, r2: 5)                     	 0.000463352	 100       	 0         	 0         	 0.863275  	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 1, Xr2: 50, Qr1: 1, Qr2: 0)         	 0.000462722	 100       	 0         	 0         	 8.6445    	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 5, n: 50, r2: 1)                    	 0.000460205	 100       	 0         	 0         	 9.56096   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 5, k: 50)     	 0.000435152	 100       	 5.74512   	 0         	 5.51531   	 1.04167   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                           	 0.000424543	 100       	 1.17774   	 0         	 14.1328   	 0.0833333 
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                	 0.000420577	 100       	 0.594421  	 0         	 9.51074   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                	 0.000362321	 100       	 0.689996  	 0         	 11.0399   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 5, n: 50, r2: 1)                                                                                 	 0.000362057	 100       	 0.0690499 	 0         	 1.1048    	 0.0625    
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 5)                                                                	 0.000175175	 100       	 0         	 0         	 2.28343   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 50, m: 5, k: 50)  	 0.000149246	 100       	 16.7509   	 0         	 16.0808   	 1.04167   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 5, m: 5, fromLeft: 0)                 	 0.000132974	 800       	 0         	 0         	 2.40649   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 5, m: 50, k: 5)    	 7.5514e-05	 100       	 3.31064   	 0         	 5.56188   	 0.595238  
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 0, m: 250, k: 5)   	 8.371e-06 	 100       	 0         	 0         	 119.46    	 0         
Timing statistics:
function                                                                                                                                                                                      	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                        	 1.15185   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_normalized(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                     	 1.1518    	 100       
<PITTS::TensorTrain<double>> :: T PITTS::rightNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                            	 1.0227    	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::rightNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                        	 1.02134   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double]	 0.965656  	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                               	 0.364028  	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                  	 0.234308  	 1800      
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                            	 0.221909  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                	 0.131768  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_leftOrthogonalize(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&) [with T = double]                                   	 0.129022  	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                           	 0.04226   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]           	 0.0395136 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double]        	 0.0327837 	 1800      
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                                       	 0.0222526 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double]          	 0.0139961 	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.0135096 	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                    	 0.0106132 	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double]       	 0.00807686	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                        	 0.00560122	 1000      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                	 0.0050379 	 1300      
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                              	 0.00454532	 900       
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                       	 0.00427043	 800       
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                	 0.00424724	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                              	 0.00316773	 6300      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.00197117	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                         	 0.00136879	 5200      
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                       	 0.00114496	 300       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                         	 0.000908201	 100       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                                                  	 0.000424543	 100       
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                           	 0.000132974	 800       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
orthoX: L, orthoY: L
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 64
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->65  [0m[1;34m1->66  [0m[1;34m2->67  [0m[1;34m3->68  [0m[1;34m4->69  [0m[1;34m5->70  [0m[1;34m6->71  [0m[1;34m7->72  [0m[1;34m8->73  [0m[1;34m9->74  [0m[1;34m10->75  [0m[1;34m11->76  [0m[1;34m12->77  [0m[1;34m13->78  [0m[1;34m14->79  [0m[1;34m15->80  [0m[1;34m16->81  [0m[1;34m17->82  [0m[1;34m18->83  [0m[1;34m19->84  [0m[1;34m20->85  [0m[1;34m21->86  [0m[1;34m22->87  [0m[1;34m23->88  [0m[1;34m24->89  [0m[1;34m25->90  [0m[1;34m26->91  [0m[1;34m27->92  [0m[1;34m28->93  [0m[1;34m29->94  [0m[1;34m30->95  [0m[1;34m31->96  [0m[1;34m32->97  [0m[1;34m33->98  [0m[1;34m34->99  [0m[1;34m35->100  [0m[1;34m36->101  [0m[1;34m37->102  [0m[1;34m38->103  [0m[1;34m39->104  [0m[1;34m40->105  [0m[1;34m41->106  [0m[1;34m42->107  [0m[1;34m43->108  [0m[1;34m44->109  [0m[1;34m45->110  [0m[1;34m46->111  [0m[1;34m47->112  [0m[1;34m48->113  [0m[1;34m49->114  [0m[1;34m50->115  [0m[1;34m51->116  [0m[1;34m52->117  [0m[1;34m53->118  [0m[1;34m54->119  [0m[1;34m55->120  [0m[1;34m56->121  [0m[1;34m57->122  [0m[1;34m58->123  [0m[1;34m59->124  [0m[1;34m60->125  [0m[1;34m61->126  [0m[1;34m62->127  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23361895810944 -> hwthread 65 - OK[0m[1;34m
[0m[1;34m	threadid 23361669294080 -> hwthread 66 - OK[0m[1;34m
[0m[1;34m	threadid 23361467967616 -> hwthread 67 - OK[0m[1;34m
[0m[1;34m	threadid 23361266641152 -> hwthread 68 - OK[0m[1;34m
[0m[1;34m	threadid 23361065314688 -> hwthread 69 - OK[0m[1;34m
[0m[1;34m	threadid 23360863988224 -> hwthread 70 - OK[0m[1;34m
[0m[1;34m	threadid 23360662661760 -> hwthread 71 - OK[0m[1;34m
[0m[1;34m	threadid 23360461335296 -> hwthread 72 - OK[0m[1;34m
[0m[1;34m	threadid 23360260008832 -> hwthread 73 - OK[0m[1;34m
[0m[1;34m	threadid 23360058682368 -> hwthread 74 - OK[0m[1;34m
[0m[1;34m	threadid 23359857355904 -> hwthread 75 - OK[0m[1;34m
[0m[1;34m	threadid 23359656029440 -> hwthread 76 - OK[0m[1;34m
[0m[1;34m	threadid 23359454702976 -> hwthread 77 - OK[0m[1;34m
[0m[1;34m	threadid 23359253376512 -> hwthread 78 - OK[0m[1;34m
[0m[1;34m	threadid 23359052050048 -> hwthread 79 - OK[0m[1;34m
[0m[1;34m	threadid 23358850723584 -> hwthread 80 - OK[0m[1;34m
[0m[1;34m	threadid 23358649397120 -> hwthread 81 - OK[0m[1;34m
[0m[1;34m	threadid 23358448070656 -> hwthread 82 - OK[0m[1;34m
[0m[1;34m	threadid 23358246744192 -> hwthread 83 - OK[0m[1;34m
[0m[1;34m	threadid 23358045417728 -> hwthread 84 - OK[0m[1;34m
[0m[1;34m	threadid 23357844091264 -> hwthread 85 - OK[0m[1;34m
[0m[1;34m	threadid 23357642764800 -> hwthread 86 - OK[0m[1;34m
[0m[1;34m	threadid 23357441438336 -> hwthread 87 - OK[0m[1;34m
[0m[1;34m	threadid 23357240111872 -> hwthread 88 - OK[0m[1;34m
[0m[1;34m	threadid 23357038785408 -> hwthread 89 - OK[0m[1;34m
[0m[1;34m	threadid 23356837458944 -> hwthread 90 - OK[0m[1;34m
[0m[1;34m	threadid 23356636132480 -> hwthread 91 - OK[0m[1;34m
[0m[1;34m	threadid 23356434806016 -> hwthread 92 - OK[0m[1;34m
[0m[1;34m	threadid 23356233479552 -> hwthread 93 - OK[0m[1;34m
[0m[1;34m	threadid 23356032153088 -> hwthread 94 - OK[0m[1;34m
[0m[1;34m	threadid 23355830826624 -> hwthread 95 - OK[0m[1;34m
[0m[1;34m	threadid 23355629500160 -> hwthread 96 - OK[0m[1;34m
[0m[1;34m	threadid 23355428169600 -> hwthread 97 - OK[0m[1;34m
[0m[1;34m	threadid 23355226843136 -> hwthread 98 - OK[0m[1;34m
[0m[1;34m	threadid 23355025516672 -> hwthread 99 - OK[0m[1;34m
[0m[1;34m	threadid 23354824190208 -> hwthread 100 - OK[0m[1;34m
[0m[1;34m	threadid 23354622863744 -> hwthread 101 - OK[0m[1;34m
[0m[1;34m	threadid 23354421537280 -> hwthread 102 - OK[0m[1;34m
[0m[1;34m	threadid 23354220210816 -> hwthread 103 - OK[0m[1;34m
[0m[1;34m	threadid 23354018884352 -> hwthread 104 - OK[0m[1;34m
[0m[1;34m	threadid 23353817557888 -> hwthread 105 - OK[0m[1;34m
[0m[1;34m	threadid 23353616231424 -> hwthread 106 - OK[0m[1;34m
[0m[1;34m	threadid 23353414904960 -> hwthread 107 - OK[0m[1;34m
[0m[1;34m	threadid 23353213578496 -> hwthread 108 - OK[0m[1;34m
[0m[1;34m	threadid 23353012252032 -> hwthread 109 - OK[0m[1;34m
[0m[1;34m	threadid 23352810925568 -> hwthread 110 - OK[0m[1;34m
[0m[1;34m	threadid 23352609599104 -> hwthread 111 - OK[0m[1;34m
[0m[1;34m	threadid 23352408272640 -> hwthread 112 - OK[0m[1;34m
[0m[1;34m	threadid 23352206946176 -> hwthread 113 - OK[0m[1;34m
[0m[1;34m	threadid 23352005619712 -> hwthread 114 - OK[0m[1;34m
[0m[1;34m	threadid 23351804293248 -> hwthread 115 - OK[0m[1;34m
[0m[1;34m	threadid 23351602966784 -> hwthread 116 - OK[0m[1;34m
[0m[1;34m	threadid 23351401640320 -> hwthread 117 - OK[0m[1;34m
[0m[1;34m	threadid 23351200313856 -> hwthread 118 - OK[0m[1;34m
[0m[1;34m	threadid 23350998987392 -> hwthread 119 - OK[0m[1;34m
[0m[1;34m	threadid 23350797660928 -> hwthread 120 - OK[0m[1;34m
[0m[1;34m	threadid 23350596334464 -> hwthread 121 - OK[0m[1;34m
[0m[1;34m	threadid 23350395008000 -> hwthread 122 - OK[0m[1;34m
[0m[1;34m	threadid 23350193681536 -> hwthread 123 - OK[0m[1;34m
[0m[1;34m	threadid 23349992355072 -> hwthread 124 - OK[0m[1;34m
[0m[1;34m	threadid 23349791028608 -> hwthread 125 - OK[0m[1;34m
[0m[1;34m	threadid 23349589702144 -> hwthread 126 - OK[0m[1;34m
[0m[1;34m	threadid 23349388375680 -> hwthread 127 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23361790150400 -> hwthread 64 - OK[0m[1;34m
[0m[1;34m	threadid 23361783559936 -> hwthread 65 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                     	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 56, m: 56)                                                                	 0.280061  	 700       	 4.09681   	 0         	 0.189239  	 21.6489   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2800, cols: 56, reductionFactor: 37, colBlockingSize: 12)                 	 0.166462  	 600       	 65.0105   	 0         	 4.61183   	 14.0964   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 56, r: 56, r2: 2800, leftOrthog: 0)       	 0.0960234 	 600       	 109.733   	 0         	 23.8278   	 4.60526   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 56)                                                                	 0.0413396 	 100       	 3.11243   	 0         	 0.157718  	 19.7342   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                	 0.0367041 	 100       	 3.17857   	 0         	 0.164559  	 19.3157   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 56, reductionFactor: 37, colBlockingSize: 12)                 	 0.0291933 	 100       	 55.1626   	 0         	 3.92244   	 14.0634   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 56, n: 50, r: 56, r2: 56)            	 0.0288686 	 600       	 364.997   	 0         	 52.6638   	 6.93069   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2800, cols: 50, reductionFactor: 37, colBlockingSize: 12)                 	 0.0232211 	 100       	 61.9194   	 0         	 4.90932   	 12.6126   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 56, Qr2: 6)       	 0.0188249 	 700       	 0         	 0         	 88.8271   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 6, k: 2500)   	 0.012993  	 800       	 92.3576   	 0         	 69.1081   	 1.33642   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2800, cols: 6, reductionFactor: 37, colBlockingSize: 12)                  	 0.0107785 	 700       	 13.4466   	 0         	 8.74721   	 1.53725   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 2800, leftOrthog: 0)       	 0.0102285 	 100       	 136.872   	 0         	 33.2404   	 4.11765   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2800, Xcols: 6, r: 6, streamingCols: 0)                    	 0.00937547	 700       	 7.52602   	 0         	 20.0801   	 0.374799  
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 56, r: 56, r2: 2500, leftOrthog: 0)       	 0.009002  	 100       	 174.183   	 0         	 37.8824   	 4.598     
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 300, k: 6)  	 0.00830398	 800       	 17.3411   	 0         	 13.1792   	 1.31579   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 2500, m: 6, k: 50)	 0.00798762	 800       	 150.233   	 0         	 112.414   	 1.33642   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 56, n: 50, r: 56, r2: 50)            	 0.00605863	 100       	 258.805   	 0         	 39.5601   	 6.54206   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r: 56, r2: 56)            	 0.00594593	 100       	 263.71    	 0         	 38.0947   	 6.92247   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 56, reductionFactor: 37, colBlockingSize: 12)                   	 0.00371624	 100       	 8.6667    	 0         	 1.27785   	 6.78225   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 6, n: 50, r2: 6)                    	 0.00370887	 700       	 0         	 0         	 50.7325   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 2800, m: 6)                                                                       	 0.00368743	 700       	 0         	 0         	 51.0274   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2800, m: 6)                                                              	 0.00363095	 700       	 0         	 0         	 51.8211   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 6, n: 50, r2: 6)                                                                                          	 0.00278386	 800       	 0         	 0         	 8.27628   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 50, Qr2: 6)       	 0.00265816	 100       	 0         	 0         	 84.2689   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 6, m: 6)                                                                   	 0.00238227	 900       	 0.108804  	 0         	 0.344545  	 0.315789  
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 6, m: 300, k: 6)   	 0.00232839	 700       	 6.49374   	 0         	 8.74491   	 0.742574  
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 6, reductionFactor: 37, colBlockingSize: 12)                  	 0.00162503	 100       	 11.3761   	 0         	 7.40221   	 1.53685   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 56, r: 50, r2: 50, leftOrthog: 0)         	 0.0014949 	 100       	 18.7304   	 0         	 7.17106   	 2.61194   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 6, r: 6, streamingCols: 0)                    	 0.00134105	 100       	 6.71114   	 0         	 17.9071   	 0.374775  
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 0, n: 50, r2: 6)                    	 0.0009311 	 100       	 0         	 0         	 25.776    	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                  	 0.000899692	 100       	 0.555746  	 0         	 2.22298   	 0.25      
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 2500, m: 6)                                                                       	 0.000830931	 100       	 0         	 0         	 28.8833   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 6)                                                                                          	 0.000808479	 200       	 0         	 0         	 1.18741   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 50, r2: 50)             	 0.00077786	 100       	 32.1395   	 0         	 7.71347   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 6, n: 50, r2: 1)                                                                                          	 0.000759184	 200       	 0         	 0         	 1.26452   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 6)                                                              	 0.00072228	 100       	 0         	 0         	 33.2281   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 50, k: 6)   	 0.000707648	 100       	 4.2394    	 0         	 3.50457   	 1.20968   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                         	 0.000551096	 100       	 0         	 0         	 7.25826   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 6, reductionFactor: 37, colBlockingSize: 12)                    	 0.000498395	 100       	 0.741841  	 0         	 0.539331  	 1.37548   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 6, n: 50, r2: 1)                    	 0.00045443	 100       	 0         	 0         	 9.8585    	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 1, Xr2: 50, Qr1: 1, Qr2: 0)         	 0.00044394	 100       	 0         	 0         	 9.01023   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 6, k: 50)     	 0.000432047	 100       	 6.94369   	 0         	 5.74012   	 1.20968   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 1, r1low: 0, n: 50, r2: 6)                     	 0.000417128	 100       	 0         	 0         	 1.15073   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                           	 0.000410267	 100       	 1.21872   	 0         	 14.6246   	 0.0833333 
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                	 0.000405824	 100       	 0.616031  	 0         	 9.85649   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 6, n: 50, r2: 1)                                                                                 	 0.000357362	 100       	 0.0839485 	 0         	 1.34318   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                	 0.00033597	 100       	 0.744114  	 0         	 11.9058   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 6)                                                                	 0.000187336	 100       	 0         	 0         	 2.56224   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 50, m: 6, k: 50)  	 0.000153926	 100       	 19.4899   	 0         	 16.1116   	 1.20968   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 6, m: 6, fromLeft: 0)                 	 0.000129184	 800       	 0         	 0         	 3.56701   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 6, m: 50, k: 6)    	 5.3652e-05	 100       	 6.70991   	 0         	 9.48334   	 0.707547  
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 0, m: 300, k: 6)   	 8.031e-06 	 100       	 0         	 0         	 179.305   	 0         
Timing statistics:
function                                                                                                                                                                                      	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                        	 1.09378   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_normalized(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                     	 1.09374   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::rightNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                            	 0.986223  	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::rightNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                        	 0.984902  	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double]	 0.932114  	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                               	 0.358105  	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                  	 0.235494  	 1800      
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                            	 0.223091  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                	 0.116749  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_leftOrthogonalize(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&) [with T = double]                                   	 0.10744   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                           	 0.041651  	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]           	 0.0401241 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                                       	 0.021927  	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double]          	 0.013425  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.013396  	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double]        	 0.0114017 	 1800      
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                    	 0.0107165 	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double]       	 0.00814154	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                        	 0.00551153	 1000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                	 0.00506036	 1800      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                	 0.00490262	 1300      
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                              	 0.00454057	 900       
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                       	 0.00451836	 800       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                              	 0.00287189	 6300      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.00238227	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                       	 0.00109916	 300       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                         	 0.00101222	 5200      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                         	 0.000899692	 100       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                                                  	 0.000410267	 100       
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                           	 0.000129184	 800       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
orthoX: L, orthoY: L
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 64
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->65  [0m[1;34m1->66  [0m[1;34m2->67  [0m[1;34m3->68  [0m[1;34m4->69  [0m[1;34m5->70  [0m[1;34m6->71  [0m[1;34m7->72  [0m[1;34m8->73  [0m[1;34m9->74  [0m[1;34m10->75  [0m[1;34m11->76  [0m[1;34m12->77  [0m[1;34m13->78  [0m[1;34m14->79  [0m[1;34m15->80  [0m[1;34m16->81  [0m[1;34m17->82  [0m[1;34m18->83  [0m[1;34m19->84  [0m[1;34m20->85  [0m[1;34m21->86  [0m[1;34m22->87  [0m[1;34m23->88  [0m[1;34m24->89  [0m[1;34m25->90  [0m[1;34m26->91  [0m[1;34m27->92  [0m[1;34m28->93  [0m[1;34m29->94  [0m[1;34m30->95  [0m[1;34m31->96  [0m[1;34m32->97  [0m[1;34m33->98  [0m[1;34m34->99  [0m[1;34m35->100  [0m[1;34m36->101  [0m[1;34m37->102  [0m[1;34m38->103  [0m[1;34m39->104  [0m[1;34m40->105  [0m[1;34m41->106  [0m[1;34m42->107  [0m[1;34m43->108  [0m[1;34m44->109  [0m[1;34m45->110  [0m[1;34m46->111  [0m[1;34m47->112  [0m[1;34m48->113  [0m[1;34m49->114  [0m[1;34m50->115  [0m[1;34m51->116  [0m[1;34m52->117  [0m[1;34m53->118  [0m[1;34m54->119  [0m[1;34m55->120  [0m[1;34m56->121  [0m[1;34m57->122  [0m[1;34m58->123  [0m[1;34m59->124  [0m[1;34m60->125  [0m[1;34m61->126  [0m[1;34m62->127  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23278834751360 -> hwthread 65 - OK[0m[1;34m
[0m[1;34m	threadid 23278655629312 -> hwthread 66 - OK[0m[1;34m
[0m[1;34m	threadid 23278454302848 -> hwthread 67 - OK[0m[1;34m
[0m[1;34m	threadid 23278252976384 -> hwthread 68 - OK[0m[1;34m
[0m[1;34m	threadid 23278051649920 -> hwthread 69 - OK[0m[1;34m
[0m[1;34m	threadid 23277850323456 -> hwthread 70 - OK[0m[1;34m
[0m[1;34m	threadid 23277648996992 -> hwthread 71 - OK[0m[1;34m
[0m[1;34m	threadid 23277447670528 -> hwthread 72 - OK[0m[1;34m
[0m[1;34m	threadid 23277246344064 -> hwthread 73 - OK[0m[1;34m
[0m[1;34m	threadid 23277045017600 -> hwthread 74 - OK[0m[1;34m
[0m[1;34m	threadid 23276843691136 -> hwthread 75 - OK[0m[1;34m
[0m[1;34m	threadid 23276642364672 -> hwthread 76 - OK[0m[1;34m
[0m[1;34m	threadid 23276441038208 -> hwthread 77 - OK[0m[1;34m
[0m[1;34m	threadid 23276239711744 -> hwthread 78 - OK[0m[1;34m
[0m[1;34m	threadid 23276038385280 -> hwthread 79 - OK[0m[1;34m
[0m[1;34m	threadid 23275837058816 -> hwthread 80 - OK[0m[1;34m
[0m[1;34m	threadid 23275635732352 -> hwthread 81 - OK[0m[1;34m
[0m[1;34m	threadid 23275434405888 -> hwthread 82 - OK[0m[1;34m
[0m[1;34m	threadid 23275233079424 -> hwthread 83 - OK[0m[1;34m
[0m[1;34m	threadid 23275031752960 -> hwthread 84 - OK[0m[1;34m
[0m[1;34m	threadid 23274830426496 -> hwthread 85 - OK[0m[1;34m
[0m[1;34m	threadid 23274629100032 -> hwthread 86 - OK[0m[1;34m
[0m[1;34m	threadid 23274427773568 -> hwthread 87 - OK[0m[1;34m
[0m[1;34m	threadid 23274226447104 -> hwthread 88 - OK[0m[1;34m
[0m[1;34m	threadid 23274025120640 -> hwthread 89 - OK[0m[1;34m
[0m[1;34m	threadid 23273823794176 -> hwthread 90 - OK[0m[1;34m
[0m[1;34m	threadid 23273622467712 -> hwthread 91 - OK[0m[1;34m
[0m[1;34m	threadid 23273421141248 -> hwthread 92 - OK[0m[1;34m
[0m[1;34m	threadid 23273219814784 -> hwthread 93 - OK[0m[1;34m
[0m[1;34m	threadid 23273018488320 -> hwthread 94 - OK[0m[1;34m
[0m[1;34m	threadid 23272817161856 -> hwthread 95 - OK[0m[1;34m
[0m[1;34m	threadid 23272615835392 -> hwthread 96 - OK[0m[1;34m
[0m[1;34m	threadid 23272414504832 -> hwthread 97 - OK[0m[1;34m
[0m[1;34m	threadid 23272213178368 -> hwthread 98 - OK[0m[1;34m
[0m[1;34m	threadid 23272011851904 -> hwthread 99 - OK[0m[1;34m
[0m[1;34m	threadid 23271810525440 -> hwthread 100 - OK[0m[1;34m
[0m[1;34m	threadid 23271609198976 -> hwthread 101 - OK[0m[1;34m
[0m[1;34m	threadid 23271407872512 -> hwthread 102 - OK[0m[1;34m
[0m[1;34m	threadid 23271206546048 -> hwthread 103 - OK[0m[1;34m
[0m[1;34m	threadid 23271005219584 -> hwthread 104 - OK[0m[1;34m
[0m[1;34m	threadid 23270803893120 -> hwthread 105 - OK[0m[1;34m
[0m[1;34m	threadid 23270602566656 -> hwthread 106 - OK[0m[1;34m
[0m[1;34m	threadid 23270401240192 -> hwthread 107 - OK[0m[1;34m
[0m[1;34m	threadid 23270199913728 -> hwthread 108 - OK[0m[1;34m
[0m[1;34m	threadid 23269998587264 -> hwthread 109 - OK[0m[1;34m
[0m[1;34m	threadid 23269797260800 -> hwthread 110 - OK[0m[1;34m
[0m[1;34m	threadid 23269595934336 -> hwthread 111 - OK[0m[1;34m
[0m[1;34m	threadid 23269394607872 -> hwthread 112 - OK[0m[1;34m
[0m[1;34m	threadid 23269193281408 -> hwthread 113 - OK[0m[1;34m
[0m[1;34m	threadid 23268991954944 -> hwthread 114 - OK[0m[1;34m
[0m[1;34m	threadid 23268790628480 -> hwthread 115 - OK[0m[1;34m
[0m[1;34m	threadid 23268589302016 -> hwthread 116 - OK[0m[1;34m
[0m[1;34m	threadid 23268387975552 -> hwthread 117 - OK[0m[1;34m
[0m[1;34m	threadid 23268186649088 -> hwthread 118 - OK[0m[1;34m
[0m[1;34m	threadid 23267985322624 -> hwthread 119 - OK[0m[1;34m
[0m[1;34m	threadid 23267783996160 -> hwthread 120 - OK[0m[1;34m
[0m[1;34m	threadid 23267582669696 -> hwthread 121 - OK[0m[1;34m
[0m[1;34m	threadid 23267381343232 -> hwthread 122 - OK[0m[1;34m
[0m[1;34m	threadid 23267180016768 -> hwthread 123 - OK[0m[1;34m
[0m[1;34m	threadid 23266978690304 -> hwthread 124 - OK[0m[1;34m
[0m[1;34m	threadid 23266777363840 -> hwthread 125 - OK[0m[1;34m
[0m[1;34m	threadid 23266576037376 -> hwthread 126 - OK[0m[1;34m
[0m[1;34m	threadid 23266374710912 -> hwthread 127 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23278729090816 -> hwthread 64 - OK[0m[1;34m
[0m[1;34m	threadid 23278550230784 -> hwthread 65 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                     	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 57, m: 57)                                                                	 0.299879  	 700       	 4.03472   	 0         	 0.183082  	 22.0378   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2850, cols: 57, reductionFactor: 37, colBlockingSize: 12)                 	 0.175799  	 600       	 64.9143   	 0         	 4.52422   	 14.3482   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 57, r: 57, r2: 2850, leftOrthog: 0)       	 0.0938172 	 600       	 118.439   	 0         	 25.2669   	 4.6875    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 57)                                                                	 0.0400947 	 100       	 3.25895   	 0         	 0.16461   	 19.798    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                	 0.0346986 	 100       	 3.36228   	 0         	 0.17407   	 19.3157   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 57, reductionFactor: 37, colBlockingSize: 12)                 	 0.031519  	 100       	 52.9333   	 0         	 3.69933   	 14.3089   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 57, n: 50, r: 57, r2: 57)            	 0.0302723 	 600       	 367.055   	 0         	 52.0316   	 7.05446   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2850, cols: 50, reductionFactor: 37, colBlockingSize: 12)                 	 0.02381   	 100       	 61.4663   	 0         	 4.8719    	 12.6165   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 57, Qr2: 7)       	 0.0197917 	 700       	 0         	 0         	 86.978    	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 7, k: 2500)   	 0.0132892 	 800       	 105.349   	 0         	 68.7958   	 1.53133   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2850, cols: 7, reductionFactor: 37, colBlockingSize: 12)                  	 0.0126773 	 700       	 15.8389   	 0         	 8.83425   	 1.79289   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2850, Xcols: 7, r: 7, streamingCols: 0)                    	 0.0105001 	 700       	 9.30987   	 0         	 21.2928   	 0.437232  
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 2850, leftOrthog: 0)       	 0.0104908 	 100       	 135.834   	 0         	 32.9814   	 4.1185    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 57, r: 57, r2: 2500, leftOrthog: 0)       	 0.0098494 	 100       	 164.934   	 0         	 35.2507   	 4.67888   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 2500, m: 7, k: 50)	 0.00831697	 800       	 168.331   	 0         	 109.925   	 1.53133   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 350, k: 7)  	 0.007753  	 800       	 25.2805   	 0         	 16.7574   	 1.50862   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 57, n: 50, r: 57, r2: 50)            	 0.00536908	 100       	 302.566   	 0         	 45.8626   	 6.59722   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r: 57, r2: 57)            	 0.00488922	 100       	 332.262   	 0         	 47.1649   	 7.04469   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 57, reductionFactor: 37, colBlockingSize: 12)                   	 0.00478328	 100       	 6.97599   	 0         	 1.02005   	 6.83885   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 2850, m: 7)                                                                       	 0.00420621	 700       	 0         	 0         	 53.1214   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 7, n: 50, r2: 7)                    	 0.00407013	 700       	 0         	 0         	 54.8975   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2850, m: 7)                                                              	 0.00400206	 700       	 0         	 0         	 55.8312   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 7, m: 350, k: 7)   	 0.00388429	 700       	 6.18131   	 0         	 7.13499   	 0.866337  
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 7, m: 7)                                                                   	 0.002836  	 900       	 0.144711  	 0         	 0.390973  	 0.37013   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 7, n: 50, r2: 7)                                                                                          	 0.00279897	 800       	 0         	 0         	 11.2041   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 50, Qr2: 7)       	 0.00265301	 100       	 0         	 0         	 85.9402   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 7, reductionFactor: 37, colBlockingSize: 12)                  	 0.00204249	 100       	 12.3194   	 0         	 6.87359   	 1.79228   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 57, r: 50, r2: 50, leftOrthog: 0)         	 0.00158543	 100       	 17.9762   	 0         	 6.83727   	 2.62915   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 7, r: 7, streamingCols: 0)                    	 0.00155758	 100       	 7.86475   	 0         	 17.9892   	 0.437194  
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 0, n: 50, r2: 7)                    	 0.000866989	 100       	 0         	 0         	 32.2957   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 7)                                                                                          	 0.000865025	 200       	 0         	 0         	 1.29476   	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                  	 0.000828475	 100       	 0.603519  	 0         	 2.41407   	 0.25      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 7, n: 50, r2: 1)                                                                                          	 0.000769705	 200       	 0         	 0         	 1.4551    	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 2500, m: 7)                                                                       	 0.000764504	 100       	 0         	 0         	 36.6251   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 50, r2: 50)             	 0.000749646	 100       	 33.3491   	 0         	 8.00378   	 4.16667   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 7)                                                              	 0.000714446	 100       	 0         	 0         	 39.1912   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 50, k: 7)   	 0.000658179	 100       	 5.3177    	 0         	 3.88952   	 1.36719   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 7, reductionFactor: 37, colBlockingSize: 12)                    	 0.000639814	 100       	 0.786546  	 0         	 0.498895  	 1.57658   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                         	 0.000521254	 100       	 0         	 0         	 7.6738    	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 7, n: 50, r2: 1)                    	 0.000482325	 100       	 0         	 0         	 9.45421   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 1, Xr2: 50, Qr1: 1, Qr2: 0)         	 0.000466697	 100       	 0         	 0         	 8.57087   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 7, k: 50)     	 0.000456956	 100       	 7.65938   	 0         	 5.60229   	 1.36719   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 1, r1low: 0, n: 50, r2: 7)                     	 0.000435597	 100       	 0         	 0         	 1.28559   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                           	 0.000421317	 100       	 1.18675   	 0         	 14.2411   	 0.0833333 
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                	 0.000394326	 100       	 0.633993  	 0         	 10.1439   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 7, n: 50, r2: 1)                                                                                 	 0.000348766	 100       	 0.100354  	 0         	 1.60566   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                	 0.00033179	 100       	 0.753489  	 0         	 12.0558   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 7, m: 7, fromLeft: 0)                 	 0.000204934	 800       	 0         	 0         	 3.0605    	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 7)                                                                	 0.000188987	 100       	 0         	 0         	 2.96317   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 50, m: 7, k: 50)  	 0.000175256	 100       	 19.9708   	 0         	 14.6072   	 1.36719   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 7, m: 50, k: 7)    	 7.8384e-05	 100       	 6.25128   	 0         	 7.64442   	 0.817757  
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 0, m: 350, k: 7)   	 6.46e-06  	 100       	 0         	 0         	 303.406   	 0         
Timing statistics:
function                                                                                                                                                                                      	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                        	 1.15342   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_normalized(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                     	 1.15337   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::rightNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                            	 1.0366    	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::rightNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                        	 1.03535   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double]	 0.982509  	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                               	 0.374673  	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                  	 0.251271  	 1800      
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                            	 0.236536  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_leftOrthogonalize(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&) [with T = double]                                   	 0.116691  	 100       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                	 0.115743  	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]           	 0.0457761 	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                           	 0.0412802 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                                       	 0.0229114 	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.0158212 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double]          	 0.0137461 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double]        	 0.0123803 	 1800      
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                    	 0.0120577 	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double]       	 0.00849222	 900       
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                	 0.00678429	 1800      
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                        	 0.00585504	 1000      
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                       	 0.00497072	 800       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                	 0.00495496	 1300      
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                              	 0.00490549	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                              	 0.00299954	 6300      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.002836  	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                         	 0.00107758	 5200      
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                       	 0.00107488	 300       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                         	 0.000828475	 100       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                                                  	 0.000421317	 100       
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                           	 0.000204934	 800       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
orthoX: L, orthoY: L
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 64
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->65  [0m[1;34m1->66  [0m[1;34m2->67  [0m[1;34m3->68  [0m[1;34m4->69  [0m[1;34m5->70  [0m[1;34m6->71  [0m[1;34m7->72  [0m[1;34m8->73  [0m[1;34m9->74  [0m[1;34m10->75  [0m[1;34m11->76  [0m[1;34m12->77  [0m[1;34m13->78  [0m[1;34m14->79  [0m[1;34m15->80  [0m[1;34m16->81  [0m[1;34m17->82  [0m[1;34m18->83  [0m[1;34m19->84  [0m[1;34m20->85  [0m[1;34m21->86  [0m[1;34m22->87  [0m[1;34m23->88  [0m[1;34m24->89  [0m[1;34m25->90  [0m[1;34m26->91  [0m[1;34m27->92  [0m[1;34m28->93  [0m[1;34m29->94  [0m[1;34m30->95  [0m[1;34m31->96  [0m[1;34m32->97  [0m[1;34m33->98  [0m[1;34m34->99  [0m[1;34m35->100  [0m[1;34m36->101  [0m[1;34m37->102  [0m[1;34m38->103  [0m[1;34m39->104  [0m[1;34m40->105  [0m[1;34m41->106  [0m[1;34m42->107  [0m[1;34m43->108  [0m[1;34m44->109  [0m[1;34m45->110  [0m[1;34m46->111  [0m[1;34m47->112  [0m[1;34m48->113  [0m[1;34m49->114  [0m[1;34m50->115  [0m[1;34m51->116  [0m[1;34m52->117  [0m[1;34m53->118  [0m[1;34m54->119  [0m[1;34m55->120  [0m[1;34m56->121  [0m[1;34m57->122  [0m[1;34m58->123  [0m[1;34m59->124  [0m[1;34m60->125  [0m[1;34m61->126  [0m[1;34m62->127  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23217253762944 -> hwthread 65 - OK[0m[1;34m
[0m[1;34m	threadid 23217049692160 -> hwthread 66 - OK[0m[1;34m
[0m[1;34m	threadid 23216848365696 -> hwthread 67 - OK[0m[1;34m
[0m[1;34m	threadid 23216647039232 -> hwthread 68 - OK[0m[1;34m
[0m[1;34m	threadid 23216445712768 -> hwthread 69 - OK[0m[1;34m
[0m[1;34m	threadid 23216244386304 -> hwthread 70 - OK[0m[1;34m
[0m[1;34m	threadid 23216043059840 -> hwthread 71 - OK[0m[1;34m
[0m[1;34m	threadid 23215841733376 -> hwthread 72 - OK[0m[1;34m
[0m[1;34m	threadid 23215640406912 -> hwthread 73 - OK[0m[1;34m
[0m[1;34m	threadid 23215439080448 -> hwthread 74 - OK[0m[1;34m
[0m[1;34m	threadid 23215237753984 -> hwthread 75 - OK[0m[1;34m
[0m[1;34m	threadid 23215036427520 -> hwthread 76 - OK[0m[1;34m
[0m[1;34m	threadid 23214835101056 -> hwthread 77 - OK[0m[1;34m
[0m[1;34m	threadid 23214633774592 -> hwthread 78 - OK[0m[1;34m
[0m[1;34m	threadid 23214432448128 -> hwthread 79 - OK[0m[1;34m
[0m[1;34m	threadid 23214231121664 -> hwthread 80 - OK[0m[1;34m
[0m[1;34m	threadid 23214029795200 -> hwthread 81 - OK[0m[1;34m
[0m[1;34m	threadid 23213828468736 -> hwthread 82 - OK[0m[1;34m
[0m[1;34m	threadid 23213627142272 -> hwthread 83 - OK[0m[1;34m
[0m[1;34m	threadid 23213425815808 -> hwthread 84 - OK[0m[1;34m
[0m[1;34m	threadid 23213224489344 -> hwthread 85 - OK[0m[1;34m
[0m[1;34m	threadid 23213023162880 -> hwthread 86 - OK[0m[1;34m
[0m[1;34m	threadid 23212821836416 -> hwthread 87 - OK[0m[1;34m
[0m[1;34m	threadid 23212620509952 -> hwthread 88 - OK[0m[1;34m
[0m[1;34m	threadid 23212419183488 -> hwthread 89 - OK[0m[1;34m
[0m[1;34m	threadid 23212217857024 -> hwthread 90 - OK[0m[1;34m
[0m[1;34m	threadid 23212016530560 -> hwthread 91 - OK[0m[1;34m
[0m[1;34m	threadid 23211815204096 -> hwthread 92 - OK[0m[1;34m
[0m[1;34m	threadid 23211613877632 -> hwthread 93 - OK[0m[1;34m
[0m[1;34m	threadid 23211412551168 -> hwthread 94 - OK[0m[1;34m
[0m[1;34m	threadid 23211211224704 -> hwthread 95 - OK[0m[1;34m
[0m[1;34m	threadid 23211009898240 -> hwthread 96 - OK[0m[1;34m
[0m[1;34m	threadid 23210808567680 -> hwthread 97 - OK[0m[1;34m
[0m[1;34m	threadid 23210607241216 -> hwthread 98 - OK[0m[1;34m
[0m[1;34m	threadid 23210405914752 -> hwthread 99 - OK[0m[1;34m
[0m[1;34m	threadid 23210204588288 -> hwthread 100 - OK[0m[1;34m
[0m[1;34m	threadid 23210003261824 -> hwthread 101 - OK[0m[1;34m
[0m[1;34m	threadid 23209801935360 -> hwthread 102 - OK[0m[1;34m
[0m[1;34m	threadid 23209600608896 -> hwthread 103 - OK[0m[1;34m
[0m[1;34m	threadid 23209399282432 -> hwthread 104 - OK[0m[1;34m
[0m[1;34m	threadid 23209197955968 -> hwthread 105 - OK[0m[1;34m
[0m[1;34m	threadid 23208996629504 -> hwthread 106 - OK[0m[1;34m
[0m[1;34m	threadid 23208795303040 -> hwthread 107 - OK[0m[1;34m
[0m[1;34m	threadid 23208593976576 -> hwthread 108 - OK[0m[1;34m
[0m[1;34m	threadid 23208392650112 -> hwthread 109 - OK[0m[1;34m
[0m[1;34m	threadid 23208191323648 -> hwthread 110 - OK[0m[1;34m
[0m[1;34m	threadid 23207989997184 -> hwthread 111 - OK[0m[1;34m
[0m[1;34m	threadid 23207788670720 -> hwthread 112 - OK[0m[1;34m
[0m[1;34m	threadid 23207587344256 -> hwthread 113 - OK[0m[1;34m
[0m[1;34m	threadid 23207386017792 -> hwthread 114 - OK[0m[1;34m
[0m[1;34m	threadid 23207184691328 -> hwthread 115 - OK[0m[1;34m
[0m[1;34m	threadid 23206983364864 -> hwthread 116 - OK[0m[1;34m
[0m[1;34m	threadid 23206782038400 -> hwthread 117 - OK[0m[1;34m
[0m[1;34m	threadid 23206580711936 -> hwthread 118 - OK[0m[1;34m
[0m[1;34m	threadid 23206379385472 -> hwthread 119 - OK[0m[1;34m
[0m[1;34m	threadid 23206178059008 -> hwthread 120 - OK[0m[1;34m
[0m[1;34m	threadid 23205976732544 -> hwthread 121 - OK[0m[1;34m
[0m[1;34m	threadid 23205775406080 -> hwthread 122 - OK[0m[1;34m
[0m[1;34m	threadid 23205574079616 -> hwthread 123 - OK[0m[1;34m
[0m[1;34m	threadid 23205372753152 -> hwthread 124 - OK[0m[1;34m
[0m[1;34m	threadid 23205171426688 -> hwthread 125 - OK[0m[1;34m
[0m[1;34m	threadid 23204970100224 -> hwthread 126 - OK[0m[1;34m
[0m[1;34m	threadid 23204768773760 -> hwthread 127 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23217148102400 -> hwthread 64 - OK[0m[1;34m
[0m[1;34m	threadid 23217141511936 -> hwthread 65 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                     	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 58, m: 58)                                                                	 0.303369  	 700       	 4.20192   	 0         	 0.187362  	 22.4267   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2900, cols: 58, reductionFactor: 37, colBlockingSize: 12)                 	 0.181841  	 600       	 66.119    	 0         	 4.52873   	 14.5999   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 58, r: 58, r2: 2900, leftOrthog: 0)       	 0.105416  	 600       	 111.053   	 0         	 23.2828   	 4.76974   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 58)                                                                	 0.0398211 	 100       	 3.33157   	 0         	 0.16775   	 19.8603   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 58, n: 50, r: 58, r2: 58)            	 0.0358527 	 600       	 326.523   	 0         	 45.488    	 7.17822   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                	 0.0353634 	 100       	 3.29908   	 0         	 0.170798  	 19.3157   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 58, reductionFactor: 37, colBlockingSize: 12)                 	 0.0321404 	 100       	 53.7472   	 0         	 3.69289   	 14.5542   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2900, cols: 50, reductionFactor: 37, colBlockingSize: 12)                 	 0.023807  	 100       	 62.5525   	 0         	 4.95652   	 12.6202   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 58, Qr2: 8)       	 0.0209535 	 700       	 0         	 0         	 84.5607   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2900, cols: 8, reductionFactor: 37, colBlockingSize: 12)                  	 0.014482  	 700       	 18.4272   	 0         	 8.99591   	 2.0484    
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 8, k: 2500)   	 0.0138859 	 800       	 115.225   	 0         	 67.0146   	 1.71939   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 2900, leftOrthog: 0)       	 0.0122221 	 100       	 118.638   	 0         	 28.8003   	 4.11932   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2900, Xcols: 8, r: 8, streamingCols: 0)                    	 0.0117658 	 700       	 11.0422   	 0         	 22.0996   	 0.499655  
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 58, r: 58, r2: 2500, leftOrthog: 0)       	 0.00952796	 100       	 176.533   	 0         	 37.089    	 4.75972   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 2500, m: 8, k: 50)	 0.00862478	 800       	 185.512   	 0         	 107.894   	 1.71939   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 400, k: 8)  	 0.00839408	 800       	 30.4977   	 0         	 17.9936   	 1.69492   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 8, m: 400, k: 8)   	 0.00616546	 700       	 5.81303   	 0         	 5.87116   	 0.990099  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 58, n: 50, r: 58, r2: 50)            	 0.00536088	 100       	 313.754   	 0         	 47.1714   	 6.65138   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r: 58, r2: 58)            	 0.00481117	 100       	 349.603   	 0         	 48.7805   	 7.16686   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 58, reductionFactor: 37, colBlockingSize: 12)                   	 0.00476948	 100       	 7.2438    	 0         	 1.05068   	 6.89439   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 8, n: 50, r2: 8)                    	 0.00435835	 700       	 0         	 0         	 59.6189   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 2900, m: 8)                                                                       	 0.00430109	 700       	 0         	 0         	 60.4125   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2900, m: 8)                                                              	 0.00411324	 700       	 0         	 0         	 63.1716   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 8, m: 8)                                                                   	 0.00311439	 900       	 0.197085  	 0         	 0.46237   	 0.42625   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 8, n: 50, r2: 8)                                                                                          	 0.00297317	 800       	 0         	 0         	 13.7765   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 50, Qr2: 8)       	 0.00268106	 100       	 0         	 0         	 86.5328   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 8, reductionFactor: 37, colBlockingSize: 12)                  	 0.00219074	 100       	 15.0018   	 0         	 7.32686   	 2.0475    
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 8, r: 8, streamingCols: 0)                    	 0.00163257	 100       	 9.8005    	 0         	 19.6167   	 0.4996    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 58, r: 50, r2: 50, leftOrthog: 0)         	 0.00154093	 100       	 18.8198   	 0         	 7.11258   	 2.64599   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 0, n: 50, r2: 8)                    	 0.00110739	 100       	 0         	 0         	 28.8969   	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                  	 0.00083428	 100       	 0.599319  	 0         	 2.39728   	 0.25      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 8)                                                                                          	 0.000813403	 200       	 0         	 0         	 1.57364   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 8)                                                              	 0.000805329	 100       	 0         	 0         	 39.7353   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 2500, m: 8)                                                                       	 0.000789734	 100       	 0         	 0         	 40.52     	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 50, k: 8)   	 0.000761087	 100       	 5.25564   	 0         	 3.46872   	 1.51515   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 8, n: 50, r2: 1)                                                                                          	 0.000760709	 200       	 0         	 0         	 1.68264   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 50, r2: 50)             	 0.000743346	 100       	 33.6317   	 0         	 8.07161   	 4.16667   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 8, reductionFactor: 37, colBlockingSize: 12)                    	 0.000715363	 100       	 0.91883   	 0         	 0.518897  	 1.77074   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                         	 0.000534346	 100       	 0         	 0         	 7.48579   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 1, Xr2: 50, Qr1: 1, Qr2: 0)         	 0.000478815	 100       	 0         	 0         	 8.35396   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 8, k: 50)     	 0.000467181	 100       	 8.56199   	 0         	 5.65091   	 1.51515   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 8, n: 50, r2: 1)                    	 0.000445756	 100       	 0         	 0         	 10.4093   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 1, r1low: 0, n: 50, r2: 8)                     	 0.000435105	 100       	 0         	 0         	 1.47091   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                	 0.000408089	 100       	 0.612611  	 0         	 9.80178   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                           	 0.000402191	 100       	 1.24319   	 0         	 14.9183   	 0.0833333 
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 8, n: 50, r2: 1)                                                                                 	 0.000362301	 100       	 0.110405  	 0         	 1.76649   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 8)                                                                	 0.000356793	 100       	 0         	 0         	 1.79376   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                	 0.000334809	 100       	 0.746694  	 0         	 11.9471   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 8, m: 8, fromLeft: 0)                 	 0.000194917	 800       	 0         	 0         	 4.20281   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 50, m: 8, k: 50)  	 0.000183209	 100       	 21.833    	 0         	 14.4098   	 1.51515   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 8, m: 50, k: 8)    	 6.4972e-05	 100       	 9.8504    	 0         	 10.6384   	 0.925926  
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 0, m: 400, k: 8)   	 6.04e-06  	 100       	 0         	 0         	 423.841   	 0         
Timing statistics:
function                                                                                                                                                                                      	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                        	 1.19023   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_normalized(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                     	 1.19018   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::rightNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                            	 1.06464   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::rightNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                        	 1.06336   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double]	 1.00088   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                               	 0.378554  	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                  	 0.259946  	 1800      
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                            	 0.243161  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                	 0.128707  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_leftOrthogonalize(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&) [with T = double]                                   	 0.125478  	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]           	 0.0500057 	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                           	 0.0467681 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                                       	 0.0241134 	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.0178441 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double]        	 0.0153916 	 1800      
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double]          	 0.0143531 	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                    	 0.0133984 	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double]       	 0.00880799	 900       
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                	 0.00648742	 1800      
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                        	 0.0063466 	 1000      
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                              	 0.00527536	 900       
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                       	 0.00509083	 800       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                	 0.00508163	 1300      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.00311439	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                              	 0.00306832	 6300      
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                       	 0.0011052 	 300       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                         	 0.00105701	 5200      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                         	 0.00083428	 100       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                                                  	 0.000402191	 100       
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                           	 0.000194917	 800       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
orthoX: L, orthoY: L
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 64
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->65  [0m[1;34m1->66  [0m[1;34m2->67  [0m[1;34m3->68  [0m[1;34m4->69  [0m[1;34m5->70  [0m[1;34m6->71  [0m[1;34m7->72  [0m[1;34m8->73  [0m[1;34m9->74  [0m[1;34m10->75  [0m[1;34m11->76  [0m[1;34m12->77  [0m[1;34m13->78  [0m[1;34m14->79  [0m[1;34m15->80  [0m[1;34m16->81  [0m[1;34m17->82  [0m[1;34m18->83  [0m[1;34m19->84  [0m[1;34m20->85  [0m[1;34m21->86  [0m[1;34m22->87  [0m[1;34m23->88  [0m[1;34m24->89  [0m[1;34m25->90  [0m[1;34m26->91  [0m[1;34m27->92  [0m[1;34m28->93  [0m[1;34m29->94  [0m[1;34m30->95  [0m[1;34m31->96  [0m[1;34m32->97  [0m[1;34m33->98  [0m[1;34m34->99  [0m[1;34m35->100  [0m[1;34m36->101  [0m[1;34m37->102  [0m[1;34m38->103  [0m[1;34m39->104  [0m[1;34m40->105  [0m[1;34m41->106  [0m[1;34m42->107  [0m[1;34m43->108  [0m[1;34m44->109  [0m[1;34m45->110  [0m[1;34m46->111  [0m[1;34m47->112  [0m[1;34m48->113  [0m[1;34m49->114  [0m[1;34m50->115  [0m[1;34m51->116  [0m[1;34m52->117  [0m[1;34m53->118  [0m[1;34m54->119  [0m[1;34m55->120  [0m[1;34m56->121  [0m[1;34m57->122  [0m[1;34m58->123  [0m[1;34m59->124  [0m[1;34m60->125  [0m[1;34m61->126  [0m[1;34m62->127  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22587301529472 -> hwthread 65 - OK[0m[1;34m
[0m[1;34m	threadid 22587098785792 -> hwthread 66 - OK[0m[1;34m
[0m[1;34m	threadid 22586897459328 -> hwthread 67 - OK[0m[1;34m
[0m[1;34m	threadid 22586696132864 -> hwthread 68 - OK[0m[1;34m
[0m[1;34m	threadid 22586494806400 -> hwthread 69 - OK[0m[1;34m
[0m[1;34m	threadid 22586293479936 -> hwthread 70 - OK[0m[1;34m
[0m[1;34m	threadid 22586092153472 -> hwthread 71 - OK[0m[1;34m
[0m[1;34m	threadid 22585890827008 -> hwthread 72 - OK[0m[1;34m
[0m[1;34m	threadid 22585689500544 -> hwthread 73 - OK[0m[1;34m
[0m[1;34m	threadid 22585488174080 -> hwthread 74 - OK[0m[1;34m
[0m[1;34m	threadid 22585286847616 -> hwthread 75 - OK[0m[1;34m
[0m[1;34m	threadid 22585085521152 -> hwthread 76 - OK[0m[1;34m
[0m[1;34m	threadid 22584884194688 -> hwthread 77 - OK[0m[1;34m
[0m[1;34m	threadid 22584682868224 -> hwthread 78 - OK[0m[1;34m
[0m[1;34m	threadid 22584481541760 -> hwthread 79 - OK[0m[1;34m
[0m[1;34m	threadid 22584280215296 -> hwthread 80 - OK[0m[1;34m
[0m[1;34m	threadid 22584078888832 -> hwthread 81 - OK[0m[1;34m
[0m[1;34m	threadid 22583877562368 -> hwthread 82 - OK[0m[1;34m
[0m[1;34m	threadid 22583676235904 -> hwthread 83 - OK[0m[1;34m
[0m[1;34m	threadid 22583474909440 -> hwthread 84 - OK[0m[1;34m
[0m[1;34m	threadid 22583273582976 -> hwthread 85 - OK[0m[1;34m
[0m[1;34m	threadid 22583072256512 -> hwthread 86 - OK[0m[1;34m
[0m[1;34m	threadid 22582870930048 -> hwthread 87 - OK[0m[1;34m
[0m[1;34m	threadid 22582669603584 -> hwthread 88 - OK[0m[1;34m
[0m[1;34m	threadid 22582468277120 -> hwthread 89 - OK[0m[1;34m
[0m[1;34m	threadid 22582266950656 -> hwthread 90 - OK[0m[1;34m
[0m[1;34m	threadid 22582065624192 -> hwthread 91 - OK[0m[1;34m
[0m[1;34m	threadid 22581864297728 -> hwthread 92 - OK[0m[1;34m
[0m[1;34m	threadid 22581662971264 -> hwthread 93 - OK[0m[1;34m
[0m[1;34m	threadid 22581461644800 -> hwthread 94 - OK[0m[1;34m
[0m[1;34m	threadid 22581260318336 -> hwthread 95 - OK[0m[1;34m
[0m[1;34m	threadid 22581058991872 -> hwthread 96 - OK[0m[1;34m
[0m[1;34m	threadid 22580857661312 -> hwthread 97 - OK[0m[1;34m
[0m[1;34m	threadid 22580656334848 -> hwthread 98 - OK[0m[1;34m
[0m[1;34m	threadid 22580455008384 -> hwthread 99 - OK[0m[1;34m
[0m[1;34m	threadid 22580253681920 -> hwthread 100 - OK[0m[1;34m
[0m[1;34m	threadid 22580052355456 -> hwthread 101 - OK[0m[1;34m
[0m[1;34m	threadid 22579851028992 -> hwthread 102 - OK[0m[1;34m
[0m[1;34m	threadid 22579649702528 -> hwthread 103 - OK[0m[1;34m
[0m[1;34m	threadid 22579448376064 -> hwthread 104 - OK[0m[1;34m
[0m[1;34m	threadid 22579247049600 -> hwthread 105 - OK[0m[1;34m
[0m[1;34m	threadid 22579045723136 -> hwthread 106 - OK[0m[1;34m
[0m[1;34m	threadid 22578844396672 -> hwthread 107 - OK[0m[1;34m
[0m[1;34m	threadid 22578643070208 -> hwthread 108 - OK[0m[1;34m
[0m[1;34m	threadid 22578441743744 -> hwthread 109 - OK[0m[1;34m
[0m[1;34m	threadid 22578240417280 -> hwthread 110 - OK[0m[1;34m
[0m[1;34m	threadid 22578039090816 -> hwthread 111 - OK[0m[1;34m
[0m[1;34m	threadid 22577837764352 -> hwthread 112 - OK[0m[1;34m
[0m[1;34m	threadid 22577636437888 -> hwthread 113 - OK[0m[1;34m
[0m[1;34m	threadid 22577435111424 -> hwthread 114 - OK[0m[1;34m
[0m[1;34m	threadid 22577233784960 -> hwthread 115 - OK[0m[1;34m
[0m[1;34m	threadid 22577032458496 -> hwthread 116 - OK[0m[1;34m
[0m[1;34m	threadid 22576831132032 -> hwthread 117 - OK[0m[1;34m
[0m[1;34m	threadid 22576629805568 -> hwthread 118 - OK[0m[1;34m
[0m[1;34m	threadid 22576428479104 -> hwthread 119 - OK[0m[1;34m
[0m[1;34m	threadid 22576227152640 -> hwthread 120 - OK[0m[1;34m
[0m[1;34m	threadid 22576025826176 -> hwthread 121 - OK[0m[1;34m
[0m[1;34m	threadid 22575824499712 -> hwthread 122 - OK[0m[1;34m
[0m[1;34m	threadid 22575623173248 -> hwthread 123 - OK[0m[1;34m
[0m[1;34m	threadid 22575421846784 -> hwthread 124 - OK[0m[1;34m
[0m[1;34m	threadid 22575220520320 -> hwthread 125 - OK[0m[1;34m
[0m[1;34m	threadid 22575019193856 -> hwthread 126 - OK[0m[1;34m
[0m[1;34m	threadid 22574817867392 -> hwthread 127 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22587195868928 -> hwthread 64 - OK[0m[1;34m
[0m[1;34m	threadid 22587189278464 -> hwthread 65 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                     	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 59, m: 59)                                                                	 0.309852  	 700       	 4.33048   	 0         	 0.189804  	 22.8155   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2950, cols: 59, reductionFactor: 37, colBlockingSize: 12)                 	 0.189427  	 600       	 66.811    	 0         	 4.49857   	 14.8516   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 59, r: 59, r2: 2950, leftOrthog: 0)       	 0.096244  	 600       	 128.036   	 0         	 26.3885   	 4.85197   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 59)                                                                	 0.0394587 	 100       	 3.41285   	 0         	 0.171319  	 19.9211   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                	 0.0338408 	 100       	 3.44752   	 0         	 0.178483  	 19.3157   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 59, reductionFactor: 37, colBlockingSize: 12)                 	 0.0329592 	 100       	 54.2349   	 0         	 3.66468   	 14.7994   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 59, n: 50, r: 59, r2: 59)            	 0.0311169 	 600       	 396.014   	 0         	 54.2338   	 7.30198   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2950, cols: 50, reductionFactor: 37, colBlockingSize: 12)                 	 0.0235143 	 100       	 64.4232   	 0         	 5.10328   	 12.6239   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 59, Qr2: 9)       	 0.0203892 	 700       	 0         	 0         	 89.4276   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2950, cols: 9, reductionFactor: 37, colBlockingSize: 12)                  	 0.01491   	 700       	 23.043    	 0         	 10.0023   	 2.30378   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 9, k: 2500)   	 0.0139442 	 800       	 129.086   	 0         	 67.9051   	 1.90098   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2950, Xcols: 9, r: 9, streamingCols: 0)                    	 0.0124531 	 700       	 13.4316   	 0         	 23.8966   	 0.562071  
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 2950, leftOrthog: 0)       	 0.0108837 	 100       	 135.524   	 0         	 32.8932   	 4.12011   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 59, r: 59, r2: 2500, leftOrthog: 0)       	 0.0102067 	 100       	 170.525   	 0         	 35.2287   	 4.84051   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 2500, m: 9, k: 50)	 0.00899513	 800       	 200.108   	 0         	 105.266   	 1.90098   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 450, k: 9)  	 0.00769463	 800       	 42.1073   	 0         	 22.4572   	 1.875     
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 9, m: 450, k: 9)   	 0.00688488	 700       	 7.41189   	 0         	 6.65423   	 1.11386   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r: 59, r2: 59)            	 0.00551787	 100       	 315.43    	 0         	 43.2748   	 7.28899   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 59, n: 50, r: 59, r2: 50)            	 0.00541074	 100       	 321.675   	 0         	 47.9786   	 6.70455   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 59, reductionFactor: 37, colBlockingSize: 12)                   	 0.00475963	 100       	 7.51126   	 0         	 1.08092   	 6.94892   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 2950, m: 9)                                                                       	 0.00403342	 700       	 0         	 0         	 73.724    	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 9, n: 50, r2: 9)                    	 0.00402454	 700       	 0         	 0         	 73.8868   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2950, m: 9)                                                              	 0.0037515 	 700       	 0         	 0         	 79.2644   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 9, m: 9)                                                                   	 0.00347238	 900       	 0.251931  	 0         	 0.522523  	 0.482143  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 9, n: 50, r2: 9)                                                                                          	 0.00309177	 800       	 0         	 0         	 16.7671   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 50, Qr2: 9)       	 0.00279801	 100       	 0         	 0         	 84.3456   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 9, reductionFactor: 37, colBlockingSize: 12)                  	 0.0022823 	 100       	 18.2249   	 0         	 7.91519   	 2.30252   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 9, r: 9, streamingCols: 0)                    	 0.00174854	 100       	 11.5811   	 0         	 20.6071   	 0.561994  
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 59, r: 50, r2: 50, leftOrthog: 0)         	 0.00159691	 100       	 18.4732   	 0         	 6.9384    	 2.66245   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 0, n: 50, r2: 9)                    	 0.000939665	 100       	 0         	 0         	 38.3115   	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                  	 0.000838762	 100       	 0.596117  	 0         	 2.38447   	 0.25      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 9)                                                                                          	 0.000777767	 200       	 0         	 0         	 1.85145   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 9, n: 50, r2: 1)                                                                                          	 0.000771923	 200       	 0         	 0         	 1.86547   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 50, r2: 50)             	 0.000756889	 100       	 33.0299   	 0         	 7.92719   	 4.16667   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 2500, m: 9)                                                                       	 0.000719322	 100       	 0         	 0         	 50.0471   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 9, reductionFactor: 37, colBlockingSize: 12)                    	 0.000656537	 100       	 1.26709   	 0         	 0.647031  	 1.95831   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 9)                                                              	 0.000642892	 100       	 0         	 0         	 55.997    	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 50, k: 9)   	 0.000632987	 100       	 7.10915   	 0         	 4.29709   	 1.65441   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                         	 0.000545075	 100       	 0         	 0         	 7.33844   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 9, k: 50)     	 0.000452015	 100       	 9.95542   	 0         	 6.0175    	 1.65441   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 9, n: 50, r2: 1)                    	 0.000448087	 100       	 0         	 0         	 10.5337   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 1, r1low: 0, n: 50, r2: 9)                     	 0.000440416	 100       	 0         	 0         	 1.63482   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 1, Xr2: 50, Qr1: 1, Qr2: 0)         	 0.000431296	 100       	 0         	 0         	 9.27437   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 9)                                                                	 0.000394059	 100       	 0         	 0         	 1.82714   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                           	 0.00039248	 100       	 1.27395   	 0         	 15.2874   	 0.0833333 
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                	 0.000387659	 100       	 0.644897  	 0         	 10.3183   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 9, n: 50, r2: 1)                                                                                 	 0.000338993	 100       	 0.132746  	 0         	 2.12394   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                	 0.000332153	 100       	 0.752665  	 0         	 12.0426   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 9, m: 9, fromLeft: 0)                 	 0.00022513	 800       	 0         	 0         	 4.60534   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 50, m: 9, k: 50)  	 0.000202848	 100       	 22.1841   	 0         	 13.4091   	 1.65441   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 9, m: 50, k: 9)    	 8.8332e-05	 100       	 9.16995   	 0         	 8.88466   	 1.03211   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 0, m: 450, k: 9)   	 5.84e-06  	 100       	 0         	 0         	 554.795   	 0         
Timing statistics:
function                                                                                                                                                                                      	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                        	 1.20152   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_normalized(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                     	 1.20147   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::rightNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                            	 1.07536   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::rightNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                        	 1.0741    	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double]	 1.01876   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                               	 0.383152  	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                  	 0.268509  	 1800      
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                            	 0.251248  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_leftOrthogonalize(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&) [with T = double]                                   	 0.126037  	 100       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                	 0.118931  	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]           	 0.0514318 	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                           	 0.0428024 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                                       	 0.0236185 	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.0182573 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double]        	 0.0153067 	 1800      
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double]          	 0.0143962 	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                    	 0.0142016 	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double]       	 0.00919798	 900       
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                	 0.00683733	 1800      
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                        	 0.00585271	 1000      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                	 0.00518653	 1300      
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                              	 0.00478845	 900       
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                       	 0.00475274	 800       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.00347238	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                              	 0.00299587	 6300      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                         	 0.00106846	 5200      
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                       	 0.00105881	 300       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                         	 0.000838762	 100       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                                                  	 0.00039248	 100       
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                           	 0.00022513	 800       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
orthoX: L, orthoY: L
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 64
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->65  [0m[1;34m1->66  [0m[1;34m2->67  [0m[1;34m3->68  [0m[1;34m4->69  [0m[1;34m5->70  [0m[1;34m6->71  [0m[1;34m7->72  [0m[1;34m8->73  [0m[1;34m9->74  [0m[1;34m10->75  [0m[1;34m11->76  [0m[1;34m12->77  [0m[1;34m13->78  [0m[1;34m14->79  [0m[1;34m15->80  [0m[1;34m16->81  [0m[1;34m17->82  [0m[1;34m18->83  [0m[1;34m19->84  [0m[1;34m20->85  [0m[1;34m21->86  [0m[1;34m22->87  [0m[1;34m23->88  [0m[1;34m24->89  [0m[1;34m25->90  [0m[1;34m26->91  [0m[1;34m27->92  [0m[1;34m28->93  [0m[1;34m29->94  [0m[1;34m30->95  [0m[1;34m31->96  [0m[1;34m32->97  [0m[1;34m33->98  [0m[1;34m34->99  [0m[1;34m35->100  [0m[1;34m36->101  [0m[1;34m37->102  [0m[1;34m38->103  [0m[1;34m39->104  [0m[1;34m40->105  [0m[1;34m41->106  [0m[1;34m42->107  [0m[1;34m43->108  [0m[1;34m44->109  [0m[1;34m45->110  [0m[1;34m46->111  [0m[1;34m47->112  [0m[1;34m48->113  [0m[1;34m49->114  [0m[1;34m50->115  [0m[1;34m51->116  [0m[1;34m52->117  [0m[1;34m53->118  [0m[1;34m54->119  [0m[1;34m55->120  [0m[1;34m56->121  [0m[1;34m57->122  [0m[1;34m58->123  [0m[1;34m59->124  [0m[1;34m60->125  [0m[1;34m61->126  [0m[1;34m62->127  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22425092118400 -> hwthread 65 - OK[0m[1;34m
[0m[1;34m	threadid 22424896661504 -> hwthread 66 - OK[0m[1;34m
[0m[1;34m	threadid 22424695335040 -> hwthread 67 - OK[0m[1;34m
[0m[1;34m	threadid 22424494008576 -> hwthread 68 - OK[0m[1;34m
[0m[1;34m	threadid 22424292682112 -> hwthread 69 - OK[0m[1;34m
[0m[1;34m	threadid 22424091355648 -> hwthread 70 - OK[0m[1;34m
[0m[1;34m	threadid 22423890029184 -> hwthread 71 - OK[0m[1;34m
[0m[1;34m	threadid 22423688702720 -> hwthread 72 - OK[0m[1;34m
[0m[1;34m	threadid 22423487376256 -> hwthread 73 - OK[0m[1;34m
[0m[1;34m	threadid 22423286049792 -> hwthread 74 - OK[0m[1;34m
[0m[1;34m	threadid 22423084723328 -> hwthread 75 - OK[0m[1;34m
[0m[1;34m	threadid 22422883396864 -> hwthread 76 - OK[0m[1;34m
[0m[1;34m	threadid 22422682070400 -> hwthread 77 - OK[0m[1;34m
[0m[1;34m	threadid 22422480743936 -> hwthread 78 - OK[0m[1;34m
[0m[1;34m	threadid 22422279417472 -> hwthread 79 - OK[0m[1;34m
[0m[1;34m	threadid 22422078091008 -> hwthread 80 - OK[0m[1;34m
[0m[1;34m	threadid 22421876764544 -> hwthread 81 - OK[0m[1;34m
[0m[1;34m	threadid 22421675438080 -> hwthread 82 - OK[0m[1;34m
[0m[1;34m	threadid 22421474111616 -> hwthread 83 - OK[0m[1;34m
[0m[1;34m	threadid 22421272785152 -> hwthread 84 - OK[0m[1;34m
[0m[1;34m	threadid 22421071458688 -> hwthread 85 - OK[0m[1;34m
[0m[1;34m	threadid 22420870132224 -> hwthread 86 - OK[0m[1;34m
[0m[1;34m	threadid 22420668805760 -> hwthread 87 - OK[0m[1;34m
[0m[1;34m	threadid 22420467479296 -> hwthread 88 - OK[0m[1;34m
[0m[1;34m	threadid 22420266152832 -> hwthread 89 - OK[0m[1;34m
[0m[1;34m	threadid 22420064826368 -> hwthread 90 - OK[0m[1;34m
[0m[1;34m	threadid 22419863499904 -> hwthread 91 - OK[0m[1;34m
[0m[1;34m	threadid 22419662173440 -> hwthread 92 - OK[0m[1;34m
[0m[1;34m	threadid 22419460846976 -> hwthread 93 - OK[0m[1;34m
[0m[1;34m	threadid 22419259520512 -> hwthread 94 - OK[0m[1;34m
[0m[1;34m	threadid 22419058194048 -> hwthread 95 - OK[0m[1;34m
[0m[1;34m	threadid 22418856867584 -> hwthread 96 - OK[0m[1;34m
[0m[1;34m	threadid 22418655537024 -> hwthread 97 - OK[0m[1;34m
[0m[1;34m	threadid 22418454210560 -> hwthread 98 - OK[0m[1;34m
[0m[1;34m	threadid 22418252884096 -> hwthread 99 - OK[0m[1;34m
[0m[1;34m	threadid 22418051557632 -> hwthread 100 - OK[0m[1;34m
[0m[1;34m	threadid 22417850231168 -> hwthread 101 - OK[0m[1;34m
[0m[1;34m	threadid 22417648904704 -> hwthread 102 - OK[0m[1;34m
[0m[1;34m	threadid 22417447578240 -> hwthread 103 - OK[0m[1;34m
[0m[1;34m	threadid 22417246251776 -> hwthread 104 - OK[0m[1;34m
[0m[1;34m	threadid 22417044925312 -> hwthread 105 - OK[0m[1;34m
[0m[1;34m	threadid 22416843598848 -> hwthread 106 - OK[0m[1;34m
[0m[1;34m	threadid 22416642272384 -> hwthread 107 - OK[0m[1;34m
[0m[1;34m	threadid 22416440945920 -> hwthread 108 - OK[0m[1;34m
[0m[1;34m	threadid 22416239619456 -> hwthread 109 - OK[0m[1;34m
[0m[1;34m	threadid 22416038292992 -> hwthread 110 - OK[0m[1;34m
[0m[1;34m	threadid 22415836966528 -> hwthread 111 - OK[0m[1;34m
[0m[1;34m	threadid 22415635640064 -> hwthread 112 - OK[0m[1;34m
[0m[1;34m	threadid 22415434313600 -> hwthread 113 - OK[0m[1;34m
[0m[1;34m	threadid 22415232987136 -> hwthread 114 - OK[0m[1;34m
[0m[1;34m	threadid 22415031660672 -> hwthread 115 - OK[0m[1;34m
[0m[1;34m	threadid 22414830334208 -> hwthread 116 - OK[0m[1;34m
[0m[1;34m	threadid 22414629007744 -> hwthread 117 - OK[0m[1;34m
[0m[1;34m	threadid 22414427681280 -> hwthread 118 - OK[0m[1;34m
[0m[1;34m	threadid 22414226354816 -> hwthread 119 - OK[0m[1;34m
[0m[1;34m	threadid 22414025028352 -> hwthread 120 - OK[0m[1;34m
[0m[1;34m	threadid 22413823701888 -> hwthread 121 - OK[0m[1;34m
[0m[1;34m	threadid 22413622375424 -> hwthread 122 - OK[0m[1;34m
[0m[1;34m	threadid 22413421048960 -> hwthread 123 - OK[0m[1;34m
[0m[1;34m	threadid 22413219722496 -> hwthread 124 - OK[0m[1;34m
[0m[1;34m	threadid 22413018396032 -> hwthread 125 - OK[0m[1;34m
[0m[1;34m	threadid 22412817069568 -> hwthread 126 - OK[0m[1;34m
[0m[1;34m	threadid 22412615743104 -> hwthread 127 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22424986457856 -> hwthread 64 - OK[0m[1;34m
[0m[1;34m	threadid 22424979867392 -> hwthread 65 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 60, m: 60)                                                                 	 0.309709  	 700       	 4.55653   	 0         	 0.196365  	 23.2044   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3000, cols: 60, reductionFactor: 37, colBlockingSize: 12)                  	 0.200085  	 600       	 66.5231   	 0         	 4.40453   	 15.1033   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 60, r: 60, r2: 3000, leftOrthog: 0)        	 0.116511  	 600       	 111.234   	 0         	 22.5435   	 4.93421   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 60)                                                                 	 0.0413033 	 100       	 3.30886   	 0         	 0.165604  	 19.9805   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 60, n: 50, r: 60, r2: 60)             	 0.0356985 	 600       	 363.041   	 0         	 48.8895   	 7.42574   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 60, reductionFactor: 37, colBlockingSize: 12)                  	 0.0350637 	 100       	 52.7226   	 0         	 3.50448   	 15.0443   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                 	 0.0338659 	 100       	 3.44496   	 0         	 0.17835   	 19.3157   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3000, cols: 50, reductionFactor: 37, colBlockingSize: 12)                  	 0.0237145 	 100       	 64.962    	 0         	 5.14454   	 12.6274   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 60, Qr2: 10)       	 0.020637  	 700       	 0         	 0         	 90.9047   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3000, cols: 10, reductionFactor: 37, colBlockingSize: 12)                  	 0.0162898 	 700       	 26.4798   	 0         	 10.3476   	 2.55904   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 10, k: 2500)   	 0.0148875 	 800       	 134.341   	 0         	 64.6988   	 2.07641   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 3000, Xcols: 10, r: 10, streamingCols: 0)                   	 0.0141936 	 700       	 14.7954   	 0         	 23.6924   	 0.62448   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 3000, leftOrthog: 0)        	 0.0107279 	 100       	 139.822   	 0         	 33.9302   	 4.12088   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 60, r: 60, r2: 2500, leftOrthog: 0)        	 0.0102981 	 100       	 174.79    	 0         	 35.5174   	 4.92126   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 2500, m: 10, k: 50)	 0.00966889	 800       	 206.849   	 0         	 99.6185   	 2.07641   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 500, k: 10)  	 0.0089351 	 800       	 44.7672   	 0         	 21.8464   	 2.04918   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 10, m: 500, k: 10)  	 0.00887435	 700       	 7.8879    	 0         	 6.37343   	 1.23762   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 60, n: 50, r: 60, r2: 50)             	 0.00668432	 100       	 269.287   	 0         	 39.8545   	 6.75676   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r: 60, r2: 60)             	 0.00660221	 100       	 272.636   	 0         	 36.7877   	 7.41107   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 60, reductionFactor: 37, colBlockingSize: 12)                    	 0.00506213	 100       	 7.30383   	 0         	 1.04304   	 7.00246   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 10, n: 50, r2: 10)                   	 0.004753  	 700       	 0         	 0         	 70.6922   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 3000, m: 10)                                                                       	 0.00462964	 700       	 0         	 0         	 72.5759   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 3000, m: 10)                                                              	 0.00388918	 700       	 0         	 0         	 86.3936   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 10, m: 10)                                                                  	 0.00382507	 900       	 0.313406  	 0         	 0.583519  	 0.537097  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 10, n: 50, r2: 10)                                                                                         	 0.00315584	 800       	 0         	 0         	 20.2799   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 50, Qr2: 10)       	 0.00287256	 100       	 0         	 0         	 83.5493   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 10, reductionFactor: 37, colBlockingSize: 12)                  	 0.00265005	 100       	 19.3775   	 0         	 7.57722   	 2.55734   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 10, r: 10, streamingCols: 0)                   	 0.00187685	 100       	 13.3202   	 0         	 21.3337   	 0.624376  
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 60, r: 50, r2: 50, leftOrthog: 0)          	 0.00154619	 100       	 19.4025   	 0         	 7.2436    	 2.67857   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 0, n: 50, r2: 10)                    	 0.000917931	 100       	 0         	 0         	 43.5763   	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                   	 0.000861602	 100       	 0.580314  	 0         	 2.32126   	 0.25      
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 10, reductionFactor: 37, colBlockingSize: 12)                    	 0.000843508	 100       	 1.21757   	 0         	 0.569052  	 2.13964   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 2500, m: 10)                                                                       	 0.000840427	 100       	 0         	 0         	 47.5949   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 10)                                                                                          	 0.000765691	 200       	 0         	 0         	 2.08962   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 10)                                                              	 0.000751784	 100       	 0         	 0         	 53.2068   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 50, r2: 50)              	 0.000749751	 100       	 33.3444   	 0         	 8.00266   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 10, n: 50, r2: 1)                                                                                          	 0.000740485	 200       	 0         	 0         	 2.16075   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 50, k: 10)   	 0.000631599	 100       	 7.91642   	 0         	 4.43319   	 1.78571   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                          	 0.000568785	 100       	 0         	 0         	 7.03253   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 10, n: 50, r2: 1)                    	 0.000455361	 100       	 0         	 0         	 10.5411   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 10, k: 50)     	 0.000450521	 100       	 11.0983   	 0         	 6.21503   	 1.78571   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 1, Xr2: 50, Qr1: 1, Qr2: 0)          	 0.000444509	 100       	 0         	 0         	 8.99869   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 1, r1low: 0, n: 50, r2: 10)                     	 0.000425949	 100       	 0         	 0         	 1.87816   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                            	 0.000394988	 100       	 1.26586   	 0         	 15.1903   	 0.0833333 
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                 	 0.000390304	 100       	 0.640526  	 0         	 10.2484   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 10)                                                                	 0.000358534	 100       	 0         	 0         	 2.23131   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 10, n: 50, r2: 1)                                                                                 	 0.000334632	 100       	 0.149418  	 0         	 2.39069   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                 	 0.000329253	 100       	 0.759295  	 0         	 12.1487   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 10, m: 10, fromLeft: 0)                	 0.000227881	 800       	 0         	 0         	 5.61697   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 50, m: 10, k: 50)  	 0.000223051	 100       	 22.4164   	 0         	 12.5532   	 1.78571   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 10, m: 50, k: 10)   	 8.4052e-05	 100       	 11.8974   	 0         	 10.4697   	 1.13636   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 0, m: 500, k: 10)   	 6.64e-06  	 100       	 0         	 0         	 602.41    	 0         
Timing statistics:
function                                                                                                                                                                                      	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                        	 1.2382    	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_normalized(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                     	 1.23815   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::rightNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                            	 1.09995   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::rightNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                        	 1.09866   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double]	 1.03584   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                               	 0.384878  	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                  	 0.283709  	 1800      
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                            	 0.264555  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                	 0.139083  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_leftOrthogonalize(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&) [with T = double]                                   	 0.138135  	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]           	 0.0560032 	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                           	 0.0497348 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                                       	 0.0239541 	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.0202281 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double]        	 0.0185317 	 1800      
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                    	 0.0160704 	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double]          	 0.015338  	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double]       	 0.00989194	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                        	 0.00655224	 1000      
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                       	 0.00547007	 800       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                	 0.0052308 	 1300      
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                              	 0.0049995 	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.00382507	 900       
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                	 0.00354032	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                              	 0.00319259	 6300      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                         	 0.00111629	 5200      
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                       	 0.00105419	 300       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                         	 0.000861602	 100       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                                                  	 0.000394988	 100       
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                           	 0.000227881	 800       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
orthoX: L, orthoY: L
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 64
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->65  [0m[1;34m1->66  [0m[1;34m2->67  [0m[1;34m3->68  [0m[1;34m4->69  [0m[1;34m5->70  [0m[1;34m6->71  [0m[1;34m7->72  [0m[1;34m8->73  [0m[1;34m9->74  [0m[1;34m10->75  [0m[1;34m11->76  [0m[1;34m12->77  [0m[1;34m13->78  [0m[1;34m14->79  [0m[1;34m15->80  [0m[1;34m16->81  [0m[1;34m17->82  [0m[1;34m18->83  [0m[1;34m19->84  [0m[1;34m20->85  [0m[1;34m21->86  [0m[1;34m22->87  [0m[1;34m23->88  [0m[1;34m24->89  [0m[1;34m25->90  [0m[1;34m26->91  [0m[1;34m27->92  [0m[1;34m28->93  [0m[1;34m29->94  [0m[1;34m30->95  [0m[1;34m31->96  [0m[1;34m32->97  [0m[1;34m33->98  [0m[1;34m34->99  [0m[1;34m35->100  [0m[1;34m36->101  [0m[1;34m37->102  [0m[1;34m38->103  [0m[1;34m39->104  [0m[1;34m40->105  [0m[1;34m41->106  [0m[1;34m42->107  [0m[1;34m43->108  [0m[1;34m44->109  [0m[1;34m45->110  [0m[1;34m46->111  [0m[1;34m47->112  [0m[1;34m48->113  [0m[1;34m49->114  [0m[1;34m50->115  [0m[1;34m51->116  [0m[1;34m52->117  [0m[1;34m53->118  [0m[1;34m54->119  [0m[1;34m55->120  [0m[1;34m56->121  [0m[1;34m57->122  [0m[1;34m58->123  [0m[1;34m59->124  [0m[1;34m60->125  [0m[1;34m61->126  [0m[1;34m62->127  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23391552259968 -> hwthread 65 - OK[0m[1;34m
[0m[1;34m	threadid 23391331411968 -> hwthread 66 - OK[0m[1;34m
[0m[1;34m	threadid 23391130085504 -> hwthread 67 - OK[0m[1;34m
[0m[1;34m	threadid 23390928759040 -> hwthread 68 - OK[0m[1;34m
[0m[1;34m	threadid 23390727432576 -> hwthread 69 - OK[0m[1;34m
[0m[1;34m	threadid 23390526106112 -> hwthread 70 - OK[0m[1;34m
[0m[1;34m	threadid 23390324779648 -> hwthread 71 - OK[0m[1;34m
[0m[1;34m	threadid 23390123453184 -> hwthread 72 - OK[0m[1;34m
[0m[1;34m	threadid 23389922126720 -> hwthread 73 - OK[0m[1;34m
[0m[1;34m	threadid 23389720800256 -> hwthread 74 - OK[0m[1;34m
[0m[1;34m	threadid 23389519473792 -> hwthread 75 - OK[0m[1;34m
[0m[1;34m	threadid 23389318147328 -> hwthread 76 - OK[0m[1;34m
[0m[1;34m	threadid 23389116820864 -> hwthread 77 - OK[0m[1;34m
[0m[1;34m	threadid 23388915494400 -> hwthread 78 - OK[0m[1;34m
[0m[1;34m	threadid 23388714167936 -> hwthread 79 - OK[0m[1;34m
[0m[1;34m	threadid 23388512841472 -> hwthread 80 - OK[0m[1;34m
[0m[1;34m	threadid 23388311515008 -> hwthread 81 - OK[0m[1;34m
[0m[1;34m	threadid 23388110188544 -> hwthread 82 - OK[0m[1;34m
[0m[1;34m	threadid 23387908862080 -> hwthread 83 - OK[0m[1;34m
[0m[1;34m	threadid 23387707535616 -> hwthread 84 - OK[0m[1;34m
[0m[1;34m	threadid 23387506209152 -> hwthread 85 - OK[0m[1;34m
[0m[1;34m	threadid 23387304882688 -> hwthread 86 - OK[0m[1;34m
[0m[1;34m	threadid 23387103556224 -> hwthread 87 - OK[0m[1;34m
[0m[1;34m	threadid 23386902229760 -> hwthread 88 - OK[0m[1;34m
[0m[1;34m	threadid 23386700903296 -> hwthread 89 - OK[0m[1;34m
[0m[1;34m	threadid 23386499576832 -> hwthread 90 - OK[0m[1;34m
[0m[1;34m	threadid 23386298250368 -> hwthread 91 - OK[0m[1;34m
[0m[1;34m	threadid 23386096923904 -> hwthread 92 - OK[0m[1;34m
[0m[1;34m	threadid 23385895597440 -> hwthread 93 - OK[0m[1;34m
[0m[1;34m	threadid 23385694270976 -> hwthread 94 - OK[0m[1;34m
[0m[1;34m	threadid 23385492944512 -> hwthread 95 - OK[0m[1;34m
[0m[1;34m	threadid 23385291618048 -> hwthread 96 - OK[0m[1;34m
[0m[1;34m	threadid 23385090287488 -> hwthread 97 - OK[0m[1;34m
[0m[1;34m	threadid 23384888961024 -> hwthread 98 - OK[0m[1;34m
[0m[1;34m	threadid 23384687634560 -> hwthread 99 - OK[0m[1;34m
[0m[1;34m	threadid 23384486308096 -> hwthread 100 - OK[0m[1;34m
[0m[1;34m	threadid 23384284981632 -> hwthread 101 - OK[0m[1;34m
[0m[1;34m	threadid 23384083655168 -> hwthread 102 - OK[0m[1;34m
[0m[1;34m	threadid 23383882328704 -> hwthread 103 - OK[0m[1;34m
[0m[1;34m	threadid 23383681002240 -> hwthread 104 - OK[0m[1;34m
[0m[1;34m	threadid 23383479675776 -> hwthread 105 - OK[0m[1;34m
[0m[1;34m	threadid 23383278349312 -> hwthread 106 - OK[0m[1;34m
[0m[1;34m	threadid 23383077022848 -> hwthread 107 - OK[0m[1;34m
[0m[1;34m	threadid 23382875696384 -> hwthread 108 - OK[0m[1;34m
[0m[1;34m	threadid 23382674369920 -> hwthread 109 - OK[0m[1;34m
[0m[1;34m	threadid 23382473043456 -> hwthread 110 - OK[0m[1;34m
[0m[1;34m	threadid 23382271716992 -> hwthread 111 - OK[0m[1;34m
[0m[1;34m	threadid 23382070390528 -> hwthread 112 - OK[0m[1;34m
[0m[1;34m	threadid 23381869064064 -> hwthread 113 - OK[0m[1;34m
[0m[1;34m	threadid 23381667737600 -> hwthread 114 - OK[0m[1;34m
[0m[1;34m	threadid 23381466411136 -> hwthread 115 - OK[0m[1;34m
[0m[1;34m	threadid 23381265084672 -> hwthread 116 - OK[0m[1;34m
[0m[1;34m	threadid 23381063758208 -> hwthread 117 - OK[0m[1;34m
[0m[1;34m	threadid 23380862431744 -> hwthread 118 - OK[0m[1;34m
[0m[1;34m	threadid 23380661105280 -> hwthread 119 - OK[0m[1;34m
[0m[1;34m	threadid 23380459778816 -> hwthread 120 - OK[0m[1;34m
[0m[1;34m	threadid 23380258452352 -> hwthread 121 - OK[0m[1;34m
[0m[1;34m	threadid 23380057125888 -> hwthread 122 - OK[0m[1;34m
[0m[1;34m	threadid 23379855799424 -> hwthread 123 - OK[0m[1;34m
[0m[1;34m	threadid 23379654472960 -> hwthread 124 - OK[0m[1;34m
[0m[1;34m	threadid 23379453146496 -> hwthread 125 - OK[0m[1;34m
[0m[1;34m	threadid 23379251820032 -> hwthread 126 - OK[0m[1;34m
[0m[1;34m	threadid 23379050493568 -> hwthread 127 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23391446599424 -> hwthread 64 - OK[0m[1;34m
[0m[1;34m	threadid 23391440008960 -> hwthread 65 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 61, m: 61)                                                                 	 0.330243  	 700       	 4.49045   	 0         	 0.190327  	 23.5933   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3050, cols: 61, reductionFactor: 37, colBlockingSize: 12)                  	 0.205765  	 600       	 67.9754   	 0         	 4.42691   	 15.3551   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 61, r: 61, r2: 3050, leftOrthog: 0)        	 0.103106  	 600       	 132.087   	 0         	 26.3307   	 5.01645   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 11, k: 2500)   	 0.052488  	 800       	 41.9143   	 0         	 18.6618   	 2.246     
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 61)                                                                 	 0.0401734 	 100       	 3.4517    	 0         	 0.172253  	 20.0385   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 61, n: 50, r: 61, r2: 61)             	 0.0372775 	 600       	 365.337   	 0         	 48.3922   	 7.5495    
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 61, reductionFactor: 37, colBlockingSize: 12)                  	 0.0370305 	 100       	 51.6003   	 0         	 3.37497   	 15.2891   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                 	 0.0349544 	 100       	 3.33768   	 0         	 0.172796  	 19.3157   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 11, m: 550, k: 11)  	 0.0281024 	 700       	 3.31538   	 0         	 2.4353    	 1.36139   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3050, cols: 50, reductionFactor: 37, colBlockingSize: 12)                  	 0.0235832 	 100       	 66.4123   	 0         	 5.25797   	 12.6308   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 61, Qr2: 11)       	 0.0219445 	 700       	 0         	 0         	 87.9384   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3050, cols: 11, reductionFactor: 37, colBlockingSize: 12)                  	 0.0187019 	 700       	 28.3732   	 0         	 10.0823   	 2.81417   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 3050, Xcols: 11, r: 11, streamingCols: 0)                   	 0.0148542 	 700       	 17.3914   	 0         	 25.3193   	 0.686881  
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 3050, leftOrthog: 0)        	 0.0106557 	 100       	 143.115   	 0         	 34.7231   	 4.12162   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 2500, m: 11, k: 50)	 0.00993268	 800       	 221.491   	 0         	 98.6159   	 2.246     
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 61, r: 61, r2: 2500, leftOrthog: 0)        	 0.00947148	 100       	 196.432   	 0         	 39.2709   	 5.00197   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r: 61, r2: 61)             	 0.00643018	 100       	 289.339   	 0         	 38.409    	 7.5331    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 61, n: 50, r: 61, r2: 50)             	 0.00617082	 100       	 301.5     	 0         	 44.2859   	 6.80804   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 550, k: 11)  	 0.00608919	 800       	 79.4852   	 0         	 35.8406   	 2.21774   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 3050, m: 11)                                                                       	 0.00557332	 700       	 0         	 0         	 67.4212   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 11, n: 50, r2: 11)                   	 0.00516647	 700       	 0         	 0         	 72.7305   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 61, reductionFactor: 37, colBlockingSize: 12)                    	 0.00506958	 100       	 7.53823   	 0         	 1.06849   	 7.05503   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 11, m: 11)                                                                  	 0.0047776 	 900       	 0.334184  	 0         	 0.56363   	 0.592914  
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 3050, m: 11)                                                              	 0.00430406	 700       	 0         	 0         	 87.3037   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 11, n: 50, r2: 11)                                                                                         	 0.00329022	 800       	 0         	 0         	 23.5364   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 11, reductionFactor: 37, colBlockingSize: 12)                  	 0.00279401	 100       	 22.2387   	 0         	 7.90863   	 2.81195   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 50, Qr2: 11)       	 0.00275365	 100       	 0         	 0         	 88.6095   	 0         
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 11, r: 11, streamingCols: 0)                   	 0.00198375	 100       	 15.2489   	 0         	 22.2046   	 0.686745  
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 61, r: 50, r2: 50, leftOrthog: 0)          	 0.00161075	 100       	 18.9352   	 0         	 7.02776   	 2.69435   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 0, n: 50, r2: 11)                    	 0.00105719	 100       	 0         	 0         	 41.6198   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 2500, m: 11)                                                                       	 0.0010087 	 100       	 0         	 0         	 43.6205   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 11, reductionFactor: 37, colBlockingSize: 12)                    	 0.000902034	 100       	 1.37767   	 0         	 0.5951    	 2.31502   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 11)                                                              	 0.00085513	 100       	 0         	 0         	 51.4542   	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                   	 0.000820202	 100       	 0.609606  	 0         	 2.43842   	 0.25      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 11)                                                                                          	 0.000774172	 200       	 0         	 0         	 2.2734    	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 50, r2: 50)              	 0.000733779	 100       	 34.0702   	 0         	 8.17685   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 11, n: 50, r2: 1)                                                                                          	 0.000723558	 200       	 0         	 0         	 2.43242   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 50, k: 11)   	 0.000664726	 100       	 8.27409   	 0         	 4.33261   	 1.90972   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 11, k: 50)     	 0.000540645	 100       	 10.173    	 0         	 5.32697   	 1.90972   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                          	 0.000535993	 100       	 0         	 0         	 7.46278   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 11, n: 50, r2: 1)                    	 0.000456487	 100       	 0         	 0         	 10.6903   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 1, r1low: 0, n: 50, r2: 11)                     	 0.000447452	 100       	 0         	 0         	 1.96669   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 1, Xr2: 50, Qr1: 1, Qr2: 0)          	 0.000427904	 100       	 0         	 0         	 9.34789   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                            	 0.000388322	 100       	 1.28759   	 0         	 15.4511   	 0.0833333 
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                 	 0.000386843	 100       	 0.646257  	 0         	 10.3401   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 11)                                                                	 0.000357843	 100       	 0         	 0         	 2.45918   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 11, n: 50, r2: 1)                                                                                 	 0.00033817	 100       	 0.16264   	 0         	 2.60224   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                 	 0.000324033	 100       	 0.771526  	 0         	 12.3444   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 11, m: 11, fromLeft: 0)                	 0.000302237	 800       	 0         	 0         	 5.12446   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 50, m: 11, k: 50)  	 0.000204175	 100       	 26.9377   	 0         	 14.1055   	 1.90972   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 11, m: 50, k: 11)   	 9.0593e-05	 100       	 13.3564   	 0         	 10.7823   	 1.23874   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 0, m: 550, k: 11)   	 6.77e-06  	 100       	 0         	 0         	 714.919   	 0         
Timing statistics:
function                                                                                                                                                                                      	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                        	 1.34661   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_normalized(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                     	 1.34655   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::rightNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                            	 1.14619   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::rightNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                        	 1.14494   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double]	 1.08256   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                               	 0.405371  	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                  	 0.293846  	 1800      
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                            	 0.272036  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_leftOrthogonalize(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&) [with T = double]                                   	 0.200295  	 100       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                	 0.124843  	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]           	 0.0620795 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double]          	 0.0530287 	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                           	 0.0506123 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double]        	 0.0349536 	 1800      
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                                       	 0.025126  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.0228271 	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                    	 0.016838  	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double]       	 0.0101369 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                        	 0.0071276 	 1000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                	 0.00679469	 1800      
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                       	 0.00658202	 800       
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                              	 0.00551703	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                	 0.00532394	 1300      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.0047776 	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                              	 0.00278953	 6300      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                         	 0.00108649	 5200      
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                       	 0.00104905	 300       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                         	 0.000820202	 100       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                                                  	 0.000388322	 100       
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                           	 0.000302237	 800       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
orthoX: L, orthoY: L
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 64
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->65  [0m[1;34m1->66  [0m[1;34m2->67  [0m[1;34m3->68  [0m[1;34m4->69  [0m[1;34m5->70  [0m[1;34m6->71  [0m[1;34m7->72  [0m[1;34m8->73  [0m[1;34m9->74  [0m[1;34m10->75  [0m[1;34m11->76  [0m[1;34m12->77  [0m[1;34m13->78  [0m[1;34m14->79  [0m[1;34m15->80  [0m[1;34m16->81  [0m[1;34m17->82  [0m[1;34m18->83  [0m[1;34m19->84  [0m[1;34m20->85  [0m[1;34m21->86  [0m[1;34m22->87  [0m[1;34m23->88  [0m[1;34m24->89  [0m[1;34m25->90  [0m[1;34m26->91  [0m[1;34m27->92  [0m[1;34m28->93  [0m[1;34m29->94  [0m[1;34m30->95  [0m[1;34m31->96  [0m[1;34m32->97  [0m[1;34m33->98  [0m[1;34m34->99  [0m[1;34m35->100  [0m[1;34m36->101  [0m[1;34m37->102  [0m[1;34m38->103  [0m[1;34m39->104  [0m[1;34m40->105  [0m[1;34m41->106  [0m[1;34m42->107  [0m[1;34m43->108  [0m[1;34m44->109  [0m[1;34m45->110  [0m[1;34m46->111  [0m[1;34m47->112  [0m[1;34m48->113  [0m[1;34m49->114  [0m[1;34m50->115  [0m[1;34m51->116  [0m[1;34m52->117  [0m[1;34m53->118  [0m[1;34m54->119  [0m[1;34m55->120  [0m[1;34m56->121  [0m[1;34m57->122  [0m[1;34m58->123  [0m[1;34m59->124  [0m[1;34m60->125  [0m[1;34m61->126  [0m[1;34m62->127  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22807384295296 -> hwthread 65 - OK[0m[1;34m
[0m[1;34m	threadid 22807148750848 -> hwthread 66 - OK[0m[1;34m
[0m[1;34m	threadid 22806947424384 -> hwthread 67 - OK[0m[1;34m
[0m[1;34m	threadid 22806746097920 -> hwthread 68 - OK[0m[1;34m
[0m[1;34m	threadid 22806544771456 -> hwthread 69 - OK[0m[1;34m
[0m[1;34m	threadid 22806343444992 -> hwthread 70 - OK[0m[1;34m
[0m[1;34m	threadid 22806142118528 -> hwthread 71 - OK[0m[1;34m
[0m[1;34m	threadid 22805940792064 -> hwthread 72 - OK[0m[1;34m
[0m[1;34m	threadid 22805739465600 -> hwthread 73 - OK[0m[1;34m
[0m[1;34m	threadid 22805538139136 -> hwthread 74 - OK[0m[1;34m
[0m[1;34m	threadid 22805336812672 -> hwthread 75 - OK[0m[1;34m
[0m[1;34m	threadid 22805135486208 -> hwthread 76 - OK[0m[1;34m
[0m[1;34m	threadid 22804934159744 -> hwthread 77 - OK[0m[1;34m
[0m[1;34m	threadid 22804732833280 -> hwthread 78 - OK[0m[1;34m
[0m[1;34m	threadid 22804531506816 -> hwthread 79 - OK[0m[1;34m
[0m[1;34m	threadid 22804330180352 -> hwthread 80 - OK[0m[1;34m
[0m[1;34m	threadid 22804128853888 -> hwthread 81 - OK[0m[1;34m
[0m[1;34m	threadid 22803927527424 -> hwthread 82 - OK[0m[1;34m
[0m[1;34m	threadid 22803726200960 -> hwthread 83 - OK[0m[1;34m
[0m[1;34m	threadid 22803524874496 -> hwthread 84 - OK[0m[1;34m
[0m[1;34m	threadid 22803323548032 -> hwthread 85 - OK[0m[1;34m
[0m[1;34m	threadid 22803122221568 -> hwthread 86 - OK[0m[1;34m
[0m[1;34m	threadid 22802920895104 -> hwthread 87 - OK[0m[1;34m
[0m[1;34m	threadid 22802719568640 -> hwthread 88 - OK[0m[1;34m
[0m[1;34m	threadid 22802518242176 -> hwthread 89 - OK[0m[1;34m
[0m[1;34m	threadid 22802316915712 -> hwthread 90 - OK[0m[1;34m
[0m[1;34m	threadid 22802115589248 -> hwthread 91 - OK[0m[1;34m
[0m[1;34m	threadid 22801914262784 -> hwthread 92 - OK[0m[1;34m
[0m[1;34m	threadid 22801712936320 -> hwthread 93 - OK[0m[1;34m
[0m[1;34m	threadid 22801511609856 -> hwthread 94 - OK[0m[1;34m
[0m[1;34m	threadid 22801310283392 -> hwthread 95 - OK[0m[1;34m
[0m[1;34m	threadid 22801108956928 -> hwthread 96 - OK[0m[1;34m
[0m[1;34m	threadid 22800907626368 -> hwthread 97 - OK[0m[1;34m
[0m[1;34m	threadid 22800706299904 -> hwthread 98 - OK[0m[1;34m
[0m[1;34m	threadid 22800504973440 -> hwthread 99 - OK[0m[1;34m
[0m[1;34m	threadid 22800303646976 -> hwthread 100 - OK[0m[1;34m
[0m[1;34m	threadid 22800102320512 -> hwthread 101 - OK[0m[1;34m
[0m[1;34m	threadid 22799900994048 -> hwthread 102 - OK[0m[1;34m
[0m[1;34m	threadid 22799699667584 -> hwthread 103 - OK[0m[1;34m
[0m[1;34m	threadid 22799498341120 -> hwthread 104 - OK[0m[1;34m
[0m[1;34m	threadid 22799297014656 -> hwthread 105 - OK[0m[1;34m
[0m[1;34m	threadid 22799095688192 -> hwthread 106 - OK[0m[1;34m
[0m[1;34m	threadid 22798894361728 -> hwthread 107 - OK[0m[1;34m
[0m[1;34m	threadid 22798693035264 -> hwthread 108 - OK[0m[1;34m
[0m[1;34m	threadid 22798491708800 -> hwthread 109 - OK[0m[1;34m
[0m[1;34m	threadid 22798290382336 -> hwthread 110 - OK[0m[1;34m
[0m[1;34m	threadid 22798089055872 -> hwthread 111 - OK[0m[1;34m
[0m[1;34m	threadid 22797887729408 -> hwthread 112 - OK[0m[1;34m
[0m[1;34m	threadid 22797686402944 -> hwthread 113 - OK[0m[1;34m
[0m[1;34m	threadid 22797485076480 -> hwthread 114 - OK[0m[1;34m
[0m[1;34m	threadid 22797283750016 -> hwthread 115 - OK[0m[1;34m
[0m[1;34m	threadid 22797082423552 -> hwthread 116 - OK[0m[1;34m
[0m[1;34m	threadid 22796881097088 -> hwthread 117 - OK[0m[1;34m
[0m[1;34m	threadid 22796679770624 -> hwthread 118 - OK[0m[1;34m
[0m[1;34m	threadid 22796478444160 -> hwthread 119 - OK[0m[1;34m
[0m[1;34m	threadid 22796277117696 -> hwthread 120 - OK[0m[1;34m
[0m[1;34m	threadid 22796075791232 -> hwthread 121 - OK[0m[1;34m
[0m[1;34m	threadid 22795874464768 -> hwthread 122 - OK[0m[1;34m
[0m[1;34m	threadid 22795673138304 -> hwthread 123 - OK[0m[1;34m
[0m[1;34m	threadid 22795471811840 -> hwthread 124 - OK[0m[1;34m
[0m[1;34m	threadid 22795270485376 -> hwthread 125 - OK[0m[1;34m
[0m[1;34m	threadid 22795069158912 -> hwthread 126 - OK[0m[1;34m
[0m[1;34m	threadid 22794867832448 -> hwthread 127 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22807278634752 -> hwthread 64 - OK[0m[1;34m
[0m[1;34m	threadid 22807272044288 -> hwthread 65 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 62, m: 62)                                                                 	 0.325553  	 700       	 4.78286   	 0         	 0.199434  	 23.9822   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3100, cols: 62, reductionFactor: 37, colBlockingSize: 12)                  	 0.209777  	 600       	 70.0086   	 0         	 4.48578   	 15.6068   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 62, r: 62, r2: 3100, leftOrthog: 0)        	 0.106556  	 600       	 134.199   	 0         	 26.3204   	 5.09868   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 62)                                                                 	 0.0389552 	 100       	 3.61098   	 0         	 0.179693  	 20.0952   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 62, reductionFactor: 37, colBlockingSize: 12)                  	 0.0367846 	 100       	 53.6622   	 0         	 3.45457   	 15.5337   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 62, n: 50, r: 62, r2: 62)             	 0.0347823 	 600       	 411.12    	 0         	 53.5782   	 7.67327   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                 	 0.0343756 	 100       	 3.39388   	 0         	 0.175706  	 19.3157   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 62, Qr2: 12)       	 0.0235981 	 700       	 0         	 0         	 84.1015   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3100, cols: 50, reductionFactor: 37, colBlockingSize: 12)                  	 0.0232511 	 100       	 68.4651   	 0         	 5.41909   	 12.6341   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3100, cols: 12, reductionFactor: 37, colBlockingSize: 12)                  	 0.0201514 	 700       	 31.8514   	 0         	 10.3777   	 3.0692    
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 3100, Xcols: 12, r: 12, streamingCols: 0)                   	 0.0161888 	 700       	 19.3022   	 0         	 25.7612   	 0.749275  
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 12, k: 2500)   	 0.0157679 	 800       	 152.208   	 0         	 63.1561   	 2.41003   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 3100, leftOrthog: 0)        	 0.011311  	 100       	 137.034   	 0         	 33.2418   	 4.12234   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 62, r: 62, r2: 2500, leftOrthog: 0)        	 0.0107483 	 100       	 178.819   	 0         	 35.1823   	 5.08263   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 2500, m: 12, k: 50)	 0.00982313	 800       	 244.321   	 0         	 101.377   	 2.41003   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 12, m: 600, k: 12)  	 0.00646961	 700       	 18.6966   	 0         	 12.5891   	 1.48515   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 600, k: 12)  	 0.00635572	 800       	 90.627    	 0         	 38.0634   	 2.38095   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 62, n: 50, r: 62, r2: 50)             	 0.0062918 	 100       	 305.477   	 0         	 44.5405   	 6.85841   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 3100, m: 12)                                                                       	 0.00557295	 700       	 0         	 0         	 74.7611   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 12, n: 50, r2: 12)                   	 0.00540479	 700       	 0         	 0         	 77.0871   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r: 62, r2: 62)             	 0.0051939 	 100       	 370.049   	 0         	 48.3404   	 7.65508   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 62, reductionFactor: 37, colBlockingSize: 12)                    	 0.00500496	 100       	 7.88796   	 0         	 1.10994   	 7.10666   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 12, m: 12)                                                                  	 0.00493313	 900       	 0.420342  	 0         	 0.648027  	 0.648649  
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 3100, m: 12)                                                              	 0.00437764	 700       	 0         	 0         	 95.1746   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 12, n: 50, r2: 12)                                                                                         	 0.00351768	 800       	 0         	 0         	 26.199    	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 12, reductionFactor: 37, colBlockingSize: 12)                  	 0.00312501	 100       	 23.6627   	 0         	 7.71685   	 3.06636   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 50, Qr2: 12)       	 0.00273149	 100       	 0         	 0         	 90.793    	 0         
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 12, r: 12, streamingCols: 0)                   	 0.00222916	 100       	 16.1496   	 0         	 21.5586   	 0.749101  
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 62, r: 50, r2: 50, leftOrthog: 0)          	 0.00161425	 100       	 19.204    	 0         	 7.0869    	 2.70979   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 0, n: 50, r2: 12)                    	 0.00107798	 100       	 0         	 0         	 44.5279   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 2500, m: 12)                                                                       	 0.00102661	 100       	 0         	 0         	 46.756    	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 12, reductionFactor: 37, colBlockingSize: 12)                    	 0.000927061	 100       	 1.59528   	 0         	 0.642029  	 2.48474   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 12)                                                              	 0.000867904	 100       	 0         	 0         	 55.3057   	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                   	 0.00084206	 100       	 0.593782  	 0         	 2.37513   	 0.25      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 12)                                                                                          	 0.000806003	 200       	 0         	 0         	 2.38213   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 12, n: 50, r2: 1)                                                                                          	 0.000759638	 200       	 0         	 0         	 2.52752   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 50, r2: 50)              	 0.000733575	 100       	 34.0797   	 0         	 8.17912   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                          	 0.000555247	 100       	 0         	 0         	 7.204     	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 50, k: 12)   	 0.000496321	 100       	 12.089    	 0         	 5.96388   	 2.02703   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 12, k: 50)     	 0.000484717	 100       	 12.3784   	 0         	 6.10666   	 2.02703   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 1, Xr2: 50, Qr1: 1, Qr2: 0)          	 0.000474803	 100       	 0         	 0         	 8.42455   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 12, n: 50, r2: 1)                    	 0.000452637	 100       	 0         	 0         	 10.958    	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                            	 0.000422623	 100       	 1.18309   	 0         	 14.1971   	 0.0833333 
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 1, r1low: 0, n: 50, r2: 12)                     	 0.000414102	 100       	 0         	 0         	 2.31827   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                 	 0.000393513	 100       	 0.635303  	 0         	 10.1648   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 12)                                                                	 0.000370692	 100       	 0         	 0         	 2.58975   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 12, n: 50, r2: 1)                                                                                 	 0.000334779	 100       	 0.179223  	 0         	 2.86756   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                 	 0.00033058	 100       	 0.756247  	 0         	 12.0999   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 50, m: 12, k: 50)  	 0.000233839	 100       	 25.6587   	 0         	 12.6583   	 2.02703   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 12, m: 12, fromLeft: 0)                	 0.000182822	 800       	 0         	 0         	 10.0819   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 12, m: 50, k: 12)   	 0.000105295	 100       	 13.6759   	 0         	 10.2113   	 1.33929   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 0, m: 600, k: 12)   	 6.202e-06 	 100       	 0         	 0         	 928.733   	 0         
Timing statistics:
function                                                                                                                                                                                      	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                        	 1.27876   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_normalized(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                     	 1.27871   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::rightNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                            	 1.13231   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::rightNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                        	 1.13105   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double]	 1.06926   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                               	 0.398884  	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                  	 0.299021  	 1800      
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                            	 0.275395  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_leftOrthogonalize(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&) [with T = double]                                   	 0.146326  	 100       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                	 0.130229  	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]           	 0.0656265 	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                           	 0.0470016 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                                       	 0.0268044 	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.0246361 	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                    	 0.018418  	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double]          	 0.0162526 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double]        	 0.0134331 	 1800      
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double]       	 0.010057  	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                        	 0.00734951	 1000      
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                       	 0.00659956	 800       
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                	 0.00653015	 1800      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                	 0.00563857	 1300      
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                              	 0.00561623	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.00493313	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                              	 0.00306214	 6300      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                         	 0.00112105	 5200      
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                       	 0.00105887	 300       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                         	 0.00084206	 100       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                                                  	 0.000422623	 100       
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                           	 0.000182822	 800       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
orthoX: L, orthoY: L
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 64
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->65  [0m[1;34m1->66  [0m[1;34m2->67  [0m[1;34m3->68  [0m[1;34m4->69  [0m[1;34m5->70  [0m[1;34m6->71  [0m[1;34m7->72  [0m[1;34m8->73  [0m[1;34m9->74  [0m[1;34m10->75  [0m[1;34m11->76  [0m[1;34m12->77  [0m[1;34m13->78  [0m[1;34m14->79  [0m[1;34m15->80  [0m[1;34m16->81  [0m[1;34m17->82  [0m[1;34m18->83  [0m[1;34m19->84  [0m[1;34m20->85  [0m[1;34m21->86  [0m[1;34m22->87  [0m[1;34m23->88  [0m[1;34m24->89  [0m[1;34m25->90  [0m[1;34m26->91  [0m[1;34m27->92  [0m[1;34m28->93  [0m[1;34m29->94  [0m[1;34m30->95  [0m[1;34m31->96  [0m[1;34m32->97  [0m[1;34m33->98  [0m[1;34m34->99  [0m[1;34m35->100  [0m[1;34m36->101  [0m[1;34m37->102  [0m[1;34m38->103  [0m[1;34m39->104  [0m[1;34m40->105  [0m[1;34m41->106  [0m[1;34m42->107  [0m[1;34m43->108  [0m[1;34m44->109  [0m[1;34m45->110  [0m[1;34m46->111  [0m[1;34m47->112  [0m[1;34m48->113  [0m[1;34m49->114  [0m[1;34m50->115  [0m[1;34m51->116  [0m[1;34m52->117  [0m[1;34m53->118  [0m[1;34m54->119  [0m[1;34m55->120  [0m[1;34m56->121  [0m[1;34m57->122  [0m[1;34m58->123  [0m[1;34m59->124  [0m[1;34m60->125  [0m[1;34m61->126  [0m[1;34m62->127  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23428561713024 -> hwthread 65 - OK[0m[1;34m
[0m[1;34m	threadid 23428375504896 -> hwthread 66 - OK[0m[1;34m
[0m[1;34m	threadid 23428174178432 -> hwthread 67 - OK[0m[1;34m
[0m[1;34m	threadid 23427972851968 -> hwthread 68 - OK[0m[1;34m
[0m[1;34m	threadid 23427771525504 -> hwthread 69 - OK[0m[1;34m
[0m[1;34m	threadid 23427570199040 -> hwthread 70 - OK[0m[1;34m
[0m[1;34m	threadid 23427368872576 -> hwthread 71 - OK[0m[1;34m
[0m[1;34m	threadid 23427167546112 -> hwthread 72 - OK[0m[1;34m
[0m[1;34m	threadid 23426966219648 -> hwthread 73 - OK[0m[1;34m
[0m[1;34m	threadid 23426764893184 -> hwthread 74 - OK[0m[1;34m
[0m[1;34m	threadid 23426563566720 -> hwthread 75 - OK[0m[1;34m
[0m[1;34m	threadid 23426362240256 -> hwthread 76 - OK[0m[1;34m
[0m[1;34m	threadid 23426160913792 -> hwthread 77 - OK[0m[1;34m
[0m[1;34m	threadid 23425959587328 -> hwthread 78 - OK[0m[1;34m
[0m[1;34m	threadid 23425758260864 -> hwthread 79 - OK[0m[1;34m
[0m[1;34m	threadid 23425556934400 -> hwthread 80 - OK[0m[1;34m
[0m[1;34m	threadid 23425355607936 -> hwthread 81 - OK[0m[1;34m
[0m[1;34m	threadid 23425154281472 -> hwthread 82 - OK[0m[1;34m
[0m[1;34m	threadid 23424952955008 -> hwthread 83 - OK[0m[1;34m
[0m[1;34m	threadid 23424751628544 -> hwthread 84 - OK[0m[1;34m
[0m[1;34m	threadid 23424550302080 -> hwthread 85 - OK[0m[1;34m
[0m[1;34m	threadid 23424348975616 -> hwthread 86 - OK[0m[1;34m
[0m[1;34m	threadid 23424147649152 -> hwthread 87 - OK[0m[1;34m
[0m[1;34m	threadid 23423946322688 -> hwthread 88 - OK[0m[1;34m
[0m[1;34m	threadid 23423744996224 -> hwthread 89 - OK[0m[1;34m
[0m[1;34m	threadid 23423543669760 -> hwthread 90 - OK[0m[1;34m
[0m[1;34m	threadid 23423342343296 -> hwthread 91 - OK[0m[1;34m
[0m[1;34m	threadid 23423141016832 -> hwthread 92 - OK[0m[1;34m
[0m[1;34m	threadid 23422939690368 -> hwthread 93 - OK[0m[1;34m
[0m[1;34m	threadid 23422738363904 -> hwthread 94 - OK[0m[1;34m
[0m[1;34m	threadid 23422537037440 -> hwthread 95 - OK[0m[1;34m
[0m[1;34m	threadid 23422335710976 -> hwthread 96 - OK[0m[1;34m
[0m[1;34m	threadid 23422134380416 -> hwthread 97 - OK[0m[1;34m
[0m[1;34m	threadid 23421933053952 -> hwthread 98 - OK[0m[1;34m
[0m[1;34m	threadid 23421731727488 -> hwthread 99 - OK[0m[1;34m
[0m[1;34m	threadid 23421530401024 -> hwthread 100 - OK[0m[1;34m
[0m[1;34m	threadid 23421329074560 -> hwthread 101 - OK[0m[1;34m
[0m[1;34m	threadid 23421127748096 -> hwthread 102 - OK[0m[1;34m
[0m[1;34m	threadid 23420926421632 -> hwthread 103 - OK[0m[1;34m
[0m[1;34m	threadid 23420725095168 -> hwthread 104 - OK[0m[1;34m
[0m[1;34m	threadid 23420523768704 -> hwthread 105 - OK[0m[1;34m
[0m[1;34m	threadid 23420322442240 -> hwthread 106 - OK[0m[1;34m
[0m[1;34m	threadid 23420121115776 -> hwthread 107 - OK[0m[1;34m
[0m[1;34m	threadid 23419919789312 -> hwthread 108 - OK[0m[1;34m
[0m[1;34m	threadid 23419718462848 -> hwthread 109 - OK[0m[1;34m
[0m[1;34m	threadid 23419517136384 -> hwthread 110 - OK[0m[1;34m
[0m[1;34m	threadid 23419315809920 -> hwthread 111 - OK[0m[1;34m
[0m[1;34m	threadid 23419114483456 -> hwthread 112 - OK[0m[1;34m
[0m[1;34m	threadid 23418913156992 -> hwthread 113 - OK[0m[1;34m
[0m[1;34m	threadid 23418711830528 -> hwthread 114 - OK[0m[1;34m
[0m[1;34m	threadid 23418510504064 -> hwthread 115 - OK[0m[1;34m
[0m[1;34m	threadid 23418309177600 -> hwthread 116 - OK[0m[1;34m
[0m[1;34m	threadid 23418107851136 -> hwthread 117 - OK[0m[1;34m
[0m[1;34m	threadid 23417906524672 -> hwthread 118 - OK[0m[1;34m
[0m[1;34m	threadid 23417705198208 -> hwthread 119 - OK[0m[1;34m
[0m[1;34m	threadid 23417503871744 -> hwthread 120 - OK[0m[1;34m
[0m[1;34m	threadid 23417302545280 -> hwthread 121 - OK[0m[1;34m
[0m[1;34m	threadid 23417101218816 -> hwthread 122 - OK[0m[1;34m
[0m[1;34m	threadid 23416899892352 -> hwthread 123 - OK[0m[1;34m
[0m[1;34m	threadid 23416698565888 -> hwthread 124 - OK[0m[1;34m
[0m[1;34m	threadid 23416497239424 -> hwthread 125 - OK[0m[1;34m
[0m[1;34m	threadid 23416295912960 -> hwthread 126 - OK[0m[1;34m
[0m[1;34m	threadid 23416094586496 -> hwthread 127 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23428456052480 -> hwthread 64 - OK[0m[1;34m
[0m[1;34m	threadid 23428449462016 -> hwthread 65 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 63, m: 63)                                                                 	 0.339351  	 700       	 4.81401   	 0         	 0.19753   	 24.3711   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3150, cols: 63, reductionFactor: 37, colBlockingSize: 12)                  	 0.213252  	 600       	 72.2541   	 0         	 4.55618   	 15.8585   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 63, r: 63, r2: 3150, leftOrthog: 0)        	 0.10668   	 600       	 140.634   	 0         	 27.1446   	 5.18092   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 63)                                                                 	 0.038782  	 100       	 3.67869   	 0         	 0.182559  	 20.1507   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 63, reductionFactor: 37, colBlockingSize: 12)                  	 0.0379003 	 100       	 53.7763   	 0         	 3.40829   	 15.7781   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 63, n: 50, r: 63, r2: 63)             	 0.0364906 	 600       	 411.143   	 0         	 52.7307   	 7.79703   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                 	 0.0355545 	 100       	 3.28135   	 0         	 0.16988   	 19.3157   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 63, Qr2: 13)       	 0.0244676 	 700       	 0         	 0         	 83.4018   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3150, cols: 50, reductionFactor: 37, colBlockingSize: 12)                  	 0.0232941 	 100       	 69.4411   	 0         	 5.49496   	 12.6372   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3150, cols: 13, reductionFactor: 37, colBlockingSize: 12)                  	 0.0218058 	 700       	 35.1022   	 0         	 10.5599   	 3.32412   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 3150, Xcols: 13, r: 13, streamingCols: 0)                   	 0.017163  	 700       	 21.7121   	 0         	 26.7502   	 0.811663  
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 13, k: 2500)   	 0.0164553 	 800       	 158.004   	 0         	 61.5096   	 2.56876   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 3150, leftOrthog: 0)        	 0.0110397 	 100       	 142.667   	 0         	 34.6023   	 4.12304   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 2500, m: 13, k: 50)	 0.0107981 	 800       	 240.782   	 0         	 93.7346   	 2.56876   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 63, r: 63, r2: 2500, leftOrthog: 0)        	 0.00987846	 100       	 200.892   	 0         	 38.9079   	 5.16326   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r: 63, r2: 63)             	 0.00649891	 100       	 305.359   	 0         	 39.2643   	 7.77701   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 650, k: 13)  	 0.00641278	 800       	 105.414   	 0         	 41.5171   	 2.53906   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 13, m: 650, k: 13)  	 0.00625553	 700       	 24.5847   	 0         	 15.2803   	 1.60891   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 63, n: 50, r: 63, r2: 50)             	 0.0062115 	 100       	 319.488   	 0         	 46.2497   	 6.90789   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 3150, m: 13)                                                                       	 0.0059519 	 700       	 0         	 0         	 77.0577   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 13, m: 13)                                                                  	 0.00547255	 900       	 0.481531  	 0         	 0.684142  	 0.703846  
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 13, n: 50, r2: 13)                   	 0.00534055	 700       	 0         	 0         	 85.8788   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 3150, m: 13)                                                              	 0.00398438	 700       	 0         	 0         	 115.11    	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 13, n: 50, r2: 13)                                                                                         	 0.00373991	 800       	 0         	 0         	 28.9205   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 63, reductionFactor: 37, colBlockingSize: 12)                    	 0.00356982	 100       	 11.4187   	 0         	 1.59538   	 7.15738   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 13, reductionFactor: 37, colBlockingSize: 12)                  	 0.0034428 	 100       	 25.2073   	 0         	 7.59126   	 3.32057   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 50, Qr2: 13)       	 0.00287757	 100       	 0         	 0         	 87.574    	 0         
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 13, r: 13, streamingCols: 0)                   	 0.0022489 	 100       	 18.7869   	 0         	 23.1524   	 0.811445  
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 63, r: 50, r2: 50, leftOrthog: 0)          	 0.0016441 	 100       	 19.1595   	 0         	 7.03122   	 2.72491   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 2500, m: 13)                                                                       	 0.00116967	 100       	 0         	 0         	 44.457    	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 0, n: 50, r2: 13)                    	 0.0010903 	 100       	 0         	 0         	 47.6935   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 13, reductionFactor: 37, colBlockingSize: 12)                    	 0.0010371 	 100       	 1.67358   	 0         	 0.63176   	 2.64908   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 13)                                                              	 0.000956208	 100       	 0         	 0         	 54.3815   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 13)                                                                                          	 0.000889356	 200       	 0         	 0         	 2.33877   	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                   	 0.000823298	 100       	 0.607314  	 0         	 2.42925   	 0.25      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 13, n: 50, r2: 1)                                                                                          	 0.000815535	 200       	 0         	 0         	 2.55047   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 50, r2: 50)              	 0.000773728	 100       	 32.3111   	 0         	 7.75466   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 13, k: 50)     	 0.000584805	 100       	 11.1148   	 0         	 5.19831   	 2.13816   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                          	 0.000542292	 100       	 0         	 0         	 7.3761    	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 13, n: 50, r2: 1)                    	 0.000488484	 100       	 0         	 0         	 10.3176   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 50, k: 13)   	 0.000449788	 100       	 14.4513   	 0         	 6.75874   	 2.13816   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 1, r1low: 0, n: 50, r2: 13)                     	 0.000446318	 100       	 0         	 0         	 2.33018   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 1, Xr2: 50, Qr1: 1, Qr2: 0)          	 0.000442968	 100       	 0         	 0         	 9.03      	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                            	 0.000399606	 100       	 1.25123   	 0         	 15.0148   	 0.0833333 
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                 	 0.000387512	 100       	 0.645141  	 0         	 10.3223   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 13)                                                                	 0.000383469	 100       	 0         	 0         	 2.71208   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                 	 0.000346475	 100       	 0.721553  	 0         	 11.5448   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 13, n: 50, r2: 1)                                                                                 	 0.000340283	 100       	 0.191017  	 0         	 3.05628   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 13, m: 13, fromLeft: 0)                	 0.000293007	 800       	 0         	 0         	 7.38276   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 50, m: 13, k: 50)  	 0.000241348	 100       	 26.9321   	 0         	 12.5959   	 2.13816   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 13, m: 50, k: 13)   	 0.000113386	 100       	 14.9048   	 0         	 10.3646   	 1.43805   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 0, m: 650, k: 13)   	 6.38e-06  	 100       	 0         	 0         	 1059.56   	 0         
Timing statistics:
function                                                                                                                                                                                      	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                        	 1.31687   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_normalized(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                     	 1.31681   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::rightNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                            	 1.16421   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::rightNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                        	 1.16295   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double]	 1.10198   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                               	 0.413688  	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                  	 0.304301  	 1800      
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                            	 0.278596  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_leftOrthogonalize(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&) [with T = double]                                   	 0.152531  	 100       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                	 0.129242  	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]           	 0.0696809 	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                           	 0.0499747 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                                       	 0.0277881 	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.0266884 	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                    	 0.0194119 	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double]          	 0.0170401 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double]        	 0.0132379 	 1800      
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double]       	 0.0110395 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                        	 0.00736565	 1000      
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                       	 0.00712157	 800       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                	 0.00598709	 1300      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.00547255	 900       
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                              	 0.00532405	 900       
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                	 0.00489215	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                              	 0.00283147	 6300      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                         	 0.00107988	 5200      
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                       	 0.00107427	 300       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                         	 0.000823298	 100       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                                                  	 0.000399606	 100       
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                           	 0.000293007	 800       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
orthoX: L, orthoY: L
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 64
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->65  [0m[1;34m1->66  [0m[1;34m2->67  [0m[1;34m3->68  [0m[1;34m4->69  [0m[1;34m5->70  [0m[1;34m6->71  [0m[1;34m7->72  [0m[1;34m8->73  [0m[1;34m9->74  [0m[1;34m10->75  [0m[1;34m11->76  [0m[1;34m12->77  [0m[1;34m13->78  [0m[1;34m14->79  [0m[1;34m15->80  [0m[1;34m16->81  [0m[1;34m17->82  [0m[1;34m18->83  [0m[1;34m19->84  [0m[1;34m20->85  [0m[1;34m21->86  [0m[1;34m22->87  [0m[1;34m23->88  [0m[1;34m24->89  [0m[1;34m25->90  [0m[1;34m26->91  [0m[1;34m27->92  [0m[1;34m28->93  [0m[1;34m29->94  [0m[1;34m30->95  [0m[1;34m31->96  [0m[1;34m32->97  [0m[1;34m33->98  [0m[1;34m34->99  [0m[1;34m35->100  [0m[1;34m36->101  [0m[1;34m37->102  [0m[1;34m38->103  [0m[1;34m39->104  [0m[1;34m40->105  [0m[1;34m41->106  [0m[1;34m42->107  [0m[1;34m43->108  [0m[1;34m44->109  [0m[1;34m45->110  [0m[1;34m46->111  [0m[1;34m47->112  [0m[1;34m48->113  [0m[1;34m49->114  [0m[1;34m50->115  [0m[1;34m51->116  [0m[1;34m52->117  [0m[1;34m53->118  [0m[1;34m54->119  [0m[1;34m55->120  [0m[1;34m56->121  [0m[1;34m57->122  [0m[1;34m58->123  [0m[1;34m59->124  [0m[1;34m60->125  [0m[1;34m61->126  [0m[1;34m62->127  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23224074712960 -> hwthread 65 - OK[0m[1;34m
[0m[1;34m	threadid 23223894796288 -> hwthread 66 - OK[0m[1;34m
[0m[1;34m	threadid 23223693469824 -> hwthread 67 - OK[0m[1;34m
[0m[1;34m	threadid 23223492143360 -> hwthread 68 - OK[0m[1;34m
[0m[1;34m	threadid 23223290816896 -> hwthread 69 - OK[0m[1;34m
[0m[1;34m	threadid 23223089490432 -> hwthread 70 - OK[0m[1;34m
[0m[1;34m	threadid 23222888163968 -> hwthread 71 - OK[0m[1;34m
[0m[1;34m	threadid 23222686837504 -> hwthread 72 - OK[0m[1;34m
[0m[1;34m	threadid 23222485511040 -> hwthread 73 - OK[0m[1;34m
[0m[1;34m	threadid 23222284184576 -> hwthread 74 - OK[0m[1;34m
[0m[1;34m	threadid 23222082858112 -> hwthread 75 - OK[0m[1;34m
[0m[1;34m	threadid 23221881531648 -> hwthread 76 - OK[0m[1;34m
[0m[1;34m	threadid 23221680205184 -> hwthread 77 - OK[0m[1;34m
[0m[1;34m	threadid 23221478878720 -> hwthread 78 - OK[0m[1;34m
[0m[1;34m	threadid 23221277552256 -> hwthread 79 - OK[0m[1;34m
[0m[1;34m	threadid 23221076225792 -> hwthread 80 - OK[0m[1;34m
[0m[1;34m	threadid 23220874899328 -> hwthread 81 - OK[0m[1;34m
[0m[1;34m	threadid 23220673572864 -> hwthread 82 - OK[0m[1;34m
[0m[1;34m	threadid 23220472246400 -> hwthread 83 - OK[0m[1;34m
[0m[1;34m	threadid 23220270919936 -> hwthread 84 - OK[0m[1;34m
[0m[1;34m	threadid 23220069593472 -> hwthread 85 - OK[0m[1;34m
[0m[1;34m	threadid 23219868267008 -> hwthread 86 - OK[0m[1;34m
[0m[1;34m	threadid 23219666940544 -> hwthread 87 - OK[0m[1;34m
[0m[1;34m	threadid 23219465614080 -> hwthread 88 - OK[0m[1;34m
[0m[1;34m	threadid 23219264287616 -> hwthread 89 - OK[0m[1;34m
[0m[1;34m	threadid 23219062961152 -> hwthread 90 - OK[0m[1;34m
[0m[1;34m	threadid 23218861634688 -> hwthread 91 - OK[0m[1;34m
[0m[1;34m	threadid 23218660308224 -> hwthread 92 - OK[0m[1;34m
[0m[1;34m	threadid 23218458981760 -> hwthread 93 - OK[0m[1;34m
[0m[1;34m	threadid 23218257655296 -> hwthread 94 - OK[0m[1;34m
[0m[1;34m	threadid 23218056328832 -> hwthread 95 - OK[0m[1;34m
[0m[1;34m	threadid 23217855002368 -> hwthread 96 - OK[0m[1;34m
[0m[1;34m	threadid 23217653671808 -> hwthread 97 - OK[0m[1;34m
[0m[1;34m	threadid 23217452345344 -> hwthread 98 - OK[0m[1;34m
[0m[1;34m	threadid 23217251018880 -> hwthread 99 - OK[0m[1;34m
[0m[1;34m	threadid 23217049692416 -> hwthread 100 - OK[0m[1;34m
[0m[1;34m	threadid 23216848365952 -> hwthread 101 - OK[0m[1;34m
[0m[1;34m	threadid 23216647039488 -> hwthread 102 - OK[0m[1;34m
[0m[1;34m	threadid 23216445713024 -> hwthread 103 - OK[0m[1;34m
[0m[1;34m	threadid 23216244386560 -> hwthread 104 - OK[0m[1;34m
[0m[1;34m	threadid 23216043060096 -> hwthread 105 - OK[0m[1;34m
[0m[1;34m	threadid 23215841733632 -> hwthread 106 - OK[0m[1;34m
[0m[1;34m	threadid 23215640407168 -> hwthread 107 - OK[0m[1;34m
[0m[1;34m	threadid 23215439080704 -> hwthread 108 - OK[0m[1;34m
[0m[1;34m	threadid 23215237754240 -> hwthread 109 - OK[0m[1;34m
[0m[1;34m	threadid 23215036427776 -> hwthread 110 - OK[0m[1;34m
[0m[1;34m	threadid 23214835101312 -> hwthread 111 - OK[0m[1;34m
[0m[1;34m	threadid 23214633774848 -> hwthread 112 - OK[0m[1;34m
[0m[1;34m	threadid 23214432448384 -> hwthread 113 - OK[0m[1;34m
[0m[1;34m	threadid 23214231121920 -> hwthread 114 - OK[0m[1;34m
[0m[1;34m	threadid 23214029795456 -> hwthread 115 - OK[0m[1;34m
[0m[1;34m	threadid 23213828468992 -> hwthread 116 - OK[0m[1;34m
[0m[1;34m	threadid 23213627142528 -> hwthread 117 - OK[0m[1;34m
[0m[1;34m	threadid 23213425816064 -> hwthread 118 - OK[0m[1;34m
[0m[1;34m	threadid 23213224489600 -> hwthread 119 - OK[0m[1;34m
[0m[1;34m	threadid 23213023163136 -> hwthread 120 - OK[0m[1;34m
[0m[1;34m	threadid 23212821836672 -> hwthread 121 - OK[0m[1;34m
[0m[1;34m	threadid 23212620510208 -> hwthread 122 - OK[0m[1;34m
[0m[1;34m	threadid 23212419183744 -> hwthread 123 - OK[0m[1;34m
[0m[1;34m	threadid 23212217857280 -> hwthread 124 - OK[0m[1;34m
[0m[1;34m	threadid 23212016530816 -> hwthread 125 - OK[0m[1;34m
[0m[1;34m	threadid 23211815204352 -> hwthread 126 - OK[0m[1;34m
[0m[1;34m	threadid 23211613877888 -> hwthread 127 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23223969052416 -> hwthread 64 - OK[0m[1;34m
[0m[1;34m	threadid 23223789934336 -> hwthread 65 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 64, m: 64)                                                                 	 0.347845  	 700       	 4.92367   	 0         	 0.198856  	 24.7599   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3200, cols: 64, reductionFactor: 37, colBlockingSize: 12)                  	 0.21487   	 600       	 75.179    	 0         	 4.66654   	 16.1102   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 64, r: 64, r2: 3200, leftOrthog: 0)        	 0.106247  	 600       	 148.038   	 0         	 28.1273   	 5.26316   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 64, n: 50, r: 64, r2: 64)             	 0.0413132 	 600       	 380.717   	 0         	 48.0655   	 7.92079   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 64)                                                                 	 0.0411771 	 100       	 3.51328   	 0         	 0.173883  	 20.2048   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 64, reductionFactor: 37, colBlockingSize: 12)                  	 0.0377234 	 100       	 55.7572   	 0         	 3.47998   	 16.0223   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                 	 0.0344178 	 100       	 3.38972   	 0         	 0.175491  	 19.3157   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 64, Qr2: 14)       	 0.0267285 	 700       	 0         	 0         	 78.4841   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3200, cols: 14, reductionFactor: 37, colBlockingSize: 12)                  	 0.0238295 	 700       	 37.8444   	 0         	 10.5742   	 3.57894   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3200, cols: 50, reductionFactor: 37, colBlockingSize: 12)                  	 0.0230942 	 100       	 71.1539   	 0         	 5.62911   	 12.6403   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 3200, Xcols: 14, r: 14, streamingCols: 0)                   	 0.0184424 	 700       	 23.806    	 0         	 27.2366   	 0.874044  
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 14, k: 2500)   	 0.0170234 	 800       	 164.479   	 0         	 60.4156   	 2.72246   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 3200, leftOrthog: 0)        	 0.0114622 	 100       	 139.589   	 0         	 33.8504   	 4.12371   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 2500, m: 14, k: 50)	 0.0113482 	 800       	 246.735   	 0         	 90.6292   	 2.72246   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 64, r: 64, r2: 2500, leftOrthog: 0)        	 0.0106123 	 100       	 192.984   	 0         	 36.802    	 5.24384   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 64, n: 50, r: 64, r2: 50)             	 0.00717629	 100       	 285.384   	 0         	 41.024    	 6.95652   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 700, k: 14)  	 0.00671935	 800       	 116.678   	 0         	 43.3375   	 2.69231   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 14, m: 14)                                                                  	 0.00587006	 900       	 0.560846  	 0         	 0.738391  	 0.759551  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r: 64, r2: 64)             	 0.00585589	 100       	 349.734   	 0         	 44.2763   	 7.89889   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 14, m: 700, k: 14)  	 0.00585123	 700       	 32.8273   	 0         	 18.946    	 1.73267   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 64, reductionFactor: 37, colBlockingSize: 12)                    	 0.00562525	 100       	 7.47825   	 0         	 1.03761   	 7.20721   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 3200, m: 14)                                                                       	 0.00534589	 700       	 0         	 0         	 93.859    	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 14, n: 50, r2: 14)                   	 0.00518015	 700       	 0         	 0         	 96.8622   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 14, n: 50, r2: 14)                                                                                         	 0.00400208	 800       	 0         	 0         	 31.3437   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 3200, m: 14)                                                              	 0.00374365	 700       	 0         	 0         	 134.03    	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 14, reductionFactor: 37, colBlockingSize: 12)                  	 0.00335517	 100       	 29.9981   	 0         	 8.39206   	 3.57458   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 50, Qr2: 14)       	 0.00277991	 100       	 0         	 0         	 92.0892   	 0         
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 14, r: 14, streamingCols: 0)                   	 0.0023758 	 100       	 20.6246   	 0         	 23.604    	 0.873777  
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 64, r: 50, r2: 50, leftOrthog: 0)          	 0.00161802	 100       	 19.7773   	 0         	 7.2187    	 2.73973   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 0, n: 50, r2: 14)                    	 0.00112061	 100       	 0         	 0         	 49.9729   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 14, reductionFactor: 37, colBlockingSize: 12)                    	 0.000944775	 100       	 2.13064   	 0         	 0.758699  	 2.80828   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 2500, m: 14)                                                                       	 0.000928777	 100       	 0         	 0         	 60.2943   	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                   	 0.000892302	 100       	 0.560348  	 0         	 2.24139   	 0.25      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 14, n: 50, r2: 1)                                                                                          	 0.000777631	 200       	 0         	 0         	 2.88054   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 14)                                                                                          	 0.000766714	 200       	 0         	 0         	 2.92156   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 14)                                                              	 0.000750771	 100       	 0         	 0         	 74.59     	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 50, r2: 50)              	 0.000750274	 100       	 33.3212   	 0         	 7.99708   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 14, k: 50)     	 0.000733217	 100       	 9.54697   	 0         	 4.25522   	 2.24359   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                          	 0.000515095	 100       	 0         	 0         	 7.76556   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 50, k: 14)   	 0.000465507	 100       	 15.0374   	 0         	 6.70237   	 2.24359   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 1, Xr2: 50, Qr1: 1, Qr2: 0)          	 0.000460744	 100       	 0         	 0         	 8.68161   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 14, n: 50, r2: 1)                    	 0.000436632	 100       	 0         	 0         	 11.7261   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 1, r1low: 0, n: 50, r2: 14)                     	 0.000405081	 100       	 0         	 0         	 2.76488   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                 	 0.000395503	 100       	 0.632106  	 0         	 10.1137   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                            	 0.000394663	 100       	 1.2669    	 0         	 15.2028   	 0.0833333 
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 14, n: 50, r2: 1)                                                                                 	 0.000372288	 100       	 0.188026  	 0         	 3.00842   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 14)                                                                	 0.000362913	 100       	 0         	 0         	 3.08614   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                 	 0.00032956	 100       	 0.758587  	 0         	 12.1374   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 50, m: 14, k: 50)  	 0.000281141	 100       	 24.8985   	 0         	 11.0976   	 2.24359   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 14, m: 14, fromLeft: 0)                	 0.000269219	 800       	 0         	 0         	 9.31881   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 14, m: 50, k: 14)   	 0.000116034	 100       	 16.8916   	 0         	 11.0037   	 1.53509   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 0, m: 700, k: 14)   	 7.711e-06 	 100       	 0         	 0         	 1016.73   	 0         
Timing statistics:
function                                                                                                                                                                                      	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                        	 1.45522   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_normalized(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                     	 1.45517   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::rightNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                            	 1.29815   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::rightNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                        	 1.29685   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double]	 1.22486   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                               	 0.42344   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                  	 0.309443  	 1800      
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                            	 0.281825  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_leftOrthogonalize(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&) [with T = double]                                   	 0.156943  	 100       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                	 0.12994   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]           	 0.071466  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                           	 0.0550957 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                                       	 0.0299691 	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.0285707 	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                    	 0.0208182 	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double]          	 0.0177566 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double]        	 0.0131598 	 1800      
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double]       	 0.0116294 	 900       
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                	 0.00749718	 1800      
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                        	 0.00714247	 1000      
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                       	 0.00627467	 800       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                	 0.00606152	 1300      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.00587006	 900       
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                              	 0.00485733	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                              	 0.00289605	 6300      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                         	 0.00110188	 5200      
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                       	 0.00109735	 300       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                         	 0.000892302	 100       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                                                  	 0.000394663	 100       
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                           	 0.000269219	 800       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
orthoX: L, orthoY: L
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 64
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->65  [0m[1;34m1->66  [0m[1;34m2->67  [0m[1;34m3->68  [0m[1;34m4->69  [0m[1;34m5->70  [0m[1;34m6->71  [0m[1;34m7->72  [0m[1;34m8->73  [0m[1;34m9->74  [0m[1;34m10->75  [0m[1;34m11->76  [0m[1;34m12->77  [0m[1;34m13->78  [0m[1;34m14->79  [0m[1;34m15->80  [0m[1;34m16->81  [0m[1;34m17->82  [0m[1;34m18->83  [0m[1;34m19->84  [0m[1;34m20->85  [0m[1;34m21->86  [0m[1;34m22->87  [0m[1;34m23->88  [0m[1;34m24->89  [0m[1;34m25->90  [0m[1;34m26->91  [0m[1;34m27->92  [0m[1;34m28->93  [0m[1;34m29->94  [0m[1;34m30->95  [0m[1;34m31->96  [0m[1;34m32->97  [0m[1;34m33->98  [0m[1;34m34->99  [0m[1;34m35->100  [0m[1;34m36->101  [0m[1;34m37->102  [0m[1;34m38->103  [0m[1;34m39->104  [0m[1;34m40->105  [0m[1;34m41->106  [0m[1;34m42->107  [0m[1;34m43->108  [0m[1;34m44->109  [0m[1;34m45->110  [0m[1;34m46->111  [0m[1;34m47->112  [0m[1;34m48->113  [0m[1;34m49->114  [0m[1;34m50->115  [0m[1;34m51->116  [0m[1;34m52->117  [0m[1;34m53->118  [0m[1;34m54->119  [0m[1;34m55->120  [0m[1;34m56->121  [0m[1;34m57->122  [0m[1;34m58->123  [0m[1;34m59->124  [0m[1;34m60->125  [0m[1;34m61->126  [0m[1;34m62->127  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23414635517824 -> hwthread 65 - OK[0m[1;34m
[0m[1;34m	threadid 23414416861184 -> hwthread 66 - OK[0m[1;34m
[0m[1;34m	threadid 23414215534720 -> hwthread 67 - OK[0m[1;34m
[0m[1;34m	threadid 23414014208256 -> hwthread 68 - OK[0m[1;34m
[0m[1;34m	threadid 23413812881792 -> hwthread 69 - OK[0m[1;34m
[0m[1;34m	threadid 23413611555328 -> hwthread 70 - OK[0m[1;34m
[0m[1;34m	threadid 23413410228864 -> hwthread 71 - OK[0m[1;34m
[0m[1;34m	threadid 23413208902400 -> hwthread 72 - OK[0m[1;34m
[0m[1;34m	threadid 23413007575936 -> hwthread 73 - OK[0m[1;34m
[0m[1;34m	threadid 23412806249472 -> hwthread 74 - OK[0m[1;34m
[0m[1;34m	threadid 23412604923008 -> hwthread 75 - OK[0m[1;34m
[0m[1;34m	threadid 23412403596544 -> hwthread 76 - OK[0m[1;34m
[0m[1;34m	threadid 23412202270080 -> hwthread 77 - OK[0m[1;34m
[0m[1;34m	threadid 23412000943616 -> hwthread 78 - OK[0m[1;34m
[0m[1;34m	threadid 23411799617152 -> hwthread 79 - OK[0m[1;34m
[0m[1;34m	threadid 23411598290688 -> hwthread 80 - OK[0m[1;34m
[0m[1;34m	threadid 23411396964224 -> hwthread 81 - OK[0m[1;34m
[0m[1;34m	threadid 23411195637760 -> hwthread 82 - OK[0m[1;34m
[0m[1;34m	threadid 23410994311296 -> hwthread 83 - OK[0m[1;34m
[0m[1;34m	threadid 23410792984832 -> hwthread 84 - OK[0m[1;34m
[0m[1;34m	threadid 23410591658368 -> hwthread 85 - OK[0m[1;34m
[0m[1;34m	threadid 23410390331904 -> hwthread 86 - OK[0m[1;34m
[0m[1;34m	threadid 23410189005440 -> hwthread 87 - OK[0m[1;34m
[0m[1;34m	threadid 23409987678976 -> hwthread 88 - OK[0m[1;34m
[0m[1;34m	threadid 23409786352512 -> hwthread 89 - OK[0m[1;34m
[0m[1;34m	threadid 23409585026048 -> hwthread 90 - OK[0m[1;34m
[0m[1;34m	threadid 23409383699584 -> hwthread 91 - OK[0m[1;34m
[0m[1;34m	threadid 23409182373120 -> hwthread 92 - OK[0m[1;34m
[0m[1;34m	threadid 23408981046656 -> hwthread 93 - OK[0m[1;34m
[0m[1;34m	threadid 23408779720192 -> hwthread 94 - OK[0m[1;34m
[0m[1;34m	threadid 23408578393728 -> hwthread 95 - OK[0m[1;34m
[0m[1;34m	threadid 23408377067264 -> hwthread 96 - OK[0m[1;34m
[0m[1;34m	threadid 23408175736704 -> hwthread 97 - OK[0m[1;34m
[0m[1;34m	threadid 23407974410240 -> hwthread 98 - OK[0m[1;34m
[0m[1;34m	threadid 23407773083776 -> hwthread 99 - OK[0m[1;34m
[0m[1;34m	threadid 23407571757312 -> hwthread 100 - OK[0m[1;34m
[0m[1;34m	threadid 23407370430848 -> hwthread 101 - OK[0m[1;34m
[0m[1;34m	threadid 23407169104384 -> hwthread 102 - OK[0m[1;34m
[0m[1;34m	threadid 23406967777920 -> hwthread 103 - OK[0m[1;34m
[0m[1;34m	threadid 23406766451456 -> hwthread 104 - OK[0m[1;34m
[0m[1;34m	threadid 23406565124992 -> hwthread 105 - OK[0m[1;34m
[0m[1;34m	threadid 23406363798528 -> hwthread 106 - OK[0m[1;34m
[0m[1;34m	threadid 23406162472064 -> hwthread 107 - OK[0m[1;34m
[0m[1;34m	threadid 23405961145600 -> hwthread 108 - OK[0m[1;34m
[0m[1;34m	threadid 23405759819136 -> hwthread 109 - OK[0m[1;34m
[0m[1;34m	threadid 23405558492672 -> hwthread 110 - OK[0m[1;34m
[0m[1;34m	threadid 23405357166208 -> hwthread 111 - OK[0m[1;34m
[0m[1;34m	threadid 23405155839744 -> hwthread 112 - OK[0m[1;34m
[0m[1;34m	threadid 23404954513280 -> hwthread 113 - OK[0m[1;34m
[0m[1;34m	threadid 23404753186816 -> hwthread 114 - OK[0m[1;34m
[0m[1;34m	threadid 23404551860352 -> hwthread 115 - OK[0m[1;34m
[0m[1;34m	threadid 23404350533888 -> hwthread 116 - OK[0m[1;34m
[0m[1;34m	threadid 23404149207424 -> hwthread 117 - OK[0m[1;34m
[0m[1;34m	threadid 23403947880960 -> hwthread 118 - OK[0m[1;34m
[0m[1;34m	threadid 23403746554496 -> hwthread 119 - OK[0m[1;34m
[0m[1;34m	threadid 23403545228032 -> hwthread 120 - OK[0m[1;34m
[0m[1;34m	threadid 23403343901568 -> hwthread 121 - OK[0m[1;34m
[0m[1;34m	threadid 23403142575104 -> hwthread 122 - OK[0m[1;34m
[0m[1;34m	threadid 23402941248640 -> hwthread 123 - OK[0m[1;34m
[0m[1;34m	threadid 23402739922176 -> hwthread 124 - OK[0m[1;34m
[0m[1;34m	threadid 23402538595712 -> hwthread 125 - OK[0m[1;34m
[0m[1;34m	threadid 23402337269248 -> hwthread 126 - OK[0m[1;34m
[0m[1;34m	threadid 23402135942784 -> hwthread 127 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23414529857280 -> hwthread 64 - OK[0m[1;34m
[0m[1;34m	threadid 23414523266816 -> hwthread 65 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 65, m: 65)                                                                 	 0.365255  	 700       	 4.91223   	 0         	 0.195326  	 25.1488   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3250, cols: 65, reductionFactor: 37, colBlockingSize: 12)                  	 0.223804  	 600       	 75.6147   	 0         	 4.62137   	 16.362    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 65, r: 65, r2: 3250, leftOrthog: 0)        	 0.0805231 	 600       	 204.631   	 0         	 38.2817   	 5.34539   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 65)                                                                 	 0.0403971 	 100       	 3.63062   	 0         	 0.179221  	 20.2578   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 65, reductionFactor: 37, colBlockingSize: 12)                  	 0.039772  	 100       	 54.5507   	 0         	 3.35361   	 16.2663   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 65, n: 50, r: 65, r2: 65)             	 0.0367296 	 600       	 448.616   	 0         	 55.7664   	 8.04455   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                 	 0.0343514 	 100       	 3.39627   	 0         	 0.17583   	 19.3157   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3250, cols: 15, reductionFactor: 37, colBlockingSize: 12)                  	 0.0256063 	 700       	 41.0609   	 0         	 10.7106   	 3.83366   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 65, Qr2: 15)       	 0.0249911 	 700       	 0         	 0         	 86.2708   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3250, cols: 50, reductionFactor: 37, colBlockingSize: 12)                  	 0.0231562 	 100       	 72.0721   	 0         	 5.70041   	 12.6433   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 3250, Xcols: 15, r: 15, streamingCols: 0)                   	 0.0200565 	 700       	 25.5217   	 0         	 27.2545   	 0.93642   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 15, k: 2500)   	 0.017581  	 800       	 170.639   	 0         	 59.4278   	 2.87136   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 3250, leftOrthog: 0)        	 0.0121845 	 100       	 133.366   	 0         	 32.3362   	 4.12437   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 2500, m: 15, k: 50)	 0.0117196 	 800       	 255.982   	 0         	 89.1501   	 2.87136   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 65, r: 65, r2: 2500, leftOrthog: 0)        	 0.0100147 	 100       	 210.94    	 0         	 39.6178   	 5.32438   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 65, n: 50, r: 65, r2: 50)             	 0.00808308	 100       	 261.348   	 0         	 37.3125   	 7.00431   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 3250, m: 15)                                                                       	 0.00722645	 700       	 0         	 0         	 75.5557   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 750, k: 15)  	 0.00660218	 800       	 136.319   	 0         	 47.9842   	 2.84091   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 15, n: 50, r2: 15)                   	 0.00643074	 700       	 0         	 0         	 84.9047   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 15, m: 15)                                                                  	 0.00634105	 900       	 0.638695  	 0         	 0.783466  	 0.815217  
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 15, m: 750, k: 15)  	 0.00578311	 700       	 40.8517   	 0         	 22.0055   	 1.85644   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r: 65, r2: 65)             	 0.00573806	 100       	 368.156   	 0         	 45.9005   	 8.02073   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 65, reductionFactor: 37, colBlockingSize: 12)                    	 0.00556592	 100       	 7.79599   	 0         	 1.0744    	 7.25617   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 3250, m: 15)                                                              	 0.00479105	 700       	 0         	 0         	 113.963   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 15, n: 50, r2: 15)                                                                                         	 0.00437857	 800       	 0         	 0         	 32.8875   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 15, reductionFactor: 37, colBlockingSize: 12)                  	 0.00369157	 100       	 31.2985   	 0         	 8.17539   	 3.82838   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 50, Qr2: 15)       	 0.00286498	 100       	 0         	 0         	 90.7511   	 0         
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 15, r: 15, streamingCols: 0)                   	 0.00245027	 100       	 22.9567   	 0         	 24.5238   	 0.936096  
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 65, r: 50, r2: 50, leftOrthog: 0)          	 0.001703  	 100       	 19.084    	 0         	 6.92894   	 2.75424   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 2500, m: 15)                                                                       	 0.0015809 	 100       	 0         	 0         	 37.953    	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 0, n: 50, r2: 15)                    	 0.00139396	 100       	 0         	 0         	 43.0429   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 15)                                                              	 0.00134996	 100       	 0         	 0         	 44.4456   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 15, reductionFactor: 37, colBlockingSize: 12)                    	 0.000908915	 100       	 2.54238   	 0         	 0.858166  	 2.96258   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                   	 0.000892866	 100       	 0.559994  	 0         	 2.23998   	 0.25      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 15)                                                                                          	 0.000780376	 200       	 0         	 0         	 3.07544   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 15, n: 50, r2: 1)                                                                                          	 0.000761358	 200       	 0         	 0         	 3.15226   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 50, r2: 50)              	 0.000741806	 100       	 33.7015   	 0         	 8.08837   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 15, k: 50)     	 0.00052181	 100       	 14.373    	 0         	 6.1325    	 2.34375   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                          	 0.000521608	 100       	 0         	 0         	 7.66859   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 15, n: 50, r2: 1)                    	 0.000475772	 100       	 0         	 0         	 10.9296   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 1, r1low: 0, n: 50, r2: 15)                     	 0.00046507	 100       	 0         	 0         	 2.58026   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 50, k: 15)   	 0.000459734	 100       	 16.3138   	 0         	 6.96055   	 2.34375   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 1, Xr2: 50, Qr1: 1, Qr2: 0)          	 0.000450771	 100       	 0         	 0         	 8.87369   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                            	 0.000412756	 100       	 1.21137   	 0         	 14.5364   	 0.0833333 
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                 	 0.000389301	 100       	 0.642177  	 0         	 10.2748   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 15)                                                                	 0.000364659	 100       	 0         	 0         	 3.29075   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 15, n: 50, r2: 1)                                                                                 	 0.000349646	 100       	 0.214503  	 0         	 3.43204   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                 	 0.000323211	 100       	 0.773489  	 0         	 12.3758   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 15, m: 15, fromLeft: 0)                	 0.000311029	 800       	 0         	 0         	 9.25959   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 50, m: 15, k: 50)  	 0.000293587	 100       	 25.5461   	 0         	 10.8997   	 2.34375   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 15, m: 50, k: 15)   	 0.000118753	 100       	 18.9469   	 0         	 11.6208   	 1.63043   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 0, m: 750, k: 15)   	 7.75e-06  	 100       	 0         	 0         	 1161.29   	 0         
Timing statistics:
function                                                                                                                                                                                      	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                        	 1.34263   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_normalized(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                     	 1.34258   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::rightNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                            	 1.17496   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::rightNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                        	 1.17366   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double]	 1.12061   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                               	 0.440004  	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                  	 0.322505  	 1800      
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                            	 0.292901  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_leftOrthogonalize(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&) [with T = double]                                   	 0.167554  	 100       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                	 0.104425  	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]           	 0.0804448 	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                           	 0.0512926 	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.0306961 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                                       	 0.0283068 	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                    	 0.0225067 	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double]          	 0.0181028 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double]        	 0.0129715 	 1800      
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double]       	 0.0120131 	 900       
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                       	 0.00880735	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                        	 0.00876554	 1000      
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                              	 0.00650567	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                	 0.00644191	 1300      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.00634105	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                              	 0.00254378	 6300      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                	 0.00236   	 1800      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                         	 0.00189328	 5200      
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                       	 0.00106216	 300       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                         	 0.000892866	 100       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                                                  	 0.000412756	 100       
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                           	 0.000311029	 800       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
orthoX: L, orthoY: L
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 64
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->65  [0m[1;34m1->66  [0m[1;34m2->67  [0m[1;34m3->68  [0m[1;34m4->69  [0m[1;34m5->70  [0m[1;34m6->71  [0m[1;34m7->72  [0m[1;34m8->73  [0m[1;34m9->74  [0m[1;34m10->75  [0m[1;34m11->76  [0m[1;34m12->77  [0m[1;34m13->78  [0m[1;34m14->79  [0m[1;34m15->80  [0m[1;34m16->81  [0m[1;34m17->82  [0m[1;34m18->83  [0m[1;34m19->84  [0m[1;34m20->85  [0m[1;34m21->86  [0m[1;34m22->87  [0m[1;34m23->88  [0m[1;34m24->89  [0m[1;34m25->90  [0m[1;34m26->91  [0m[1;34m27->92  [0m[1;34m28->93  [0m[1;34m29->94  [0m[1;34m30->95  [0m[1;34m31->96  [0m[1;34m32->97  [0m[1;34m33->98  [0m[1;34m34->99  [0m[1;34m35->100  [0m[1;34m36->101  [0m[1;34m37->102  [0m[1;34m38->103  [0m[1;34m39->104  [0m[1;34m40->105  [0m[1;34m41->106  [0m[1;34m42->107  [0m[1;34m43->108  [0m[1;34m44->109  [0m[1;34m45->110  [0m[1;34m46->111  [0m[1;34m47->112  [0m[1;34m48->113  [0m[1;34m49->114  [0m[1;34m50->115  [0m[1;34m51->116  [0m[1;34m52->117  [0m[1;34m53->118  [0m[1;34m54->119  [0m[1;34m55->120  [0m[1;34m56->121  [0m[1;34m57->122  [0m[1;34m58->123  [0m[1;34m59->124  [0m[1;34m60->125  [0m[1;34m61->126  [0m[1;34m62->127  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22695041087360 -> hwthread 65 - OK[0m[1;34m
[0m[1;34m	threadid 22694808512512 -> hwthread 66 - OK[0m[1;34m
[0m[1;34m	threadid 22694607186048 -> hwthread 67 - OK[0m[1;34m
[0m[1;34m	threadid 22694405859584 -> hwthread 68 - OK[0m[1;34m
[0m[1;34m	threadid 22694204533120 -> hwthread 69 - OK[0m[1;34m
[0m[1;34m	threadid 22694003206656 -> hwthread 70 - OK[0m[1;34m
[0m[1;34m	threadid 22693801880192 -> hwthread 71 - OK[0m[1;34m
[0m[1;34m	threadid 22693600553728 -> hwthread 72 - OK[0m[1;34m
[0m[1;34m	threadid 22693399227264 -> hwthread 73 - OK[0m[1;34m
[0m[1;34m	threadid 22693197900800 -> hwthread 74 - OK[0m[1;34m
[0m[1;34m	threadid 22692996574336 -> hwthread 75 - OK[0m[1;34m
[0m[1;34m	threadid 22692795247872 -> hwthread 76 - OK[0m[1;34m
[0m[1;34m	threadid 22692593921408 -> hwthread 77 - OK[0m[1;34m
[0m[1;34m	threadid 22692392594944 -> hwthread 78 - OK[0m[1;34m
[0m[1;34m	threadid 22692191268480 -> hwthread 79 - OK[0m[1;34m
[0m[1;34m	threadid 22691989942016 -> hwthread 80 - OK[0m[1;34m
[0m[1;34m	threadid 22691788615552 -> hwthread 81 - OK[0m[1;34m
[0m[1;34m	threadid 22691587289088 -> hwthread 82 - OK[0m[1;34m
[0m[1;34m	threadid 22691385962624 -> hwthread 83 - OK[0m[1;34m
[0m[1;34m	threadid 22691184636160 -> hwthread 84 - OK[0m[1;34m
[0m[1;34m	threadid 22690983309696 -> hwthread 85 - OK[0m[1;34m
[0m[1;34m	threadid 22690781983232 -> hwthread 86 - OK[0m[1;34m
[0m[1;34m	threadid 22690580656768 -> hwthread 87 - OK[0m[1;34m
[0m[1;34m	threadid 22690379330304 -> hwthread 88 - OK[0m[1;34m
[0m[1;34m	threadid 22690178003840 -> hwthread 89 - OK[0m[1;34m
[0m[1;34m	threadid 22689976677376 -> hwthread 90 - OK[0m[1;34m
[0m[1;34m	threadid 22689775350912 -> hwthread 91 - OK[0m[1;34m
[0m[1;34m	threadid 22689574024448 -> hwthread 92 - OK[0m[1;34m
[0m[1;34m	threadid 22689372697984 -> hwthread 93 - OK[0m[1;34m
[0m[1;34m	threadid 22689171371520 -> hwthread 94 - OK[0m[1;34m
[0m[1;34m	threadid 22688970045056 -> hwthread 95 - OK[0m[1;34m
[0m[1;34m	threadid 22688768718592 -> hwthread 96 - OK[0m[1;34m
[0m[1;34m	threadid 22688567388032 -> hwthread 97 - OK[0m[1;34m
[0m[1;34m	threadid 22688366061568 -> hwthread 98 - OK[0m[1;34m
[0m[1;34m	threadid 22688164735104 -> hwthread 99 - OK[0m[1;34m
[0m[1;34m	threadid 22687963408640 -> hwthread 100 - OK[0m[1;34m
[0m[1;34m	threadid 22687762082176 -> hwthread 101 - OK[0m[1;34m
[0m[1;34m	threadid 22687560755712 -> hwthread 102 - OK[0m[1;34m
[0m[1;34m	threadid 22687359429248 -> hwthread 103 - OK[0m[1;34m
[0m[1;34m	threadid 22687158102784 -> hwthread 104 - OK[0m[1;34m
[0m[1;34m	threadid 22686956776320 -> hwthread 105 - OK[0m[1;34m
[0m[1;34m	threadid 22686755449856 -> hwthread 106 - OK[0m[1;34m
[0m[1;34m	threadid 22686554123392 -> hwthread 107 - OK[0m[1;34m
[0m[1;34m	threadid 22686352796928 -> hwthread 108 - OK[0m[1;34m
[0m[1;34m	threadid 22686151470464 -> hwthread 109 - OK[0m[1;34m
[0m[1;34m	threadid 22685950144000 -> hwthread 110 - OK[0m[1;34m
[0m[1;34m	threadid 22685748817536 -> hwthread 111 - OK[0m[1;34m
[0m[1;34m	threadid 22685547491072 -> hwthread 112 - OK[0m[1;34m
[0m[1;34m	threadid 22685346164608 -> hwthread 113 - OK[0m[1;34m
[0m[1;34m	threadid 22685144838144 -> hwthread 114 - OK[0m[1;34m
[0m[1;34m	threadid 22684943511680 -> hwthread 115 - OK[0m[1;34m
[0m[1;34m	threadid 22684742185216 -> hwthread 116 - OK[0m[1;34m
[0m[1;34m	threadid 22684540858752 -> hwthread 117 - OK[0m[1;34m
[0m[1;34m	threadid 22684339532288 -> hwthread 118 - OK[0m[1;34m
[0m[1;34m	threadid 22684138205824 -> hwthread 119 - OK[0m[1;34m
[0m[1;34m	threadid 22683936879360 -> hwthread 120 - OK[0m[1;34m
[0m[1;34m	threadid 22683735552896 -> hwthread 121 - OK[0m[1;34m
[0m[1;34m	threadid 22683534226432 -> hwthread 122 - OK[0m[1;34m
[0m[1;34m	threadid 22683332899968 -> hwthread 123 - OK[0m[1;34m
[0m[1;34m	threadid 22683131573504 -> hwthread 124 - OK[0m[1;34m
[0m[1;34m	threadid 22682930247040 -> hwthread 125 - OK[0m[1;34m
[0m[1;34m	threadid 22682728920576 -> hwthread 126 - OK[0m[1;34m
[0m[1;34m	threadid 22682527594112 -> hwthread 127 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22694935426816 -> hwthread 64 - OK[0m[1;34m
[0m[1;34m	threadid 22694928836352 -> hwthread 65 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 66, m: 66)                                                                 	 0.358777  	 700       	 5.2353    	 0         	 0.205003  	 25.5377   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3300, cols: 66, reductionFactor: 37, colBlockingSize: 12)                  	 0.226706  	 600       	 78.145    	 0         	 4.70366   	 16.6137   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 66, r: 66, r2: 3300, leftOrthog: 0)        	 0.0869718 	 600       	 198.337   	 0         	 36.5421   	 5.42763   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 66, n: 50, r: 66, r2: 66)             	 0.0430502 	 600       	 400.69    	 0         	 49.0541   	 8.16832   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 66)                                                                 	 0.0406052 	 100       	 3.66127   	 0         	 0.180272  	 20.3097   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 66, reductionFactor: 37, colBlockingSize: 12)                  	 0.0397643 	 100       	 56.2532   	 0         	 3.4072    	 16.5101   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                 	 0.0342254 	 100       	 3.40878   	 0         	 0.176477  	 19.3157   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3300, cols: 16, reductionFactor: 37, colBlockingSize: 12)                  	 0.0284757 	 700       	 42.6569   	 0         	 10.4339   	 4.08829   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 66, Qr2: 16)       	 0.0265973 	 700       	 0         	 0         	 83.2928   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3300, cols: 50, reductionFactor: 37, colBlockingSize: 12)                  	 0.0227442 	 100       	 74.5066   	 0         	 5.8916    	 12.6462   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 3300, Xcols: 16, r: 16, streamingCols: 0)                   	 0.0216035 	 700       	 27.3733   	 0         	 27.4065   	 0.998789  
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 16, k: 2500)   	 0.0184172 	 800       	 173.751   	 0         	 57.6157   	 3.01568   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 2500, m: 16, k: 50)	 0.0121845 	 800       	 262.629   	 0         	 87.0878   	 3.01568   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 3300, leftOrthog: 0)        	 0.0117571 	 100       	 140.341   	 0         	 34.022    	 4.125     
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 66, r: 66, r2: 2500, leftOrthog: 0)        	 0.00991222	 100       	 219.729   	 0         	 40.6538   	 5.40487   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 3300, m: 16)                                                                       	 0.00739117	 700       	 0         	 0         	 80.009    	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 66, n: 50, r: 66, r2: 50)             	 0.00712394	 100       	 305.73    	 0         	 43.358    	 7.05128   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 800, k: 16)  	 0.007031  	 800       	 145.641   	 0         	 48.7896   	 2.98507   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 16, n: 50, r2: 16)                   	 0.00658853	 700       	 0         	 0         	 89.7559   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 16, m: 16)                                                                  	 0.00639734	 900       	 0.768132  	 0         	 0.882366  	 0.870536  
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 16, m: 800, k: 16)  	 0.0060046 	 700       	 47.75     	 0         	 24.1138   	 1.9802    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r: 66, r2: 66)             	 0.00565039	 100       	 385.46    	 0         	 47.3392   	 8.14252   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 3300, m: 16)                                                              	 0.00499754	 700       	 0         	 0         	 118.33    	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 16, n: 50, r2: 16)                                                                                         	 0.00487924	 800       	 0         	 0         	 33.579    	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 66, reductionFactor: 37, colBlockingSize: 12)                    	 0.00408183	 100       	 10.9601   	 0         	 1.5005    	 7.30429   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 16, reductionFactor: 37, colBlockingSize: 12)                  	 0.00407966	 100       	 32.2231   	 0         	 7.89399   	 4.08198   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 50, Qr2: 16)       	 0.00303792	 100       	 0         	 0         	 86.9016   	 0         
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 16, r: 16, streamingCols: 0)                   	 0.00268053	 100       	 23.8759   	 0         	 23.9141   	 0.998403  
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 66, r: 50, r2: 50, leftOrthog: 0)          	 0.00171728	 100       	 19.2164   	 0         	 6.9412    	 2.76846   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 2500, m: 16)                                                                       	 0.00162515	 100       	 0         	 0         	 39.381    	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 0, n: 50, r2: 16)                    	 0.00150584	 100       	 0         	 0         	 42.5013   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 16)                                                              	 0.00139782	 100       	 0         	 0         	 45.7855   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 16, reductionFactor: 37, colBlockingSize: 12)                    	 0.00102311	 100       	 2.56981   	 0         	 0.825719  	 3.1122    
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                   	 0.000866951	 100       	 0.576734  	 0         	 2.30694   	 0.25      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 16)                                                                                          	 0.000828619	 200       	 0         	 0         	 3.08948   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 50, r2: 50)              	 0.000760066	 100       	 32.8919   	 0         	 7.89405   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 16, n: 50, r2: 1)                                                                                          	 0.000750228	 200       	 0         	 0         	 3.4123    	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 16, k: 50)     	 0.000605606	 100       	 13.2099   	 0         	 5.41606   	 2.43902   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                          	 0.000538207	 100       	 0         	 0         	 7.43208   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 50, k: 16)   	 0.000479132	 100       	 16.6969   	 0         	 6.84571   	 2.43902   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 16, n: 50, r2: 1)                    	 0.000456253	 100       	 0         	 0         	 11.5725   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 1, Xr2: 50, Qr1: 1, Qr2: 0)          	 0.000428595	 100       	 0         	 0         	 9.33282   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                            	 0.000418681	 100       	 1.19423   	 0         	 14.3307   	 0.0833333 
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 1, r1low: 0, n: 50, r2: 16)                     	 0.000402031	 100       	 0         	 0         	 3.18383   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                 	 0.000394007	 100       	 0.634506  	 0         	 10.1521   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 16)                                                                	 0.000358512	 100       	 0         	 0         	 3.57031   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 16, n: 50, r2: 1)                                                                                 	 0.000354428	 100       	 0.225716  	 0         	 3.61145   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                 	 0.000330418	 100       	 0.756617  	 0         	 12.1059   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 50, m: 16, k: 50)  	 0.000314978	 100       	 25.3986   	 0         	 10.4134   	 2.43902   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 16, m: 16, fromLeft: 0)                	 0.000223918	 800       	 0         	 0         	 14.6339   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 16, m: 50, k: 16)   	 0.000102716	 100       	 24.9231   	 0         	 14.4554   	 1.72414   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 0, m: 800, k: 16)   	 6.861e-06 	 100       	 0         	 0         	 1492.49   	 0         
Timing statistics:
function                                                                                                                                                                                      	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                        	 1.35902   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_normalized(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                     	 1.35898   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::rightNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                            	 1.18038   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::rightNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                        	 1.1791    	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double]	 1.11998   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                               	 0.433608  	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                  	 0.326875  	 1800      
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                            	 0.293884  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_leftOrthogonalize(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&) [with T = double]                                   	 0.178527  	 100       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                	 0.110358  	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]           	 0.085969  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                           	 0.0565846 	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.0340372 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                                       	 0.0300638 	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                    	 0.0242841 	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double]          	 0.0190228 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double]        	 0.0136243 	 1800      
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double]       	 0.0124995 	 900       
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                       	 0.00901632	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                        	 0.00895265	 1000      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                	 0.00699629	 1300      
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                              	 0.00675387	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.00639734	 900       
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                	 0.00322889	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                              	 0.00249826	 6300      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                         	 0.00112218	 5200      
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                       	 0.00107885	 300       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                         	 0.000866951	 100       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                                                  	 0.000418681	 100       
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                           	 0.000223918	 800       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
orthoX: L, orthoY: L
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 64
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->65  [0m[1;34m1->66  [0m[1;34m2->67  [0m[1;34m3->68  [0m[1;34m4->69  [0m[1;34m5->70  [0m[1;34m6->71  [0m[1;34m7->72  [0m[1;34m8->73  [0m[1;34m9->74  [0m[1;34m10->75  [0m[1;34m11->76  [0m[1;34m12->77  [0m[1;34m13->78  [0m[1;34m14->79  [0m[1;34m15->80  [0m[1;34m16->81  [0m[1;34m17->82  [0m[1;34m18->83  [0m[1;34m19->84  [0m[1;34m20->85  [0m[1;34m21->86  [0m[1;34m22->87  [0m[1;34m23->88  [0m[1;34m24->89  [0m[1;34m25->90  [0m[1;34m26->91  [0m[1;34m27->92  [0m[1;34m28->93  [0m[1;34m29->94  [0m[1;34m30->95  [0m[1;34m31->96  [0m[1;34m32->97  [0m[1;34m33->98  [0m[1;34m34->99  [0m[1;34m35->100  [0m[1;34m36->101  [0m[1;34m37->102  [0m[1;34m38->103  [0m[1;34m39->104  [0m[1;34m40->105  [0m[1;34m41->106  [0m[1;34m42->107  [0m[1;34m43->108  [0m[1;34m44->109  [0m[1;34m45->110  [0m[1;34m46->111  [0m[1;34m47->112  [0m[1;34m48->113  [0m[1;34m49->114  [0m[1;34m50->115  [0m[1;34m51->116  [0m[1;34m52->117  [0m[1;34m53->118  [0m[1;34m54->119  [0m[1;34m55->120  [0m[1;34m56->121  [0m[1;34m57->122  [0m[1;34m58->123  [0m[1;34m59->124  [0m[1;34m60->125  [0m[1;34m61->126  [0m[1;34m62->127  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23200195082112 -> hwthread 65 - OK[0m[1;34m
[0m[1;34m	threadid 23200004040704 -> hwthread 66 - OK[0m[1;34m
[0m[1;34m	threadid 23199802714240 -> hwthread 67 - OK[0m[1;34m
[0m[1;34m	threadid 23199601387776 -> hwthread 68 - OK[0m[1;34m
[0m[1;34m	threadid 23199400061312 -> hwthread 69 - OK[0m[1;34m
[0m[1;34m	threadid 23199198734848 -> hwthread 70 - OK[0m[1;34m
[0m[1;34m	threadid 23198997408384 -> hwthread 71 - OK[0m[1;34m
[0m[1;34m	threadid 23198796081920 -> hwthread 72 - OK[0m[1;34m
[0m[1;34m	threadid 23198594755456 -> hwthread 73 - OK[0m[1;34m
[0m[1;34m	threadid 23198393428992 -> hwthread 74 - OK[0m[1;34m
[0m[1;34m	threadid 23198192102528 -> hwthread 75 - OK[0m[1;34m
[0m[1;34m	threadid 23197990776064 -> hwthread 76 - OK[0m[1;34m
[0m[1;34m	threadid 23197789449600 -> hwthread 77 - OK[0m[1;34m
[0m[1;34m	threadid 23197588123136 -> hwthread 78 - OK[0m[1;34m
[0m[1;34m	threadid 23197386796672 -> hwthread 79 - OK[0m[1;34m
[0m[1;34m	threadid 23197185470208 -> hwthread 80 - OK[0m[1;34m
[0m[1;34m	threadid 23196984143744 -> hwthread 81 - OK[0m[1;34m
[0m[1;34m	threadid 23196782817280 -> hwthread 82 - OK[0m[1;34m
[0m[1;34m	threadid 23196581490816 -> hwthread 83 - OK[0m[1;34m
[0m[1;34m	threadid 23196380164352 -> hwthread 84 - OK[0m[1;34m
[0m[1;34m	threadid 23196178837888 -> hwthread 85 - OK[0m[1;34m
[0m[1;34m	threadid 23195977511424 -> hwthread 86 - OK[0m[1;34m
[0m[1;34m	threadid 23195776184960 -> hwthread 87 - OK[0m[1;34m
[0m[1;34m	threadid 23195574858496 -> hwthread 88 - OK[0m[1;34m
[0m[1;34m	threadid 23195373532032 -> hwthread 89 - OK[0m[1;34m
[0m[1;34m	threadid 23195172205568 -> hwthread 90 - OK[0m[1;34m
[0m[1;34m	threadid 23194970879104 -> hwthread 91 - OK[0m[1;34m
[0m[1;34m	threadid 23194769552640 -> hwthread 92 - OK[0m[1;34m
[0m[1;34m	threadid 23194568226176 -> hwthread 93 - OK[0m[1;34m
[0m[1;34m	threadid 23194366899712 -> hwthread 94 - OK[0m[1;34m
[0m[1;34m	threadid 23194165573248 -> hwthread 95 - OK[0m[1;34m
[0m[1;34m	threadid 23193964246784 -> hwthread 96 - OK[0m[1;34m
[0m[1;34m	threadid 23193762916224 -> hwthread 97 - OK[0m[1;34m
[0m[1;34m	threadid 23193561589760 -> hwthread 98 - OK[0m[1;34m
[0m[1;34m	threadid 23193360263296 -> hwthread 99 - OK[0m[1;34m
[0m[1;34m	threadid 23193158936832 -> hwthread 100 - OK[0m[1;34m
[0m[1;34m	threadid 23192957610368 -> hwthread 101 - OK[0m[1;34m
[0m[1;34m	threadid 23192756283904 -> hwthread 102 - OK[0m[1;34m
[0m[1;34m	threadid 23192554957440 -> hwthread 103 - OK[0m[1;34m
[0m[1;34m	threadid 23192353630976 -> hwthread 104 - OK[0m[1;34m
[0m[1;34m	threadid 23192152304512 -> hwthread 105 - OK[0m[1;34m
[0m[1;34m	threadid 23191950978048 -> hwthread 106 - OK[0m[1;34m
[0m[1;34m	threadid 23191749651584 -> hwthread 107 - OK[0m[1;34m
[0m[1;34m	threadid 23191548325120 -> hwthread 108 - OK[0m[1;34m
[0m[1;34m	threadid 23191346998656 -> hwthread 109 - OK[0m[1;34m
[0m[1;34m	threadid 23191145672192 -> hwthread 110 - OK[0m[1;34m
[0m[1;34m	threadid 23190944345728 -> hwthread 111 - OK[0m[1;34m
[0m[1;34m	threadid 23190743019264 -> hwthread 112 - OK[0m[1;34m
[0m[1;34m	threadid 23190541692800 -> hwthread 113 - OK[0m[1;34m
[0m[1;34m	threadid 23190340366336 -> hwthread 114 - OK[0m[1;34m
[0m[1;34m	threadid 23190139039872 -> hwthread 115 - OK[0m[1;34m
[0m[1;34m	threadid 23189937713408 -> hwthread 116 - OK[0m[1;34m
[0m[1;34m	threadid 23189736386944 -> hwthread 117 - OK[0m[1;34m
[0m[1;34m	threadid 23189535060480 -> hwthread 118 - OK[0m[1;34m
[0m[1;34m	threadid 23189333734016 -> hwthread 119 - OK[0m[1;34m
[0m[1;34m	threadid 23189132407552 -> hwthread 120 - OK[0m[1;34m
[0m[1;34m	threadid 23188931081088 -> hwthread 121 - OK[0m[1;34m
[0m[1;34m	threadid 23188729754624 -> hwthread 122 - OK[0m[1;34m
[0m[1;34m	threadid 23188528428160 -> hwthread 123 - OK[0m[1;34m
[0m[1;34m	threadid 23188327101696 -> hwthread 124 - OK[0m[1;34m
[0m[1;34m	threadid 23188125775232 -> hwthread 125 - OK[0m[1;34m
[0m[1;34m	threadid 23187924448768 -> hwthread 126 - OK[0m[1;34m
[0m[1;34m	threadid 23187723122304 -> hwthread 127 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23200089421568 -> hwthread 64 - OK[0m[1;34m
[0m[1;34m	threadid 23200082831104 -> hwthread 65 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 67, m: 67)                                                                 	 0.371671  	 700       	 5.28689   	 0         	 0.203918  	 25.9266   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3350, cols: 67, reductionFactor: 37, colBlockingSize: 12)                  	 0.230704  	 600       	 80.3347   	 0         	 4.76329   	 16.8654   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 67, r: 67, r2: 3350, leftOrthog: 0)        	 0.087859  	 600       	 205.395   	 0         	 37.2776   	 5.50987   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 67, n: 50, r: 67, r2: 67)             	 0.0466443 	 600       	 386.88    	 0         	 46.6566   	 8.29208   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 67)                                                                 	 0.0432858 	 100       	 3.48074   	 0         	 0.170957  	 20.3604   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 67, reductionFactor: 37, colBlockingSize: 12)                  	 0.0404008 	 100       	 57.0573   	 0         	 3.40565   	 16.7537   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                 	 0.0347168 	 100       	 3.36053   	 0         	 0.173979  	 19.3157   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3350, cols: 17, reductionFactor: 37, colBlockingSize: 12)                  	 0.0307447 	 700       	 45.2775   	 0         	 10.4258   	 4.34283   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 67, Qr2: 17)       	 0.0262945 	 700       	 0         	 0         	 86.5518   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3350, cols: 50, reductionFactor: 37, colBlockingSize: 12)                  	 0.0229421 	 100       	 74.983    	 0         	 5.92796   	 12.649    
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 3350, Xcols: 17, r: 17, streamingCols: 0)                   	 0.0225761 	 700       	 30.0188   	 0         	 28.2888   	 1.06115   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 17, k: 2500)   	 0.0183042 	 800       	 185.75    	 0         	 58.8631   	 3.15563   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 2500, m: 17, k: 50)	 0.0122297 	 800       	 278.013   	 0         	 88.1006   	 3.15563   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 3350, leftOrthog: 0)        	 0.0116638 	 100       	 143.607   	 0         	 34.8087   	 4.12562   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 67, r: 67, r2: 2500, leftOrthog: 0)        	 0.0104734 	 100       	 214.304   	 0         	 39.0686   	 5.48533   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 67, n: 50, r: 67, r2: 50)             	 0.00823207	 100       	 272.653   	 0         	 38.4156   	 7.09746   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 850, k: 17)  	 0.00739984	 800       	 156.22    	 0         	 49.9903   	 3.125     
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 17, m: 17)                                                                  	 0.0073652 	 900       	 0.800385  	 0         	 0.864172  	 0.926188  
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 3350, m: 17)                                                                       	 0.00725962	 700       	 0         	 0         	 87.8614   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 17, n: 50, r2: 17)                   	 0.0063888 	 700       	 0         	 0         	 99.8372   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 17, m: 850, k: 17)  	 0.00626175	 700       	 54.9223   	 0         	 26.1043   	 2.10396   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r: 67, r2: 67)             	 0.00559043	 100       	 401.489   	 0         	 48.5814   	 8.26426   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 17, n: 50, r2: 17)                                                                                         	 0.00501121	 800       	 0         	 0         	 36.9093   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 3350, m: 17)                                                              	 0.00474279	 700       	 0         	 0         	 134.486   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 17, reductionFactor: 37, colBlockingSize: 12)                  	 0.00437196	 100       	 33.9448   	 0         	 7.82971   	 4.33538   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 67, reductionFactor: 37, colBlockingSize: 12)                    	 0.00415182	 100       	 11.1044   	 0         	 1.51047   	 7.35158   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 50, Qr2: 17)       	 0.0029523 	 100       	 0         	 0         	 90.7767   	 0         
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 17, r: 17, streamingCols: 0)                   	 0.0028226 	 100       	 25.597    	 0         	 24.1323   	 1.0607    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 67, r: 50, r2: 50, leftOrthog: 0)          	 0.00178828	 100       	 18.7331   	 0         	 6.73273   	 2.78239   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 2500, m: 17)                                                                       	 0.00146881	 100       	 0         	 0         	 46.2961   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 0, n: 50, r2: 17)                    	 0.0013757 	 100       	 0         	 0         	 49.4295   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 17)                                                              	 0.00120835	 100       	 0         	 0         	 56.275    	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 17, reductionFactor: 37, colBlockingSize: 12)                    	 0.000920572	 100       	 3.2242    	 0         	 0.989819  	 3.25736   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 17)                                                                                          	 0.000847474	 200       	 0         	 0         	 3.20954   	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                   	 0.000829886	 100       	 0.602492  	 0         	 2.40997   	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 50, r2: 50)              	 0.000795221	 100       	 31.4378   	 0         	 7.54507   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 17, n: 50, r2: 1)                                                                                          	 0.000743083	 200       	 0         	 0         	 3.66043   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 17, k: 50)     	 0.000667182	 100       	 12.7402   	 0         	 5.03611   	 2.52976   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                          	 0.000512747	 100       	 0         	 0         	 7.80112   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 17, n: 50, r2: 1)                    	 0.000459852	 100       	 0         	 0         	 11.6559   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 50, k: 17)   	 0.000448344	 100       	 18.9587   	 0         	 7.49425   	 2.52976   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 1, Xr2: 50, Qr1: 1, Qr2: 0)          	 0.000433175	 100       	 0         	 0         	 9.23414   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 1, r1low: 0, n: 50, r2: 17)                     	 0.000432879	 100       	 0         	 0         	 3.14176   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                 	 0.000408632	 100       	 0.611797  	 0         	 9.78876   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 17, m: 17, fromLeft: 0)                	 0.000401059	 800       	 0         	 0         	 9.22358   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                            	 0.000390292	 100       	 1.28109   	 0         	 15.3731   	 0.0833333 
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 17)                                                                	 0.000359879	 100       	 0         	 0         	 3.77905   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 17, n: 50, r2: 1)                                                                                 	 0.000347263	 100       	 0.244771  	 0         	 3.91634   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                 	 0.000320599	 100       	 0.77979   	 0         	 12.4766   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 50, m: 17, k: 50)  	 0.000300528	 100       	 28.2836   	 0         	 11.1803   	 2.52976   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 17, m: 50, k: 17)   	 0.000139235	 100       	 20.7563   	 0         	 11.4282   	 1.81624   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 0, m: 850, k: 17)   	 7.06e-06  	 100       	 0         	 0         	 1637.39   	 0         
Timing statistics:
function                                                                                                                                                                                      	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                        	 1.40559   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_normalized(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                     	 1.40554   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::rightNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                            	 1.22363   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::rightNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                        	 1.22239   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double]	 1.15863   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                               	 0.449674  	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                  	 0.334236  	 1800      
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                            	 0.298759  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_leftOrthogonalize(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&) [with T = double]                                   	 0.181843  	 100       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                	 0.111785  	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]           	 0.0901673 	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                           	 0.0612621 	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.0364722 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                                       	 0.02968   	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                    	 0.0253987 	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double]          	 0.0189713 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double]        	 0.0142562 	 1800      
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double]       	 0.0125302 	 900       
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                       	 0.00872842	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                        	 0.00865723	 1000      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.0073652 	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                	 0.00711451	 1300      
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                              	 0.00631102	 900       
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                	 0.00284006	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                              	 0.00251449	 6300      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                         	 0.00113236	 5200      
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                       	 0.00107649	 300       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                         	 0.000829886	 100       
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                           	 0.000401059	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                                                  	 0.000390292	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
orthoX: L, orthoY: L
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 64
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->65  [0m[1;34m1->66  [0m[1;34m2->67  [0m[1;34m3->68  [0m[1;34m4->69  [0m[1;34m5->70  [0m[1;34m6->71  [0m[1;34m7->72  [0m[1;34m8->73  [0m[1;34m9->74  [0m[1;34m10->75  [0m[1;34m11->76  [0m[1;34m12->77  [0m[1;34m13->78  [0m[1;34m14->79  [0m[1;34m15->80  [0m[1;34m16->81  [0m[1;34m17->82  [0m[1;34m18->83  [0m[1;34m19->84  [0m[1;34m20->85  [0m[1;34m21->86  [0m[1;34m22->87  [0m[1;34m23->88  [0m[1;34m24->89  [0m[1;34m25->90  [0m[1;34m26->91  [0m[1;34m27->92  [0m[1;34m28->93  [0m[1;34m29->94  [0m[1;34m30->95  [0m[1;34m31->96  [0m[1;34m32->97  [0m[1;34m33->98  [0m[1;34m34->99  [0m[1;34m35->100  [0m[1;34m36->101  [0m[1;34m37->102  [0m[1;34m38->103  [0m[1;34m39->104  [0m[1;34m40->105  [0m[1;34m41->106  [0m[1;34m42->107  [0m[1;34m43->108  [0m[1;34m44->109  [0m[1;34m45->110  [0m[1;34m46->111  [0m[1;34m47->112  [0m[1;34m48->113  [0m[1;34m49->114  [0m[1;34m50->115  [0m[1;34m51->116  [0m[1;34m52->117  [0m[1;34m53->118  [0m[1;34m54->119  [0m[1;34m55->120  [0m[1;34m56->121  [0m[1;34m57->122  [0m[1;34m58->123  [0m[1;34m59->124  [0m[1;34m60->125  [0m[1;34m61->126  [0m[1;34m62->127  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22698206537600 -> hwthread 65 - OK[0m[1;34m
[0m[1;34m	threadid 22698029737984 -> hwthread 66 - OK[0m[1;34m
[0m[1;34m	threadid 22697828411520 -> hwthread 67 - OK[0m[1;34m
[0m[1;34m	threadid 22697627085056 -> hwthread 68 - OK[0m[1;34m
[0m[1;34m	threadid 22697425758592 -> hwthread 69 - OK[0m[1;34m
[0m[1;34m	threadid 22697224432128 -> hwthread 70 - OK[0m[1;34m
[0m[1;34m	threadid 22697023105664 -> hwthread 71 - OK[0m[1;34m
[0m[1;34m	threadid 22696821779200 -> hwthread 72 - OK[0m[1;34m
[0m[1;34m	threadid 22696620452736 -> hwthread 73 - OK[0m[1;34m
[0m[1;34m	threadid 22696419126272 -> hwthread 74 - OK[0m[1;34m
[0m[1;34m	threadid 22696217799808 -> hwthread 75 - OK[0m[1;34m
[0m[1;34m	threadid 22696016473344 -> hwthread 76 - OK[0m[1;34m
[0m[1;34m	threadid 22695815146880 -> hwthread 77 - OK[0m[1;34m
[0m[1;34m	threadid 22695613820416 -> hwthread 78 - OK[0m[1;34m
[0m[1;34m	threadid 22695412493952 -> hwthread 79 - OK[0m[1;34m
[0m[1;34m	threadid 22695211167488 -> hwthread 80 - OK[0m[1;34m
[0m[1;34m	threadid 22695009841024 -> hwthread 81 - OK[0m[1;34m
[0m[1;34m	threadid 22694808514560 -> hwthread 82 - OK[0m[1;34m
[0m[1;34m	threadid 22694607188096 -> hwthread 83 - OK[0m[1;34m
[0m[1;34m	threadid 22694405861632 -> hwthread 84 - OK[0m[1;34m
[0m[1;34m	threadid 22694204535168 -> hwthread 85 - OK[0m[1;34m
[0m[1;34m	threadid 22694003208704 -> hwthread 86 - OK[0m[1;34m
[0m[1;34m	threadid 22693801882240 -> hwthread 87 - OK[0m[1;34m
[0m[1;34m	threadid 22693600555776 -> hwthread 88 - OK[0m[1;34m
[0m[1;34m	threadid 22693399229312 -> hwthread 89 - OK[0m[1;34m
[0m[1;34m	threadid 22693197902848 -> hwthread 90 - OK[0m[1;34m
[0m[1;34m	threadid 22692996576384 -> hwthread 91 - OK[0m[1;34m
[0m[1;34m	threadid 22692795249920 -> hwthread 92 - OK[0m[1;34m
[0m[1;34m	threadid 22692593923456 -> hwthread 93 - OK[0m[1;34m
[0m[1;34m	threadid 22692392596992 -> hwthread 94 - OK[0m[1;34m
[0m[1;34m	threadid 22692191270528 -> hwthread 95 - OK[0m[1;34m
[0m[1;34m	threadid 22691989944064 -> hwthread 96 - OK[0m[1;34m
[0m[1;34m	threadid 22691788613504 -> hwthread 97 - OK[0m[1;34m
[0m[1;34m	threadid 22691587287040 -> hwthread 98 - OK[0m[1;34m
[0m[1;34m	threadid 22691385960576 -> hwthread 99 - OK[0m[1;34m
[0m[1;34m	threadid 22691184634112 -> hwthread 100 - OK[0m[1;34m
[0m[1;34m	threadid 22690983307648 -> hwthread 101 - OK[0m[1;34m
[0m[1;34m	threadid 22690781981184 -> hwthread 102 - OK[0m[1;34m
[0m[1;34m	threadid 22690580654720 -> hwthread 103 - OK[0m[1;34m
[0m[1;34m	threadid 22690379328256 -> hwthread 104 - OK[0m[1;34m
[0m[1;34m	threadid 22690178001792 -> hwthread 105 - OK[0m[1;34m
[0m[1;34m	threadid 22689976675328 -> hwthread 106 - OK[0m[1;34m
[0m[1;34m	threadid 22689775348864 -> hwthread 107 - OK[0m[1;34m
[0m[1;34m	threadid 22689574022400 -> hwthread 108 - OK[0m[1;34m
[0m[1;34m	threadid 22689372695936 -> hwthread 109 - OK[0m[1;34m
[0m[1;34m	threadid 22689171369472 -> hwthread 110 - OK[0m[1;34m
[0m[1;34m	threadid 22688970043008 -> hwthread 111 - OK[0m[1;34m
[0m[1;34m	threadid 22688768716544 -> hwthread 112 - OK[0m[1;34m
[0m[1;34m	threadid 22688567390080 -> hwthread 113 - OK[0m[1;34m
[0m[1;34m	threadid 22688366063616 -> hwthread 114 - OK[0m[1;34m
[0m[1;34m	threadid 22688164737152 -> hwthread 115 - OK[0m[1;34m
[0m[1;34m	threadid 22687963410688 -> hwthread 116 - OK[0m[1;34m
[0m[1;34m	threadid 22687762084224 -> hwthread 117 - OK[0m[1;34m
[0m[1;34m	threadid 22687560757760 -> hwthread 118 - OK[0m[1;34m
[0m[1;34m	threadid 22687359431296 -> hwthread 119 - OK[0m[1;34m
[0m[1;34m	threadid 22687158104832 -> hwthread 120 - OK[0m[1;34m
[0m[1;34m	threadid 22686956778368 -> hwthread 121 - OK[0m[1;34m
[0m[1;34m	threadid 22686755451904 -> hwthread 122 - OK[0m[1;34m
[0m[1;34m	threadid 22686554125440 -> hwthread 123 - OK[0m[1;34m
[0m[1;34m	threadid 22686352798976 -> hwthread 124 - OK[0m[1;34m
[0m[1;34m	threadid 22686151472512 -> hwthread 125 - OK[0m[1;34m
[0m[1;34m	threadid 22685950146048 -> hwthread 126 - OK[0m[1;34m
[0m[1;34m	threadid 22685748819584 -> hwthread 127 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22698100877056 -> hwthread 64 - OK[0m[1;34m
[0m[1;34m	threadid 22697922291456 -> hwthread 65 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 68, m: 68)                                                                 	 0.371472  	 700       	 5.53014   	 0         	 0.210148  	 26.3154   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3400, cols: 68, reductionFactor: 37, colBlockingSize: 12)                  	 0.233086  	 600       	 83.1272   	 0         	 4.85638   	 17.1171   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 68, r: 68, r2: 3400, leftOrthog: 0)        	 0.0893487 	 600       	 211.149   	 0         	 37.7585   	 5.59211   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 68, n: 50, r: 68, r2: 68)             	 0.0469733 	 600       	 401.631   	 0         	 47.7232   	 8.41584   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 68, reductionFactor: 37, colBlockingSize: 12)                  	 0.0437703 	 100       	 54.2488   	 0         	 3.19165   	 16.9971   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 68)                                                                 	 0.0416531 	 100       	 3.66519   	 0         	 0.179578  	 20.41     
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                 	 0.0347888 	 100       	 3.35357   	 0         	 0.173619  	 19.3157   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3400, cols: 18, reductionFactor: 37, colBlockingSize: 12)                  	 0.0339917 	 700       	 46.5974   	 0         	 10.1358   	 4.59728   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 68, Qr2: 18)       	 0.0299204 	 700       	 0         	 0         	 78.122    	 0         
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 3400, Xcols: 18, r: 18, streamingCols: 0)                   	 0.024886  	 700       	 30.9861   	 0         	 27.5797   	 1.12351   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3400, cols: 50, reductionFactor: 37, colBlockingSize: 12)                  	 0.0224204 	 100       	 77.8731   	 0         	 6.15511   	 12.6518   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 18, k: 2500)   	 0.0192577 	 800       	 186.938   	 0         	 56.7959   	 3.2914    
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 2500, m: 18, k: 50)	 0.0133095 	 800       	 270.484   	 0         	 82.1789   	 3.2914    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 3400, leftOrthog: 0)        	 0.0124983 	 100       	 136.018   	 0         	 32.9645   	 4.12621   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 68, r: 68, r2: 2500, leftOrthog: 0)        	 0.0107731 	 100       	 214.609   	 0         	 38.559    	 5.56574   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 18, m: 18)                                                                  	 0.00758996	 900       	 0.92206   	 0         	 0.939135  	 0.981818  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 68, n: 50, r: 68, r2: 50)             	 0.00746368	 100       	 309.767   	 0         	 43.3674   	 7.14286   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 900, k: 18)  	 0.00738423	 800       	 175.509   	 0         	 53.8228   	 3.26087   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 18, m: 900, k: 18)  	 0.00652293	 700       	 62.5854   	 0         	 28.0939   	 2.22772   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 3400, m: 18)                                                                       	 0.006471  	 700       	 0         	 0         	 105.925   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 18, n: 50, r2: 18)                   	 0.00595691	 700       	 0         	 0         	 115.066   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r: 68, r2: 68)             	 0.00588276	 100       	 393.013   	 0         	 46.8656   	 8.38595   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 18, n: 50, r2: 18)                                                                                         	 0.00553663	 800       	 0         	 0         	 37.4524   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 18, reductionFactor: 37, colBlockingSize: 12)                  	 0.00488804	 100       	 34.0379   	 0         	 7.41794   	 4.58858   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 3400, m: 18)                                                              	 0.0042324 	 700       	 0         	 0         	 161.951   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 68, reductionFactor: 37, colBlockingSize: 12)                    	 0.00402266	 100       	 11.8056   	 0         	 1.59576   	 7.39808   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 18, r: 18, streamingCols: 0)                   	 0.00310408	 100       	 26.0947   	 0         	 23.237    	 1.12298   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 50, Qr2: 18)       	 0.00304325	 100       	 0         	 0         	 89.3781   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 68, r: 50, r2: 50, leftOrthog: 0)          	 0.00169624	 100       	 20.0443   	 0         	 7.16878   	 2.79605   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 0, n: 50, r2: 18)                    	 0.00124924	 100       	 0         	 0         	 57.6351   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 18, reductionFactor: 37, colBlockingSize: 12)                    	 0.00119301	 100       	 2.78921   	 0         	 0.820778  	 3.39825   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 2500, m: 18)                                                                       	 0.00118881	 100       	 0         	 0         	 60.5649   	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                   	 0.000911807	 100       	 0.548362  	 0         	 2.19345   	 0.25      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 18)                                                                                          	 0.000820996	 200       	 0         	 0         	 3.50793   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 50, r2: 50)              	 0.000778211	 100       	 32.125    	 0         	 7.70999   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 18, n: 50, r2: 1)                                                                                          	 0.000774655	 200       	 0         	 0         	 3.71778   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 18)                                                              	 0.000769319	 100       	 0         	 0         	 93.5893   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 18, k: 50)     	 0.000627621	 100       	 14.3399   	 0         	 5.48101   	 2.61628   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 50, k: 18)   	 0.000544863	 100       	 16.5179   	 0         	 6.31351   	 2.61628   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                          	 0.000518925	 100       	 0         	 0         	 7.70824   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 18, n: 50, r2: 1)                    	 0.000482115	 100       	 0         	 0         	 11.2836   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 1, Xr2: 50, Qr1: 1, Qr2: 0)          	 0.000421297	 100       	 0         	 0         	 9.49449   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 1, r1low: 0, n: 50, r2: 18)                     	 0.000418189	 100       	 0         	 0         	 3.44342   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                            	 0.000415616	 100       	 1.20303   	 0         	 14.4364   	 0.0833333 
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                 	 0.000411911	 100       	 0.606927  	 0         	 9.71084   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 18)                                                                	 0.000380364	 100       	 0         	 0         	 3.78585   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 18, n: 50, r2: 1)                                                                                 	 0.000366593	 100       	 0.245504  	 0         	 3.92806   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                 	 0.00035105	 100       	 0.712149  	 0         	 11.3944   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 50, m: 18, k: 50)  	 0.000321535	 100       	 27.9907   	 0         	 10.6987   	 2.61628   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 18, m: 18, fromLeft: 0)                	 0.000295586	 800       	 0         	 0         	 14.0304   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 18, m: 50, k: 18)   	 0.000144665	 100       	 22.3966   	 0         	 11.7458   	 1.90678   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 0, m: 900, k: 18)   	 6.9e-06   	 100       	 0         	 0         	 1878.26   	 0         
Timing statistics:
function                                                                                                                                                                                      	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                        	 1.42152   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_normalized(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                     	 1.42148   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::rightNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                            	 1.22887   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::rightNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                        	 1.22752   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double]	 1.1638    	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                               	 0.447914  	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                  	 0.343372  	 1800      
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                            	 0.303927  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_leftOrthogonalize(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&) [with T = double]                                   	 0.192516  	 100       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                	 0.114316  	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]           	 0.0949608 	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                           	 0.061098  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.0405291 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                                       	 0.0333849 	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                    	 0.0279901 	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double]          	 0.0198854 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double]        	 0.0146036 	 1800      
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double]       	 0.013631  	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                        	 0.00810645	 1000      
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                       	 0.00765981	 800       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                	 0.0076512 	 1300      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.00758996	 900       
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                              	 0.00538208	 900       
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                	 0.00273286	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                              	 0.00263288	 6300      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                         	 0.00193953	 5200      
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                       	 0.00112955	 300       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                         	 0.000911807	 100       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                                                  	 0.000415616	 100       
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                           	 0.000295586	 800       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
orthoX: L, orthoY: L
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 64
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->65  [0m[1;34m1->66  [0m[1;34m2->67  [0m[1;34m3->68  [0m[1;34m4->69  [0m[1;34m5->70  [0m[1;34m6->71  [0m[1;34m7->72  [0m[1;34m8->73  [0m[1;34m9->74  [0m[1;34m10->75  [0m[1;34m11->76  [0m[1;34m12->77  [0m[1;34m13->78  [0m[1;34m14->79  [0m[1;34m15->80  [0m[1;34m16->81  [0m[1;34m17->82  [0m[1;34m18->83  [0m[1;34m19->84  [0m[1;34m20->85  [0m[1;34m21->86  [0m[1;34m22->87  [0m[1;34m23->88  [0m[1;34m24->89  [0m[1;34m25->90  [0m[1;34m26->91  [0m[1;34m27->92  [0m[1;34m28->93  [0m[1;34m29->94  [0m[1;34m30->95  [0m[1;34m31->96  [0m[1;34m32->97  [0m[1;34m33->98  [0m[1;34m34->99  [0m[1;34m35->100  [0m[1;34m36->101  [0m[1;34m37->102  [0m[1;34m38->103  [0m[1;34m39->104  [0m[1;34m40->105  [0m[1;34m41->106  [0m[1;34m42->107  [0m[1;34m43->108  [0m[1;34m44->109  [0m[1;34m45->110  [0m[1;34m46->111  [0m[1;34m47->112  [0m[1;34m48->113  [0m[1;34m49->114  [0m[1;34m50->115  [0m[1;34m51->116  [0m[1;34m52->117  [0m[1;34m53->118  [0m[1;34m54->119  [0m[1;34m55->120  [0m[1;34m56->121  [0m[1;34m57->122  [0m[1;34m58->123  [0m[1;34m59->124  [0m[1;34m60->125  [0m[1;34m61->126  [0m[1;34m62->127  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22694130227072 -> hwthread 65 - OK[0m[1;34m
[0m[1;34m	threadid 22693936097280 -> hwthread 66 - OK[0m[1;34m
[0m[1;34m	threadid 22693734770816 -> hwthread 67 - OK[0m[1;34m
[0m[1;34m	threadid 22693533444352 -> hwthread 68 - OK[0m[1;34m
[0m[1;34m	threadid 22693332117888 -> hwthread 69 - OK[0m[1;34m
[0m[1;34m	threadid 22693130791424 -> hwthread 70 - OK[0m[1;34m
[0m[1;34m	threadid 22692929464960 -> hwthread 71 - OK[0m[1;34m
[0m[1;34m	threadid 22692728138496 -> hwthread 72 - OK[0m[1;34m
[0m[1;34m	threadid 22692526812032 -> hwthread 73 - OK[0m[1;34m
[0m[1;34m	threadid 22692325485568 -> hwthread 74 - OK[0m[1;34m
[0m[1;34m	threadid 22692124159104 -> hwthread 75 - OK[0m[1;34m
[0m[1;34m	threadid 22691922832640 -> hwthread 76 - OK[0m[1;34m
[0m[1;34m	threadid 22691721506176 -> hwthread 77 - OK[0m[1;34m
[0m[1;34m	threadid 22691520179712 -> hwthread 78 - OK[0m[1;34m
[0m[1;34m	threadid 22691318853248 -> hwthread 79 - OK[0m[1;34m
[0m[1;34m	threadid 22691117526784 -> hwthread 80 - OK[0m[1;34m
[0m[1;34m	threadid 22690916200320 -> hwthread 81 - OK[0m[1;34m
[0m[1;34m	threadid 22690714873856 -> hwthread 82 - OK[0m[1;34m
[0m[1;34m	threadid 22690513547392 -> hwthread 83 - OK[0m[1;34m
[0m[1;34m	threadid 22690312220928 -> hwthread 84 - OK[0m[1;34m
[0m[1;34m	threadid 22690110894464 -> hwthread 85 - OK[0m[1;34m
[0m[1;34m	threadid 22689909568000 -> hwthread 86 - OK[0m[1;34m
[0m[1;34m	threadid 22689708241536 -> hwthread 87 - OK[0m[1;34m
[0m[1;34m	threadid 22689506915072 -> hwthread 88 - OK[0m[1;34m
[0m[1;34m	threadid 22689305588608 -> hwthread 89 - OK[0m[1;34m
[0m[1;34m	threadid 22689104262144 -> hwthread 90 - OK[0m[1;34m
[0m[1;34m	threadid 22688902935680 -> hwthread 91 - OK[0m[1;34m
[0m[1;34m	threadid 22688701609216 -> hwthread 92 - OK[0m[1;34m
[0m[1;34m	threadid 22688500282752 -> hwthread 93 - OK[0m[1;34m
[0m[1;34m	threadid 22688298956288 -> hwthread 94 - OK[0m[1;34m
[0m[1;34m	threadid 22688097629824 -> hwthread 95 - OK[0m[1;34m
[0m[1;34m	threadid 22687896303360 -> hwthread 96 - OK[0m[1;34m
[0m[1;34m	threadid 22687694972800 -> hwthread 97 - OK[0m[1;34m
[0m[1;34m	threadid 22687493646336 -> hwthread 98 - OK[0m[1;34m
[0m[1;34m	threadid 22687292319872 -> hwthread 99 - OK[0m[1;34m
[0m[1;34m	threadid 22687090993408 -> hwthread 100 - OK[0m[1;34m
[0m[1;34m	threadid 22686889666944 -> hwthread 101 - OK[0m[1;34m
[0m[1;34m	threadid 22686688340480 -> hwthread 102 - OK[0m[1;34m
[0m[1;34m	threadid 22686487014016 -> hwthread 103 - OK[0m[1;34m
[0m[1;34m	threadid 22686285687552 -> hwthread 104 - OK[0m[1;34m
[0m[1;34m	threadid 22686084361088 -> hwthread 105 - OK[0m[1;34m
[0m[1;34m	threadid 22685883034624 -> hwthread 106 - OK[0m[1;34m
[0m[1;34m	threadid 22685681708160 -> hwthread 107 - OK[0m[1;34m
[0m[1;34m	threadid 22685480381696 -> hwthread 108 - OK[0m[1;34m
[0m[1;34m	threadid 22685279055232 -> hwthread 109 - OK[0m[1;34m
[0m[1;34m	threadid 22685077728768 -> hwthread 110 - OK[0m[1;34m
[0m[1;34m	threadid 22684876402304 -> hwthread 111 - OK[0m[1;34m
[0m[1;34m	threadid 22684675075840 -> hwthread 112 - OK[0m[1;34m
[0m[1;34m	threadid 22684473749376 -> hwthread 113 - OK[0m[1;34m
[0m[1;34m	threadid 22684272422912 -> hwthread 114 - OK[0m[1;34m
[0m[1;34m	threadid 22684071096448 -> hwthread 115 - OK[0m[1;34m
[0m[1;34m	threadid 22683869769984 -> hwthread 116 - OK[0m[1;34m
[0m[1;34m	threadid 22683668443520 -> hwthread 117 - OK[0m[1;34m
[0m[1;34m	threadid 22683467117056 -> hwthread 118 - OK[0m[1;34m
[0m[1;34m	threadid 22683265790592 -> hwthread 119 - OK[0m[1;34m
[0m[1;34m	threadid 22683064464128 -> hwthread 120 - OK[0m[1;34m
[0m[1;34m	threadid 22682863137664 -> hwthread 121 - OK[0m[1;34m
[0m[1;34m	threadid 22682661811200 -> hwthread 122 - OK[0m[1;34m
[0m[1;34m	threadid 22682460484736 -> hwthread 123 - OK[0m[1;34m
[0m[1;34m	threadid 22682259158272 -> hwthread 124 - OK[0m[1;34m
[0m[1;34m	threadid 22682057831808 -> hwthread 125 - OK[0m[1;34m
[0m[1;34m	threadid 22681856505344 -> hwthread 126 - OK[0m[1;34m
[0m[1;34m	threadid 22681655178880 -> hwthread 127 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22694024566528 -> hwthread 64 - OK[0m[1;34m
[0m[1;34m	threadid 22694017976064 -> hwthread 65 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 69, m: 69)                                                                 	 0.388608  	 700       	 5.52294   	 0         	 0.206818  	 26.7043   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3450, cols: 69, reductionFactor: 37, colBlockingSize: 12)                  	 0.238624  	 600       	 84.8332   	 0         	 4.88422   	 17.3688   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 69, r: 69, r2: 3450, leftOrthog: 0)        	 0.0881716 	 600       	 223.548   	 0         	 39.3962   	 5.67434   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 69, n: 50, r: 69, r2: 69)             	 0.0444792 	 600       	 443.14    	 0         	 51.8924   	 8.5396    
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 69, reductionFactor: 37, colBlockingSize: 12)                  	 0.041848  	 100       	 58.4219   	 0         	 3.38866   	 17.2404   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 69)                                                                 	 0.041177  	 100       	 3.75614   	 0         	 0.183598  	 20.4586   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3450, cols: 19, reductionFactor: 37, colBlockingSize: 12)                  	 0.0370485 	 700       	 48.3354   	 0         	 9.96265   	 4.85166   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                 	 0.0348118 	 100       	 3.35135   	 0         	 0.173504  	 19.3157   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 69, Qr2: 19)       	 0.0296661 	 700       	 0         	 0         	 80.9058   	 0         
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 3450, Xcols: 19, r: 19, streamingCols: 0)                   	 0.0259544 	 700       	 33.5902   	 0         	 28.3254   	 1.18587   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3450, cols: 50, reductionFactor: 37, colBlockingSize: 12)                  	 0.0227119 	 100       	 78.0041   	 0         	 6.16417   	 12.6544   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 19, k: 2500)   	 0.0197097 	 800       	 192.799   	 0         	 56.3216   	 3.42318   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 2500, m: 19, k: 50)	 0.0129472 	 800       	 293.499   	 0         	 85.7387   	 3.42318   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 3450, leftOrthog: 0)        	 0.0122226 	 100       	 141.132   	 0         	 34.1989   	 4.12679   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 69, r: 69, r2: 2500, leftOrthog: 0)        	 0.00990524	 100       	 240.327   	 0         	 42.5651   	 5.64611   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 3450, m: 19)                                                                       	 0.00857998	 700       	 0         	 0         	 85.5666   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 19, m: 19)                                                                  	 0.00852594	 900       	 0.965242  	 0         	 0.930618  	 1.03721   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 950, k: 19)  	 0.00732312	 800       	 197.184   	 0         	 58.1173   	 3.39286   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 69, n: 50, r: 69, r2: 50)             	 0.00708433	 100       	 336.023   	 0         	 46.751    	 7.1875    
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 19, n: 50, r2: 19)                   	 0.00621034	 700       	 0         	 0         	 118.216   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r: 69, r2: 69)             	 0.00590641	 100       	 403.037   	 0         	 47.3737   	 8.5076    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 19, n: 50, r2: 19)                                                                                         	 0.00575464	 800       	 0         	 0         	 40.1484   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 3450, m: 19)                                                              	 0.00557949	 700       	 0         	 0         	 131.582   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 19, reductionFactor: 37, colBlockingSize: 12)                  	 0.00505336	 100       	 36.6842   	 0         	 7.5769    	 4.84158   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 19, m: 950, k: 19)  	 0.00491234	 700       	 97.7396   	 0         	 41.5651   	 2.35149   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 69, reductionFactor: 37, colBlockingSize: 12)                    	 0.00439136	 100       	 11.1348   	 0         	 1.49584   	 7.44379   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 50, Qr2: 19)       	 0.00313774	 100       	 0         	 0         	 87.9615   	 0         
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 19, r: 19, streamingCols: 0)                   	 0.00310994	 100       	 29.0198   	 0         	 24.4842   	 1.18525   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 0, n: 50, r2: 19)                    	 0.00193066	 100       	 0         	 0         	 39.3648   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 2500, m: 19)                                                                       	 0.0017559 	 100       	 0         	 0         	 43.2826   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 69, r: 50, r2: 50, leftOrthog: 0)          	 0.00175382	 100       	 19.6714   	 0         	 7.00187   	 2.80945   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 19)                                                              	 0.00153977	 100       	 0         	 0         	 49.3579   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 19, reductionFactor: 37, colBlockingSize: 12)                    	 0.00102584	 100       	 3.61417   	 0         	 1.02238   	 3.53506   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                   	 0.000819295	 100       	 0.610281  	 0         	 2.44112   	 0.25      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 19)                                                                                          	 0.00079567	 200       	 0         	 0         	 3.82068   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 50, r2: 50)              	 0.000754236	 100       	 33.1461   	 0         	 7.95507   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 19, n: 50, r2: 1)                                                                                          	 0.000735898	 200       	 0         	 0         	 4.13101   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 19, k: 50)     	 0.000708397	 100       	 13.4106   	 0         	 4.96897   	 2.69886   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 19, n: 50, r2: 1)                    	 0.000691991	 100       	 0         	 0         	 7.97698   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                          	 0.000503023	 100       	 0         	 0         	 7.95192   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 50, k: 19)   	 0.000494737	 100       	 19.2021   	 0         	 7.11489   	 2.69886   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 1, r1low: 0, n: 50, r2: 19)                     	 0.000435515	 100       	 0         	 0         	 3.49012   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 1, Xr2: 50, Qr1: 1, Qr2: 0)          	 0.000424418	 100       	 0         	 0         	 9.42467   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 19, m: 19, fromLeft: 0)                	 0.000409667	 800       	 0         	 0         	 11.2794   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                            	 0.000404246	 100       	 1.23687   	 0         	 14.8424   	 0.0833333 
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                 	 0.000388706	 100       	 0.64316   	 0         	 10.2906   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 50, m: 19, k: 50)  	 0.000378458	 100       	 25.1019   	 0         	 9.3009    	 2.69886   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 19)                                                                	 0.000369306	 100       	 0         	 0         	 4.11583   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 19, n: 50, r2: 1)                                                                                 	 0.000348792	 100       	 0.272369  	 0         	 4.3579    	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                 	 0.000340242	 100       	 0.734771  	 0         	 11.7563   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 19, m: 50, k: 19)   	 0.000151963	 100       	 23.7558   	 0         	 11.9029   	 1.9958    
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 0, m: 950, k: 19)   	 6.65e-06  	 100       	 0         	 0         	 2171.43   	 0         
Timing statistics:
function                                                                                                                                                                                      	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                        	 1.45194   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_normalized(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                     	 1.4519    	 100       
<PITTS::TensorTrain<double>> :: T PITTS::rightNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                            	 1.2511    	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::rightNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                        	 1.24985   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double]	 1.19069   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                               	 0.464597  	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                  	 0.350703  	 1800      
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                            	 0.30819   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_leftOrthogonalize(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&) [with T = double]                                   	 0.200714  	 100       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                	 0.112053  	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]           	 0.105392  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                           	 0.0582242 	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.0435446 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                                       	 0.0332283 	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                    	 0.0290644 	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double]          	 0.0204181 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double]       	 0.0133257 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double]        	 0.0128888 	 1800      
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                       	 0.0103359 	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                        	 0.00926851	 1000      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.00852594	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                	 0.00778924	 1300      
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                              	 0.00748856	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                              	 0.00231471	 6300      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                	 0.00177559	 1800      
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                       	 0.00107774	 300       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                         	 0.00104078	 5200      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                         	 0.000819295	 100       
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                           	 0.000409667	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                                                  	 0.000404246	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
orthoX: L, orthoY: L
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 64
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->65  [0m[1;34m1->66  [0m[1;34m2->67  [0m[1;34m3->68  [0m[1;34m4->69  [0m[1;34m5->70  [0m[1;34m6->71  [0m[1;34m7->72  [0m[1;34m8->73  [0m[1;34m9->74  [0m[1;34m10->75  [0m[1;34m11->76  [0m[1;34m12->77  [0m[1;34m13->78  [0m[1;34m14->79  [0m[1;34m15->80  [0m[1;34m16->81  [0m[1;34m17->82  [0m[1;34m18->83  [0m[1;34m19->84  [0m[1;34m20->85  [0m[1;34m21->86  [0m[1;34m22->87  [0m[1;34m23->88  [0m[1;34m24->89  [0m[1;34m25->90  [0m[1;34m26->91  [0m[1;34m27->92  [0m[1;34m28->93  [0m[1;34m29->94  [0m[1;34m30->95  [0m[1;34m31->96  [0m[1;34m32->97  [0m[1;34m33->98  [0m[1;34m34->99  [0m[1;34m35->100  [0m[1;34m36->101  [0m[1;34m37->102  [0m[1;34m38->103  [0m[1;34m39->104  [0m[1;34m40->105  [0m[1;34m41->106  [0m[1;34m42->107  [0m[1;34m43->108  [0m[1;34m44->109  [0m[1;34m45->110  [0m[1;34m46->111  [0m[1;34m47->112  [0m[1;34m48->113  [0m[1;34m49->114  [0m[1;34m50->115  [0m[1;34m51->116  [0m[1;34m52->117  [0m[1;34m53->118  [0m[1;34m54->119  [0m[1;34m55->120  [0m[1;34m56->121  [0m[1;34m57->122  [0m[1;34m58->123  [0m[1;34m59->124  [0m[1;34m60->125  [0m[1;34m61->126  [0m[1;34m62->127  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22852735584128 -> hwthread 65 - OK[0m[1;34m
[0m[1;34m	threadid 22852514342912 -> hwthread 66 - OK[0m[1;34m
[0m[1;34m	threadid 22852313016448 -> hwthread 67 - OK[0m[1;34m
[0m[1;34m	threadid 22852111689984 -> hwthread 68 - OK[0m[1;34m
[0m[1;34m	threadid 22851910363520 -> hwthread 69 - OK[0m[1;34m
[0m[1;34m	threadid 22851709037056 -> hwthread 70 - OK[0m[1;34m
[0m[1;34m	threadid 22851507710592 -> hwthread 71 - OK[0m[1;34m
[0m[1;34m	threadid 22851306384128 -> hwthread 72 - OK[0m[1;34m
[0m[1;34m	threadid 22851105057664 -> hwthread 73 - OK[0m[1;34m
[0m[1;34m	threadid 22850903731200 -> hwthread 74 - OK[0m[1;34m
[0m[1;34m	threadid 22850702404736 -> hwthread 75 - OK[0m[1;34m
[0m[1;34m	threadid 22850501078272 -> hwthread 76 - OK[0m[1;34m
[0m[1;34m	threadid 22850299751808 -> hwthread 77 - OK[0m[1;34m
[0m[1;34m	threadid 22850098425344 -> hwthread 78 - OK[0m[1;34m
[0m[1;34m	threadid 22849897098880 -> hwthread 79 - OK[0m[1;34m
[0m[1;34m	threadid 22849695772416 -> hwthread 80 - OK[0m[1;34m
[0m[1;34m	threadid 22849494445952 -> hwthread 81 - OK[0m[1;34m
[0m[1;34m	threadid 22849293119488 -> hwthread 82 - OK[0m[1;34m
[0m[1;34m	threadid 22849091793024 -> hwthread 83 - OK[0m[1;34m
[0m[1;34m	threadid 22848890466560 -> hwthread 84 - OK[0m[1;34m
[0m[1;34m	threadid 22848689140096 -> hwthread 85 - OK[0m[1;34m
[0m[1;34m	threadid 22848487813632 -> hwthread 86 - OK[0m[1;34m
[0m[1;34m	threadid 22848286487168 -> hwthread 87 - OK[0m[1;34m
[0m[1;34m	threadid 22848085160704 -> hwthread 88 - OK[0m[1;34m
[0m[1;34m	threadid 22847883834240 -> hwthread 89 - OK[0m[1;34m
[0m[1;34m	threadid 22847682507776 -> hwthread 90 - OK[0m[1;34m
[0m[1;34m	threadid 22847481181312 -> hwthread 91 - OK[0m[1;34m
[0m[1;34m	threadid 22847279854848 -> hwthread 92 - OK[0m[1;34m
[0m[1;34m	threadid 22847078528384 -> hwthread 93 - OK[0m[1;34m
[0m[1;34m	threadid 22846877201920 -> hwthread 94 - OK[0m[1;34m
[0m[1;34m	threadid 22846675875456 -> hwthread 95 - OK[0m[1;34m
[0m[1;34m	threadid 22846474548992 -> hwthread 96 - OK[0m[1;34m
[0m[1;34m	threadid 22846273218432 -> hwthread 97 - OK[0m[1;34m
[0m[1;34m	threadid 22846071891968 -> hwthread 98 - OK[0m[1;34m
[0m[1;34m	threadid 22845870565504 -> hwthread 99 - OK[0m[1;34m
[0m[1;34m	threadid 22845669239040 -> hwthread 100 - OK[0m[1;34m
[0m[1;34m	threadid 22845467912576 -> hwthread 101 - OK[0m[1;34m
[0m[1;34m	threadid 22845266586112 -> hwthread 102 - OK[0m[1;34m
[0m[1;34m	threadid 22845065259648 -> hwthread 103 - OK[0m[1;34m
[0m[1;34m	threadid 22844863933184 -> hwthread 104 - OK[0m[1;34m
[0m[1;34m	threadid 22844662606720 -> hwthread 105 - OK[0m[1;34m
[0m[1;34m	threadid 22844461280256 -> hwthread 106 - OK[0m[1;34m
[0m[1;34m	threadid 22844259953792 -> hwthread 107 - OK[0m[1;34m
[0m[1;34m	threadid 22844058627328 -> hwthread 108 - OK[0m[1;34m
[0m[1;34m	threadid 22843857300864 -> hwthread 109 - OK[0m[1;34m
[0m[1;34m	threadid 22843655974400 -> hwthread 110 - OK[0m[1;34m
[0m[1;34m	threadid 22843454647936 -> hwthread 111 - OK[0m[1;34m
[0m[1;34m	threadid 22843253321472 -> hwthread 112 - OK[0m[1;34m
[0m[1;34m	threadid 22843051995008 -> hwthread 113 - OK[0m[1;34m
[0m[1;34m	threadid 22842850668544 -> hwthread 114 - OK[0m[1;34m
[0m[1;34m	threadid 22842649342080 -> hwthread 115 - OK[0m[1;34m
[0m[1;34m	threadid 22842448015616 -> hwthread 116 - OK[0m[1;34m
[0m[1;34m	threadid 22842246689152 -> hwthread 117 - OK[0m[1;34m
[0m[1;34m	threadid 22842045362688 -> hwthread 118 - OK[0m[1;34m
[0m[1;34m	threadid 22841844036224 -> hwthread 119 - OK[0m[1;34m
[0m[1;34m	threadid 22841642709760 -> hwthread 120 - OK[0m[1;34m
[0m[1;34m	threadid 22841441383296 -> hwthread 121 - OK[0m[1;34m
[0m[1;34m	threadid 22841240056832 -> hwthread 122 - OK[0m[1;34m
[0m[1;34m	threadid 22841038730368 -> hwthread 123 - OK[0m[1;34m
[0m[1;34m	threadid 22840837403904 -> hwthread 124 - OK[0m[1;34m
[0m[1;34m	threadid 22840636077440 -> hwthread 125 - OK[0m[1;34m
[0m[1;34m	threadid 22840434750976 -> hwthread 126 - OK[0m[1;34m
[0m[1;34m	threadid 22840233424512 -> hwthread 127 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22852629923584 -> hwthread 64 - OK[0m[1;34m
[0m[1;34m	threadid 22852623333120 -> hwthread 65 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 70, m: 70)                                                                 	 0.388827  	 700       	 5.76331   	 0         	 0.212722  	 27.0932   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3500, cols: 70, reductionFactor: 37, colBlockingSize: 12)                  	 0.244519  	 600       	 86.4401   	 0         	 4.90564   	 17.6206   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 70, r: 70, r2: 3500, leftOrthog: 0)        	 0.0950881 	 600       	 216.431   	 0         	 37.5971   	 5.75658   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 70, n: 50, r: 70, r2: 70)             	 0.0449031 	 600       	 458.32    	 0         	 52.9032   	 8.66337   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 70, reductionFactor: 37, colBlockingSize: 12)                  	 0.0422814 	 100       	 59.5111   	 0         	 3.40386   	 17.4834   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 70)                                                                 	 0.0421859 	 100       	 3.71372   	 0         	 0.181103  	 20.5061   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3500, cols: 20, reductionFactor: 37, colBlockingSize: 12)                  	 0.0397126 	 700       	 50.6886   	 0         	 9.92734   	 5.10596   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                 	 0.0352153 	 100       	 3.31296   	 0         	 0.171516  	 19.3157   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 70, Qr2: 20)       	 0.0313878 	 700       	 0         	 0         	 78.5019   	 0         
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 3500, Xcols: 20, r: 20, streamingCols: 0)                   	 0.0279387 	 700       	 35.0767   	 0         	 28.1015   	 1.24822   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3500, cols: 50, reductionFactor: 37, colBlockingSize: 12)                  	 0.0231692 	 100       	 77.5727   	 0         	 6.12883   	 12.657    
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 20, k: 2500)   	 0.0205178 	 800       	 194.952   	 0         	 54.8986   	 3.55114   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 2500, m: 20, k: 50)	 0.0136249 	 800       	 293.581   	 0         	 82.6723   	 3.55114   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 3500, leftOrthog: 0)        	 0.0116426 	 100       	 150.31    	 0         	 36.418    	 4.12736   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 70, r: 70, r2: 2500, leftOrthog: 0)        	 0.0101416 	 100       	 241.579   	 0         	 42.1867   	 5.72644   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 3500, m: 20)                                                                       	 0.0087338 	 700       	 0         	 0         	 89.7662   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 20, m: 20)                                                                  	 0.00869866	 900       	 1.10355   	 0         	 1.00981   	 1.09283   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 1000, k: 20) 	 0.00821488	 800       	 194.769   	 0         	 55.3143   	 3.52113   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 70, n: 50, r: 70, r2: 50)             	 0.00714272	 100       	 343.006   	 0         	 47.4329   	 7.2314    
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 20, n: 50, r2: 20)                   	 0.00707683	 700       	 0         	 0         	 110.784   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 20, n: 50, r2: 20)                                                                                         	 0.00633112	 800       	 0         	 0         	 40.4352   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r: 70, r2: 70)             	 0.00567552	 100       	 431.678   	 0         	 50.0254   	 8.62919   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 3500, m: 20)                                                              	 0.00565936	 700       	 0         	 0         	 138.532   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 20, reductionFactor: 37, colBlockingSize: 12)                  	 0.00532118	 100       	 38.6015   	 0         	 7.57727   	 5.09438   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 20, m: 1000, k: 20) 	 0.00493802	 700       	 113.406   	 0         	 45.8159   	 2.47525   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 70, reductionFactor: 37, colBlockingSize: 12)                    	 0.00450507	 100       	 11.1706   	 0         	 1.49165   	 7.48874   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 20, r: 20, streamingCols: 0)                   	 0.00342018	 100       	 29.2383   	 0         	 23.4374   	 1.2475    
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 50, Qr2: 20)       	 0.00306288	 100       	 0         	 0         	 91.4173   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 2500, m: 20)                                                                       	 0.00192735	 100       	 0         	 0         	 41.5078   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 70, r: 50, r2: 50, leftOrthog: 0)          	 0.00171631	 100       	 20.3926   	 0         	 7.2248    	 2.82258   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 0, n: 50, r2: 20)                    	 0.00160084	 100       	 0         	 0         	 49.9737   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 20)                                                              	 0.00156983	 100       	 0         	 0         	 50.961    	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 20, reductionFactor: 37, colBlockingSize: 12)                    	 0.00108166	 100       	 3.79798   	 0         	 1.03545   	 3.66795   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                   	 0.000827782	 100       	 0.604024  	 0         	 2.4161    	 0.25      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 20)                                                                                          	 0.000803925	 200       	 0         	 0         	 3.98047   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 20, k: 50)     	 0.000774926	 100       	 12.9045   	 0         	 4.6456    	 2.77778   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 20, n: 50, r2: 1)                                                                                          	 0.000770369	 200       	 0         	 0         	 4.15385   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 50, r2: 50)              	 0.000727264	 100       	 34.3754   	 0         	 8.2501    	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                          	 0.000532902	 100       	 0         	 0         	 7.50607   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 20, n: 50, r2: 1)                    	 0.000480514	 100       	 0         	 0         	 11.6542   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 50, k: 20)   	 0.000463333	 100       	 21.5827   	 0         	 7.76979   	 2.77778   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 1, r1low: 0, n: 50, r2: 20)                     	 0.000426564	 100       	 0         	 0         	 3.7509    	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 1, Xr2: 50, Qr1: 1, Qr2: 0)          	 0.000421234	 100       	 0         	 0         	 9.49591   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 50, m: 20, k: 50)  	 0.000411176	 100       	 24.3205   	 0         	 8.75537   	 2.77778   
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                 	 0.000390521	 100       	 0.64017   	 0         	 10.2427   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                            	 0.000380501	 100       	 1.31406   	 0         	 15.7687   	 0.0833333 
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 20, n: 50, r2: 1)                                                                                 	 0.000371729	 100       	 0.269013  	 0         	 4.30421   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 20)                                                                	 0.000355001	 100       	 0         	 0         	 4.50703   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                 	 0.000328377	 100       	 0.76132   	 0         	 12.1811   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 20, m: 20, fromLeft: 0)                	 0.00022764	 800       	 0         	 0         	 22.4917   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 20, m: 50, k: 20)   	 0.000176785	 100       	 22.6264   	 0         	 10.8606   	 2.08333   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 0, m: 1000, k: 20)  	 6.69e-06  	 100       	 0         	 0         	 2391.63   	 0         
Timing statistics:
function                                                                                                                                                                                      	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                        	 1.47815   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_normalized(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                     	 1.47809   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::rightNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                            	 1.26458   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::rightNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                        	 1.26334   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double]	 1.20225   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                               	 0.466228  	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                  	 0.36059   	 1800      
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                            	 0.315086  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_leftOrthogonalize(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&) [with T = double]                                   	 0.21344   	 100       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                	 0.118589  	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]           	 0.111534  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                           	 0.0584486 	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.0465332 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                                       	 0.0348719 	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                    	 0.0313589 	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double]          	 0.0212928 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double]       	 0.014036  	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double]        	 0.0137997 	 1800      
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                       	 0.0106611 	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                        	 0.00958475	 1000      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.00869866	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                	 0.00843832	 1300      
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                              	 0.00758419	 900       
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                	 0.0035879 	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                              	 0.00298374	 6300      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                         	 0.00204481	 5200      
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                       	 0.00109063	 300       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                         	 0.000827782	 100       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                                                  	 0.000380501	 100       
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                           	 0.00022764	 800       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
orthoX: L, orthoY: L
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 64
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->65  [0m[1;34m1->66  [0m[1;34m2->67  [0m[1;34m3->68  [0m[1;34m4->69  [0m[1;34m5->70  [0m[1;34m6->71  [0m[1;34m7->72  [0m[1;34m8->73  [0m[1;34m9->74  [0m[1;34m10->75  [0m[1;34m11->76  [0m[1;34m12->77  [0m[1;34m13->78  [0m[1;34m14->79  [0m[1;34m15->80  [0m[1;34m16->81  [0m[1;34m17->82  [0m[1;34m18->83  [0m[1;34m19->84  [0m[1;34m20->85  [0m[1;34m21->86  [0m[1;34m22->87  [0m[1;34m23->88  [0m[1;34m24->89  [0m[1;34m25->90  [0m[1;34m26->91  [0m[1;34m27->92  [0m[1;34m28->93  [0m[1;34m29->94  [0m[1;34m30->95  [0m[1;34m31->96  [0m[1;34m32->97  [0m[1;34m33->98  [0m[1;34m34->99  [0m[1;34m35->100  [0m[1;34m36->101  [0m[1;34m37->102  [0m[1;34m38->103  [0m[1;34m39->104  [0m[1;34m40->105  [0m[1;34m41->106  [0m[1;34m42->107  [0m[1;34m43->108  [0m[1;34m44->109  [0m[1;34m45->110  [0m[1;34m46->111  [0m[1;34m47->112  [0m[1;34m48->113  [0m[1;34m49->114  [0m[1;34m50->115  [0m[1;34m51->116  [0m[1;34m52->117  [0m[1;34m53->118  [0m[1;34m54->119  [0m[1;34m55->120  [0m[1;34m56->121  [0m[1;34m57->122  [0m[1;34m58->123  [0m[1;34m59->124  [0m[1;34m60->125  [0m[1;34m61->126  [0m[1;34m62->127  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22368933472128 -> hwthread 65 - OK[0m[1;34m
[0m[1;34m	threadid 22368726542336 -> hwthread 66 - OK[0m[1;34m
[0m[1;34m	threadid 22368525215872 -> hwthread 67 - OK[0m[1;34m
[0m[1;34m	threadid 22368323889408 -> hwthread 68 - OK[0m[1;34m
[0m[1;34m	threadid 22368122562944 -> hwthread 69 - OK[0m[1;34m
[0m[1;34m	threadid 22367921236480 -> hwthread 70 - OK[0m[1;34m
[0m[1;34m	threadid 22367719910016 -> hwthread 71 - OK[0m[1;34m
[0m[1;34m	threadid 22367518583552 -> hwthread 72 - OK[0m[1;34m
[0m[1;34m	threadid 22367317257088 -> hwthread 73 - OK[0m[1;34m
[0m[1;34m	threadid 22367115930624 -> hwthread 74 - OK[0m[1;34m
[0m[1;34m	threadid 22366914604160 -> hwthread 75 - OK[0m[1;34m
[0m[1;34m	threadid 22366713277696 -> hwthread 76 - OK[0m[1;34m
[0m[1;34m	threadid 22366511951232 -> hwthread 77 - OK[0m[1;34m
[0m[1;34m	threadid 22366310624768 -> hwthread 78 - OK[0m[1;34m
[0m[1;34m	threadid 22366109298304 -> hwthread 79 - OK[0m[1;34m
[0m[1;34m	threadid 22365907971840 -> hwthread 80 - OK[0m[1;34m
[0m[1;34m	threadid 22365706645376 -> hwthread 81 - OK[0m[1;34m
[0m[1;34m	threadid 22365505318912 -> hwthread 82 - OK[0m[1;34m
[0m[1;34m	threadid 22365303992448 -> hwthread 83 - OK[0m[1;34m
[0m[1;34m	threadid 22365102665984 -> hwthread 84 - OK[0m[1;34m
[0m[1;34m	threadid 22364901339520 -> hwthread 85 - OK[0m[1;34m
[0m[1;34m	threadid 22364700013056 -> hwthread 86 - OK[0m[1;34m
[0m[1;34m	threadid 22364498686592 -> hwthread 87 - OK[0m[1;34m
[0m[1;34m	threadid 22364297360128 -> hwthread 88 - OK[0m[1;34m
[0m[1;34m	threadid 22364096033664 -> hwthread 89 - OK[0m[1;34m
[0m[1;34m	threadid 22363894707200 -> hwthread 90 - OK[0m[1;34m
[0m[1;34m	threadid 22363693380736 -> hwthread 91 - OK[0m[1;34m
[0m[1;34m	threadid 22363492054272 -> hwthread 92 - OK[0m[1;34m
[0m[1;34m	threadid 22363290727808 -> hwthread 93 - OK[0m[1;34m
[0m[1;34m	threadid 22363089401344 -> hwthread 94 - OK[0m[1;34m
[0m[1;34m	threadid 22362888074880 -> hwthread 95 - OK[0m[1;34m
[0m[1;34m	threadid 22362686748416 -> hwthread 96 - OK[0m[1;34m
[0m[1;34m	threadid 22362485417856 -> hwthread 97 - OK[0m[1;34m
[0m[1;34m	threadid 22362284091392 -> hwthread 98 - OK[0m[1;34m
[0m[1;34m	threadid 22362082764928 -> hwthread 99 - OK[0m[1;34m
[0m[1;34m	threadid 22361881438464 -> hwthread 100 - OK[0m[1;34m
[0m[1;34m	threadid 22361680112000 -> hwthread 101 - OK[0m[1;34m
[0m[1;34m	threadid 22361478785536 -> hwthread 102 - OK[0m[1;34m
[0m[1;34m	threadid 22361277459072 -> hwthread 103 - OK[0m[1;34m
[0m[1;34m	threadid 22361076132608 -> hwthread 104 - OK[0m[1;34m
[0m[1;34m	threadid 22360874806144 -> hwthread 105 - OK[0m[1;34m
[0m[1;34m	threadid 22360673479680 -> hwthread 106 - OK[0m[1;34m
[0m[1;34m	threadid 22360472153216 -> hwthread 107 - OK[0m[1;34m
[0m[1;34m	threadid 22360270826752 -> hwthread 108 - OK[0m[1;34m
[0m[1;34m	threadid 22360069500288 -> hwthread 109 - OK[0m[1;34m
[0m[1;34m	threadid 22359868173824 -> hwthread 110 - OK[0m[1;34m
[0m[1;34m	threadid 22359666847360 -> hwthread 111 - OK[0m[1;34m
[0m[1;34m	threadid 22359465520896 -> hwthread 112 - OK[0m[1;34m
[0m[1;34m	threadid 22359264194432 -> hwthread 113 - OK[0m[1;34m
[0m[1;34m	threadid 22359062867968 -> hwthread 114 - OK[0m[1;34m
[0m[1;34m	threadid 22358861541504 -> hwthread 115 - OK[0m[1;34m
[0m[1;34m	threadid 22358660215040 -> hwthread 116 - OK[0m[1;34m
[0m[1;34m	threadid 22358458888576 -> hwthread 117 - OK[0m[1;34m
[0m[1;34m	threadid 22358257562112 -> hwthread 118 - OK[0m[1;34m
[0m[1;34m	threadid 22358056235648 -> hwthread 119 - OK[0m[1;34m
[0m[1;34m	threadid 22357854909184 -> hwthread 120 - OK[0m[1;34m
[0m[1;34m	threadid 22357653582720 -> hwthread 121 - OK[0m[1;34m
[0m[1;34m	threadid 22357452256256 -> hwthread 122 - OK[0m[1;34m
[0m[1;34m	threadid 22357250929792 -> hwthread 123 - OK[0m[1;34m
[0m[1;34m	threadid 22357049603328 -> hwthread 124 - OK[0m[1;34m
[0m[1;34m	threadid 22356848276864 -> hwthread 125 - OK[0m[1;34m
[0m[1;34m	threadid 22356646950400 -> hwthread 126 - OK[0m[1;34m
[0m[1;34m	threadid 22356445623936 -> hwthread 127 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22368827811584 -> hwthread 64 - OK[0m[1;34m
[0m[1;34m	threadid 22368821221120 -> hwthread 65 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 71, m: 71)                                                                 	 0.399291  	 700       	 5.85626   	 0         	 0.213094  	 27.4821   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3550, cols: 71, reductionFactor: 37, colBlockingSize: 12)                  	 0.249502  	 600       	 88.3964   	 0         	 4.946     	 17.8723   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 71, r: 71, r2: 3550, leftOrthog: 0)        	 0.10214   	 600       	 210.246   	 0         	 36.0084   	 5.83882   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 71, n: 50, r: 71, r2: 71)             	 0.0510193 	 600       	 420.913   	 0         	 47.9011   	 8.78713   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 71)                                                                 	 0.0435662 	 100       	 3.64197   	 0         	 0.177202  	 20.5527   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 71, reductionFactor: 37, colBlockingSize: 12)                  	 0.0433273 	 100       	 59.7458   	 0         	 3.37046   	 17.7263   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3550, cols: 21, reductionFactor: 37, colBlockingSize: 12)                  	 0.0428804 	 700       	 52.4951   	 0         	 9.79352   	 5.36018   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                 	 0.0368469 	 100       	 3.16626   	 0         	 0.163922  	 19.3157   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 71, Qr2: 21)       	 0.0330752 	 700       	 0         	 0         	 76.4608   	 0         
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 3550, Xcols: 21, r: 21, streamingCols: 0)                   	 0.0303206 	 700       	 36.1432   	 0         	 27.5784   	 1.31056   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3550, cols: 50, reductionFactor: 37, colBlockingSize: 12)                  	 0.0224375 	 100       	 81.2467   	 0         	 6.41783   	 12.6595   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 21, k: 2500)   	 0.0213525 	 800       	 196.698   	 0         	 53.5169   	 3.67544   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 2500, m: 21, k: 50)	 0.0147255 	 800       	 285.219   	 0         	 77.6014   	 3.67544   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 3550, leftOrthog: 0)        	 0.010796  	 100       	 164.412   	 0         	 39.8294   	 4.12791   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 3550, m: 21)                                                                       	 0.0106651 	 700       	 0         	 0         	 78.2891   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 71, r: 71, r2: 2500, leftOrthog: 0)        	 0.0102858 	 100       	 245.047   	 0         	 42.2005   	 5.80673   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 21, n: 50, r2: 21)                   	 0.0101298 	 700       	 0         	 0         	 82.4258   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 21, m: 21)                                                                  	 0.00983642	 900       	 1.1298    	 0         	 0.983773  	 1.14844   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 1050, k: 21) 	 0.00835356	 800       	 211.167   	 0         	 57.9202   	 3.64583   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 71, n: 50, r: 71, r2: 50)             	 0.00757035	 100       	 332.944   	 0         	 45.7681   	 7.27459   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 21, n: 50, r2: 21)                                                                                         	 0.00702977	 800       	 0         	 0         	 40.1493   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 3550, m: 21)                                                              	 0.00669314	 700       	 0         	 0         	 124.749   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r: 71, r2: 71)             	 0.00623157	 100       	 404.473   	 0         	 46.2215   	 8.75074   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 21, reductionFactor: 37, colBlockingSize: 12)                  	 0.00583022	 100       	 38.8424   	 0         	 7.26436   	 5.34698   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 21, m: 1050, k: 21) 	 0.0053548 	 700       	 121.063   	 0         	 46.5805   	 2.59901   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 71, reductionFactor: 37, colBlockingSize: 12)                    	 0.00462578	 100       	 11.1921   	 0         	 1.48576   	 7.53295   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 21, r: 21, streamingCols: 0)                   	 0.00354052	 100       	 31.1395   	 0         	 23.7751   	 1.30975   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 50, Qr2: 21)       	 0.00323504	 100       	 0         	 0         	 87.7887   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 2500, m: 21)                                                                       	 0.00178959	 100       	 0         	 0         	 46.9382   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 21)                                                              	 0.00177587	 100       	 0         	 0         	 47.3009   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 71, r: 50, r2: 50, leftOrthog: 0)          	 0.00176745	 100       	 20.0854   	 0         	 7.08364   	 2.83546   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 0, n: 50, r2: 21)                    	 0.0014889 	 100       	 0         	 0         	 56.4177   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 21, reductionFactor: 37, colBlockingSize: 12)                    	 0.000975209	 100       	 4.64433   	 0         	 1.22312   	 3.79711   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                   	 0.000926061	 100       	 0.539921  	 0         	 2.15968   	 0.25      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 21)                                                                                          	 0.000870046	 200       	 0         	 0         	 3.86186   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 21, n: 50, r2: 1)                                                                                          	 0.000799029	 200       	 0         	 0         	 4.2051    	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 50, r2: 50)              	 0.000734731	 100       	 34.0261   	 0         	 8.16625   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 21, k: 50)     	 0.000710819	 100       	 14.7717   	 0         	 5.17713   	 2.85326   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 50, k: 21)   	 0.000666927	 100       	 15.7439   	 0         	 5.51785   	 2.85326   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                          	 0.000526941	 100       	 0         	 0         	 7.59098   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 21, n: 50, r2: 1)                    	 0.000469826	 100       	 0         	 0         	 12.0896   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 50, m: 21, k: 50)  	 0.000451833	 100       	 23.2387   	 0         	 8.1446    	 2.85326   
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                 	 0.00041705	 100       	 0.599449  	 0         	 9.59118   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 1, Xr2: 50, Qr1: 1, Qr2: 0)          	 0.000407898	 100       	 0         	 0         	 9.80637   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 21, m: 21, fromLeft: 0)                	 0.000406954	 800       	 0         	 0         	 13.8709   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 1, r1low: 0, n: 50, r2: 21)                     	 0.000400479	 100       	 0         	 0         	 4.19498   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                            	 0.000395725	 100       	 1.2635    	 0         	 15.162    	 0.0833333 
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 21)                                                                	 0.00037509	 100       	 0         	 0         	 4.47893   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 21, n: 50, r2: 1)                                                                                 	 0.00034711	 100       	 0.302498  	 0         	 4.83996   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                 	 0.000331103	 100       	 0.755052  	 0         	 12.0808   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 21, m: 50, k: 21)   	 0.000207026	 100       	 21.3017   	 0         	 9.81906   	 2.16942   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 0, m: 1050, k: 21)  	 6.451e-06 	 100       	 0         	 0         	 2734.46   	 0         
Timing statistics:
function                                                                                                                                                                                      	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                        	 1.55657   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_normalized(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                     	 1.55653   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::rightNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                            	 1.32764   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::rightNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                        	 1.3263    	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double]	 1.25439   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                               	 0.479704  	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                  	 0.369578  	 1800      
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                            	 0.320518  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_leftOrthogonalize(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&) [with T = double]                                   	 0.228818  	 100       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                	 0.12499   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]           	 0.121622  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                           	 0.0655559 	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.0501648 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                                       	 0.0367182 	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                    	 0.0338612 	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double]          	 0.0220633 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double]       	 0.0151774 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double]        	 0.0145888 	 1800      
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                        	 0.012489  	 1000      
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                       	 0.0124547 	 800       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.00983642	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                	 0.00922578	 1300      
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                              	 0.0088441 	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                              	 0.00302995	 6300      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                	 0.00181794	 1800      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                         	 0.0013016 	 5200      
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                       	 0.00109526	 300       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                         	 0.000926061	 100       
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                           	 0.000406954	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                                                  	 0.000395725	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
orthoX: L, orthoY: L
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 64
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->65  [0m[1;34m1->66  [0m[1;34m2->67  [0m[1;34m3->68  [0m[1;34m4->69  [0m[1;34m5->70  [0m[1;34m6->71  [0m[1;34m7->72  [0m[1;34m8->73  [0m[1;34m9->74  [0m[1;34m10->75  [0m[1;34m11->76  [0m[1;34m12->77  [0m[1;34m13->78  [0m[1;34m14->79  [0m[1;34m15->80  [0m[1;34m16->81  [0m[1;34m17->82  [0m[1;34m18->83  [0m[1;34m19->84  [0m[1;34m20->85  [0m[1;34m21->86  [0m[1;34m22->87  [0m[1;34m23->88  [0m[1;34m24->89  [0m[1;34m25->90  [0m[1;34m26->91  [0m[1;34m27->92  [0m[1;34m28->93  [0m[1;34m29->94  [0m[1;34m30->95  [0m[1;34m31->96  [0m[1;34m32->97  [0m[1;34m33->98  [0m[1;34m34->99  [0m[1;34m35->100  [0m[1;34m36->101  [0m[1;34m37->102  [0m[1;34m38->103  [0m[1;34m39->104  [0m[1;34m40->105  [0m[1;34m41->106  [0m[1;34m42->107  [0m[1;34m43->108  [0m[1;34m44->109  [0m[1;34m45->110  [0m[1;34m46->111  [0m[1;34m47->112  [0m[1;34m48->113  [0m[1;34m49->114  [0m[1;34m50->115  [0m[1;34m51->116  [0m[1;34m52->117  [0m[1;34m53->118  [0m[1;34m54->119  [0m[1;34m55->120  [0m[1;34m56->121  [0m[1;34m57->122  [0m[1;34m58->123  [0m[1;34m59->124  [0m[1;34m60->125  [0m[1;34m61->126  [0m[1;34m62->127  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22944303675264 -> hwthread 65 - OK[0m[1;34m
[0m[1;34m	threadid 22944117942272 -> hwthread 66 - OK[0m[1;34m
[0m[1;34m	threadid 22943916615808 -> hwthread 67 - OK[0m[1;34m
[0m[1;34m	threadid 22943715289344 -> hwthread 68 - OK[0m[1;34m
[0m[1;34m	threadid 22943513962880 -> hwthread 69 - OK[0m[1;34m
[0m[1;34m	threadid 22943312636416 -> hwthread 70 - OK[0m[1;34m
[0m[1;34m	threadid 22943111309952 -> hwthread 71 - OK[0m[1;34m
[0m[1;34m	threadid 22942909983488 -> hwthread 72 - OK[0m[1;34m
[0m[1;34m	threadid 22942708657024 -> hwthread 73 - OK[0m[1;34m
[0m[1;34m	threadid 22942507330560 -> hwthread 74 - OK[0m[1;34m
[0m[1;34m	threadid 22942306004096 -> hwthread 75 - OK[0m[1;34m
[0m[1;34m	threadid 22942104677632 -> hwthread 76 - OK[0m[1;34m
[0m[1;34m	threadid 22941903351168 -> hwthread 77 - OK[0m[1;34m
[0m[1;34m	threadid 22941702024704 -> hwthread 78 - OK[0m[1;34m
[0m[1;34m	threadid 22941500698240 -> hwthread 79 - OK[0m[1;34m
[0m[1;34m	threadid 22941299371776 -> hwthread 80 - OK[0m[1;34m
[0m[1;34m	threadid 22941098045312 -> hwthread 81 - OK[0m[1;34m
[0m[1;34m	threadid 22940896718848 -> hwthread 82 - OK[0m[1;34m
[0m[1;34m	threadid 22940695392384 -> hwthread 83 - OK[0m[1;34m
[0m[1;34m	threadid 22940494065920 -> hwthread 84 - OK[0m[1;34m
[0m[1;34m	threadid 22940292739456 -> hwthread 85 - OK[0m[1;34m
[0m[1;34m	threadid 22940091412992 -> hwthread 86 - OK[0m[1;34m
[0m[1;34m	threadid 22939890086528 -> hwthread 87 - OK[0m[1;34m
[0m[1;34m	threadid 22939688760064 -> hwthread 88 - OK[0m[1;34m
[0m[1;34m	threadid 22939487433600 -> hwthread 89 - OK[0m[1;34m
[0m[1;34m	threadid 22939286107136 -> hwthread 90 - OK[0m[1;34m
[0m[1;34m	threadid 22939084780672 -> hwthread 91 - OK[0m[1;34m
[0m[1;34m	threadid 22938883454208 -> hwthread 92 - OK[0m[1;34m
[0m[1;34m	threadid 22938682127744 -> hwthread 93 - OK[0m[1;34m
[0m[1;34m	threadid 22938480801280 -> hwthread 94 - OK[0m[1;34m
[0m[1;34m	threadid 22938279474816 -> hwthread 95 - OK[0m[1;34m
[0m[1;34m	threadid 22938078148352 -> hwthread 96 - OK[0m[1;34m
[0m[1;34m	threadid 22937876817792 -> hwthread 97 - OK[0m[1;34m
[0m[1;34m	threadid 22937675491328 -> hwthread 98 - OK[0m[1;34m
[0m[1;34m	threadid 22937474164864 -> hwthread 99 - OK[0m[1;34m
[0m[1;34m	threadid 22937272838400 -> hwthread 100 - OK[0m[1;34m
[0m[1;34m	threadid 22937071511936 -> hwthread 101 - OK[0m[1;34m
[0m[1;34m	threadid 22936870185472 -> hwthread 102 - OK[0m[1;34m
[0m[1;34m	threadid 22936668859008 -> hwthread 103 - OK[0m[1;34m
[0m[1;34m	threadid 22936467532544 -> hwthread 104 - OK[0m[1;34m
[0m[1;34m	threadid 22936266206080 -> hwthread 105 - OK[0m[1;34m
[0m[1;34m	threadid 22936064879616 -> hwthread 106 - OK[0m[1;34m
[0m[1;34m	threadid 22935863553152 -> hwthread 107 - OK[0m[1;34m
[0m[1;34m	threadid 22935662226688 -> hwthread 108 - OK[0m[1;34m
[0m[1;34m	threadid 22935460900224 -> hwthread 109 - OK[0m[1;34m
[0m[1;34m	threadid 22935259573760 -> hwthread 110 - OK[0m[1;34m
[0m[1;34m	threadid 22935058247296 -> hwthread 111 - OK[0m[1;34m
[0m[1;34m	threadid 22934856920832 -> hwthread 112 - OK[0m[1;34m
[0m[1;34m	threadid 22934655594368 -> hwthread 113 - OK[0m[1;34m
[0m[1;34m	threadid 22934454267904 -> hwthread 114 - OK[0m[1;34m
[0m[1;34m	threadid 22934252941440 -> hwthread 115 - OK[0m[1;34m
[0m[1;34m	threadid 22934051614976 -> hwthread 116 - OK[0m[1;34m
[0m[1;34m	threadid 22933850288512 -> hwthread 117 - OK[0m[1;34m
[0m[1;34m	threadid 22933648962048 -> hwthread 118 - OK[0m[1;34m
[0m[1;34m	threadid 22933447635584 -> hwthread 119 - OK[0m[1;34m
[0m[1;34m	threadid 22933246309120 -> hwthread 120 - OK[0m[1;34m
[0m[1;34m	threadid 22933044982656 -> hwthread 121 - OK[0m[1;34m
[0m[1;34m	threadid 22932843656192 -> hwthread 122 - OK[0m[1;34m
[0m[1;34m	threadid 22932642329728 -> hwthread 123 - OK[0m[1;34m
[0m[1;34m	threadid 22932441003264 -> hwthread 124 - OK[0m[1;34m
[0m[1;34m	threadid 22932239676800 -> hwthread 125 - OK[0m[1;34m
[0m[1;34m	threadid 22932038350336 -> hwthread 126 - OK[0m[1;34m
[0m[1;34m	threadid 22931837023872 -> hwthread 127 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22944198014720 -> hwthread 64 - OK[0m[1;34m
[0m[1;34m	threadid 22944191424256 -> hwthread 65 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 72, m: 72)                                                                 	 0.397151  	 700       	 6.14012   	 0         	 0.220305  	 27.871    
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3600, cols: 72, reductionFactor: 37, colBlockingSize: 12)                  	 0.271449  	 600       	 84.7309   	 0         	 4.67506   	 18.124    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 72, r: 72, r2: 3600, leftOrthog: 0)        	 0.0975344 	 600       	 229.61    	 0         	 38.7786   	 5.92105   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 72, n: 50, r: 72, r2: 72)             	 0.0474135 	 600       	 472.332   	 0         	 53.0061   	 8.91089   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3600, cols: 22, reductionFactor: 37, colBlockingSize: 12)                  	 0.0458376 	 700       	 54.6557   	 0         	 9.73503   	 5.61434   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 72, reductionFactor: 37, colBlockingSize: 12)                  	 0.0447298 	 100       	 59.5141   	 0         	 3.31204   	 17.969    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 72)                                                                 	 0.0436813 	 100       	 3.67816   	 0         	 0.178566  	 20.5983   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                 	 0.0378085 	 100       	 3.08573   	 0         	 0.159752  	 19.3157   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 72, Qr2: 22)       	 0.0346735 	 700       	 0         	 0         	 74.8422   	 0         
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 3600, Xcols: 22, r: 22, streamingCols: 0)                   	 0.0308444 	 700       	 39.543    	 0         	 28.8025   	 1.3729    
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3600, cols: 50, reductionFactor: 37, colBlockingSize: 12)                  	 0.0232428 	 100       	 79.5363   	 0         	 6.28151   	 12.662    
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 22, k: 2500)   	 0.0214681 	 800       	 204.955   	 0         	 53.9888   	 3.79625   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 2500, m: 22, k: 50)	 0.0144813 	 800       	 303.84    	 0         	 80.037    	 3.79625   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 3600, leftOrthog: 0)        	 0.0127559 	 100       	 141.111   	 0         	 34.1802   	 4.12844   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 3600, m: 22)                                                                       	 0.0117828 	 700       	 0         	 0         	 75.2826   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 72, r: 72, r2: 2500, leftOrthog: 0)        	 0.0102934 	 100       	 251.811   	 0         	 42.7743   	 5.88697   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 22, m: 22)                                                                  	 0.0100343 	 900       	 1.27327   	 0         	 1.05765   	 1.20387   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 72, n: 50, r: 72, r2: 50)             	 0.00947466	 100       	 273.572   	 0         	 37.3881   	 7.31707   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 1100, k: 22) 	 0.00891939	 800       	 217.055   	 0         	 57.6183   	 3.76712   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 22, n: 50, r2: 22)                                                                                         	 0.00697626	 800       	 0         	 0         	 44.402    	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 22, n: 50, r2: 22)                   	 0.00697493	 700       	 0         	 0         	 127.175   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 3600, m: 22)                                                              	 0.00643056	 700       	 0         	 0         	 137.941   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r: 72, r2: 72)             	 0.00635276	 100       	 408.012   	 0         	 45.9875   	 8.87224   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 22, reductionFactor: 37, colBlockingSize: 12)                  	 0.0061436 	 100       	 40.4552   	 0         	 7.22496   	 5.59937   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 22, m: 1100, k: 22) 	 0.00562467	 700       	 132.516   	 0         	 48.6696   	 2.72277   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 72, reductionFactor: 37, colBlockingSize: 12)                    	 0.00496378	 100       	 10.7259   	 0         	 1.4157    	 7.57643   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 22, r: 22, streamingCols: 0)                   	 0.00355742	 100       	 34.0134   	 0         	 24.7915   	 1.37198   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 50, Qr2: 22)       	 0.00322104	 100       	 0         	 0         	 89.4122   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 72, r: 50, r2: 50, leftOrthog: 0)          	 0.00187817	 100       	 19.1676   	 0         	 6.72997   	 2.8481    
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 2500, m: 22)                                                                       	 0.00174348	 100       	 0         	 0         	 50.4736   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 0, n: 50, r2: 22)                    	 0.00134822	 100       	 0         	 0         	 65.2713   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 22)                                                              	 0.00126812	 100       	 0         	 0         	 69.3943   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 22, reductionFactor: 37, colBlockingSize: 12)                    	 0.00118383	 100       	 4.19893   	 0         	 1.07042   	 3.92267   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                   	 0.000908178	 100       	 0.550553  	 0         	 2.20221   	 0.25      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 22)                                                                                          	 0.000868165	 200       	 0         	 0         	 4.05453   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 50, r2: 50)              	 0.000765321	 100       	 32.666    	 0         	 7.83985   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 22, n: 50, r2: 1)                                                                                          	 0.000744033	 200       	 0         	 0         	 4.73097   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 22, k: 50)     	 0.00072605	 100       	 15.1505   	 0         	 5.17871   	 2.92553   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                            	 0.000595223	 100       	 0.840021  	 0         	 10.0803   	 0.0833333 
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                          	 0.000509456	 100       	 0         	 0         	 7.85151   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 22, n: 50, r2: 1)                    	 0.000491514	 100       	 0         	 0         	 11.7189   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 50, k: 22)   	 0.000468657	 100       	 23.4713   	 0         	 8.02293   	 2.92553   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 1, r1low: 0, n: 50, r2: 22)                     	 0.000451419	 100       	 0         	 0         	 3.89882   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 50, m: 22, k: 50)  	 0.000421064	 100       	 26.1243   	 0         	 8.92976   	 2.92553   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 1, Xr2: 50, Qr1: 1, Qr2: 0)          	 0.000411357	 100       	 0         	 0         	 9.72391   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                 	 0.000388777	 100       	 0.643042  	 0         	 10.2887   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 22)                                                                	 0.000358117	 100       	 0         	 0         	 4.91459   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 22, m: 22, fromLeft: 0)                	 0.000355083	 800       	 0         	 0         	 17.4472   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 22, n: 50, r2: 1)                                                                                 	 0.00034741	 100       	 0.316629  	 0         	 5.06606   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                 	 0.000325804	 100       	 0.767333  	 0         	 12.2773   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 22, m: 50, k: 22)   	 0.000187977	 100       	 25.7478   	 0         	 11.4227   	 2.2541    
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 0, m: 1100, k: 22)  	 6.01e-06  	 100       	 0         	 0         	 3221.3    	 0         
Timing statistics:
function                                                                                                                                                                                      	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                        	 1.59246   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_normalized(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                     	 1.59242   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::rightNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                            	 1.35745   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::rightNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                        	 1.35612   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double]	 1.28869   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                               	 0.478641  	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                  	 0.397551  	 1800      
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                            	 0.345033  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_leftOrthogonalize(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&) [with T = double]                                   	 0.234901  	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]           	 0.125453  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                	 0.122462  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                           	 0.0640062 	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.0536185 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                                       	 0.0383059 	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                    	 0.0344018 	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double]          	 0.0221942 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double]        	 0.0152067 	 1800      
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double]       	 0.0149024 	 900       
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                       	 0.0135263 	 800       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.0100343 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                        	 0.00926608	 1000      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                	 0.00909792	 1300      
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                              	 0.0080568 	 900       
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                	 0.0043515 	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                              	 0.00262607	 6300      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                         	 0.00199047	 5200      
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                       	 0.00106199	 300       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                         	 0.000908178	 100       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                                                  	 0.000595223	 100       
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                           	 0.000355083	 800       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
orthoX: L, orthoY: L
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 64
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->65  [0m[1;34m1->66  [0m[1;34m2->67  [0m[1;34m3->68  [0m[1;34m4->69  [0m[1;34m5->70  [0m[1;34m6->71  [0m[1;34m7->72  [0m[1;34m8->73  [0m[1;34m9->74  [0m[1;34m10->75  [0m[1;34m11->76  [0m[1;34m12->77  [0m[1;34m13->78  [0m[1;34m14->79  [0m[1;34m15->80  [0m[1;34m16->81  [0m[1;34m17->82  [0m[1;34m18->83  [0m[1;34m19->84  [0m[1;34m20->85  [0m[1;34m21->86  [0m[1;34m22->87  [0m[1;34m23->88  [0m[1;34m24->89  [0m[1;34m25->90  [0m[1;34m26->91  [0m[1;34m27->92  [0m[1;34m28->93  [0m[1;34m29->94  [0m[1;34m30->95  [0m[1;34m31->96  [0m[1;34m32->97  [0m[1;34m33->98  [0m[1;34m34->99  [0m[1;34m35->100  [0m[1;34m36->101  [0m[1;34m37->102  [0m[1;34m38->103  [0m[1;34m39->104  [0m[1;34m40->105  [0m[1;34m41->106  [0m[1;34m42->107  [0m[1;34m43->108  [0m[1;34m44->109  [0m[1;34m45->110  [0m[1;34m46->111  [0m[1;34m47->112  [0m[1;34m48->113  [0m[1;34m49->114  [0m[1;34m50->115  [0m[1;34m51->116  [0m[1;34m52->117  [0m[1;34m53->118  [0m[1;34m54->119  [0m[1;34m55->120  [0m[1;34m56->121  [0m[1;34m57->122  [0m[1;34m58->123  [0m[1;34m59->124  [0m[1;34m60->125  [0m[1;34m61->126  [0m[1;34m62->127  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22751111067520 -> hwthread 65 - OK[0m[1;34m
[0m[1;34m	threadid 22750911522816 -> hwthread 66 - OK[0m[1;34m
[0m[1;34m	threadid 22750710196352 -> hwthread 67 - OK[0m[1;34m
[0m[1;34m	threadid 22750508869888 -> hwthread 68 - OK[0m[1;34m
[0m[1;34m	threadid 22750307543424 -> hwthread 69 - OK[0m[1;34m
[0m[1;34m	threadid 22750106216960 -> hwthread 70 - OK[0m[1;34m
[0m[1;34m	threadid 22749904890496 -> hwthread 71 - OK[0m[1;34m
[0m[1;34m	threadid 22749703564032 -> hwthread 72 - OK[0m[1;34m
[0m[1;34m	threadid 22749502237568 -> hwthread 73 - OK[0m[1;34m
[0m[1;34m	threadid 22749300911104 -> hwthread 74 - OK[0m[1;34m
[0m[1;34m	threadid 22749099584640 -> hwthread 75 - OK[0m[1;34m
[0m[1;34m	threadid 22748898258176 -> hwthread 76 - OK[0m[1;34m
[0m[1;34m	threadid 22748696931712 -> hwthread 77 - OK[0m[1;34m
[0m[1;34m	threadid 22748495605248 -> hwthread 78 - OK[0m[1;34m
[0m[1;34m	threadid 22748294278784 -> hwthread 79 - OK[0m[1;34m
[0m[1;34m	threadid 22748092952320 -> hwthread 80 - OK[0m[1;34m
[0m[1;34m	threadid 22747891625856 -> hwthread 81 - OK[0m[1;34m
[0m[1;34m	threadid 22747690299392 -> hwthread 82 - OK[0m[1;34m
[0m[1;34m	threadid 22747488972928 -> hwthread 83 - OK[0m[1;34m
[0m[1;34m	threadid 22747287646464 -> hwthread 84 - OK[0m[1;34m
[0m[1;34m	threadid 22747086320000 -> hwthread 85 - OK[0m[1;34m
[0m[1;34m	threadid 22746884993536 -> hwthread 86 - OK[0m[1;34m
[0m[1;34m	threadid 22746683667072 -> hwthread 87 - OK[0m[1;34m
[0m[1;34m	threadid 22746482340608 -> hwthread 88 - OK[0m[1;34m
[0m[1;34m	threadid 22746281014144 -> hwthread 89 - OK[0m[1;34m
[0m[1;34m	threadid 22746079687680 -> hwthread 90 - OK[0m[1;34m
[0m[1;34m	threadid 22745878361216 -> hwthread 91 - OK[0m[1;34m
[0m[1;34m	threadid 22745677034752 -> hwthread 92 - OK[0m[1;34m
[0m[1;34m	threadid 22745475708288 -> hwthread 93 - OK[0m[1;34m
[0m[1;34m	threadid 22745274381824 -> hwthread 94 - OK[0m[1;34m
[0m[1;34m	threadid 22745073055360 -> hwthread 95 - OK[0m[1;34m
[0m[1;34m	threadid 22744871728896 -> hwthread 96 - OK[0m[1;34m
[0m[1;34m	threadid 22744670398336 -> hwthread 97 - OK[0m[1;34m
[0m[1;34m	threadid 22744469071872 -> hwthread 98 - OK[0m[1;34m
[0m[1;34m	threadid 22744267745408 -> hwthread 99 - OK[0m[1;34m
[0m[1;34m	threadid 22744066418944 -> hwthread 100 - OK[0m[1;34m
[0m[1;34m	threadid 22743865092480 -> hwthread 101 - OK[0m[1;34m
[0m[1;34m	threadid 22743663766016 -> hwthread 102 - OK[0m[1;34m
[0m[1;34m	threadid 22743462439552 -> hwthread 103 - OK[0m[1;34m
[0m[1;34m	threadid 22743261113088 -> hwthread 104 - OK[0m[1;34m
[0m[1;34m	threadid 22743059786624 -> hwthread 105 - OK[0m[1;34m
[0m[1;34m	threadid 22742858460160 -> hwthread 106 - OK[0m[1;34m
[0m[1;34m	threadid 22742657133696 -> hwthread 107 - OK[0m[1;34m
[0m[1;34m	threadid 22742455807232 -> hwthread 108 - OK[0m[1;34m
[0m[1;34m	threadid 22742254480768 -> hwthread 109 - OK[0m[1;34m
[0m[1;34m	threadid 22742053154304 -> hwthread 110 - OK[0m[1;34m
[0m[1;34m	threadid 22741851827840 -> hwthread 111 - OK[0m[1;34m
[0m[1;34m	threadid 22741650501376 -> hwthread 112 - OK[0m[1;34m
[0m[1;34m	threadid 22741449174912 -> hwthread 113 - OK[0m[1;34m
[0m[1;34m	threadid 22741247848448 -> hwthread 114 - OK[0m[1;34m
[0m[1;34m	threadid 22741046521984 -> hwthread 115 - OK[0m[1;34m
[0m[1;34m	threadid 22740845195520 -> hwthread 116 - OK[0m[1;34m
[0m[1;34m	threadid 22740643869056 -> hwthread 117 - OK[0m[1;34m
[0m[1;34m	threadid 22740442542592 -> hwthread 118 - OK[0m[1;34m
[0m[1;34m	threadid 22740241216128 -> hwthread 119 - OK[0m[1;34m
[0m[1;34m	threadid 22740039889664 -> hwthread 120 - OK[0m[1;34m
[0m[1;34m	threadid 22739838563200 -> hwthread 121 - OK[0m[1;34m
[0m[1;34m	threadid 22739637236736 -> hwthread 122 - OK[0m[1;34m
[0m[1;34m	threadid 22739435910272 -> hwthread 123 - OK[0m[1;34m
[0m[1;34m	threadid 22739234583808 -> hwthread 124 - OK[0m[1;34m
[0m[1;34m	threadid 22739033257344 -> hwthread 125 - OK[0m[1;34m
[0m[1;34m	threadid 22738831930880 -> hwthread 126 - OK[0m[1;34m
[0m[1;34m	threadid 22738630604416 -> hwthread 127 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22751005406976 -> hwthread 64 - OK[0m[1;34m
[0m[1;34m	threadid 22750998816512 -> hwthread 65 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 73, m: 73)                                                                 	 0.427833  	 700       	 5.94058   	 0         	 0.210213  	 28.2598   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3650, cols: 73, reductionFactor: 37, colBlockingSize: 12)                  	 0.27577   	 600       	 86.9269   	 0         	 4.73053   	 18.3757   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 73, r: 73, r2: 3650, leftOrthog: 0)        	 0.100972  	 600       	 231.164   	 0         	 38.5063   	 6.00329   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 73, n: 50, r: 73, r2: 73)             	 0.0515689 	 600       	 452.618   	 0         	 50.098    	 9.03465   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3650, cols: 23, reductionFactor: 37, colBlockingSize: 12)                  	 0.0484421 	 700       	 57.3107   	 0         	 9.76593   	 5.86843   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 73, reductionFactor: 37, colBlockingSize: 12)                  	 0.0463873 	 100       	 58.9928   	 0         	 3.23932   	 18.2115   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 73)                                                                 	 0.044943  	 100       	 3.6194    	 0         	 0.175333  	 20.643    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                 	 0.0384245 	 100       	 3.03626   	 0         	 0.157191  	 19.3157   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 73, Qr2: 23)       	 0.0355868 	 700       	 0         	 0         	 74.8098   	 0         
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 3650, Xcols: 23, r: 23, streamingCols: 0)                   	 0.0320857 	 700       	 42.1245   	 0         	 29.3502   	 1.43524   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3650, cols: 50, reductionFactor: 37, colBlockingSize: 12)                  	 0.0234322 	 100       	 79.9894   	 0         	 6.31611   	 12.6644   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 23, k: 2500)   	 0.0223301 	 800       	 206       	 0         	 52.6357   	 3.91369   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 2500, m: 23, k: 50)	 0.0154994 	 800       	 296.785   	 0         	 75.8325   	 3.91369   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 3650, leftOrthog: 0)        	 0.0136619 	 100       	 133.583   	 0         	 32.3527   	 4.12896   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 23, m: 23)                                                                  	 0.0118831 	 900       	 1.22862   	 0         	 0.9755    	 1.25947   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 73, r: 73, r2: 2500, leftOrthog: 0)        	 0.0104979 	 100       	 253.812   	 0         	 42.5346   	 5.96717   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 3650, m: 23)                                                                       	 0.00983743	 700       	 0         	 0         	 95.5778   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 1150, k: 23) 	 0.0090333 	 800       	 234.245   	 0         	 60.2925   	 3.88514   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 73, n: 50, r: 73, r2: 50)             	 0.00800417	 100       	 332.889   	 0         	 45.2364   	 7.35887   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 23, n: 50, r2: 23)                                                                                         	 0.00726009	 800       	 0         	 0         	 46.633    	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 23, n: 50, r2: 23)                   	 0.00674688	 700       	 0         	 0         	 139.359   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 23, reductionFactor: 37, colBlockingSize: 12)                  	 0.00649071	 100       	 41.8519   	 0         	 7.15226   	 5.85157   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 3650, m: 23)                                                              	 0.00621464	 700       	 0         	 0         	 151.294   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r: 73, r2: 73)             	 0.00612538	 100       	 434.994   	 0         	 48.3665   	 8.99369   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 73, reductionFactor: 37, colBlockingSize: 12)                    	 0.00582512	 100       	 9.39556   	 0         	 1.23314   	 7.6192    
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 23, m: 1150, k: 23) 	 0.00529167	 700       	 160.949   	 0         	 56.5421   	 2.84653   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 23, r: 23, streamingCols: 0)                   	 0.00364649	 100       	 36.2678   	 0         	 25.2878   	 1.4342    
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 50, Qr2: 23)       	 0.00321311	 100       	 0         	 0         	 90.8778   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 73, r: 50, r2: 50, leftOrthog: 0)          	 0.00179107	 100       	 20.3788   	 0         	 7.12422   	 2.8605    
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 0, n: 50, r2: 23)                    	 0.00147161	 100       	 0         	 0         	 62.5166   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 23, reductionFactor: 37, colBlockingSize: 12)                    	 0.00120465	 100       	 4.51      	 0         	 1.11501   	 4.0448    
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 2500, m: 23)                                                                       	 0.00118901	 100       	 0         	 0         	 77.3754   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 23)                                                              	 0.00095364	 100       	 0         	 0         	 96.4725   	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                   	 0.000809492	 100       	 0.617671  	 0         	 2.47069   	 0.25      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 23)                                                                                          	 0.000803626	 200       	 0         	 0         	 4.57924   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 23, n: 50, r2: 1)                                                                                          	 0.000777118	 200       	 0         	 0         	 4.73545   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 50, r2: 50)              	 0.000743277	 100       	 33.6348   	 0         	 8.07236   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 23, k: 50)     	 0.000689968	 100       	 16.6674   	 0         	 5.56548   	 2.99479   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                          	 0.000524626	 100       	 0         	 0         	 7.62448   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 50, k: 23)   	 0.000507233	 100       	 22.672    	 0         	 7.57049   	 2.99479   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 23, m: 23, fromLeft: 0)                	 0.000493228	 800       	 0         	 0         	 13.7283   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 50, m: 23, k: 50)  	 0.000473135	 100       	 24.306    	 0         	 8.11608   	 2.99479   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 23, n: 50, r2: 1)                    	 0.000464102	 100       	 0         	 0         	 12.5834   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 1, Xr2: 50, Qr1: 1, Qr2: 0)          	 0.000444151	 100       	 0         	 0         	 9.00595   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 1, r1low: 0, n: 50, r2: 23)                     	 0.000426655	 100       	 0         	 0         	 4.31262   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 23)                                                                	 0.000414687	 100       	 0         	 0         	 4.43708   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                            	 0.000408828	 100       	 1.22301   	 0         	 14.6761   	 0.0833333 
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                 	 0.000404633	 100       	 0.617844  	 0         	 9.8855    	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                 	 0.000363142	 100       	 0.688436  	 0         	 11.015    	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 23, n: 50, r2: 1)                                                                                 	 0.000341403	 100       	 0.336845  	 0         	 5.38952   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 23, m: 50, k: 23)   	 0.000204494	 100       	 25.8687   	 0         	 11.0673   	 2.3374    
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 0, m: 1150, k: 23)  	 7.051e-06 	 100       	 0         	 0         	 3000.99   	 0         
Timing statistics:
function                                                                                                                                                                                      	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                        	 1.65771   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_normalized(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                     	 1.65765   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::rightNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                            	 1.4196    	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::rightNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                        	 1.41833   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double]	 1.34642   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                               	 0.511201  	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                  	 0.407552  	 1800      
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                            	 0.352152  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_leftOrthogonalize(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&) [with T = double]                                   	 0.237975  	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]           	 0.129409  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                	 0.126923  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                           	 0.0664417 	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.0565891 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                                       	 0.0392441 	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                    	 0.0357322 	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double]          	 0.02302   	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double]       	 0.0159726 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double]        	 0.0150437 	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.0118831 	 900       
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                       	 0.0110264 	 800       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                	 0.00936546	 1300      
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                        	 0.00910924	 1000      
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                              	 0.00758297	 900       
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                	 0.00331072	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                              	 0.00249411	 6300      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                         	 0.00198073	 5200      
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                       	 0.00110918	 300       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                         	 0.000809492	 100       
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                           	 0.000493228	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                                                  	 0.000408828	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
orthoX: L, orthoY: L
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 64
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->65  [0m[1;34m1->66  [0m[1;34m2->67  [0m[1;34m3->68  [0m[1;34m4->69  [0m[1;34m5->70  [0m[1;34m6->71  [0m[1;34m7->72  [0m[1;34m8->73  [0m[1;34m9->74  [0m[1;34m10->75  [0m[1;34m11->76  [0m[1;34m12->77  [0m[1;34m13->78  [0m[1;34m14->79  [0m[1;34m15->80  [0m[1;34m16->81  [0m[1;34m17->82  [0m[1;34m18->83  [0m[1;34m19->84  [0m[1;34m20->85  [0m[1;34m21->86  [0m[1;34m22->87  [0m[1;34m23->88  [0m[1;34m24->89  [0m[1;34m25->90  [0m[1;34m26->91  [0m[1;34m27->92  [0m[1;34m28->93  [0m[1;34m29->94  [0m[1;34m30->95  [0m[1;34m31->96  [0m[1;34m32->97  [0m[1;34m33->98  [0m[1;34m34->99  [0m[1;34m35->100  [0m[1;34m36->101  [0m[1;34m37->102  [0m[1;34m38->103  [0m[1;34m39->104  [0m[1;34m40->105  [0m[1;34m41->106  [0m[1;34m42->107  [0m[1;34m43->108  [0m[1;34m44->109  [0m[1;34m45->110  [0m[1;34m46->111  [0m[1;34m47->112  [0m[1;34m48->113  [0m[1;34m49->114  [0m[1;34m50->115  [0m[1;34m51->116  [0m[1;34m52->117  [0m[1;34m53->118  [0m[1;34m54->119  [0m[1;34m55->120  [0m[1;34m56->121  [0m[1;34m57->122  [0m[1;34m58->123  [0m[1;34m59->124  [0m[1;34m60->125  [0m[1;34m61->126  [0m[1;34m62->127  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22411359377280 -> hwthread 65 - OK[0m[1;34m
[0m[1;34m	threadid 22411139344384 -> hwthread 66 - OK[0m[1;34m
[0m[1;34m	threadid 22410938017920 -> hwthread 67 - OK[0m[1;34m
[0m[1;34m	threadid 22410736691456 -> hwthread 68 - OK[0m[1;34m
[0m[1;34m	threadid 22410535364992 -> hwthread 69 - OK[0m[1;34m
[0m[1;34m	threadid 22410334038528 -> hwthread 70 - OK[0m[1;34m
[0m[1;34m	threadid 22410132712064 -> hwthread 71 - OK[0m[1;34m
[0m[1;34m	threadid 22409931385600 -> hwthread 72 - OK[0m[1;34m
[0m[1;34m	threadid 22409730059136 -> hwthread 73 - OK[0m[1;34m
[0m[1;34m	threadid 22409528732672 -> hwthread 74 - OK[0m[1;34m
[0m[1;34m	threadid 22409327406208 -> hwthread 75 - OK[0m[1;34m
[0m[1;34m	threadid 22409126079744 -> hwthread 76 - OK[0m[1;34m
[0m[1;34m	threadid 22408924753280 -> hwthread 77 - OK[0m[1;34m
[0m[1;34m	threadid 22408723426816 -> hwthread 78 - OK[0m[1;34m
[0m[1;34m	threadid 22408522100352 -> hwthread 79 - OK[0m[1;34m
[0m[1;34m	threadid 22408320773888 -> hwthread 80 - OK[0m[1;34m
[0m[1;34m	threadid 22408119447424 -> hwthread 81 - OK[0m[1;34m
[0m[1;34m	threadid 22407918120960 -> hwthread 82 - OK[0m[1;34m
[0m[1;34m	threadid 22407716794496 -> hwthread 83 - OK[0m[1;34m
[0m[1;34m	threadid 22407515468032 -> hwthread 84 - OK[0m[1;34m
[0m[1;34m	threadid 22407314141568 -> hwthread 85 - OK[0m[1;34m
[0m[1;34m	threadid 22407112815104 -> hwthread 86 - OK[0m[1;34m
[0m[1;34m	threadid 22406911488640 -> hwthread 87 - OK[0m[1;34m
[0m[1;34m	threadid 22406710162176 -> hwthread 88 - OK[0m[1;34m
[0m[1;34m	threadid 22406508835712 -> hwthread 89 - OK[0m[1;34m
[0m[1;34m	threadid 22406307509248 -> hwthread 90 - OK[0m[1;34m
[0m[1;34m	threadid 22406106182784 -> hwthread 91 - OK[0m[1;34m
[0m[1;34m	threadid 22405904856320 -> hwthread 92 - OK[0m[1;34m
[0m[1;34m	threadid 22405703529856 -> hwthread 93 - OK[0m[1;34m
[0m[1;34m	threadid 22405502203392 -> hwthread 94 - OK[0m[1;34m
[0m[1;34m	threadid 22405300876928 -> hwthread 95 - OK[0m[1;34m
[0m[1;34m	threadid 22405099550464 -> hwthread 96 - OK[0m[1;34m
[0m[1;34m	threadid 22404898219904 -> hwthread 97 - OK[0m[1;34m
[0m[1;34m	threadid 22404696893440 -> hwthread 98 - OK[0m[1;34m
[0m[1;34m	threadid 22404495566976 -> hwthread 99 - OK[0m[1;34m
[0m[1;34m	threadid 22404294240512 -> hwthread 100 - OK[0m[1;34m
[0m[1;34m	threadid 22404092914048 -> hwthread 101 - OK[0m[1;34m
[0m[1;34m	threadid 22403891587584 -> hwthread 102 - OK[0m[1;34m
[0m[1;34m	threadid 22403690261120 -> hwthread 103 - OK[0m[1;34m
[0m[1;34m	threadid 22403488934656 -> hwthread 104 - OK[0m[1;34m
[0m[1;34m	threadid 22403287608192 -> hwthread 105 - OK[0m[1;34m
[0m[1;34m	threadid 22403086281728 -> hwthread 106 - OK[0m[1;34m
[0m[1;34m	threadid 22402884955264 -> hwthread 107 - OK[0m[1;34m
[0m[1;34m	threadid 22402683628800 -> hwthread 108 - OK[0m[1;34m
[0m[1;34m	threadid 22402482302336 -> hwthread 109 - OK[0m[1;34m
[0m[1;34m	threadid 22402280975872 -> hwthread 110 - OK[0m[1;34m
[0m[1;34m	threadid 22402079649408 -> hwthread 111 - OK[0m[1;34m
[0m[1;34m	threadid 22401878322944 -> hwthread 112 - OK[0m[1;34m
[0m[1;34m	threadid 22401676996480 -> hwthread 113 - OK[0m[1;34m
[0m[1;34m	threadid 22401475670016 -> hwthread 114 - OK[0m[1;34m
[0m[1;34m	threadid 22401274343552 -> hwthread 115 - OK[0m[1;34m
[0m[1;34m	threadid 22401073017088 -> hwthread 116 - OK[0m[1;34m
[0m[1;34m	threadid 22400871690624 -> hwthread 117 - OK[0m[1;34m
[0m[1;34m	threadid 22400670364160 -> hwthread 118 - OK[0m[1;34m
[0m[1;34m	threadid 22400469037696 -> hwthread 119 - OK[0m[1;34m
[0m[1;34m	threadid 22400267711232 -> hwthread 120 - OK[0m[1;34m
[0m[1;34m	threadid 22400066384768 -> hwthread 121 - OK[0m[1;34m
[0m[1;34m	threadid 22399865058304 -> hwthread 122 - OK[0m[1;34m
[0m[1;34m	threadid 22399663731840 -> hwthread 123 - OK[0m[1;34m
[0m[1;34m	threadid 22399462405376 -> hwthread 124 - OK[0m[1;34m
[0m[1;34m	threadid 22399261078912 -> hwthread 125 - OK[0m[1;34m
[0m[1;34m	threadid 22399059752448 -> hwthread 126 - OK[0m[1;34m
[0m[1;34m	threadid 22398858425984 -> hwthread 127 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22411253716736 -> hwthread 64 - OK[0m[1;34m
[0m[1;34m	threadid 22411247126272 -> hwthread 65 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 74, m: 74)                                                                 	 0.429944  	 700       	 6.1577    	 0         	 0.214938  	 28.6487   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3700, cols: 74, reductionFactor: 37, colBlockingSize: 12)                  	 0.282015  	 600       	 88.5434   	 0         	 4.75338   	 18.6275   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 74, r: 74, r2: 3700, leftOrthog: 0)        	 0.106876  	 600       	 227.492   	 0         	 37.3825   	 6.08553   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3700, cols: 24, reductionFactor: 37, colBlockingSize: 12)                  	 0.0511463 	 700       	 59.9129   	 0         	 9.78577   	 6.12245   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 74, reductionFactor: 37, colBlockingSize: 12)                  	 0.0485731 	 100       	 57.8921   	 0         	 3.13715   	 18.4538   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 74, n: 50, r: 74, r2: 74)             	 0.047884  	 600       	 507.758   	 0         	 55.4416   	 9.15842   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 74)                                                                 	 0.0473327 	 100       	 3.47892   	 0         	 0.168171  	 20.6868   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                 	 0.0388979 	 100       	 2.99931   	 0         	 0.155278  	 19.3157   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 74, Qr2: 24)       	 0.0358747 	 700       	 0         	 0         	 76.1137   	 0         
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 3700, Xcols: 24, r: 24, streamingCols: 0)                   	 0.0341511 	 700       	 43.6835   	 0         	 29.1696   	 1.49757   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 24, k: 2500)   	 0.0235747 	 800       	 203.608   	 0         	 50.5492   	 4.02793   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3700, cols: 50, reductionFactor: 37, colBlockingSize: 12)                  	 0.02338   	 100       	 81.266    	 0         	 6.41574   	 12.6667   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 2500, m: 24, k: 50)	 0.0155877 	 800       	 307.935   	 0         	 76.45     	 4.02793   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 3700, leftOrthog: 0)        	 0.0127049 	 100       	 145.614   	 0         	 35.2621   	 4.12946   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 3700, m: 24)                                                                       	 0.0115471 	 700       	 0         	 0         	 86.1309   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 24, m: 24)                                                                  	 0.011239  	 900       	 1.47601   	 0         	 1.12238   	 1.31507   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 74, r: 74, r2: 2500, leftOrthog: 0)        	 0.0106424 	 100       	 257.274   	 0         	 42.5434   	 6.04733   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 1200, k: 24) 	 0.00891764	 800       	 258.364   	 0         	 64.5911   	 4         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 24, n: 50, r2: 24)                                                                                         	 0.00804143	 800       	 0         	 0         	 45.8426   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 24, n: 50, r2: 24)                   	 0.00756915	 700       	 0         	 0         	 131.396   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 74, n: 50, r: 74, r2: 50)             	 0.00747544	 100       	 366.266   	 0         	 49.4954   	 7.4       
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 3700, m: 24)                                                              	 0.00725019	 700       	 0         	 0         	 137.177   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 24, reductionFactor: 37, colBlockingSize: 12)                  	 0.00678779	 100       	 43.5759   	 0         	 7.13941   	 6.10357   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r: 74, r2: 74)             	 0.00678609	 100       	 403.472   	 0         	 44.2642   	 9.1151    
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 24, m: 1200, k: 24) 	 0.00556272	 700       	 173.958   	 0         	 58.5659   	 2.9703    
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 74, reductionFactor: 37, colBlockingSize: 12)                    	 0.00529466	 100       	 10.622    	 0         	 1.38645   	 7.66129   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 24, r: 24, streamingCols: 0)                   	 0.00387567	 100       	 37.1548   	 0         	 24.8293   	 1.49641   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 50, Qr2: 24)       	 0.00339147	 100       	 0         	 0         	 87.2779   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 74, r: 50, r2: 50, leftOrthog: 0)          	 0.00242242	 100       	 15.274    	 0         	 5.31699   	 2.87267   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 2500, m: 24)                                                                       	 0.00216023	 100       	 0         	 0         	 44.4397   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 0, n: 50, r2: 24)                    	 0.00196194	 100       	 0         	 0         	 48.9312   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 24)                                                              	 0.00172218	 100       	 0         	 0         	 55.7435   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 24, reductionFactor: 37, colBlockingSize: 12)                    	 0.00130918	 100       	 4.51861   	 0         	 1.08526   	 4.16362   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                   	 0.000869132	 100       	 0.575287  	 0         	 2.30115   	 0.25      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 24, n: 50, r2: 1)                                                                                          	 0.000829993	 200       	 0         	 0         	 4.62655   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 24)                                                                                          	 0.000817794	 200       	 0         	 0         	 4.69556   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 50, r2: 50)              	 0.000773186	 100       	 32.3337   	 0         	 7.7601    	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 50, k: 24)   	 0.000721915	 100       	 16.6225   	 0         	 5.43      	 3.06122   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 24, k: 50)     	 0.000716749	 100       	 16.7423   	 0         	 5.46914   	 3.06122   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 1, Xr2: 50, Qr1: 1, Qr2: 0)          	 0.000628038	 100       	 0         	 0         	 6.36904   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                          	 0.000537315	 100       	 0         	 0         	 7.44442   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 1, r1low: 0, n: 50, r2: 24)                     	 0.000489267	 100       	 0         	 0         	 3.92424   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 24, n: 50, r2: 1)                    	 0.000472059	 100       	 0         	 0         	 12.5408   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 50, m: 24, k: 50)  	 0.000455972	 100       	 26.3174   	 0         	 8.59702   	 3.06122   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                            	 0.000421076	 100       	 1.18743   	 0         	 14.2492   	 0.0833333 
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                 	 0.000395611	 100       	 0.631934  	 0         	 10.1109   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 24)                                                                	 0.000374562	 100       	 0         	 0         	 5.12599   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 24, n: 50, r2: 1)                                                                                 	 0.00036474	 100       	 0.329001  	 0         	 5.26402   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                 	 0.000348168	 100       	 0.718044  	 0         	 11.4887   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 24, m: 24, fromLeft: 0)                	 0.000278801	 800       	 0         	 0         	 26.4447   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 24, m: 50, k: 24)   	 0.00020166	 100       	 28.5629   	 0         	 11.806    	 2.41935   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 0, m: 1200, k: 24)  	 6.29e-06  	 100       	 0         	 0         	 3662.96   	 0         
Timing statistics:
function                                                                                                                                                                                      	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                        	 1.67472   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_normalized(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                     	 1.67467   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::rightNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                            	 1.42186   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::rightNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                        	 1.42054   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double]	 1.35114   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                               	 0.516174  	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                  	 0.418506  	 1800      
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                            	 0.359868  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_leftOrthogonalize(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&) [with T = double]                                   	 0.25274   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]           	 0.138138  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                	 0.132646  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                           	 0.0629187 	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.0597411 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                                       	 0.0398942 	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                    	 0.0380268 	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double]          	 0.0242914 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double]       	 0.0160437 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double]        	 0.0154102 	 1800      
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                       	 0.0137073 	 800       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.011239  	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                        	 0.0104924 	 1000      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                	 0.0102265 	 1300      
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                              	 0.00934693	 900       
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                	 0.00372291	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                              	 0.00283139	 6300      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                         	 0.00116681	 5200      
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                       	 0.00110852	 300       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                         	 0.000869132	 100       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                                                  	 0.000421076	 100       
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                           	 0.000278801	 800       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
orthoX: L, orthoY: L
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 64
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->65  [0m[1;34m1->66  [0m[1;34m2->67  [0m[1;34m3->68  [0m[1;34m4->69  [0m[1;34m5->70  [0m[1;34m6->71  [0m[1;34m7->72  [0m[1;34m8->73  [0m[1;34m9->74  [0m[1;34m10->75  [0m[1;34m11->76  [0m[1;34m12->77  [0m[1;34m13->78  [0m[1;34m14->79  [0m[1;34m15->80  [0m[1;34m16->81  [0m[1;34m17->82  [0m[1;34m18->83  [0m[1;34m19->84  [0m[1;34m20->85  [0m[1;34m21->86  [0m[1;34m22->87  [0m[1;34m23->88  [0m[1;34m24->89  [0m[1;34m25->90  [0m[1;34m26->91  [0m[1;34m27->92  [0m[1;34m28->93  [0m[1;34m29->94  [0m[1;34m30->95  [0m[1;34m31->96  [0m[1;34m32->97  [0m[1;34m33->98  [0m[1;34m34->99  [0m[1;34m35->100  [0m[1;34m36->101  [0m[1;34m37->102  [0m[1;34m38->103  [0m[1;34m39->104  [0m[1;34m40->105  [0m[1;34m41->106  [0m[1;34m42->107  [0m[1;34m43->108  [0m[1;34m44->109  [0m[1;34m45->110  [0m[1;34m46->111  [0m[1;34m47->112  [0m[1;34m48->113  [0m[1;34m49->114  [0m[1;34m50->115  [0m[1;34m51->116  [0m[1;34m52->117  [0m[1;34m53->118  [0m[1;34m54->119  [0m[1;34m55->120  [0m[1;34m56->121  [0m[1;34m57->122  [0m[1;34m58->123  [0m[1;34m59->124  [0m[1;34m60->125  [0m[1;34m61->126  [0m[1;34m62->127  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22787857807232 -> hwthread 65 - OK[0m[1;34m
[0m[1;34m	threadid 22787620071424 -> hwthread 66 - OK[0m[1;34m
[0m[1;34m	threadid 22787418744960 -> hwthread 67 - OK[0m[1;34m
[0m[1;34m	threadid 22787217418496 -> hwthread 68 - OK[0m[1;34m
[0m[1;34m	threadid 22787016092032 -> hwthread 69 - OK[0m[1;34m
[0m[1;34m	threadid 22786814765568 -> hwthread 70 - OK[0m[1;34m
[0m[1;34m	threadid 22786613439104 -> hwthread 71 - OK[0m[1;34m
[0m[1;34m	threadid 22786412112640 -> hwthread 72 - OK[0m[1;34m
[0m[1;34m	threadid 22786210786176 -> hwthread 73 - OK[0m[1;34m
[0m[1;34m	threadid 22786009459712 -> hwthread 74 - OK[0m[1;34m
[0m[1;34m	threadid 22785808133248 -> hwthread 75 - OK[0m[1;34m
[0m[1;34m	threadid 22785606806784 -> hwthread 76 - OK[0m[1;34m
[0m[1;34m	threadid 22785405480320 -> hwthread 77 - OK[0m[1;34m
[0m[1;34m	threadid 22785204153856 -> hwthread 78 - OK[0m[1;34m
[0m[1;34m	threadid 22785002827392 -> hwthread 79 - OK[0m[1;34m
[0m[1;34m	threadid 22784801500928 -> hwthread 80 - OK[0m[1;34m
[0m[1;34m	threadid 22784600174464 -> hwthread 81 - OK[0m[1;34m
[0m[1;34m	threadid 22784398848000 -> hwthread 82 - OK[0m[1;34m
[0m[1;34m	threadid 22784197521536 -> hwthread 83 - OK[0m[1;34m
[0m[1;34m	threadid 22783996195072 -> hwthread 84 - OK[0m[1;34m
[0m[1;34m	threadid 22783794868608 -> hwthread 85 - OK[0m[1;34m
[0m[1;34m	threadid 22783593542144 -> hwthread 86 - OK[0m[1;34m
[0m[1;34m	threadid 22783392215680 -> hwthread 87 - OK[0m[1;34m
[0m[1;34m	threadid 22783190889216 -> hwthread 88 - OK[0m[1;34m
[0m[1;34m	threadid 22782989562752 -> hwthread 89 - OK[0m[1;34m
[0m[1;34m	threadid 22782788236288 -> hwthread 90 - OK[0m[1;34m
[0m[1;34m	threadid 22782586909824 -> hwthread 91 - OK[0m[1;34m
[0m[1;34m	threadid 22782385583360 -> hwthread 92 - OK[0m[1;34m
[0m[1;34m	threadid 22782184256896 -> hwthread 93 - OK[0m[1;34m
[0m[1;34m	threadid 22781982930432 -> hwthread 94 - OK[0m[1;34m
[0m[1;34m	threadid 22781781603968 -> hwthread 95 - OK[0m[1;34m
[0m[1;34m	threadid 22781580277504 -> hwthread 96 - OK[0m[1;34m
[0m[1;34m	threadid 22781378946944 -> hwthread 97 - OK[0m[1;34m
[0m[1;34m	threadid 22781177620480 -> hwthread 98 - OK[0m[1;34m
[0m[1;34m	threadid 22780976294016 -> hwthread 99 - OK[0m[1;34m
[0m[1;34m	threadid 22780774967552 -> hwthread 100 - OK[0m[1;34m
[0m[1;34m	threadid 22780573641088 -> hwthread 101 - OK[0m[1;34m
[0m[1;34m	threadid 22780372314624 -> hwthread 102 - OK[0m[1;34m
[0m[1;34m	threadid 22780170988160 -> hwthread 103 - OK[0m[1;34m
[0m[1;34m	threadid 22779969661696 -> hwthread 104 - OK[0m[1;34m
[0m[1;34m	threadid 22779768335232 -> hwthread 105 - OK[0m[1;34m
[0m[1;34m	threadid 22779567008768 -> hwthread 106 - OK[0m[1;34m
[0m[1;34m	threadid 22779365682304 -> hwthread 107 - OK[0m[1;34m
[0m[1;34m	threadid 22779164355840 -> hwthread 108 - OK[0m[1;34m
[0m[1;34m	threadid 22778963029376 -> hwthread 109 - OK[0m[1;34m
[0m[1;34m	threadid 22778761702912 -> hwthread 110 - OK[0m[1;34m
[0m[1;34m	threadid 22778560376448 -> hwthread 111 - OK[0m[1;34m
[0m[1;34m	threadid 22778359049984 -> hwthread 112 - OK[0m[1;34m
[0m[1;34m	threadid 22778157723520 -> hwthread 113 - OK[0m[1;34m
[0m[1;34m	threadid 22777956397056 -> hwthread 114 - OK[0m[1;34m
[0m[1;34m	threadid 22777755070592 -> hwthread 115 - OK[0m[1;34m
[0m[1;34m	threadid 22777553744128 -> hwthread 116 - OK[0m[1;34m
[0m[1;34m	threadid 22777352417664 -> hwthread 117 - OK[0m[1;34m
[0m[1;34m	threadid 22777151091200 -> hwthread 118 - OK[0m[1;34m
[0m[1;34m	threadid 22776949764736 -> hwthread 119 - OK[0m[1;34m
[0m[1;34m	threadid 22776748438272 -> hwthread 120 - OK[0m[1;34m
[0m[1;34m	threadid 22776547111808 -> hwthread 121 - OK[0m[1;34m
[0m[1;34m	threadid 22776345785344 -> hwthread 122 - OK[0m[1;34m
[0m[1;34m	threadid 22776144458880 -> hwthread 123 - OK[0m[1;34m
[0m[1;34m	threadid 22775943132416 -> hwthread 124 - OK[0m[1;34m
[0m[1;34m	threadid 22775741805952 -> hwthread 125 - OK[0m[1;34m
[0m[1;34m	threadid 22775540479488 -> hwthread 126 - OK[0m[1;34m
[0m[1;34m	threadid 22775339153024 -> hwthread 127 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22787752146688 -> hwthread 64 - OK[0m[1;34m
[0m[1;34m	threadid 22787745556224 -> hwthread 65 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 75, m: 75)                                                                 	 0.439488  	 700       	 6.2715    	 0         	 0.215978  	 29.0376   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3750, cols: 75, reductionFactor: 37, colBlockingSize: 12)                  	 0.285784  	 600       	 90.966    	 0         	 4.81833   	 18.8792   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 75, r: 75, r2: 3750, leftOrthog: 0)        	 0.105491  	 600       	 239.949   	 0         	 38.9037   	 6.16776   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3750, cols: 25, reductionFactor: 37, colBlockingSize: 12)                  	 0.0540551 	 700       	 62.3426   	 0         	 9.77706   	 6.37641   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 75, n: 50, r: 75, r2: 75)             	 0.0500733 	 600       	 505.509   	 0         	 54.4602   	 9.28218   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 75, reductionFactor: 37, colBlockingSize: 12)                  	 0.0481692 	 100       	 59.966    	 0         	 3.20744   	 18.6959   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 75)                                                                 	 0.0470411 	 100       	 3.543     	 0         	 0.170914  	 20.7297   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                 	 0.0393824 	 100       	 2.96241   	 0         	 0.153368  	 19.3157   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 3750, Xcols: 25, r: 25, streamingCols: 0)                   	 0.0356934 	 700       	 45.9644   	 0         	 29.4662   	 1.5599    
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 75, Qr2: 25)       	 0.0346063 	 700       	 0         	 0         	 80.9102   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3750, cols: 50, reductionFactor: 37, colBlockingSize: 12)                  	 0.0235461 	 100       	 81.7831   	 0         	 6.45541   	 12.6689   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 25, k: 2500)   	 0.0233526 	 800       	 214.109   	 0         	 51.7288   	 4.13907   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 2500, m: 25, k: 50)	 0.0166938 	 800       	 299.513   	 0         	 72.3623   	 4.13907   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 3750, leftOrthog: 0)        	 0.0162671 	 100       	 115.263   	 0         	 27.909    	 4.12996   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 25, m: 25)                                                                  	 0.0124833 	 900       	 1.50191   	 0         	 1.09586   	 1.37053   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 3750, m: 25)                                                                       	 0.0119499 	 700       	 0         	 0         	 87.867    	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 75, r: 75, r2: 2500, leftOrthog: 0)        	 0.010664  	 100       	 263.737   	 0         	 43.0419   	 6.12745   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 1250, k: 25) 	 0.0084365 	 800       	 296.331   	 0         	 72.0678   	 4.11184   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 25, n: 50, r2: 25)                                                                                         	 0.00830249	 800       	 0         	 0         	 48.1783   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 25, n: 50, r2: 25)                   	 0.00808352	 700       	 0         	 0         	 129.894   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 25, reductionFactor: 37, colBlockingSize: 12)                  	 0.00733282	 100       	 43.7684   	 0         	 6.88684   	 6.35537   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 75, n: 50, r: 75, r2: 50)             	 0.00711713	 100       	 395.174   	 0         	 53.1113   	 7.44048   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 3750, m: 25)                                                              	 0.00691622	 700       	 0         	 0         	 151.817   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 75, reductionFactor: 37, colBlockingSize: 12)                    	 0.00664539	 100       	 8.69328   	 0         	 1.1286    	 7.7027    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r: 75, r2: 75)             	 0.00635122	 100       	 442.828   	 0         	 47.9435   	 9.23645   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 25, m: 1250, k: 25) 	 0.00582642	 700       	 187.722   	 0         	 60.6719   	 3.09406   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 25, r: 25, streamingCols: 0)                   	 0.0039605 	 100       	 39.4521   	 0         	 25.3125   	 1.5586    
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 50, Qr2: 25)       	 0.00326486	 100       	 0         	 0         	 91.8876   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 2500, m: 25)                                                                       	 0.00225439	 100       	 0         	 0         	 44.3578   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 25)                                                              	 0.00179334	 100       	 0         	 0         	 55.7619   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 75, r: 50, r2: 50, leftOrthog: 0)          	 0.00179146	 100       	 20.9327   	 0         	 7.25666   	 2.88462   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 0, n: 50, r2: 25)                    	 0.00145698	 100       	 0         	 0         	 68.635    	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 25, reductionFactor: 37, colBlockingSize: 12)                    	 0.00125249	 100       	 5.12493   	 0         	 1.19762   	 4.27928   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                   	 0.00086983	 100       	 0.574825  	 0         	 2.2993    	 0.25      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 25, n: 50, r2: 1)                                                                                          	 0.000846745	 200       	 0         	 0         	 4.72397   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 25)                                                                                          	 0.000808791	 200       	 0         	 0         	 4.94565   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 50, r2: 50)              	 0.000767848	 100       	 32.5585   	 0         	 7.81405   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 25, k: 50)     	 0.000680111	 100       	 18.3794   	 0         	 5.88139   	 3.125     
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 50, m: 25, k: 50)  	 0.000540671	 100       	 23.1194   	 0         	 7.39821   	 3.125     
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 50, k: 25)   	 0.000518098	 100       	 24.1267   	 0         	 7.72055   	 3.125     
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                          	 0.000514716	 100       	 0         	 0         	 7.77128   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 25, n: 50, r2: 1)                    	 0.000502812	 100       	 0         	 0         	 11.9329   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 25, m: 25, fromLeft: 0)                	 0.000474887	 800       	 0         	 0         	 16.8461   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 1, r1low: 0, n: 50, r2: 25)                     	 0.000444645	 100       	 0         	 0         	 4.49797   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 1, Xr2: 50, Qr1: 1, Qr2: 0)          	 0.000440324	 100       	 0         	 0         	 9.08422   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                 	 0.000407181	 100       	 0.613978  	 0         	 9.82364   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                            	 0.000393672	 100       	 1.27009   	 0         	 15.2411   	 0.0833333 
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 25)                                                                	 0.000376434	 100       	 0         	 0         	 5.31302   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 25, n: 50, r2: 1)                                                                                 	 0.000348078	 100       	 0.359115  	 0         	 5.74584   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                 	 0.000332579	 100       	 0.751701  	 0         	 12.0272   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 25, m: 50, k: 25)   	 0.00021686	 100       	 28.8204   	 0         	 11.5282   	 2.5       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 0, m: 1250, k: 25)  	 5.931e-06 	 100       	 0         	 0         	 4215.14   	 0         
Timing statistics:
function                                                                                                                                                                                      	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                        	 1.7221    	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_normalized(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                     	 1.72206   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::rightNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                            	 1.46485   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::rightNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                        	 1.46356   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double]	 1.39267   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                               	 0.525912  	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                  	 0.426785  	 1800      
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                            	 0.364743  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_leftOrthogonalize(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&) [with T = double]                                   	 0.257123  	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]           	 0.144684  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                	 0.134214  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                           	 0.0643095 	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.0630972 	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                    	 0.0396539 	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                                       	 0.0383115 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double]          	 0.0240327 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double]       	 0.0172344 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double]        	 0.0150038 	 1800      
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                       	 0.0142043 	 800       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.0124833 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                        	 0.010488  	 1000      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                	 0.0104727 	 1300      
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                              	 0.009086  	 900       
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                	 0.00362677	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                              	 0.00284359	 6300      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                         	 0.0011067 	 5200      
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                       	 0.00108784	 300       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                         	 0.00086983	 100       
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                           	 0.000474887	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                                                  	 0.000393672	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
orthoX: L, orthoY: L
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 64
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->65  [0m[1;34m1->66  [0m[1;34m2->67  [0m[1;34m3->68  [0m[1;34m4->69  [0m[1;34m5->70  [0m[1;34m6->71  [0m[1;34m7->72  [0m[1;34m8->73  [0m[1;34m9->74  [0m[1;34m10->75  [0m[1;34m11->76  [0m[1;34m12->77  [0m[1;34m13->78  [0m[1;34m14->79  [0m[1;34m15->80  [0m[1;34m16->81  [0m[1;34m17->82  [0m[1;34m18->83  [0m[1;34m19->84  [0m[1;34m20->85  [0m[1;34m21->86  [0m[1;34m22->87  [0m[1;34m23->88  [0m[1;34m24->89  [0m[1;34m25->90  [0m[1;34m26->91  [0m[1;34m27->92  [0m[1;34m28->93  [0m[1;34m29->94  [0m[1;34m30->95  [0m[1;34m31->96  [0m[1;34m32->97  [0m[1;34m33->98  [0m[1;34m34->99  [0m[1;34m35->100  [0m[1;34m36->101  [0m[1;34m37->102  [0m[1;34m38->103  [0m[1;34m39->104  [0m[1;34m40->105  [0m[1;34m41->106  [0m[1;34m42->107  [0m[1;34m43->108  [0m[1;34m44->109  [0m[1;34m45->110  [0m[1;34m46->111  [0m[1;34m47->112  [0m[1;34m48->113  [0m[1;34m49->114  [0m[1;34m50->115  [0m[1;34m51->116  [0m[1;34m52->117  [0m[1;34m53->118  [0m[1;34m54->119  [0m[1;34m55->120  [0m[1;34m56->121  [0m[1;34m57->122  [0m[1;34m58->123  [0m[1;34m59->124  [0m[1;34m60->125  [0m[1;34m61->126  [0m[1;34m62->127  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23423882758016 -> hwthread 65 - OK[0m[1;34m
[0m[1;34m	threadid 23423677884416 -> hwthread 66 - OK[0m[1;34m
[0m[1;34m	threadid 23423476557952 -> hwthread 67 - OK[0m[1;34m
[0m[1;34m	threadid 23423275231488 -> hwthread 68 - OK[0m[1;34m
[0m[1;34m	threadid 23423073905024 -> hwthread 69 - OK[0m[1;34m
[0m[1;34m	threadid 23422872578560 -> hwthread 70 - OK[0m[1;34m
[0m[1;34m	threadid 23422671252096 -> hwthread 71 - OK[0m[1;34m
[0m[1;34m	threadid 23422469925632 -> hwthread 72 - OK[0m[1;34m
[0m[1;34m	threadid 23422268599168 -> hwthread 73 - OK[0m[1;34m
[0m[1;34m	threadid 23422067272704 -> hwthread 74 - OK[0m[1;34m
[0m[1;34m	threadid 23421865946240 -> hwthread 75 - OK[0m[1;34m
[0m[1;34m	threadid 23421664619776 -> hwthread 76 - OK[0m[1;34m
[0m[1;34m	threadid 23421463293312 -> hwthread 77 - OK[0m[1;34m
[0m[1;34m	threadid 23421261966848 -> hwthread 78 - OK[0m[1;34m
[0m[1;34m	threadid 23421060640384 -> hwthread 79 - OK[0m[1;34m
[0m[1;34m	threadid 23420859313920 -> hwthread 80 - OK[0m[1;34m
[0m[1;34m	threadid 23420657987456 -> hwthread 81 - OK[0m[1;34m
[0m[1;34m	threadid 23420456660992 -> hwthread 82 - OK[0m[1;34m
[0m[1;34m	threadid 23420255334528 -> hwthread 83 - OK[0m[1;34m
[0m[1;34m	threadid 23420054008064 -> hwthread 84 - OK[0m[1;34m
[0m[1;34m	threadid 23419852681600 -> hwthread 85 - OK[0m[1;34m
[0m[1;34m	threadid 23419651355136 -> hwthread 86 - OK[0m[1;34m
[0m[1;34m	threadid 23419450028672 -> hwthread 87 - OK[0m[1;34m
[0m[1;34m	threadid 23419248702208 -> hwthread 88 - OK[0m[1;34m
[0m[1;34m	threadid 23419047375744 -> hwthread 89 - OK[0m[1;34m
[0m[1;34m	threadid 23418846049280 -> hwthread 90 - OK[0m[1;34m
[0m[1;34m	threadid 23418644722816 -> hwthread 91 - OK[0m[1;34m
[0m[1;34m	threadid 23418443396352 -> hwthread 92 - OK[0m[1;34m
[0m[1;34m	threadid 23418242069888 -> hwthread 93 - OK[0m[1;34m
[0m[1;34m	threadid 23418040743424 -> hwthread 94 - OK[0m[1;34m
[0m[1;34m	threadid 23417839416960 -> hwthread 95 - OK[0m[1;34m
[0m[1;34m	threadid 23417638090496 -> hwthread 96 - OK[0m[1;34m
[0m[1;34m	threadid 23417436759936 -> hwthread 97 - OK[0m[1;34m
[0m[1;34m	threadid 23417235433472 -> hwthread 98 - OK[0m[1;34m
[0m[1;34m	threadid 23417034107008 -> hwthread 99 - OK[0m[1;34m
[0m[1;34m	threadid 23416832780544 -> hwthread 100 - OK[0m[1;34m
[0m[1;34m	threadid 23416631454080 -> hwthread 101 - OK[0m[1;34m
[0m[1;34m	threadid 23416430127616 -> hwthread 102 - OK[0m[1;34m
[0m[1;34m	threadid 23416228801152 -> hwthread 103 - OK[0m[1;34m
[0m[1;34m	threadid 23416027474688 -> hwthread 104 - OK[0m[1;34m
[0m[1;34m	threadid 23415826148224 -> hwthread 105 - OK[0m[1;34m
[0m[1;34m	threadid 23415624821760 -> hwthread 106 - OK[0m[1;34m
[0m[1;34m	threadid 23415423495296 -> hwthread 107 - OK[0m[1;34m
[0m[1;34m	threadid 23415222168832 -> hwthread 108 - OK[0m[1;34m
[0m[1;34m	threadid 23415020842368 -> hwthread 109 - OK[0m[1;34m
[0m[1;34m	threadid 23414819515904 -> hwthread 110 - OK[0m[1;34m
[0m[1;34m	threadid 23414618189440 -> hwthread 111 - OK[0m[1;34m
[0m[1;34m	threadid 23414416862976 -> hwthread 112 - OK[0m[1;34m
[0m[1;34m	threadid 23414215536512 -> hwthread 113 - OK[0m[1;34m
[0m[1;34m	threadid 23414014210048 -> hwthread 114 - OK[0m[1;34m
[0m[1;34m	threadid 23413812883584 -> hwthread 115 - OK[0m[1;34m
[0m[1;34m	threadid 23413611557120 -> hwthread 116 - OK[0m[1;34m
[0m[1;34m	threadid 23413410230656 -> hwthread 117 - OK[0m[1;34m
[0m[1;34m	threadid 23413208904192 -> hwthread 118 - OK[0m[1;34m
[0m[1;34m	threadid 23413007577728 -> hwthread 119 - OK[0m[1;34m
[0m[1;34m	threadid 23412806251264 -> hwthread 120 - OK[0m[1;34m
[0m[1;34m	threadid 23412604924800 -> hwthread 121 - OK[0m[1;34m
[0m[1;34m	threadid 23412403598336 -> hwthread 122 - OK[0m[1;34m
[0m[1;34m	threadid 23412202271872 -> hwthread 123 - OK[0m[1;34m
[0m[1;34m	threadid 23412000945408 -> hwthread 124 - OK[0m[1;34m
[0m[1;34m	threadid 23411799618944 -> hwthread 125 - OK[0m[1;34m
[0m[1;34m	threadid 23411598292480 -> hwthread 126 - OK[0m[1;34m
[0m[1;34m	threadid 23411396966016 -> hwthread 127 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23423777097472 -> hwthread 64 - OK[0m[1;34m
[0m[1;34m	threadid 23423770507008 -> hwthread 65 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 76, m: 76)                                                                 	 0.441476  	 700       	 6.49633   	 0         	 0.220765  	 29.4265   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3800, cols: 76, reductionFactor: 37, colBlockingSize: 12)                  	 0.296476  	 600       	 91.2399   	 0         	 4.76924   	 19.1309   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 76, r: 76, r2: 3800, leftOrthog: 0)        	 0.110228  	 600       	 238.946   	 0         	 38.2313   	 6.25      
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3800, cols: 26, reductionFactor: 37, colBlockingSize: 12)                  	 0.0567359 	 700       	 65.1001   	 0         	 9.81857   	 6.63031   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 76, n: 50, r: 76, r2: 76)             	 0.0499834 	 600       	 526.946   	 0         	 56.0227   	 9.40594   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 76, reductionFactor: 37, colBlockingSize: 12)                  	 0.0494653 	 100       	 59.9623   	 0         	 3.16627   	 18.9378   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 76)                                                                 	 0.0471919 	 100       	 3.57406   	 0         	 0.172063  	 20.7718   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                 	 0.0378516 	 100       	 3.08221   	 0         	 0.15957   	 19.3157   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 3800, Xcols: 26, r: 26, streamingCols: 0)                   	 0.0377125 	 700       	 47.6807   	 0         	 29.3922   	 1.62223   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 76, Qr2: 26)       	 0.0365652 	 700       	 0         	 0         	 78.5052   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 26, k: 2500)   	 0.0240736 	 800       	 216.004   	 0         	 50.8573   	 4.24726   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3800, cols: 50, reductionFactor: 37, colBlockingSize: 12)                  	 0.0231726 	 100       	 84.2094   	 0         	 6.64578   	 12.6711   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 2500, m: 26, k: 50)	 0.0161003 	 800       	 322.975   	 0         	 76.0432   	 4.24726   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 26, m: 26)                                                                  	 0.0134497 	 900       	 1.56812   	 0         	 1.09957   	 1.42612   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 3800, m: 26)                                                                       	 0.0119381 	 700       	 0         	 0         	 92.6913   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 76, r: 76, r2: 2500, leftOrthog: 0)        	 0.0101597 	 100       	 284.26    	 0         	 45.7928   	 6.20753   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 3800, leftOrthog: 0)        	 0.0100284 	 100       	 189.462   	 0         	 45.8697   	 4.13043   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 1300, k: 26) 	 0.00984443	 800       	 274.673   	 0         	 65.0764   	 4.22078   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 26, n: 50, r2: 26)                                                                                         	 0.00915896	 800       	 0         	 0         	 47.2368   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 26, n: 50, r2: 26)                   	 0.00856793	 700       	 0         	 0         	 129.151   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 26, reductionFactor: 37, colBlockingSize: 12)                  	 0.00808882	 100       	 42.9154   	 0         	 6.49549   	 6.60696   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 76, n: 50, r: 76, r2: 50)             	 0.00793428	 100       	 363.99    	 0         	 48.6597   	 7.48031   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 3800, m: 26)                                                              	 0.00740407	 700       	 0         	 0         	 149.453   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 76, reductionFactor: 37, colBlockingSize: 12)                    	 0.00723993	 100       	 8.1936    	 0         	 1.05813   	 7.74346   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r: 76, r2: 76)             	 0.00629427	 100       	 458.83    	 0         	 49.032    	 9.35776   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 26, m: 1300, k: 26) 	 0.00618914	 700       	 198.787   	 0         	 61.7768   	 3.21782   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 26, r: 26, streamingCols: 0)                   	 0.00414061	 100       	 40.8153   	 0         	 25.1824   	 1.62079   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 50, Qr2: 26)       	 0.00337564	 100       	 0         	 0         	 90.0569   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 2500, m: 26)                                                                       	 0.00225588	 100       	 0         	 0         	 46.1017   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 0, n: 50, r2: 26)                    	 0.00193007	 100       	 0         	 0         	 53.8842   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 76, r: 50, r2: 50, leftOrthog: 0)          	 0.00174859	 100       	 21.7318   	 0         	 7.5032    	 2.89634   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 26)                                                              	 0.00161442	 100       	 0         	 0         	 64.4193   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 26, reductionFactor: 37, colBlockingSize: 12)                    	 0.00149428	 100       	 4.64619   	 0         	 1.0579    	 4.39189   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                   	 0.000868767	 100       	 0.575528  	 0         	 2.30211   	 0.25      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 26)                                                                                          	 0.000819121	 200       	 0         	 0         	 5.07861   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 26, n: 50, r2: 1)                                                                                          	 0.000770052	 200       	 0         	 0         	 5.40223   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 50, r2: 50)              	 0.000738962	 100       	 33.8312   	 0         	 8.1195    	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 26, k: 50)     	 0.000687814	 100       	 18.9005   	 0         	 5.93184   	 3.18627   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 50, m: 26, k: 50)  	 0.000555961	 100       	 23.3829   	 0         	 7.33864   	 3.18627   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                          	 0.00054048	 100       	 0         	 0         	 7.40083   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 50, k: 26)   	 0.000525474	 100       	 24.7396   	 0         	 7.76442   	 3.18627   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 26, n: 50, r2: 1)                    	 0.000487018	 100       	 0         	 0         	 12.4841   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 1, Xr2: 50, Qr1: 1, Qr2: 0)          	 0.000445845	 100       	 0         	 0         	 8.97173   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 1, r1low: 0, n: 50, r2: 26)                     	 0.000427565	 100       	 0         	 0         	 4.86476   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 26, m: 26, fromLeft: 0)                	 0.000424959	 800       	 0         	 0         	 20.3615   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                            	 0.000410078	 100       	 1.21928   	 0         	 14.6314   	 0.0833333 
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 26)                                                                	 0.000396011	 100       	 0         	 0         	 5.25238   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                 	 0.000390906	 100       	 0.63954   	 0         	 10.2326   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 26, n: 50, r2: 1)                                                                                 	 0.000340109	 100       	 0.38223   	 0         	 6.11569   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                 	 0.000325378	 100       	 0.768337  	 0         	 12.2934   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 26, m: 50, k: 26)   	 0.000304485	 100       	 22.2014   	 0         	 8.60732   	 2.57937   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 0, m: 1300, k: 26)  	 6.42e-06  	 100       	 0         	 0         	 4211.84   	 0         
Timing statistics:
function                                                                                                                                                                                      	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                        	 1.73463   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_normalized(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                     	 1.73458   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::rightNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                            	 1.46609   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::rightNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                        	 1.4648    	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double]	 1.39386   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                               	 0.52652   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                  	 0.442673  	 1800      
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                            	 0.377157  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_leftOrthogonalize(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&) [with T = double]                                   	 0.26841   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]           	 0.15185   	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                	 0.132165  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.0667538 	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                           	 0.0649509 	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                    	 0.0418531 	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                                       	 0.0403867 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double]          	 0.0247614 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double]        	 0.0168699 	 1800      
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double]       	 0.0166563 	 900       
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                       	 0.014194  	 800       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.0134497 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                        	 0.0114126 	 1000      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                	 0.0112886 	 1300      
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                              	 0.0094145 	 900       
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                	 0.0034298 	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                              	 0.00260095	 6300      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                         	 0.0010927 	 5200      
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                       	 0.00105639	 300       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                         	 0.000868767	 100       
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                           	 0.000424959	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                                                  	 0.000410078	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
orthoX: L, orthoY: L
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 64
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->65  [0m[1;34m1->66  [0m[1;34m2->67  [0m[1;34m3->68  [0m[1;34m4->69  [0m[1;34m5->70  [0m[1;34m6->71  [0m[1;34m7->72  [0m[1;34m8->73  [0m[1;34m9->74  [0m[1;34m10->75  [0m[1;34m11->76  [0m[1;34m12->77  [0m[1;34m13->78  [0m[1;34m14->79  [0m[1;34m15->80  [0m[1;34m16->81  [0m[1;34m17->82  [0m[1;34m18->83  [0m[1;34m19->84  [0m[1;34m20->85  [0m[1;34m21->86  [0m[1;34m22->87  [0m[1;34m23->88  [0m[1;34m24->89  [0m[1;34m25->90  [0m[1;34m26->91  [0m[1;34m27->92  [0m[1;34m28->93  [0m[1;34m29->94  [0m[1;34m30->95  [0m[1;34m31->96  [0m[1;34m32->97  [0m[1;34m33->98  [0m[1;34m34->99  [0m[1;34m35->100  [0m[1;34m36->101  [0m[1;34m37->102  [0m[1;34m38->103  [0m[1;34m39->104  [0m[1;34m40->105  [0m[1;34m41->106  [0m[1;34m42->107  [0m[1;34m43->108  [0m[1;34m44->109  [0m[1;34m45->110  [0m[1;34m46->111  [0m[1;34m47->112  [0m[1;34m48->113  [0m[1;34m49->114  [0m[1;34m50->115  [0m[1;34m51->116  [0m[1;34m52->117  [0m[1;34m53->118  [0m[1;34m54->119  [0m[1;34m55->120  [0m[1;34m56->121  [0m[1;34m57->122  [0m[1;34m58->123  [0m[1;34m59->124  [0m[1;34m60->125  [0m[1;34m61->126  [0m[1;34m62->127  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23064540252032 -> hwthread 65 - OK[0m[1;34m
[0m[1;34m	threadid 23064309917696 -> hwthread 66 - OK[0m[1;34m
[0m[1;34m	threadid 23064108591232 -> hwthread 67 - OK[0m[1;34m
[0m[1;34m	threadid 23063907264768 -> hwthread 68 - OK[0m[1;34m
[0m[1;34m	threadid 23063705938304 -> hwthread 69 - OK[0m[1;34m
[0m[1;34m	threadid 23063504611840 -> hwthread 70 - OK[0m[1;34m
[0m[1;34m	threadid 23063303285376 -> hwthread 71 - OK[0m[1;34m
[0m[1;34m	threadid 23063101958912 -> hwthread 72 - OK[0m[1;34m
[0m[1;34m	threadid 23062900632448 -> hwthread 73 - OK[0m[1;34m
[0m[1;34m	threadid 23062699305984 -> hwthread 74 - OK[0m[1;34m
[0m[1;34m	threadid 23062497979520 -> hwthread 75 - OK[0m[1;34m
[0m[1;34m	threadid 23062296653056 -> hwthread 76 - OK[0m[1;34m
[0m[1;34m	threadid 23062095326592 -> hwthread 77 - OK[0m[1;34m
[0m[1;34m	threadid 23061894000128 -> hwthread 78 - OK[0m[1;34m
[0m[1;34m	threadid 23061692673664 -> hwthread 79 - OK[0m[1;34m
[0m[1;34m	threadid 23061491347200 -> hwthread 80 - OK[0m[1;34m
[0m[1;34m	threadid 23061290020736 -> hwthread 81 - OK[0m[1;34m
[0m[1;34m	threadid 23061088694272 -> hwthread 82 - OK[0m[1;34m
[0m[1;34m	threadid 23060887367808 -> hwthread 83 - OK[0m[1;34m
[0m[1;34m	threadid 23060686041344 -> hwthread 84 - OK[0m[1;34m
[0m[1;34m	threadid 23060484714880 -> hwthread 85 - OK[0m[1;34m
[0m[1;34m	threadid 23060283388416 -> hwthread 86 - OK[0m[1;34m
[0m[1;34m	threadid 23060082061952 -> hwthread 87 - OK[0m[1;34m
[0m[1;34m	threadid 23059880735488 -> hwthread 88 - OK[0m[1;34m
[0m[1;34m	threadid 23059679409024 -> hwthread 89 - OK[0m[1;34m
[0m[1;34m	threadid 23059478082560 -> hwthread 90 - OK[0m[1;34m
[0m[1;34m	threadid 23059276756096 -> hwthread 91 - OK[0m[1;34m
[0m[1;34m	threadid 23059075429632 -> hwthread 92 - OK[0m[1;34m
[0m[1;34m	threadid 23058874103168 -> hwthread 93 - OK[0m[1;34m
[0m[1;34m	threadid 23058672776704 -> hwthread 94 - OK[0m[1;34m
[0m[1;34m	threadid 23058471450240 -> hwthread 95 - OK[0m[1;34m
[0m[1;34m	threadid 23058270123776 -> hwthread 96 - OK[0m[1;34m
[0m[1;34m	threadid 23058068793216 -> hwthread 97 - OK[0m[1;34m
[0m[1;34m	threadid 23057867466752 -> hwthread 98 - OK[0m[1;34m
[0m[1;34m	threadid 23057666140288 -> hwthread 99 - OK[0m[1;34m
[0m[1;34m	threadid 23057464813824 -> hwthread 100 - OK[0m[1;34m
[0m[1;34m	threadid 23057263487360 -> hwthread 101 - OK[0m[1;34m
[0m[1;34m	threadid 23057062160896 -> hwthread 102 - OK[0m[1;34m
[0m[1;34m	threadid 23056860834432 -> hwthread 103 - OK[0m[1;34m
[0m[1;34m	threadid 23056659507968 -> hwthread 104 - OK[0m[1;34m
[0m[1;34m	threadid 23056458181504 -> hwthread 105 - OK[0m[1;34m
[0m[1;34m	threadid 23056256855040 -> hwthread 106 - OK[0m[1;34m
[0m[1;34m	threadid 23056055528576 -> hwthread 107 - OK[0m[1;34m
[0m[1;34m	threadid 23055854202112 -> hwthread 108 - OK[0m[1;34m
[0m[1;34m	threadid 23055652875648 -> hwthread 109 - OK[0m[1;34m
[0m[1;34m	threadid 23055451549184 -> hwthread 110 - OK[0m[1;34m
[0m[1;34m	threadid 23055250222720 -> hwthread 111 - OK[0m[1;34m
[0m[1;34m	threadid 23055048896256 -> hwthread 112 - OK[0m[1;34m
[0m[1;34m	threadid 23054847569792 -> hwthread 113 - OK[0m[1;34m
[0m[1;34m	threadid 23054646243328 -> hwthread 114 - OK[0m[1;34m
[0m[1;34m	threadid 23054444916864 -> hwthread 115 - OK[0m[1;34m
[0m[1;34m	threadid 23054243590400 -> hwthread 116 - OK[0m[1;34m
[0m[1;34m	threadid 23054042263936 -> hwthread 117 - OK[0m[1;34m
[0m[1;34m	threadid 23053840937472 -> hwthread 118 - OK[0m[1;34m
[0m[1;34m	threadid 23053639611008 -> hwthread 119 - OK[0m[1;34m
[0m[1;34m	threadid 23053438284544 -> hwthread 120 - OK[0m[1;34m
[0m[1;34m	threadid 23053236958080 -> hwthread 121 - OK[0m[1;34m
[0m[1;34m	threadid 23053035631616 -> hwthread 122 - OK[0m[1;34m
[0m[1;34m	threadid 23052834305152 -> hwthread 123 - OK[0m[1;34m
[0m[1;34m	threadid 23052632978688 -> hwthread 124 - OK[0m[1;34m
[0m[1;34m	threadid 23052431652224 -> hwthread 125 - OK[0m[1;34m
[0m[1;34m	threadid 23052230325760 -> hwthread 126 - OK[0m[1;34m
[0m[1;34m	threadid 23052028999296 -> hwthread 127 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23064434591488 -> hwthread 64 - OK[0m[1;34m
[0m[1;34m	threadid 23064428001024 -> hwthread 65 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 77, m: 77)                                                                 	 0.463531  	 700       	 6.4347    	 0         	 0.215818  	 29.8154   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3850, cols: 77, reductionFactor: 37, colBlockingSize: 12)                  	 0.300401  	 600       	 93.6491   	 0         	 4.8316    	 19.3826   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 77, r: 77, r2: 3850, leftOrthog: 0)        	 0.115417  	 600       	 237.331   	 0         	 37.4799   	 6.33224   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3850, cols: 27, reductionFactor: 37, colBlockingSize: 12)                  	 0.0604631 	 700       	 66.7434   	 0         	 9.69521   	 6.88415   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 77, n: 50, r: 77, r2: 77)             	 0.0583459 	 600       	 469.475   	 0         	 49.2644   	 9.5297    
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 77, reductionFactor: 37, colBlockingSize: 12)                  	 0.0506734 	 100       	 60.0832   	 0         	 3.13267   	 19.1795   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 77)                                                                 	 0.0451343 	 100       	 3.78131   	 0         	 0.18168   	 20.813    
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 3850, Xcols: 27, r: 27, streamingCols: 0)                   	 0.0402365 	 700       	 48.8277   	 0         	 28.9857   	 1.68455   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 77, Qr2: 27)       	 0.0392831 	 700       	 0         	 0         	 74.8983   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                 	 0.0382834 	 100       	 3.04745   	 0         	 0.157771  	 19.3157   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 27, k: 2500)   	 0.025729  	 800       	 209.88    	 0         	 48.2195   	 4.35259   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3850, cols: 50, reductionFactor: 37, colBlockingSize: 12)                  	 0.0234157 	 100       	 84.4316   	 0         	 6.66219   	 12.6733   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 2500, m: 27, k: 50)	 0.017485  	 800       	 308.836   	 0         	 70.9545   	 4.35259   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 27, m: 27)                                                                  	 0.0142498 	 900       	 1.65754   	 0         	 1.11867   	 1.48171   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 3850, leftOrthog: 0)        	 0.0135398 	 100       	 142.173   	 0         	 34.4171   	 4.1309    
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 3850, m: 27)                                                                       	 0.0120765 	 700       	 0         	 0         	 96.4057   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 77, r: 77, r2: 2500, leftOrthog: 0)        	 0.01112   	 100       	 266.592   	 0         	 42.3999   	 6.28756   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 1350, k: 27) 	 0.00962633	 800       	 302.919   	 0         	 70.008    	 4.32692   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 27, n: 50, r2: 27)                                                                                         	 0.00929383	 800       	 0         	 0         	 50.201    	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 3850, m: 27)                                                              	 0.00864459	 700       	 0         	 0         	 134.678   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 27, reductionFactor: 37, colBlockingSize: 12)                  	 0.00835091	 100       	 44.8276   	 0         	 6.5362    	 6.85836   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 27, n: 50, r2: 27)                   	 0.00812316	 700       	 0         	 0         	 143.323   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 77, n: 50, r: 77, r2: 50)             	 0.00766634	 100       	 386.69    	 0         	 51.4248   	 7.51953   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 77, reductionFactor: 37, colBlockingSize: 12)                    	 0.00711945	 100       	 8.55297   	 0         	 1.09885   	 7.78357   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 27, m: 1350, k: 27) 	 0.00697938	 700       	 197.412   	 0         	 59.0772   	 3.34158   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r: 77, r2: 77)             	 0.00670697	 100       	 442.003   	 0         	 46.6296   	 9.47902   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 27, r: 27, streamingCols: 0)                   	 0.00443794	 100       	 41.0664   	 0         	 24.4013   	 1.68296   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 50, Qr2: 27)       	 0.00335476	 100       	 0         	 0         	 91.8098   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 27)                                                              	 0.00234705	 100       	 0         	 0         	 46.0152   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 2500, m: 27)                                                                       	 0.00234433	 100       	 0         	 0         	 46.0685   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 0, n: 50, r2: 27)                    	 0.00186954	 100       	 0         	 0         	 57.7683   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 77, r: 50, r2: 50, leftOrthog: 0)          	 0.00176636	 100       	 21.7962   	 0         	 7.49562   	 2.90785   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 27, reductionFactor: 37, colBlockingSize: 12)                    	 0.00144574	 100       	 5.17869   	 0         	 1.15042   	 4.50158   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                   	 0.000889919	 100       	 0.561849  	 0         	 2.2474    	 0.25      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 27)                                                                                          	 0.000836947	 200       	 0         	 0         	 5.16162   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 27, n: 50, r2: 1)                                                                                          	 0.000798725	 200       	 0         	 0         	 5.40862   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 50, r2: 50)              	 0.000744408	 100       	 33.5837   	 0         	 8.0601    	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 27, k: 50)     	 0.000664879	 100       	 20.3044   	 0         	 6.25678   	 3.24519   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 50, m: 27, k: 50)  	 0.000567776	 100       	 23.777    	 0         	 7.32683   	 3.24519   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 27, m: 27, fromLeft: 0)                	 0.000540801	 800       	 0         	 0         	 17.2544   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 50, k: 27)   	 0.000534434	 100       	 25.2604   	 0         	 7.78394   	 3.24519   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                          	 0.000527392	 100       	 0         	 0         	 7.58449   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 1, r1low: 0, n: 50, r2: 27)                     	 0.000479094	 100       	 0         	 0         	 4.50851   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 27, n: 50, r2: 1)                    	 0.000471919	 100       	 0         	 0         	 13.0531   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 1, Xr2: 50, Qr1: 1, Qr2: 0)          	 0.000437967	 100       	 0         	 0         	 9.13311   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 27)                                                                	 0.000409406	 100       	 0         	 0         	 5.27594   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                            	 0.00040926	 100       	 1.22172   	 0         	 14.6606   	 0.0833333 
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                 	 0.000400026	 100       	 0.624959  	 0         	 9.99935   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 27, n: 50, r2: 1)                                                                                 	 0.000366889	 100       	 0.367959  	 0         	 5.88734   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 27, m: 50, k: 27)   	 0.000351084	 100       	 20.7643   	 0         	 7.81351   	 2.65748   
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                 	 0.000331051	 100       	 0.755171  	 0         	 12.0827   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 0, m: 1350, k: 27)  	 6.37e-06  	 100       	 0         	 0         	 4577.71   	 0         
Timing statistics:
function                                                                                                                                                                                      	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                        	 1.8403    	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_normalized(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                     	 1.84025   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::rightNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                            	 1.55358   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::rightNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                        	 1.55227   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double]	 1.47196   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                               	 0.546949  	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                  	 0.45187   	 1800      
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                            	 0.382294  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_leftOrthogonalize(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&) [with T = double]                                   	 0.286591  	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]           	 0.161872  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                	 0.141843  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                           	 0.0734637 	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.0707353 	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                    	 0.0446744 	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                                       	 0.0430759 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double]          	 0.0263939 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double]       	 0.0180528 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double]        	 0.0174976 	 1800      
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                       	 0.0144208 	 800       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.0142498 	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                	 0.0114569 	 1300      
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                              	 0.011401  	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                        	 0.0109437 	 1000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                	 0.00517969	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                              	 0.00273529	 6300      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                         	 0.0021397 	 5200      
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                       	 0.00109797	 300       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                         	 0.000889919	 100       
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                           	 0.000540801	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                                                  	 0.00040926	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
orthoX: L, orthoY: L
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 64
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->65  [0m[1;34m1->66  [0m[1;34m2->67  [0m[1;34m3->68  [0m[1;34m4->69  [0m[1;34m5->70  [0m[1;34m6->71  [0m[1;34m7->72  [0m[1;34m8->73  [0m[1;34m9->74  [0m[1;34m10->75  [0m[1;34m11->76  [0m[1;34m12->77  [0m[1;34m13->78  [0m[1;34m14->79  [0m[1;34m15->80  [0m[1;34m16->81  [0m[1;34m17->82  [0m[1;34m18->83  [0m[1;34m19->84  [0m[1;34m20->85  [0m[1;34m21->86  [0m[1;34m22->87  [0m[1;34m23->88  [0m[1;34m24->89  [0m[1;34m25->90  [0m[1;34m26->91  [0m[1;34m27->92  [0m[1;34m28->93  [0m[1;34m29->94  [0m[1;34m30->95  [0m[1;34m31->96  [0m[1;34m32->97  [0m[1;34m33->98  [0m[1;34m34->99  [0m[1;34m35->100  [0m[1;34m36->101  [0m[1;34m37->102  [0m[1;34m38->103  [0m[1;34m39->104  [0m[1;34m40->105  [0m[1;34m41->106  [0m[1;34m42->107  [0m[1;34m43->108  [0m[1;34m44->109  [0m[1;34m45->110  [0m[1;34m46->111  [0m[1;34m47->112  [0m[1;34m48->113  [0m[1;34m49->114  [0m[1;34m50->115  [0m[1;34m51->116  [0m[1;34m52->117  [0m[1;34m53->118  [0m[1;34m54->119  [0m[1;34m55->120  [0m[1;34m56->121  [0m[1;34m57->122  [0m[1;34m58->123  [0m[1;34m59->124  [0m[1;34m60->125  [0m[1;34m61->126  [0m[1;34m62->127  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22948060338048 -> hwthread 65 - OK[0m[1;34m
[0m[1;34m	threadid 22947876038656 -> hwthread 66 - OK[0m[1;34m
[0m[1;34m	threadid 22947674712192 -> hwthread 67 - OK[0m[1;34m
[0m[1;34m	threadid 22947473385728 -> hwthread 68 - OK[0m[1;34m
[0m[1;34m	threadid 22947272059264 -> hwthread 69 - OK[0m[1;34m
[0m[1;34m	threadid 22947070732800 -> hwthread 70 - OK[0m[1;34m
[0m[1;34m	threadid 22946869406336 -> hwthread 71 - OK[0m[1;34m
[0m[1;34m	threadid 22946668079872 -> hwthread 72 - OK[0m[1;34m
[0m[1;34m	threadid 22946466753408 -> hwthread 73 - OK[0m[1;34m
[0m[1;34m	threadid 22946265426944 -> hwthread 74 - OK[0m[1;34m
[0m[1;34m	threadid 22946064100480 -> hwthread 75 - OK[0m[1;34m
[0m[1;34m	threadid 22945862774016 -> hwthread 76 - OK[0m[1;34m
[0m[1;34m	threadid 22945661447552 -> hwthread 77 - OK[0m[1;34m
[0m[1;34m	threadid 22945460121088 -> hwthread 78 - OK[0m[1;34m
[0m[1;34m	threadid 22945258794624 -> hwthread 79 - OK[0m[1;34m
[0m[1;34m	threadid 22945057468160 -> hwthread 80 - OK[0m[1;34m
[0m[1;34m	threadid 22944856141696 -> hwthread 81 - OK[0m[1;34m
[0m[1;34m	threadid 22944654815232 -> hwthread 82 - OK[0m[1;34m
[0m[1;34m	threadid 22944453488768 -> hwthread 83 - OK[0m[1;34m
[0m[1;34m	threadid 22944252162304 -> hwthread 84 - OK[0m[1;34m
[0m[1;34m	threadid 22944050835840 -> hwthread 85 - OK[0m[1;34m
[0m[1;34m	threadid 22943849509376 -> hwthread 86 - OK[0m[1;34m
[0m[1;34m	threadid 22943648182912 -> hwthread 87 - OK[0m[1;34m
[0m[1;34m	threadid 22943446856448 -> hwthread 88 - OK[0m[1;34m
[0m[1;34m	threadid 22943245529984 -> hwthread 89 - OK[0m[1;34m
[0m[1;34m	threadid 22943044203520 -> hwthread 90 - OK[0m[1;34m
[0m[1;34m	threadid 22942842877056 -> hwthread 91 - OK[0m[1;34m
[0m[1;34m	threadid 22942641550592 -> hwthread 92 - OK[0m[1;34m
[0m[1;34m	threadid 22942440224128 -> hwthread 93 - OK[0m[1;34m
[0m[1;34m	threadid 22942238897664 -> hwthread 94 - OK[0m[1;34m
[0m[1;34m	threadid 22942037571200 -> hwthread 95 - OK[0m[1;34m
[0m[1;34m	threadid 22941836244736 -> hwthread 96 - OK[0m[1;34m
[0m[1;34m	threadid 22941634914176 -> hwthread 97 - OK[0m[1;34m
[0m[1;34m	threadid 22941433587712 -> hwthread 98 - OK[0m[1;34m
[0m[1;34m	threadid 22941232261248 -> hwthread 99 - OK[0m[1;34m
[0m[1;34m	threadid 22941030934784 -> hwthread 100 - OK[0m[1;34m
[0m[1;34m	threadid 22940829608320 -> hwthread 101 - OK[0m[1;34m
[0m[1;34m	threadid 22940628281856 -> hwthread 102 - OK[0m[1;34m
[0m[1;34m	threadid 22940426955392 -> hwthread 103 - OK[0m[1;34m
[0m[1;34m	threadid 22940225628928 -> hwthread 104 - OK[0m[1;34m
[0m[1;34m	threadid 22940024302464 -> hwthread 105 - OK[0m[1;34m
[0m[1;34m	threadid 22939822976000 -> hwthread 106 - OK[0m[1;34m
[0m[1;34m	threadid 22939621649536 -> hwthread 107 - OK[0m[1;34m
[0m[1;34m	threadid 22939420323072 -> hwthread 108 - OK[0m[1;34m
[0m[1;34m	threadid 22939218996608 -> hwthread 109 - OK[0m[1;34m
[0m[1;34m	threadid 22939017670144 -> hwthread 110 - OK[0m[1;34m
[0m[1;34m	threadid 22938816343680 -> hwthread 111 - OK[0m[1;34m
[0m[1;34m	threadid 22938615017216 -> hwthread 112 - OK[0m[1;34m
[0m[1;34m	threadid 22938413690752 -> hwthread 113 - OK[0m[1;34m
[0m[1;34m	threadid 22938212364288 -> hwthread 114 - OK[0m[1;34m
[0m[1;34m	threadid 22938011037824 -> hwthread 115 - OK[0m[1;34m
[0m[1;34m	threadid 22937809711360 -> hwthread 116 - OK[0m[1;34m
[0m[1;34m	threadid 22937608384896 -> hwthread 117 - OK[0m[1;34m
[0m[1;34m	threadid 22937407058432 -> hwthread 118 - OK[0m[1;34m
[0m[1;34m	threadid 22937205731968 -> hwthread 119 - OK[0m[1;34m
[0m[1;34m	threadid 22937004405504 -> hwthread 120 - OK[0m[1;34m
[0m[1;34m	threadid 22936803079040 -> hwthread 121 - OK[0m[1;34m
[0m[1;34m	threadid 22936601752576 -> hwthread 122 - OK[0m[1;34m
[0m[1;34m	threadid 22936400426112 -> hwthread 123 - OK[0m[1;34m
[0m[1;34m	threadid 22936199099648 -> hwthread 124 - OK[0m[1;34m
[0m[1;34m	threadid 22935997773184 -> hwthread 125 - OK[0m[1;34m
[0m[1;34m	threadid 22935796446720 -> hwthread 126 - OK[0m[1;34m
[0m[1;34m	threadid 22935595120256 -> hwthread 127 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22947954677504 -> hwthread 64 - OK[0m[1;34m
[0m[1;34m	threadid 22947948087040 -> hwthread 65 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 78, m: 78)                                                                 	 0.460844  	 700       	 6.72767   	 0         	 0.222739  	 30.2043   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3900, cols: 78, reductionFactor: 37, colBlockingSize: 12)                  	 0.306283  	 600       	 95.4758   	 0         	 4.8627    	 19.6343   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 78, r: 78, r2: 3900, leftOrthog: 0)        	 0.11998   	 600       	 237.315   	 0         	 36.9968   	 6.41447   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3900, cols: 28, reductionFactor: 37, colBlockingSize: 12)                  	 0.0657607 	 700       	 66.8535   	 0         	 9.36593   	 7.13794   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 78, n: 50, r: 78, r2: 78)             	 0.0570914 	 600       	 498.729   	 0         	 51.6632   	 9.65347   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 78, reductionFactor: 37, colBlockingSize: 12)                  	 0.0509364 	 100       	 61.3356   	 0         	 3.1582    	 19.4211   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 78)                                                                 	 0.0453156 	 100       	 3.81032   	 0         	 0.182719  	 20.8535   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 3900, Xcols: 28, r: 28, streamingCols: 0)                   	 0.0413042 	 700       	 51.8185   	 0         	 29.6637   	 1.74686   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 78, Qr2: 28)       	 0.0380193 	 700       	 0         	 0         	 79.303    	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                 	 0.0370346 	 100       	 3.15021   	 0         	 0.163091  	 19.3157   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 28, k: 2500)   	 0.0261428 	 800       	 214.208   	 0         	 48.0805   	 4.45519   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3900, cols: 50, reductionFactor: 37, colBlockingSize: 12)                  	 0.023578  	 100       	 84.9396   	 0         	 6.70117   	 12.6753   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 2500, m: 28, k: 50)	 0.017388  	 800       	 322.061   	 0         	 72.2889   	 4.45519   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 28, m: 28)                                                                  	 0.0136694 	 900       	 1.92702   	 0         	 1.2536    	 1.53718   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 3900, leftOrthog: 0)        	 0.0131111 	 100       	 148.729   	 0         	 36.0001   	 4.13136   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 3900, m: 28)                                                                       	 0.0119945 	 700       	 0         	 0         	 101.967   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 78, r: 78, r2: 2500, leftOrthog: 0)        	 0.0112295 	 100       	 270.893   	 0         	 42.5426   	 6.36755   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 1400, k: 28) 	 0.0101734 	 800       	 308.255   	 0         	 69.5775   	 4.43038   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 28, n: 50, r2: 28)                                                                                         	 0.00967494	 800       	 0         	 0         	 51.8618   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 28, reductionFactor: 37, colBlockingSize: 12)                  	 0.00867243	 100       	 46.4224   	 0         	 6.52957   	 7.10956   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 28, n: 50, r2: 28)                   	 0.0083713 	 700       	 0         	 0         	 146.099   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 78, n: 50, r: 78, r2: 50)             	 0.00780196	 100       	 389.902   	 0         	 51.587    	 7.55814   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 78, reductionFactor: 37, colBlockingSize: 12)                    	 0.0072961 	 100       	 8.56407   	 0         	 1.09472   	 7.82306   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 3900, m: 28)                                                              	 0.00718761	 700       	 0         	 0         	 170.16    	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r: 78, r2: 78)             	 0.00667666	 100       	 455.617   	 0         	 47.4589   	 9.60024   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 28, m: 1400, k: 28) 	 0.0058614 	 700       	 262.163   	 0         	 75.6527   	 3.46535   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 28, r: 28, streamingCols: 0)                   	 0.00445901	 100       	 43.956    	 0         	 25.188    	 1.74511   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 50, Qr2: 28)       	 0.0034958 	 100       	 0         	 0         	 89.25     	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 2500, m: 28)                                                                       	 0.00234577	 100       	 0         	 0         	 47.7456   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 0, n: 50, r2: 28)                    	 0.00195066	 100       	 0         	 0         	 57.4165   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 28)                                                              	 0.00181551	 100       	 0         	 0         	 61.6906   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 78, r: 50, r2: 50, leftOrthog: 0)          	 0.00178822	 100       	 21.8094   	 0         	 7.47112   	 2.91916   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 28, reductionFactor: 37, colBlockingSize: 12)                    	 0.00137077	 100       	 5.87397   	 0         	 1.27461   	 4.60845   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                   	 0.000822231	 100       	 0.608102  	 0         	 2.43241   	 0.25      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 28)                                                                                          	 0.000801604	 200       	 0         	 0         	 5.58879   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 50, r2: 50)              	 0.000790554	 100       	 31.6234   	 0         	 7.58961   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 28, n: 50, r2: 1)                                                                                          	 0.000777432	 200       	 0         	 0         	 5.76256   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 28, k: 50)     	 0.000652509	 100       	 21.4556   	 0         	 6.49799   	 3.30189   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 50, m: 28, k: 50)  	 0.000628869	 100       	 22.2622   	 0         	 6.74226   	 3.30189   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                          	 0.000539347	 100       	 0         	 0         	 7.41638   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 50, k: 28)   	 0.000532595	 100       	 26.2864   	 0         	 7.96102   	 3.30189   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 28, n: 50, r2: 1)                    	 0.000487142	 100       	 0         	 0         	 12.8094   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 1, r1low: 0, n: 50, r2: 28)                     	 0.000449429	 100       	 0         	 0         	 4.9841    	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 1, Xr2: 50, Qr1: 1, Qr2: 0)          	 0.000447029	 100       	 0         	 0         	 8.94797   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                            	 0.000415978	 100       	 1.20199   	 0         	 14.4238   	 0.0833333 
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 28)                                                                	 0.000397696	 100       	 0         	 0         	 5.63244   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                 	 0.000393237	 100       	 0.635749  	 0         	 10.172    	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 28, n: 50, r2: 1)                                                                                 	 0.000361512	 100       	 0.387262  	 0         	 6.1962    	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                 	 0.000349208	 100       	 0.715906  	 0         	 11.4545   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 28, m: 28, fromLeft: 0)                	 0.000325237	 800       	 0         	 0         	 30.855    	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 28, m: 50, k: 28)   	 0.000304668	 100       	 25.7329   	 0         	 9.4109    	 2.73438   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 0, m: 1400, k: 28)  	 6.131e-06 	 100       	 0         	 0         	 5114.99   	 0         
Timing statistics:
function                                                                                                                                                                                      	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                        	 1.8407    	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_normalized(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                     	 1.84065   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::rightNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                            	 1.54787   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::rightNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                        	 1.5466    	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double]	 1.46623   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                               	 0.543194  	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                  	 0.463898  	 1800      
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                            	 0.388693  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_leftOrthogonalize(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&) [with T = double]                                   	 0.292711  	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]           	 0.16629   	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                	 0.146109  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.076306  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                           	 0.0723606 	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                    	 0.0457632 	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                                       	 0.0419621 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double]          	 0.0267953 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double]       	 0.0180169 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double]        	 0.0168782 	 1800      
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                       	 0.0143403 	 800       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.0136694 	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                	 0.0117933 	 1300      
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                        	 0.0112585 	 1000      
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                              	 0.00940082	 900       
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                	 0.0056869 	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                              	 0.00274712	 6300      
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                       	 0.00110396	 300       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                         	 0.00108099	 5200      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                         	 0.000822231	 100       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                                                  	 0.000415978	 100       
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                           	 0.000325237	 800       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
orthoX: L, orthoY: L
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 64
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->65  [0m[1;34m1->66  [0m[1;34m2->67  [0m[1;34m3->68  [0m[1;34m4->69  [0m[1;34m5->70  [0m[1;34m6->71  [0m[1;34m7->72  [0m[1;34m8->73  [0m[1;34m9->74  [0m[1;34m10->75  [0m[1;34m11->76  [0m[1;34m12->77  [0m[1;34m13->78  [0m[1;34m14->79  [0m[1;34m15->80  [0m[1;34m16->81  [0m[1;34m17->82  [0m[1;34m18->83  [0m[1;34m19->84  [0m[1;34m20->85  [0m[1;34m21->86  [0m[1;34m22->87  [0m[1;34m23->88  [0m[1;34m24->89  [0m[1;34m25->90  [0m[1;34m26->91  [0m[1;34m27->92  [0m[1;34m28->93  [0m[1;34m29->94  [0m[1;34m30->95  [0m[1;34m31->96  [0m[1;34m32->97  [0m[1;34m33->98  [0m[1;34m34->99  [0m[1;34m35->100  [0m[1;34m36->101  [0m[1;34m37->102  [0m[1;34m38->103  [0m[1;34m39->104  [0m[1;34m40->105  [0m[1;34m41->106  [0m[1;34m42->107  [0m[1;34m43->108  [0m[1;34m44->109  [0m[1;34m45->110  [0m[1;34m46->111  [0m[1;34m47->112  [0m[1;34m48->113  [0m[1;34m49->114  [0m[1;34m50->115  [0m[1;34m51->116  [0m[1;34m52->117  [0m[1;34m53->118  [0m[1;34m54->119  [0m[1;34m55->120  [0m[1;34m56->121  [0m[1;34m57->122  [0m[1;34m58->123  [0m[1;34m59->124  [0m[1;34m60->125  [0m[1;34m61->126  [0m[1;34m62->127  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22907940095872 -> hwthread 65 - OK[0m[1;34m
[0m[1;34m	threadid 22907744937984 -> hwthread 66 - OK[0m[1;34m
[0m[1;34m	threadid 22907543611520 -> hwthread 67 - OK[0m[1;34m
[0m[1;34m	threadid 22907342285056 -> hwthread 68 - OK[0m[1;34m
[0m[1;34m	threadid 22907140958592 -> hwthread 69 - OK[0m[1;34m
[0m[1;34m	threadid 22906939632128 -> hwthread 70 - OK[0m[1;34m
[0m[1;34m	threadid 22906738305664 -> hwthread 71 - OK[0m[1;34m
[0m[1;34m	threadid 22906536979200 -> hwthread 72 - OK[0m[1;34m
[0m[1;34m	threadid 22906335652736 -> hwthread 73 - OK[0m[1;34m
[0m[1;34m	threadid 22906134326272 -> hwthread 74 - OK[0m[1;34m
[0m[1;34m	threadid 22905932999808 -> hwthread 75 - OK[0m[1;34m
[0m[1;34m	threadid 22905731673344 -> hwthread 76 - OK[0m[1;34m
[0m[1;34m	threadid 22905530346880 -> hwthread 77 - OK[0m[1;34m
[0m[1;34m	threadid 22905329020416 -> hwthread 78 - OK[0m[1;34m
[0m[1;34m	threadid 22905127693952 -> hwthread 79 - OK[0m[1;34m
[0m[1;34m	threadid 22904926367488 -> hwthread 80 - OK[0m[1;34m
[0m[1;34m	threadid 22904725041024 -> hwthread 81 - OK[0m[1;34m
[0m[1;34m	threadid 22904523714560 -> hwthread 82 - OK[0m[1;34m
[0m[1;34m	threadid 22904322388096 -> hwthread 83 - OK[0m[1;34m
[0m[1;34m	threadid 22904121061632 -> hwthread 84 - OK[0m[1;34m
[0m[1;34m	threadid 22903919735168 -> hwthread 85 - OK[0m[1;34m
[0m[1;34m	threadid 22903718408704 -> hwthread 86 - OK[0m[1;34m
[0m[1;34m	threadid 22903517082240 -> hwthread 87 - OK[0m[1;34m
[0m[1;34m	threadid 22903315755776 -> hwthread 88 - OK[0m[1;34m
[0m[1;34m	threadid 22903114429312 -> hwthread 89 - OK[0m[1;34m
[0m[1;34m	threadid 22902913102848 -> hwthread 90 - OK[0m[1;34m
[0m[1;34m	threadid 22902711776384 -> hwthread 91 - OK[0m[1;34m
[0m[1;34m	threadid 22902510449920 -> hwthread 92 - OK[0m[1;34m
[0m[1;34m	threadid 22902309123456 -> hwthread 93 - OK[0m[1;34m
[0m[1;34m	threadid 22902107796992 -> hwthread 94 - OK[0m[1;34m
[0m[1;34m	threadid 22901906470528 -> hwthread 95 - OK[0m[1;34m
[0m[1;34m	threadid 22901705144064 -> hwthread 96 - OK[0m[1;34m
[0m[1;34m	threadid 22901503813504 -> hwthread 97 - OK[0m[1;34m
[0m[1;34m	threadid 22901302487040 -> hwthread 98 - OK[0m[1;34m
[0m[1;34m	threadid 22901101160576 -> hwthread 99 - OK[0m[1;34m
[0m[1;34m	threadid 22900899834112 -> hwthread 100 - OK[0m[1;34m
[0m[1;34m	threadid 22900698507648 -> hwthread 101 - OK[0m[1;34m
[0m[1;34m	threadid 22900497181184 -> hwthread 102 - OK[0m[1;34m
[0m[1;34m	threadid 22900295854720 -> hwthread 103 - OK[0m[1;34m
[0m[1;34m	threadid 22900094528256 -> hwthread 104 - OK[0m[1;34m
[0m[1;34m	threadid 22899893201792 -> hwthread 105 - OK[0m[1;34m
[0m[1;34m	threadid 22899691875328 -> hwthread 106 - OK[0m[1;34m
[0m[1;34m	threadid 22899490548864 -> hwthread 107 - OK[0m[1;34m
[0m[1;34m	threadid 22899289222400 -> hwthread 108 - OK[0m[1;34m
[0m[1;34m	threadid 22899087895936 -> hwthread 109 - OK[0m[1;34m
[0m[1;34m	threadid 22898886569472 -> hwthread 110 - OK[0m[1;34m
[0m[1;34m	threadid 22898685243008 -> hwthread 111 - OK[0m[1;34m
[0m[1;34m	threadid 22898483916544 -> hwthread 112 - OK[0m[1;34m
[0m[1;34m	threadid 22898282590080 -> hwthread 113 - OK[0m[1;34m
[0m[1;34m	threadid 22898081263616 -> hwthread 114 - OK[0m[1;34m
[0m[1;34m	threadid 22897879937152 -> hwthread 115 - OK[0m[1;34m
[0m[1;34m	threadid 22897678610688 -> hwthread 116 - OK[0m[1;34m
[0m[1;34m	threadid 22897477284224 -> hwthread 117 - OK[0m[1;34m
[0m[1;34m	threadid 22897275957760 -> hwthread 118 - OK[0m[1;34m
[0m[1;34m	threadid 22897074631296 -> hwthread 119 - OK[0m[1;34m
[0m[1;34m	threadid 22896873304832 -> hwthread 120 - OK[0m[1;34m
[0m[1;34m	threadid 22896671978368 -> hwthread 121 - OK[0m[1;34m
[0m[1;34m	threadid 22896470651904 -> hwthread 122 - OK[0m[1;34m
[0m[1;34m	threadid 22896269325440 -> hwthread 123 - OK[0m[1;34m
[0m[1;34m	threadid 22896067998976 -> hwthread 124 - OK[0m[1;34m
[0m[1;34m	threadid 22895866672512 -> hwthread 125 - OK[0m[1;34m
[0m[1;34m	threadid 22895665346048 -> hwthread 126 - OK[0m[1;34m
[0m[1;34m	threadid 22895464019584 -> hwthread 127 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22907834435328 -> hwthread 64 - OK[0m[1;34m
[0m[1;34m	threadid 22907827844864 -> hwthread 65 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 79, m: 79)                                                                 	 0.484077  	 700       	 6.65429   	 0         	 0.217509  	 30.5931   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3950, cols: 79, reductionFactor: 37, colBlockingSize: 12)                  	 0.315533  	 600       	 96.2876   	 0         	 4.84196   	 19.8861   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 79, r: 79, r2: 3950, leftOrthog: 0)        	 0.120445  	 600       	 245.608   	 0         	 37.805    	 6.49671   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3950, cols: 29, reductionFactor: 37, colBlockingSize: 12)                  	 0.0680846 	 700       	 70.1543   	 0         	 9.49098   	 7.39168   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 79, n: 50, r: 79, r2: 79)             	 0.0621303 	 600       	 476.134   	 0         	 48.6982   	 9.77723   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 79, reductionFactor: 37, colBlockingSize: 12)                  	 0.0529253 	 100       	 60.554    	 0         	 3.07968   	 19.6625   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 79)                                                                 	 0.0454704 	 100       	 3.84133   	 0         	 0.183856  	 20.8931   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 3950, Xcols: 29, r: 29, streamingCols: 0)                   	 0.0427336 	 700       	 54.4153   	 0         	 30.0774   	 1.80918   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 79, Qr2: 29)       	 0.0389502 	 700       	 0         	 0         	 79.3054   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                 	 0.0374889 	 100       	 3.11204   	 0         	 0.161115  	 19.3157   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 29, k: 2500)   	 0.026909  	 800       	 215.541   	 0         	 47.318    	 4.55516   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3950, cols: 50, reductionFactor: 37, colBlockingSize: 12)                  	 0.0235829 	 100       	 86.0104   	 0         	 6.78457   	 12.6774   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 2500, m: 29, k: 50)	 0.0181525 	 800       	 319.516   	 0         	 70.1437   	 4.55516   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 29, m: 29)                                                                  	 0.0152824 	 900       	 1.91503   	 0         	 1.20232   	 1.59277   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 3950, m: 29)                                                                       	 0.0139468 	 700       	 0         	 0         	 91.9894   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 3950, leftOrthog: 0)        	 0.0124416 	 100       	 158.742   	 0         	 38.4195   	 4.1318    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 79, r: 79, r2: 2500, leftOrthog: 0)        	 0.0118608 	 100       	 263.094   	 0         	 40.8056   	 6.44751   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 29, n: 50, r2: 29)                                                                                         	 0.00994688	 800       	 0         	 0         	 54.1115   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 1450, k: 29) 	 0.00987519	 800       	 340.652   	 0         	 75.1783   	 4.53125   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 3950, m: 29)                                                              	 0.00946261	 700       	 0         	 0         	 135.582   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 29, reductionFactor: 37, colBlockingSize: 12)                  	 0.00909872	 100       	 47.4643   	 0         	 6.44846   	 7.36056   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 29, n: 50, r2: 29)                   	 0.00848236	 700       	 0         	 0         	 151.25    	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 79, n: 50, r: 79, r2: 50)             	 0.00824141	 100       	 378.637   	 0         	 49.8459   	 7.59615   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r: 79, r2: 79)             	 0.00688056	 100       	 453.524   	 0         	 46.6521   	 9.7214    
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 29, m: 1450, k: 29) 	 0.00642934	 700       	 265.537   	 0         	 73.9842   	 3.58911   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 79, reductionFactor: 37, colBlockingSize: 12)                    	 0.00514603	 100       	 12.4556   	 0         	 1.58429   	 7.86193   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 29, r: 29, streamingCols: 0)                   	 0.00459211	 100       	 45.785    	 0         	 25.334    	 1.80726   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 50, Qr2: 29)       	 0.00345522	 100       	 0         	 0         	 91.4557   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 2500, m: 29)                                                                       	 0.00237833	 100       	 0         	 0         	 48.7737   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 79, r: 50, r2: 50, leftOrthog: 0)          	 0.00193514	 100       	 20.412    	 0         	 6.9659    	 2.93027   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 0, n: 50, r2: 29)                    	 0.00175571	 100       	 0         	 0         	 66.0703   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 29)                                                              	 0.00174322	 100       	 0         	 0         	 66.5436   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 29, reductionFactor: 37, colBlockingSize: 12)                    	 0.00150479	 100       	 5.73988   	 0         	 1.21798   	 4.71262   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 29)                                                                                          	 0.000823795	 200       	 0         	 0         	 5.63247   	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                   	 0.000811992	 100       	 0.61577   	 0         	 2.46308   	 0.25      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 29, n: 50, r2: 1)                                                                                          	 0.000787446	 200       	 0         	 0         	 5.89247   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 50, r2: 50)              	 0.000760669	 100       	 32.8658   	 0         	 7.88779   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 29, k: 50)     	 0.000680533	 100       	 21.3068   	 0         	 6.34797   	 3.35648   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 50, m: 29, k: 50)  	 0.000598967	 100       	 24.2083   	 0         	 7.21242   	 3.35648   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 29, m: 29, fromLeft: 0)                	 0.000575081	 800       	 0         	 0         	 18.7188   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 50, k: 29)   	 0.000572162	 100       	 25.3425   	 0         	 7.55031   	 3.35648   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                          	 0.000567858	 100       	 0         	 0         	 7.04401   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 29, n: 50, r2: 1)                    	 0.000487815	 100       	 0         	 0         	 12.9557   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 1, r1low: 0, n: 50, r2: 29)                     	 0.000458785	 100       	 0         	 0         	 5.05683   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 1, Xr2: 50, Qr1: 1, Qr2: 0)          	 0.000429144	 100       	 0         	 0         	 9.32088   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                            	 0.000415799	 100       	 1.2025    	 0         	 14.43     	 0.0833333 
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 29)                                                                	 0.000403148	 100       	 0         	 0         	 5.75471   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                 	 0.000391193	 100       	 0.639071  	 0         	 10.2251   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 29, m: 50, k: 29)   	 0.000383604	 100       	 21.9237   	 0         	 7.8018    	 2.81008   
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 29, n: 50, r2: 1)                                                                                 	 0.000346407	 100       	 0.418583  	 0         	 6.69732   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                 	 0.000332136	 100       	 0.752704  	 0         	 12.0433   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 0, m: 1450, k: 29)  	 5.79e-06  	 100       	 0         	 0         	 5810.02   	 0         
Timing statistics:
function                                                                                                                                                                                      	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                        	 1.91741   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_normalized(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                     	 1.91737   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::rightNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                            	 1.61218   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::rightNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                        	 1.61095   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double]	 1.52662   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                               	 0.567036  	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                  	 0.475875  	 1800      
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                            	 0.397805  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_leftOrthogonalize(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&) [with T = double]                                   	 0.305111  	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]           	 0.177212  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                	 0.146683  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.0791589 	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                           	 0.0780129 	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                    	 0.0473257 	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                                       	 0.0428345 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double]          	 0.0275895 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double]       	 0.0187514 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double]        	 0.0172661 	 1800      
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                       	 0.0163251 	 800       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.0152824 	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                	 0.012126  	 1300      
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                              	 0.011609  	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                        	 0.0111847 	 1000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                	 0.00444908	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                              	 0.00266056	 6300      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                         	 0.00110165	 5200      
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                       	 0.00106974	 300       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                         	 0.000811992	 100       
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                           	 0.000575081	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                                                  	 0.000415799	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
orthoX: L, orthoY: L
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 64
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->65  [0m[1;34m1->66  [0m[1;34m2->67  [0m[1;34m3->68  [0m[1;34m4->69  [0m[1;34m5->70  [0m[1;34m6->71  [0m[1;34m7->72  [0m[1;34m8->73  [0m[1;34m9->74  [0m[1;34m10->75  [0m[1;34m11->76  [0m[1;34m12->77  [0m[1;34m13->78  [0m[1;34m14->79  [0m[1;34m15->80  [0m[1;34m16->81  [0m[1;34m17->82  [0m[1;34m18->83  [0m[1;34m19->84  [0m[1;34m20->85  [0m[1;34m21->86  [0m[1;34m22->87  [0m[1;34m23->88  [0m[1;34m24->89  [0m[1;34m25->90  [0m[1;34m26->91  [0m[1;34m27->92  [0m[1;34m28->93  [0m[1;34m29->94  [0m[1;34m30->95  [0m[1;34m31->96  [0m[1;34m32->97  [0m[1;34m33->98  [0m[1;34m34->99  [0m[1;34m35->100  [0m[1;34m36->101  [0m[1;34m37->102  [0m[1;34m38->103  [0m[1;34m39->104  [0m[1;34m40->105  [0m[1;34m41->106  [0m[1;34m42->107  [0m[1;34m43->108  [0m[1;34m44->109  [0m[1;34m45->110  [0m[1;34m46->111  [0m[1;34m47->112  [0m[1;34m48->113  [0m[1;34m49->114  [0m[1;34m50->115  [0m[1;34m51->116  [0m[1;34m52->117  [0m[1;34m53->118  [0m[1;34m54->119  [0m[1;34m55->120  [0m[1;34m56->121  [0m[1;34m57->122  [0m[1;34m58->123  [0m[1;34m59->124  [0m[1;34m60->125  [0m[1;34m61->126  [0m[1;34m62->127  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23091364927360 -> hwthread 65 - OK[0m[1;34m
[0m[1;34m	threadid 23091153463296 -> hwthread 66 - OK[0m[1;34m
[0m[1;34m	threadid 23090952136832 -> hwthread 67 - OK[0m[1;34m
[0m[1;34m	threadid 23090750810368 -> hwthread 68 - OK[0m[1;34m
[0m[1;34m	threadid 23090549483904 -> hwthread 69 - OK[0m[1;34m
[0m[1;34m	threadid 23090348157440 -> hwthread 70 - OK[0m[1;34m
[0m[1;34m	threadid 23090146830976 -> hwthread 71 - OK[0m[1;34m
[0m[1;34m	threadid 23089945504512 -> hwthread 72 - OK[0m[1;34m
[0m[1;34m	threadid 23089744178048 -> hwthread 73 - OK[0m[1;34m
[0m[1;34m	threadid 23089542851584 -> hwthread 74 - OK[0m[1;34m
[0m[1;34m	threadid 23089341525120 -> hwthread 75 - OK[0m[1;34m
[0m[1;34m	threadid 23089140198656 -> hwthread 76 - OK[0m[1;34m
[0m[1;34m	threadid 23088938872192 -> hwthread 77 - OK[0m[1;34m
[0m[1;34m	threadid 23088737545728 -> hwthread 78 - OK[0m[1;34m
[0m[1;34m	threadid 23088536219264 -> hwthread 79 - OK[0m[1;34m
[0m[1;34m	threadid 23088334892800 -> hwthread 80 - OK[0m[1;34m
[0m[1;34m	threadid 23088133566336 -> hwthread 81 - OK[0m[1;34m
[0m[1;34m	threadid 23087932239872 -> hwthread 82 - OK[0m[1;34m
[0m[1;34m	threadid 23087730913408 -> hwthread 83 - OK[0m[1;34m
[0m[1;34m	threadid 23087529586944 -> hwthread 84 - OK[0m[1;34m
[0m[1;34m	threadid 23087328260480 -> hwthread 85 - OK[0m[1;34m
[0m[1;34m	threadid 23087126934016 -> hwthread 86 - OK[0m[1;34m
[0m[1;34m	threadid 23086925607552 -> hwthread 87 - OK[0m[1;34m
[0m[1;34m	threadid 23086724281088 -> hwthread 88 - OK[0m[1;34m
[0m[1;34m	threadid 23086522954624 -> hwthread 89 - OK[0m[1;34m
[0m[1;34m	threadid 23086321628160 -> hwthread 90 - OK[0m[1;34m
[0m[1;34m	threadid 23086120301696 -> hwthread 91 - OK[0m[1;34m
[0m[1;34m	threadid 23085918975232 -> hwthread 92 - OK[0m[1;34m
[0m[1;34m	threadid 23085717648768 -> hwthread 93 - OK[0m[1;34m
[0m[1;34m	threadid 23085516322304 -> hwthread 94 - OK[0m[1;34m
[0m[1;34m	threadid 23085314995840 -> hwthread 95 - OK[0m[1;34m
[0m[1;34m	threadid 23085113669376 -> hwthread 96 - OK[0m[1;34m
[0m[1;34m	threadid 23084912338816 -> hwthread 97 - OK[0m[1;34m
[0m[1;34m	threadid 23084711012352 -> hwthread 98 - OK[0m[1;34m
[0m[1;34m	threadid 23084509685888 -> hwthread 99 - OK[0m[1;34m
[0m[1;34m	threadid 23084308359424 -> hwthread 100 - OK[0m[1;34m
[0m[1;34m	threadid 23084107032960 -> hwthread 101 - OK[0m[1;34m
[0m[1;34m	threadid 23083905706496 -> hwthread 102 - OK[0m[1;34m
[0m[1;34m	threadid 23083704380032 -> hwthread 103 - OK[0m[1;34m
[0m[1;34m	threadid 23083503053568 -> hwthread 104 - OK[0m[1;34m
[0m[1;34m	threadid 23083301727104 -> hwthread 105 - OK[0m[1;34m
[0m[1;34m	threadid 23083100400640 -> hwthread 106 - OK[0m[1;34m
[0m[1;34m	threadid 23082899074176 -> hwthread 107 - OK[0m[1;34m
[0m[1;34m	threadid 23082697747712 -> hwthread 108 - OK[0m[1;34m
[0m[1;34m	threadid 23082496421248 -> hwthread 109 - OK[0m[1;34m
[0m[1;34m	threadid 23082295094784 -> hwthread 110 - OK[0m[1;34m
[0m[1;34m	threadid 23082093768320 -> hwthread 111 - OK[0m[1;34m
[0m[1;34m	threadid 23081892441856 -> hwthread 112 - OK[0m[1;34m
[0m[1;34m	threadid 23081691115392 -> hwthread 113 - OK[0m[1;34m
[0m[1;34m	threadid 23081489788928 -> hwthread 114 - OK[0m[1;34m
[0m[1;34m	threadid 23081288462464 -> hwthread 115 - OK[0m[1;34m
[0m[1;34m	threadid 23081087136000 -> hwthread 116 - OK[0m[1;34m
[0m[1;34m	threadid 23080885809536 -> hwthread 117 - OK[0m[1;34m
[0m[1;34m	threadid 23080684483072 -> hwthread 118 - OK[0m[1;34m
[0m[1;34m	threadid 23080483156608 -> hwthread 119 - OK[0m[1;34m
[0m[1;34m	threadid 23080281830144 -> hwthread 120 - OK[0m[1;34m
[0m[1;34m	threadid 23080080503680 -> hwthread 121 - OK[0m[1;34m
[0m[1;34m	threadid 23079879177216 -> hwthread 122 - OK[0m[1;34m
[0m[1;34m	threadid 23079677850752 -> hwthread 123 - OK[0m[1;34m
[0m[1;34m	threadid 23079476524288 -> hwthread 124 - OK[0m[1;34m
[0m[1;34m	threadid 23079275197824 -> hwthread 125 - OK[0m[1;34m
[0m[1;34m	threadid 23079073871360 -> hwthread 126 - OK[0m[1;34m
[0m[1;34m	threadid 23078872544896 -> hwthread 127 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23091259266816 -> hwthread 64 - OK[0m[1;34m
[0m[1;34m	threadid 23091252676352 -> hwthread 65 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 80, m: 80)                                                                 	 0.480385  	 700       	 6.96331   	 0         	 0.224753  	 30.982    
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4000, cols: 80, reductionFactor: 37, colBlockingSize: 12)                  	 0.319593  	 600       	 98.7201   	 0         	 4.90223   	 20.1378   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 80, r: 80, r2: 4000, leftOrthog: 0)        	 0.133652  	 600       	 229.85    	 0         	 34.9373   	 6.57895   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4000, cols: 30, reductionFactor: 37, colBlockingSize: 12)                  	 0.0730804 	 700       	 70.8291   	 0         	 9.26432   	 7.64536   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 80, n: 50, r: 80, r2: 80)             	 0.0582904 	 600       	 527.016   	 0         	 53.2286   	 9.90099   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 80, reductionFactor: 37, colBlockingSize: 12)                  	 0.054474  	 100       	 60.3313   	 0         	 3.03117   	 19.9036   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 80)                                                                 	 0.0484045 	 100       	 3.64979   	 0         	 0.174364  	 20.9321   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 4000, Xcols: 30, r: 30, streamingCols: 0)                   	 0.0447676 	 700       	 56.2907   	 0         	 30.078    	 1.87149   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 80, Qr2: 30)       	 0.0419889 	 700       	 0         	 0         	 75.3533   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                 	 0.0367653 	 100       	 3.17328   	 0         	 0.164285  	 19.3157   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 30, k: 2500)   	 0.0278666 	 800       	 215.311   	 0         	 46.2776   	 4.65261   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4000, cols: 50, reductionFactor: 37, colBlockingSize: 12)                  	 0.0231118 	 100       	 88.8748   	 0         	 7.00942   	 12.6793   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 2500, m: 30, k: 50)	 0.0188206 	 800       	 318.8     	 0         	 68.5207   	 4.65261   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 30, m: 30)                                                                  	 0.016028  	 900       	 2.02146   	 0         	 1.22635   	 1.64835   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 4000, m: 30)                                                                       	 0.0134013 	 700       	 0         	 0         	 100.289   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 4000, leftOrthog: 0)        	 0.0128989 	 100       	 155.052   	 0         	 37.5226   	 4.13223   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 80, r: 80, r2: 2500, leftOrthog: 0)        	 0.0127404 	 100       	 251.169   	 0         	 38.4791   	 6.52742   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 30, reductionFactor: 37, colBlockingSize: 12)                  	 0.0104842 	 100       	 44.0816   	 0         	 5.79155   	 7.61137   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 30, n: 50, r2: 30)                                                                                         	 0.0103381 	 800       	 0         	 0         	 55.7162   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 30, n: 50, r2: 30)                   	 0.0094141 	 700       	 0         	 0         	 142.765   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 80, n: 50, r: 80, r2: 50)             	 0.0093451 	 100       	 342.425   	 0         	 44.8577   	 7.63359   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 1500, k: 30) 	 0.00909135	 800       	 395.981   	 0         	 85.5318   	 4.62963   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 30, m: 1500, k: 30) 	 0.00777439	 700       	 243.106   	 0         	 65.4765   	 3.71287   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 80, reductionFactor: 37, colBlockingSize: 12)                    	 0.00724035	 100       	 9.07826   	 0         	 1.14912   	 7.90021   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r: 80, r2: 80)             	 0.00682016	 100       	 469.197   	 0         	 47.6704   	 9.84252   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 4000, m: 30)                                                              	 0.00593426	 700       	 0         	 0         	 226.481   	 0         
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 30, r: 30, streamingCols: 0)                   	 0.00483612	 100       	 46.5249   	 0         	 24.8877   	 1.86939   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 50, Qr2: 30)       	 0.00384663	 100       	 0         	 0         	 83.1898   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 2500, m: 30)                                                                       	 0.00217214	 100       	 0         	 0         	 55.2451   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 0, n: 50, r2: 30)                    	 0.00209027	 100       	 0         	 0         	 57.409    	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 80, r: 50, r2: 50, leftOrthog: 0)          	 0.00176119	 100       	 22.712    	 0         	 7.72207   	 2.94118   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 30)                                                              	 0.00161175	 100       	 0         	 0         	 74.4534   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 30, reductionFactor: 37, colBlockingSize: 12)                    	 0.0014632 	 100       	 6.31713   	 0         	 1.31219   	 4.81419   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                   	 0.000819866	 100       	 0.609856  	 0         	 2.43942   	 0.25      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 30)                                                                                          	 0.000807775	 200       	 0         	 0         	 5.94225   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 30, n: 50, r2: 1)                                                                                          	 0.000780453	 200       	 0         	 0         	 6.15027   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 30, k: 50)     	 0.000735543	 100       	 20.3931   	 0         	 5.98198   	 3.40909   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 50, r2: 50)              	 0.000725622	 100       	 34.4532   	 0         	 8.26877   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 50, m: 30, k: 50)  	 0.000662743	 100       	 22.6332   	 0         	 6.63907   	 3.40909   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 50, k: 30)   	 0.000557401	 100       	 26.9106   	 0         	 7.89378   	 3.40909   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                          	 0.000552987	 100       	 0         	 0         	 7.23344   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 30, m: 30, fromLeft: 0)                	 0.000496491	 800       	 0         	 0         	 23.2028   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 30, n: 50, r2: 1)                    	 0.000495695	 100       	 0         	 0         	 12.9112   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 1, r1low: 0, n: 50, r2: 30)                     	 0.000442603	 100       	 0         	 0         	 5.42247   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 1, Xr2: 50, Qr1: 1, Qr2: 0)          	 0.000423549	 100       	 0         	 0         	 9.44401   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 30)                                                                	 0.000403775	 100       	 0         	 0         	 5.9439    	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                            	 0.000403387	 100       	 1.2395    	 0         	 14.8741   	 0.0833333 
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                 	 0.000388747	 100       	 0.643092  	 0         	 10.2895   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 30, m: 50, k: 30)   	 0.000348902	 100       	 25.7952   	 0         	 8.94234   	 2.88462   
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 30, n: 50, r2: 1)                                                                                 	 0.000342943	 100       	 0.43739   	 0         	 6.99825   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                 	 0.000331144	 100       	 0.754959  	 0         	 12.0793   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 0, m: 1500, k: 30)  	 6.341e-06 	 100       	 0         	 0         	 5677.34   	 0         
Timing statistics:
function                                                                                                                                                                                      	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                        	 1.96441   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_normalized(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                     	 1.96436   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::rightNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                            	 1.6516    	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::rightNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                        	 1.65035   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double]	 1.55336   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                               	 0.565554  	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                  	 0.489447  	 1800      
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                            	 0.405029  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_leftOrthogonalize(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&) [with T = double]                                   	 0.312688  	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]           	 0.182095  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                	 0.161053  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.0855604 	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                           	 0.0751813 	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                    	 0.0496037 	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                                       	 0.0462591 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double]          	 0.0286022 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double]       	 0.0194833 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double]        	 0.0177784 	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.016028  	 900       
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                       	 0.0155734 	 800       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                	 0.0124793 	 1300      
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                        	 0.0124427 	 1000      
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                              	 0.00794978	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                              	 0.00333364	 6300      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                	 0.0030351 	 1800      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                         	 0.00120145	 5200      
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                       	 0.00106283	 300       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                         	 0.000819866	 100       
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                           	 0.000496491	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                                                  	 0.000403387	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
orthoX: L, orthoY: L
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 64
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->65  [0m[1;34m1->66  [0m[1;34m2->67  [0m[1;34m3->68  [0m[1;34m4->69  [0m[1;34m5->70  [0m[1;34m6->71  [0m[1;34m7->72  [0m[1;34m8->73  [0m[1;34m9->74  [0m[1;34m10->75  [0m[1;34m11->76  [0m[1;34m12->77  [0m[1;34m13->78  [0m[1;34m14->79  [0m[1;34m15->80  [0m[1;34m16->81  [0m[1;34m17->82  [0m[1;34m18->83  [0m[1;34m19->84  [0m[1;34m20->85  [0m[1;34m21->86  [0m[1;34m22->87  [0m[1;34m23->88  [0m[1;34m24->89  [0m[1;34m25->90  [0m[1;34m26->91  [0m[1;34m27->92  [0m[1;34m28->93  [0m[1;34m29->94  [0m[1;34m30->95  [0m[1;34m31->96  [0m[1;34m32->97  [0m[1;34m33->98  [0m[1;34m34->99  [0m[1;34m35->100  [0m[1;34m36->101  [0m[1;34m37->102  [0m[1;34m38->103  [0m[1;34m39->104  [0m[1;34m40->105  [0m[1;34m41->106  [0m[1;34m42->107  [0m[1;34m43->108  [0m[1;34m44->109  [0m[1;34m45->110  [0m[1;34m46->111  [0m[1;34m47->112  [0m[1;34m48->113  [0m[1;34m49->114  [0m[1;34m50->115  [0m[1;34m51->116  [0m[1;34m52->117  [0m[1;34m53->118  [0m[1;34m54->119  [0m[1;34m55->120  [0m[1;34m56->121  [0m[1;34m57->122  [0m[1;34m58->123  [0m[1;34m59->124  [0m[1;34m60->125  [0m[1;34m61->126  [0m[1;34m62->127  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22917694146432 -> hwthread 65 - OK[0m[1;34m
[0m[1;34m	threadid 22917475723264 -> hwthread 66 - OK[0m[1;34m
[0m[1;34m	threadid 22917274396800 -> hwthread 67 - OK[0m[1;34m
[0m[1;34m	threadid 22917073070336 -> hwthread 68 - OK[0m[1;34m
[0m[1;34m	threadid 22916871743872 -> hwthread 69 - OK[0m[1;34m
[0m[1;34m	threadid 22916670417408 -> hwthread 70 - OK[0m[1;34m
[0m[1;34m	threadid 22916469090944 -> hwthread 71 - OK[0m[1;34m
[0m[1;34m	threadid 22916267764480 -> hwthread 72 - OK[0m[1;34m
[0m[1;34m	threadid 22916066438016 -> hwthread 73 - OK[0m[1;34m
[0m[1;34m	threadid 22915865111552 -> hwthread 74 - OK[0m[1;34m
[0m[1;34m	threadid 22915663785088 -> hwthread 75 - OK[0m[1;34m
[0m[1;34m	threadid 22915462458624 -> hwthread 76 - OK[0m[1;34m
[0m[1;34m	threadid 22915261132160 -> hwthread 77 - OK[0m[1;34m
[0m[1;34m	threadid 22915059805696 -> hwthread 78 - OK[0m[1;34m
[0m[1;34m	threadid 22914858479232 -> hwthread 79 - OK[0m[1;34m
[0m[1;34m	threadid 22914657152768 -> hwthread 80 - OK[0m[1;34m
[0m[1;34m	threadid 22914455826304 -> hwthread 81 - OK[0m[1;34m
[0m[1;34m	threadid 22914254499840 -> hwthread 82 - OK[0m[1;34m
[0m[1;34m	threadid 22914053173376 -> hwthread 83 - OK[0m[1;34m
[0m[1;34m	threadid 22913851846912 -> hwthread 84 - OK[0m[1;34m
[0m[1;34m	threadid 22913650520448 -> hwthread 85 - OK[0m[1;34m
[0m[1;34m	threadid 22913449193984 -> hwthread 86 - OK[0m[1;34m
[0m[1;34m	threadid 22913247867520 -> hwthread 87 - OK[0m[1;34m
[0m[1;34m	threadid 22913046541056 -> hwthread 88 - OK[0m[1;34m
[0m[1;34m	threadid 22912845214592 -> hwthread 89 - OK[0m[1;34m
[0m[1;34m	threadid 22912643888128 -> hwthread 90 - OK[0m[1;34m
[0m[1;34m	threadid 22912442561664 -> hwthread 91 - OK[0m[1;34m
[0m[1;34m	threadid 22912241235200 -> hwthread 92 - OK[0m[1;34m
[0m[1;34m	threadid 22912039908736 -> hwthread 93 - OK[0m[1;34m
[0m[1;34m	threadid 22911838582272 -> hwthread 94 - OK[0m[1;34m
[0m[1;34m	threadid 22911637255808 -> hwthread 95 - OK[0m[1;34m
[0m[1;34m	threadid 22911435929344 -> hwthread 96 - OK[0m[1;34m
[0m[1;34m	threadid 22911234598784 -> hwthread 97 - OK[0m[1;34m
[0m[1;34m	threadid 22911033272320 -> hwthread 98 - OK[0m[1;34m
[0m[1;34m	threadid 22910831945856 -> hwthread 99 - OK[0m[1;34m
[0m[1;34m	threadid 22910630619392 -> hwthread 100 - OK[0m[1;34m
[0m[1;34m	threadid 22910429292928 -> hwthread 101 - OK[0m[1;34m
[0m[1;34m	threadid 22910227966464 -> hwthread 102 - OK[0m[1;34m
[0m[1;34m	threadid 22910026640000 -> hwthread 103 - OK[0m[1;34m
[0m[1;34m	threadid 22909825313536 -> hwthread 104 - OK[0m[1;34m
[0m[1;34m	threadid 22909623987072 -> hwthread 105 - OK[0m[1;34m
[0m[1;34m	threadid 22909422660608 -> hwthread 106 - OK[0m[1;34m
[0m[1;34m	threadid 22909221334144 -> hwthread 107 - OK[0m[1;34m
[0m[1;34m	threadid 22909020007680 -> hwthread 108 - OK[0m[1;34m
[0m[1;34m	threadid 22908818681216 -> hwthread 109 - OK[0m[1;34m
[0m[1;34m	threadid 22908617354752 -> hwthread 110 - OK[0m[1;34m
[0m[1;34m	threadid 22908416028288 -> hwthread 111 - OK[0m[1;34m
[0m[1;34m	threadid 22908214701824 -> hwthread 112 - OK[0m[1;34m
[0m[1;34m	threadid 22908013375360 -> hwthread 113 - OK[0m[1;34m
[0m[1;34m	threadid 22907812048896 -> hwthread 114 - OK[0m[1;34m
[0m[1;34m	threadid 22907610722432 -> hwthread 115 - OK[0m[1;34m
[0m[1;34m	threadid 22907409395968 -> hwthread 116 - OK[0m[1;34m
[0m[1;34m	threadid 22907208069504 -> hwthread 117 - OK[0m[1;34m
[0m[1;34m	threadid 22907006743040 -> hwthread 118 - OK[0m[1;34m
[0m[1;34m	threadid 22906805416576 -> hwthread 119 - OK[0m[1;34m
[0m[1;34m	threadid 22906604090112 -> hwthread 120 - OK[0m[1;34m
[0m[1;34m	threadid 22906402763648 -> hwthread 121 - OK[0m[1;34m
[0m[1;34m	threadid 22906201437184 -> hwthread 122 - OK[0m[1;34m
[0m[1;34m	threadid 22906000110720 -> hwthread 123 - OK[0m[1;34m
[0m[1;34m	threadid 22905798784256 -> hwthread 124 - OK[0m[1;34m
[0m[1;34m	threadid 22905597457792 -> hwthread 125 - OK[0m[1;34m
[0m[1;34m	threadid 22905396131328 -> hwthread 126 - OK[0m[1;34m
[0m[1;34m	threadid 22905194804864 -> hwthread 127 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22917588485888 -> hwthread 64 - OK[0m[1;34m
[0m[1;34m	threadid 22917581895424 -> hwthread 65 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 81, m: 81)                                                                 	 0.524303  	 700       	 6.62228   	 0         	 0.211096  	 31.3709   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4050, cols: 81, reductionFactor: 37, colBlockingSize: 12)                  	 0.332681  	 600       	 98.4374   	 0         	 4.82784   	 20.3895   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 81, r: 81, r2: 4050, leftOrthog: 0)        	 0.12735   	 600       	 250.385   	 0         	 37.5886   	 6.66118   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4050, cols: 31, reductionFactor: 37, colBlockingSize: 12)                  	 0.0765433 	 700       	 73.1108   	 0         	 9.2557    	 7.899     
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 81, n: 50, r: 81, r2: 81)             	 0.0670752 	 600       	 475.384   	 0         	 47.421    	 10.0248   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 81, reductionFactor: 37, colBlockingSize: 12)                  	 0.056065  	 100       	 60.0939   	 0         	 2.98313   	 20.1446   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 4050, Xcols: 31, r: 31, streamingCols: 0)                   	 0.0458016 	 700       	 59.4834   	 0         	 30.7598   	 1.9338    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 81)                                                                 	 0.0454534 	 100       	 3.93077   	 0         	 0.187445  	 20.9703   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 81, Qr2: 31)       	 0.0435096 	 700       	 0         	 0         	 74.4699   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                 	 0.0363381 	 100       	 3.21059   	 0         	 0.166217  	 19.3157   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 31, k: 2500)   	 0.0279428 	 800       	 221.882   	 0         	 46.7355   	 4.74761   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4050, cols: 50, reductionFactor: 37, colBlockingSize: 12)                  	 0.0233657 	 100       	 89.0077   	 0         	 7.01883   	 12.6813   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 2500, m: 31, k: 50)	 0.0186114 	 800       	 333.129   	 0         	 70.1677   	 4.74761   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 31, m: 31)                                                                  	 0.0165915 	 900       	 2.15459   	 0         	 1.26455   	 1.70384   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 4050, m: 31)                                                                       	 0.015354  	 700       	 0         	 0         	 91.5826   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 4050, leftOrthog: 0)        	 0.0130772 	 100       	 154.849   	 0         	 37.4697   	 4.13265   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 81, r: 81, r2: 2500, leftOrthog: 0)        	 0.0117011 	 100       	 280.357   	 0         	 42.4316   	 6.60728   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 81, n: 50, r: 81, r2: 50)             	 0.010569  	 100       	 310.389   	 0         	 40.4655   	 7.67045   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 31, n: 50, r2: 31)                                                                                         	 0.0103258 	 800       	 0         	 0         	 59.5633   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 31, reductionFactor: 37, colBlockingSize: 12)                  	 0.0100977 	 100       	 48.8713   	 0         	 6.21617   	 7.86197   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 1550, k: 31) 	 0.0100608 	 800       	 382.078   	 0         	 80.8527   	 4.72561   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 31, n: 50, r2: 31)                   	 0.00922488	 700       	 0         	 0         	 152.431   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 4050, m: 31)                                                              	 0.00913521	 700       	 0         	 0         	 153.927   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 81, reductionFactor: 37, colBlockingSize: 12)                    	 0.00795376	 100       	 8.47188   	 0         	 1.06727   	 7.9379    
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 31, m: 1550, k: 31) 	 0.0076573 	 700       	 272.338   	 0         	 70.9835   	 3.83663   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r: 81, r2: 81)             	 0.00690408	 100       	 475.154   	 0         	 47.689    	 9.96359   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 31, r: 31, streamingCols: 0)                   	 0.00477594	 100       	 50.3042   	 0         	 26.044    	 1.93151   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 50, Qr2: 31)       	 0.00338975	 100       	 0         	 0         	 95.5823   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 2500, m: 31)                                                                       	 0.00234344	 100       	 0         	 0         	 52.9138   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 81, r: 50, r2: 50, leftOrthog: 0)          	 0.00209092	 100       	 19.3695   	 0         	 6.56171   	 2.9519    
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 0, n: 50, r2: 31)                    	 0.00202237	 100       	 0         	 0         	 61.3141   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 31)                                                              	 0.0019375 	 100       	 0         	 0         	 64.0001   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 31, reductionFactor: 37, colBlockingSize: 12)                    	 0.00185718	 100       	 5.31437   	 0         	 1.08164   	 4.91325   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                   	 0.000900911	 100       	 0.554994  	 0         	 2.21998   	 0.25      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 31)                                                                                          	 0.000840946	 200       	 0         	 0         	 5.89812   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 31, n: 50, r2: 1)                                                                                          	 0.000781083	 200       	 0         	 0         	 6.35016   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 50, r2: 50)              	 0.000760405	 100       	 32.8772   	 0         	 7.89053   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 31, k: 50)     	 0.000710238	 100       	 21.8237   	 0         	 6.30774   	 3.45982   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 50, m: 31, k: 50)  	 0.000620496	 100       	 24.98     	 0         	 7.22003   	 3.45982   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 50, k: 31)   	 0.000618428	 100       	 25.0635   	 0         	 7.24417   	 3.45982   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 31, m: 31, fromLeft: 0)                	 0.000581358	 800       	 0         	 0         	 21.1587   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                          	 0.000512267	 100       	 0         	 0         	 7.80843   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 31, n: 50, r2: 1)                    	 0.000499245	 100       	 0         	 0         	 12.9796   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 1, r1low: 0, n: 50, r2: 31)                     	 0.000452395	 100       	 0         	 0         	 5.48194   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                            	 0.000433223	 100       	 1.15414   	 0         	 13.8497   	 0.0833333 
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 1, Xr2: 50, Qr1: 1, Qr2: 0)          	 0.000418434	 100       	 0         	 0         	 9.55945   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                 	 0.000412778	 100       	 0.605652  	 0         	 9.69044   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 31, m: 50, k: 31)   	 0.000403673	 100       	 23.8064   	 0         	 8.0481    	 2.95802   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 31)                                                                	 0.000395014	 100       	 0         	 0         	 6.27826   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 31, n: 50, r2: 1)                                                                                 	 0.0003529 	 100       	 0.439218  	 0         	 7.02749   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                 	 0.000342605	 100       	 0.729703  	 0         	 11.6753   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 0, m: 1550, k: 31)  	 7e-06     	 100       	 0         	 0         	 5491.43   	 0         
Timing statistics:
function                                                                                                                                                                                      	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                        	 2.04294   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_normalized(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                     	 2.04289   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::rightNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                            	 1.71752   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::rightNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                        	 1.71619   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double]	 1.61878   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                               	 0.606095  	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                  	 0.508564  	 1800      
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                            	 0.420645  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_leftOrthogonalize(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&) [with T = double]                                   	 0.325285  	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]           	 0.192098  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                	 0.154219  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.08902   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                           	 0.0853087 	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                    	 0.0505776 	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                                       	 0.0473178 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double]          	 0.028653  	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double]       	 0.0192319 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double]        	 0.0187472 	 1800      
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                       	 0.0176974 	 800       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.0165915 	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                	 0.0124601 	 1300      
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                        	 0.0121989 	 1000      
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                              	 0.0114677 	 900       
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                	 0.00557721	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                              	 0.0027606 	 6300      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                         	 0.00110862	 5200      
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                       	 0.00110828	 300       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                         	 0.000900911	 100       
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                           	 0.000581358	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                                                  	 0.000433223	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
orthoX: L, orthoY: L
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 64
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->65  [0m[1;34m1->66  [0m[1;34m2->67  [0m[1;34m3->68  [0m[1;34m4->69  [0m[1;34m5->70  [0m[1;34m6->71  [0m[1;34m7->72  [0m[1;34m8->73  [0m[1;34m9->74  [0m[1;34m10->75  [0m[1;34m11->76  [0m[1;34m12->77  [0m[1;34m13->78  [0m[1;34m14->79  [0m[1;34m15->80  [0m[1;34m16->81  [0m[1;34m17->82  [0m[1;34m18->83  [0m[1;34m19->84  [0m[1;34m20->85  [0m[1;34m21->86  [0m[1;34m22->87  [0m[1;34m23->88  [0m[1;34m24->89  [0m[1;34m25->90  [0m[1;34m26->91  [0m[1;34m27->92  [0m[1;34m28->93  [0m[1;34m29->94  [0m[1;34m30->95  [0m[1;34m31->96  [0m[1;34m32->97  [0m[1;34m33->98  [0m[1;34m34->99  [0m[1;34m35->100  [0m[1;34m36->101  [0m[1;34m37->102  [0m[1;34m38->103  [0m[1;34m39->104  [0m[1;34m40->105  [0m[1;34m41->106  [0m[1;34m42->107  [0m[1;34m43->108  [0m[1;34m44->109  [0m[1;34m45->110  [0m[1;34m46->111  [0m[1;34m47->112  [0m[1;34m48->113  [0m[1;34m49->114  [0m[1;34m50->115  [0m[1;34m51->116  [0m[1;34m52->117  [0m[1;34m53->118  [0m[1;34m54->119  [0m[1;34m55->120  [0m[1;34m56->121  [0m[1;34m57->122  [0m[1;34m58->123  [0m[1;34m59->124  [0m[1;34m60->125  [0m[1;34m61->126  [0m[1;34m62->127  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23315589789568 -> hwthread 65 - OK[0m[1;34m
[0m[1;34m	threadid 23315364177920 -> hwthread 66 - OK[0m[1;34m
[0m[1;34m	threadid 23315162851456 -> hwthread 67 - OK[0m[1;34m
[0m[1;34m	threadid 23314961524992 -> hwthread 68 - OK[0m[1;34m
[0m[1;34m	threadid 23314760198528 -> hwthread 69 - OK[0m[1;34m
[0m[1;34m	threadid 23314558872064 -> hwthread 70 - OK[0m[1;34m
[0m[1;34m	threadid 23314357545600 -> hwthread 71 - OK[0m[1;34m
[0m[1;34m	threadid 23314156219136 -> hwthread 72 - OK[0m[1;34m
[0m[1;34m	threadid 23313954892672 -> hwthread 73 - OK[0m[1;34m
[0m[1;34m	threadid 23313753566208 -> hwthread 74 - OK[0m[1;34m
[0m[1;34m	threadid 23313552239744 -> hwthread 75 - OK[0m[1;34m
[0m[1;34m	threadid 23313350913280 -> hwthread 76 - OK[0m[1;34m
[0m[1;34m	threadid 23313149586816 -> hwthread 77 - OK[0m[1;34m
[0m[1;34m	threadid 23312948260352 -> hwthread 78 - OK[0m[1;34m
[0m[1;34m	threadid 23312746933888 -> hwthread 79 - OK[0m[1;34m
[0m[1;34m	threadid 23312545607424 -> hwthread 80 - OK[0m[1;34m
[0m[1;34m	threadid 23312344280960 -> hwthread 81 - OK[0m[1;34m
[0m[1;34m	threadid 23312142954496 -> hwthread 82 - OK[0m[1;34m
[0m[1;34m	threadid 23311941628032 -> hwthread 83 - OK[0m[1;34m
[0m[1;34m	threadid 23311740301568 -> hwthread 84 - OK[0m[1;34m
[0m[1;34m	threadid 23311538975104 -> hwthread 85 - OK[0m[1;34m
[0m[1;34m	threadid 23311337648640 -> hwthread 86 - OK[0m[1;34m
[0m[1;34m	threadid 23311136322176 -> hwthread 87 - OK[0m[1;34m
[0m[1;34m	threadid 23310934995712 -> hwthread 88 - OK[0m[1;34m
[0m[1;34m	threadid 23310733669248 -> hwthread 89 - OK[0m[1;34m
[0m[1;34m	threadid 23310532342784 -> hwthread 90 - OK[0m[1;34m
[0m[1;34m	threadid 23310331016320 -> hwthread 91 - OK[0m[1;34m
[0m[1;34m	threadid 23310129689856 -> hwthread 92 - OK[0m[1;34m
[0m[1;34m	threadid 23309928363392 -> hwthread 93 - OK[0m[1;34m
[0m[1;34m	threadid 23309727036928 -> hwthread 94 - OK[0m[1;34m
[0m[1;34m	threadid 23309525710464 -> hwthread 95 - OK[0m[1;34m
[0m[1;34m	threadid 23309324384000 -> hwthread 96 - OK[0m[1;34m
[0m[1;34m	threadid 23309123053440 -> hwthread 97 - OK[0m[1;34m
[0m[1;34m	threadid 23308921726976 -> hwthread 98 - OK[0m[1;34m
[0m[1;34m	threadid 23308720400512 -> hwthread 99 - OK[0m[1;34m
[0m[1;34m	threadid 23308519074048 -> hwthread 100 - OK[0m[1;34m
[0m[1;34m	threadid 23308317747584 -> hwthread 101 - OK[0m[1;34m
[0m[1;34m	threadid 23308116421120 -> hwthread 102 - OK[0m[1;34m
[0m[1;34m	threadid 23307915094656 -> hwthread 103 - OK[0m[1;34m
[0m[1;34m	threadid 23307713768192 -> hwthread 104 - OK[0m[1;34m
[0m[1;34m	threadid 23307512441728 -> hwthread 105 - OK[0m[1;34m
[0m[1;34m	threadid 23307311115264 -> hwthread 106 - OK[0m[1;34m
[0m[1;34m	threadid 23307109788800 -> hwthread 107 - OK[0m[1;34m
[0m[1;34m	threadid 23306908462336 -> hwthread 108 - OK[0m[1;34m
[0m[1;34m	threadid 23306707135872 -> hwthread 109 - OK[0m[1;34m
[0m[1;34m	threadid 23306505809408 -> hwthread 110 - OK[0m[1;34m
[0m[1;34m	threadid 23306304482944 -> hwthread 111 - OK[0m[1;34m
[0m[1;34m	threadid 23306103156480 -> hwthread 112 - OK[0m[1;34m
[0m[1;34m	threadid 23305901830016 -> hwthread 113 - OK[0m[1;34m
[0m[1;34m	threadid 23305700503552 -> hwthread 114 - OK[0m[1;34m
[0m[1;34m	threadid 23305499177088 -> hwthread 115 - OK[0m[1;34m
[0m[1;34m	threadid 23305297850624 -> hwthread 116 - OK[0m[1;34m
[0m[1;34m	threadid 23305096524160 -> hwthread 117 - OK[0m[1;34m
[0m[1;34m	threadid 23304895197696 -> hwthread 118 - OK[0m[1;34m
[0m[1;34m	threadid 23304693871232 -> hwthread 119 - OK[0m[1;34m
[0m[1;34m	threadid 23304492544768 -> hwthread 120 - OK[0m[1;34m
[0m[1;34m	threadid 23304291218304 -> hwthread 121 - OK[0m[1;34m
[0m[1;34m	threadid 23304089891840 -> hwthread 122 - OK[0m[1;34m
[0m[1;34m	threadid 23303888565376 -> hwthread 123 - OK[0m[1;34m
[0m[1;34m	threadid 23303687238912 -> hwthread 124 - OK[0m[1;34m
[0m[1;34m	threadid 23303485912448 -> hwthread 125 - OK[0m[1;34m
[0m[1;34m	threadid 23303284585984 -> hwthread 126 - OK[0m[1;34m
[0m[1;34m	threadid 23303083259520 -> hwthread 127 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23315484129024 -> hwthread 64 - OK[0m[1;34m
[0m[1;34m	threadid 23315477538560 -> hwthread 65 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 82, m: 82)                                                                 	 0.528189  	 700       	 6.82004   	 0         	 0.214738  	 31.7598   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4100, cols: 82, reductionFactor: 37, colBlockingSize: 12)                  	 0.337267  	 600       	 100.74    	 0         	 4.88052   	 20.6412   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 82, r: 82, r2: 4100, leftOrthog: 0)        	 0.130352  	 600       	 253.79    	 0         	 37.6352   	 6.74342   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4100, cols: 32, reductionFactor: 37, colBlockingSize: 12)                  	 0.0805941 	 700       	 74.9015   	 0         	 9.18745   	 8.15259   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 82, n: 50, r: 82, r2: 82)             	 0.0684356 	 600       	 483.405   	 0         	 47.633    	 10.1485   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 82, reductionFactor: 37, colBlockingSize: 12)                  	 0.0567371 	 100       	 60.8572   	 0         	 2.98533   	 20.3854   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 4100, Xcols: 32, r: 32, streamingCols: 0)                   	 0.0489092 	 700       	 60.0885   	 0         	 30.1029   	 1.99611   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 82)                                                                 	 0.0458644 	 100       	 3.93915   	 0         	 0.187509  	 21.0078   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 82, Qr2: 32)       	 0.0454623 	 700       	 0         	 0         	 72.9712   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                 	 0.036735  	 100       	 3.1759    	 0         	 0.164421  	 19.3157   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 32, k: 2500)   	 0.0285473 	 800       	 224.189   	 0         	 46.3175   	 4.84027   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4100, cols: 50, reductionFactor: 37, colBlockingSize: 12)                  	 0.023519  	 100       	 89.5195   	 0         	 7.05813   	 12.6832   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 2500, m: 32, k: 50)	 0.0193975 	 800       	 329.94    	 0         	 68.1656   	 4.84027   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 4100, m: 32)                                                                       	 0.0164323 	 700       	 0         	 0         	 89.4238   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 32, m: 32)                                                                  	 0.016403  	 900       	 2.39719   	 0         	 1.36248   	 1.75942   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 4100, leftOrthog: 0)        	 0.0140581 	 100       	 145.824   	 0         	 35.2823   	 4.13306   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 82, r: 82, r2: 2500, leftOrthog: 0)        	 0.0123941 	 100       	 271.258   	 0         	 40.5643   	 6.68711   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 32, n: 50, r2: 32)                                                                                         	 0.0108938 	 800       	 0         	 0         	 60.159    	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 4100, m: 32)                                                              	 0.0103143 	 700       	 0         	 0         	 142.466   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 32, reductionFactor: 37, colBlockingSize: 12)                  	 0.0103133 	 100       	 50.9865   	 0         	 6.28503   	 8.11238   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 1600, k: 32) 	 0.0101763 	 800       	 402.503   	 0         	 83.5195   	 4.81928   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 32, n: 50, r2: 32)                   	 0.00935358	 700       	 0         	 0         	 157.099   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 82, n: 50, r: 82, r2: 50)             	 0.00874708	 100       	 384.357   	 0         	 49.8726   	 7.70677   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 32, m: 1600, k: 32) 	 0.00748921	 700       	 306.275   	 0         	 77.3345   	 3.9604    
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 82, reductionFactor: 37, colBlockingSize: 12)                    	 0.00742887	 100       	 9.2958    	 0         	 1.16561   	 7.97502   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r: 82, r2: 82)             	 0.00724516	 100       	 464.034   	 0         	 46.014    	 10.0846   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 32, r: 32, streamingCols: 0)                   	 0.00518731	 100       	 49.3512   	 0         	 24.7546   	 1.99362   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 50, Qr2: 32)       	 0.00372017	 100       	 0         	 0         	 88.1679   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 2500, m: 32)                                                                       	 0.00311826	 100       	 0         	 0         	 41.0485   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 0, n: 50, r2: 32)                    	 0.00287666	 100       	 0         	 0         	 44.496    	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 32)                                                              	 0.00256921	 100       	 0         	 0         	 49.8208   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 82, r: 50, r2: 50, leftOrthog: 0)          	 0.0018308 	 100       	 22.3945   	 0         	 7.55952   	 2.96243   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 32, reductionFactor: 37, colBlockingSize: 12)                    	 0.00175146	 100       	 6.00457   	 0         	 1.19854   	 5.00989   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                   	 0.000907067	 100       	 0.551227  	 0         	 2.20491   	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 50, r2: 50)              	 0.000819554	 100       	 30.5044   	 0         	 7.32106   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 32)                                                                                          	 0.000806733	 200       	 0         	 0         	 6.34659   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 32, n: 50, r2: 1)                                                                                          	 0.000793413	 200       	 0         	 0         	 6.45313   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 32, k: 50)     	 0.000738863	 100       	 21.6549   	 0         	 6.17164   	 3.50877   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 50, m: 32, k: 50)  	 0.00063525	 100       	 25.1869   	 0         	 7.17828   	 3.50877   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 50, k: 32)   	 0.000549611	 100       	 29.1115   	 0         	 8.29678   	 3.50877   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                          	 0.000498507	 100       	 0         	 0         	 8.02396   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 32, n: 50, r2: 1)                    	 0.000471745	 100       	 0         	 0         	 13.9058   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 1, r1low: 0, n: 50, r2: 32)                     	 0.000451934	 100       	 0         	 0         	 5.66454   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 32, m: 32, fromLeft: 0)                	 0.000431008	 800       	 0         	 0         	 30.4106   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 32)                                                                	 0.000417877	 100       	 0         	 0         	 6.1262    	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 1, Xr2: 50, Qr1: 1, Qr2: 0)          	 0.0004135 	 100       	 0         	 0         	 9.67352   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                            	 0.00041156	 100       	 1.21489   	 0         	 14.5787   	 0.0833333 
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                 	 0.000403443	 100       	 0.619666  	 0         	 9.91466   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 32, n: 50, r2: 1)                                                                                 	 0.000343154	 100       	 0.466263  	 0         	 7.46021   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 32, m: 50, k: 32)   	 0.000338382	 100       	 30.2617   	 0         	 9.98635   	 3.0303    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                 	 0.000333304	 100       	 0.750066  	 0         	 12.0011   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 0, m: 1600, k: 32)  	 6.99e-06  	 100       	 0         	 0         	 5859.8    	 0         
Timing statistics:
function                                                                                                                                                                                      	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                        	 2.06426   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_normalized(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                     	 2.06421   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::rightNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                            	 1.71705   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::rightNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                        	 1.71572   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double]	 1.62106   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                               	 0.610789  	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                  	 0.517611  	 1800      
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                            	 0.425574  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_leftOrthogonalize(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&) [with T = double]                                   	 0.347086  	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]           	 0.204114  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                	 0.158635  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.093105  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                           	 0.0852474 	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                    	 0.0540965 	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                                       	 0.049596  	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double]          	 0.0292862 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double]       	 0.0200327 	 900       
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                       	 0.0195506 	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double]        	 0.0185605 	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.016403  	 900       
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                              	 0.0133014 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                        	 0.0131539 	 1000      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                	 0.0129925 	 1300      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                	 0.00551264	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                              	 0.00296966	 6300      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                         	 0.00113143	 5200      
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                       	 0.0010799 	 300       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                         	 0.000907067	 100       
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                           	 0.000431008	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                                                  	 0.00041156	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
orthoX: L, orthoY: L
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 64
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->65  [0m[1;34m1->66  [0m[1;34m2->67  [0m[1;34m3->68  [0m[1;34m4->69  [0m[1;34m5->70  [0m[1;34m6->71  [0m[1;34m7->72  [0m[1;34m8->73  [0m[1;34m9->74  [0m[1;34m10->75  [0m[1;34m11->76  [0m[1;34m12->77  [0m[1;34m13->78  [0m[1;34m14->79  [0m[1;34m15->80  [0m[1;34m16->81  [0m[1;34m17->82  [0m[1;34m18->83  [0m[1;34m19->84  [0m[1;34m20->85  [0m[1;34m21->86  [0m[1;34m22->87  [0m[1;34m23->88  [0m[1;34m24->89  [0m[1;34m25->90  [0m[1;34m26->91  [0m[1;34m27->92  [0m[1;34m28->93  [0m[1;34m29->94  [0m[1;34m30->95  [0m[1;34m31->96  [0m[1;34m32->97  [0m[1;34m33->98  [0m[1;34m34->99  [0m[1;34m35->100  [0m[1;34m36->101  [0m[1;34m37->102  [0m[1;34m38->103  [0m[1;34m39->104  [0m[1;34m40->105  [0m[1;34m41->106  [0m[1;34m42->107  [0m[1;34m43->108  [0m[1;34m44->109  [0m[1;34m45->110  [0m[1;34m46->111  [0m[1;34m47->112  [0m[1;34m48->113  [0m[1;34m49->114  [0m[1;34m50->115  [0m[1;34m51->116  [0m[1;34m52->117  [0m[1;34m53->118  [0m[1;34m54->119  [0m[1;34m55->120  [0m[1;34m56->121  [0m[1;34m57->122  [0m[1;34m58->123  [0m[1;34m59->124  [0m[1;34m60->125  [0m[1;34m61->126  [0m[1;34m62->127  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22976025298816 -> hwthread 65 - OK[0m[1;34m
[0m[1;34m	threadid 22975793326080 -> hwthread 66 - OK[0m[1;34m
[0m[1;34m	threadid 22975591999616 -> hwthread 67 - OK[0m[1;34m
[0m[1;34m	threadid 22975390673152 -> hwthread 68 - OK[0m[1;34m
[0m[1;34m	threadid 22975189346688 -> hwthread 69 - OK[0m[1;34m
[0m[1;34m	threadid 22974988020224 -> hwthread 70 - OK[0m[1;34m
[0m[1;34m	threadid 22974786693760 -> hwthread 71 - OK[0m[1;34m
[0m[1;34m	threadid 22974585367296 -> hwthread 72 - OK[0m[1;34m
[0m[1;34m	threadid 22974384040832 -> hwthread 73 - OK[0m[1;34m
[0m[1;34m	threadid 22974182714368 -> hwthread 74 - OK[0m[1;34m
[0m[1;34m	threadid 22973981387904 -> hwthread 75 - OK[0m[1;34m
[0m[1;34m	threadid 22973780061440 -> hwthread 76 - OK[0m[1;34m
[0m[1;34m	threadid 22973578734976 -> hwthread 77 - OK[0m[1;34m
[0m[1;34m	threadid 22973377408512 -> hwthread 78 - OK[0m[1;34m
[0m[1;34m	threadid 22973176082048 -> hwthread 79 - OK[0m[1;34m
[0m[1;34m	threadid 22972974755584 -> hwthread 80 - OK[0m[1;34m
[0m[1;34m	threadid 22972773429120 -> hwthread 81 - OK[0m[1;34m
[0m[1;34m	threadid 22972572102656 -> hwthread 82 - OK[0m[1;34m
[0m[1;34m	threadid 22972370776192 -> hwthread 83 - OK[0m[1;34m
[0m[1;34m	threadid 22972169449728 -> hwthread 84 - OK[0m[1;34m
[0m[1;34m	threadid 22971968123264 -> hwthread 85 - OK[0m[1;34m
[0m[1;34m	threadid 22971766796800 -> hwthread 86 - OK[0m[1;34m
[0m[1;34m	threadid 22971565470336 -> hwthread 87 - OK[0m[1;34m
[0m[1;34m	threadid 22971364143872 -> hwthread 88 - OK[0m[1;34m
[0m[1;34m	threadid 22971162817408 -> hwthread 89 - OK[0m[1;34m
[0m[1;34m	threadid 22970961490944 -> hwthread 90 - OK[0m[1;34m
[0m[1;34m	threadid 22970760164480 -> hwthread 91 - OK[0m[1;34m
[0m[1;34m	threadid 22970558838016 -> hwthread 92 - OK[0m[1;34m
[0m[1;34m	threadid 22970357511552 -> hwthread 93 - OK[0m[1;34m
[0m[1;34m	threadid 22970156185088 -> hwthread 94 - OK[0m[1;34m
[0m[1;34m	threadid 22969954858624 -> hwthread 95 - OK[0m[1;34m
[0m[1;34m	threadid 22969753532160 -> hwthread 96 - OK[0m[1;34m
[0m[1;34m	threadid 22969552201600 -> hwthread 97 - OK[0m[1;34m
[0m[1;34m	threadid 22969350875136 -> hwthread 98 - OK[0m[1;34m
[0m[1;34m	threadid 22969149548672 -> hwthread 99 - OK[0m[1;34m
[0m[1;34m	threadid 22968948222208 -> hwthread 100 - OK[0m[1;34m
[0m[1;34m	threadid 22968746895744 -> hwthread 101 - OK[0m[1;34m
[0m[1;34m	threadid 22968545569280 -> hwthread 102 - OK[0m[1;34m
[0m[1;34m	threadid 22968344242816 -> hwthread 103 - OK[0m[1;34m
[0m[1;34m	threadid 22968142916352 -> hwthread 104 - OK[0m[1;34m
[0m[1;34m	threadid 22967941589888 -> hwthread 105 - OK[0m[1;34m
[0m[1;34m	threadid 22967740263424 -> hwthread 106 - OK[0m[1;34m
[0m[1;34m	threadid 22967538936960 -> hwthread 107 - OK[0m[1;34m
[0m[1;34m	threadid 22967337610496 -> hwthread 108 - OK[0m[1;34m
[0m[1;34m	threadid 22967136284032 -> hwthread 109 - OK[0m[1;34m
[0m[1;34m	threadid 22966934957568 -> hwthread 110 - OK[0m[1;34m
[0m[1;34m	threadid 22966733631104 -> hwthread 111 - OK[0m[1;34m
[0m[1;34m	threadid 22966532304640 -> hwthread 112 - OK[0m[1;34m
[0m[1;34m	threadid 22966330978176 -> hwthread 113 - OK[0m[1;34m
[0m[1;34m	threadid 22966129651712 -> hwthread 114 - OK[0m[1;34m
[0m[1;34m	threadid 22965928325248 -> hwthread 115 - OK[0m[1;34m
[0m[1;34m	threadid 22965726998784 -> hwthread 116 - OK[0m[1;34m
[0m[1;34m	threadid 22965525672320 -> hwthread 117 - OK[0m[1;34m
[0m[1;34m	threadid 22965324345856 -> hwthread 118 - OK[0m[1;34m
[0m[1;34m	threadid 22965123019392 -> hwthread 119 - OK[0m[1;34m
[0m[1;34m	threadid 22964921692928 -> hwthread 120 - OK[0m[1;34m
[0m[1;34m	threadid 22964720366464 -> hwthread 121 - OK[0m[1;34m
[0m[1;34m	threadid 22964519040000 -> hwthread 122 - OK[0m[1;34m
[0m[1;34m	threadid 22964317713536 -> hwthread 123 - OK[0m[1;34m
[0m[1;34m	threadid 22964116387072 -> hwthread 124 - OK[0m[1;34m
[0m[1;34m	threadid 22963915060608 -> hwthread 125 - OK[0m[1;34m
[0m[1;34m	threadid 22963713734144 -> hwthread 126 - OK[0m[1;34m
[0m[1;34m	threadid 22963512407680 -> hwthread 127 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22975919638272 -> hwthread 64 - OK[0m[1;34m
[0m[1;34m	threadid 22975913047808 -> hwthread 65 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 83, m: 83)                                                                 	 0.597438  	 700       	 6.25283   	 0         	 0.194497  	 32.1487   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4150, cols: 83, reductionFactor: 37, colBlockingSize: 12)                  	 0.346501  	 600       	 101.686   	 0         	 4.86702   	 20.893    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 83, r: 83, r2: 4150, leftOrthog: 0)        	 0.135841  	 600       	 252.555   	 0         	 37.0008   	 6.82566   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4150, cols: 33, reductionFactor: 37, colBlockingSize: 12)                  	 0.0843572 	 700       	 77.0307   	 0         	 9.16364   	 8.40613   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 83, n: 50, r: 83, r2: 83)             	 0.0666715 	 600       	 514.571   	 0         	 50.0932   	 10.2723   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 83, reductionFactor: 37, colBlockingSize: 12)                  	 0.056116  	 100       	 63.0408   	 0         	 3.05637   	 20.626    
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 4150, Xcols: 33, r: 33, streamingCols: 0)                   	 0.0505388 	 700       	 62.5964   	 0         	 30.4101   	 2.05841   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 83)                                                                 	 0.0463172 	 100       	 3.94382   	 0         	 0.187403  	 21.0445   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 83, Qr2: 33)       	 0.0448235 	 700       	 0         	 0         	 75.7602   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                 	 0.0379225 	 100       	 3.07645   	 0         	 0.159272  	 19.3157   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 33, k: 2500)   	 0.0297878 	 800       	 221.567   	 0         	 44.9365   	 4.93067   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4150, cols: 50, reductionFactor: 37, colBlockingSize: 12)                  	 0.0250656 	 100       	 85.02     	 0         	 6.7024    	 12.685    
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 2500, m: 33, k: 50)	 0.0192891 	 800       	 342.163   	 0         	 69.3947   	 4.93067   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 33, m: 33)                                                                  	 0.0184442 	 900       	 2.3381    	 0         	 1.28821   	 1.815     
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 4150, m: 33)                                                                       	 0.0162502 	 700       	 0         	 0         	 94.3887   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 4150, leftOrthog: 0)        	 0.0127651 	 100       	 162.553   	 0         	 39.326    	 4.13347   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 83, r: 83, r2: 2500, leftOrthog: 0)        	 0.0121121 	 100       	 284.386   	 0         	 42.0261   	 6.76689   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 33, n: 50, r2: 33)                                                                                         	 0.0114871 	 800       	 0         	 0         	 60.6734   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 33, reductionFactor: 37, colBlockingSize: 12)                  	 0.0110551 	 100       	 50.5846   	 0         	 6.04891   	 8.36259   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 1650, k: 33) 	 0.0105347 	 800       	 413.492   	 0         	 84.2021   	 4.91071   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 33, n: 50, r2: 33)                   	 0.0100052 	 700       	 0         	 0         	 153.305   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 4150, m: 33)                                                              	 0.00948723	 700       	 0         	 0         	 161.674   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 83, n: 50, r: 83, r2: 50)             	 0.00901517	 100       	 382.078   	 0         	 49.348    	 7.74254   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 33, m: 1650, k: 33) 	 0.00807372	 700       	 311.577   	 0         	 76.2893   	 4.08416   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r: 83, r2: 83)             	 0.00734636	 100       	 468.871   	 0         	 45.9426   	 10.2056   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 83, reductionFactor: 37, colBlockingSize: 12)                    	 0.00564993	 100       	 12.5226   	 0         	 1.56306   	 8.01158   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 33, r: 33, streamingCols: 0)                   	 0.00528274	 100       	 51.5357   	 0         	 25.0695   	 2.05572   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 50, Qr2: 33)       	 0.00370566	 100       	 0         	 0         	 89.5926   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 2500, m: 33)                                                                       	 0.00302695	 100       	 0         	 0         	 43.6083   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 0, n: 50, r2: 33)                    	 0.00264884	 100       	 0         	 0         	 49.8331   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 33)                                                              	 0.00215208	 100       	 0         	 0         	 61.336    	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 83, r: 50, r2: 50, leftOrthog: 0)          	 0.00189156	 100       	 21.9396   	 0         	 7.38017   	 2.97278   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 33, reductionFactor: 37, colBlockingSize: 12)                    	 0.00175302	 100       	 6.38005   	 0         	 1.24996   	 5.1042    
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                   	 0.000896974	 100       	 0.55743   	 0         	 2.22972   	 0.25      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 33)                                                                                          	 0.000820555	 200       	 0         	 0         	 6.43467   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 50, r2: 50)              	 0.000783603	 100       	 31.9039   	 0         	 7.65694   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 33, n: 50, r2: 1)                                                                                          	 0.000773862	 200       	 0         	 0         	 6.82292   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 33, k: 50)     	 0.000739958	 100       	 22.2986   	 0         	 6.27063   	 3.55603   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 50, m: 33, k: 50)  	 0.0006954 	 100       	 23.7274   	 0         	 6.67242   	 3.55603   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 33, m: 33, fromLeft: 0)                	 0.00067547	 800       	 0         	 0         	 20.6363   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 50, k: 33)   	 0.000589005	 100       	 28.0133   	 0         	 7.87769   	 3.55603   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                          	 0.000525075	 100       	 0         	 0         	 7.61796   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 33, n: 50, r2: 1)                    	 0.000493095	 100       	 0         	 0         	 13.466    	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 1, r1low: 0, n: 50, r2: 33)                     	 0.000481386	 100       	 0         	 0         	 5.48416   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                            	 0.000437899	 100       	 1.14182   	 0         	 13.7018   	 0.0833333 
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 33, m: 50, k: 33)   	 0.000432286	 100       	 25.1917   	 0         	 8.1224    	 3.1015    
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 1, Xr2: 50, Qr1: 1, Qr2: 0)          	 0.000415217	 100       	 0         	 0         	 9.63352   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                 	 0.000413512	 100       	 0.604577  	 0         	 9.67324   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 33)                                                                	 0.000409547	 100       	 0         	 0         	 6.44615   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                 	 0.000350934	 100       	 0.712385  	 0         	 11.3982   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 33, n: 50, r2: 1)                                                                                 	 0.000347864	 100       	 0.474323  	 0         	 7.58917   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 0, m: 1650, k: 33)  	 7.29e-06  	 100       	 0         	 0         	 5975.31   	 0         
Timing statistics:
function                                                                                                                                                                                      	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                        	 2.18128   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_normalized(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                     	 2.18124   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::rightNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                            	 1.83062   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::rightNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                        	 1.82927   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double]	 1.73224   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                               	 0.681677  	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                  	 0.530498  	 1800      
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                            	 0.433941  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_leftOrthogonalize(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&) [with T = double]                                   	 0.350547  	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]           	 0.210635  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                	 0.16261   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.097691  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                           	 0.0838166 	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                    	 0.0558215 	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                                       	 0.0489444 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double]          	 0.0305278 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double]       	 0.0199845 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double]        	 0.019637  	 1800      
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                       	 0.0192772 	 800       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.0184442 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                        	 0.0136285 	 1000      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                	 0.0136066 	 1300      
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                              	 0.0120489 	 900       
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                	 0.00486021	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                              	 0.00287101	 6300      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                         	 0.00114784	 5200      
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                       	 0.00111231	 300       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                         	 0.000896974	 100       
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                           	 0.00067547	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                                                  	 0.000437899	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
orthoX: L, orthoY: L
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 64
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->65  [0m[1;34m1->66  [0m[1;34m2->67  [0m[1;34m3->68  [0m[1;34m4->69  [0m[1;34m5->70  [0m[1;34m6->71  [0m[1;34m7->72  [0m[1;34m8->73  [0m[1;34m9->74  [0m[1;34m10->75  [0m[1;34m11->76  [0m[1;34m12->77  [0m[1;34m13->78  [0m[1;34m14->79  [0m[1;34m15->80  [0m[1;34m16->81  [0m[1;34m17->82  [0m[1;34m18->83  [0m[1;34m19->84  [0m[1;34m20->85  [0m[1;34m21->86  [0m[1;34m22->87  [0m[1;34m23->88  [0m[1;34m24->89  [0m[1;34m25->90  [0m[1;34m26->91  [0m[1;34m27->92  [0m[1;34m28->93  [0m[1;34m29->94  [0m[1;34m30->95  [0m[1;34m31->96  [0m[1;34m32->97  [0m[1;34m33->98  [0m[1;34m34->99  [0m[1;34m35->100  [0m[1;34m36->101  [0m[1;34m37->102  [0m[1;34m38->103  [0m[1;34m39->104  [0m[1;34m40->105  [0m[1;34m41->106  [0m[1;34m42->107  [0m[1;34m43->108  [0m[1;34m44->109  [0m[1;34m45->110  [0m[1;34m46->111  [0m[1;34m47->112  [0m[1;34m48->113  [0m[1;34m49->114  [0m[1;34m50->115  [0m[1;34m51->116  [0m[1;34m52->117  [0m[1;34m53->118  [0m[1;34m54->119  [0m[1;34m55->120  [0m[1;34m56->121  [0m[1;34m57->122  [0m[1;34m58->123  [0m[1;34m59->124  [0m[1;34m60->125  [0m[1;34m61->126  [0m[1;34m62->127  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22767119230848 -> hwthread 65 - OK[0m[1;34m
[0m[1;34m	threadid 22766883432448 -> hwthread 66 - OK[0m[1;34m
[0m[1;34m	threadid 22766682105984 -> hwthread 67 - OK[0m[1;34m
[0m[1;34m	threadid 22766480779520 -> hwthread 68 - OK[0m[1;34m
[0m[1;34m	threadid 22766279453056 -> hwthread 69 - OK[0m[1;34m
[0m[1;34m	threadid 22766078126592 -> hwthread 70 - OK[0m[1;34m
[0m[1;34m	threadid 22765876800128 -> hwthread 71 - OK[0m[1;34m
[0m[1;34m	threadid 22765675473664 -> hwthread 72 - OK[0m[1;34m
[0m[1;34m	threadid 22765474147200 -> hwthread 73 - OK[0m[1;34m
[0m[1;34m	threadid 22765272820736 -> hwthread 74 - OK[0m[1;34m
[0m[1;34m	threadid 22765071494272 -> hwthread 75 - OK[0m[1;34m
[0m[1;34m	threadid 22764870167808 -> hwthread 76 - OK[0m[1;34m
[0m[1;34m	threadid 22764668841344 -> hwthread 77 - OK[0m[1;34m
[0m[1;34m	threadid 22764467514880 -> hwthread 78 - OK[0m[1;34m
[0m[1;34m	threadid 22764266188416 -> hwthread 79 - OK[0m[1;34m
[0m[1;34m	threadid 22764064861952 -> hwthread 80 - OK[0m[1;34m
[0m[1;34m	threadid 22763863535488 -> hwthread 81 - OK[0m[1;34m
[0m[1;34m	threadid 22763662209024 -> hwthread 82 - OK[0m[1;34m
[0m[1;34m	threadid 22763460882560 -> hwthread 83 - OK[0m[1;34m
[0m[1;34m	threadid 22763259556096 -> hwthread 84 - OK[0m[1;34m
[0m[1;34m	threadid 22763058229632 -> hwthread 85 - OK[0m[1;34m
[0m[1;34m	threadid 22762856903168 -> hwthread 86 - OK[0m[1;34m
[0m[1;34m	threadid 22762655576704 -> hwthread 87 - OK[0m[1;34m
[0m[1;34m	threadid 22762454250240 -> hwthread 88 - OK[0m[1;34m
[0m[1;34m	threadid 22762252923776 -> hwthread 89 - OK[0m[1;34m
[0m[1;34m	threadid 22762051597312 -> hwthread 90 - OK[0m[1;34m
[0m[1;34m	threadid 22761850270848 -> hwthread 91 - OK[0m[1;34m
[0m[1;34m	threadid 22761648944384 -> hwthread 92 - OK[0m[1;34m
[0m[1;34m	threadid 22761447617920 -> hwthread 93 - OK[0m[1;34m
[0m[1;34m	threadid 22761246291456 -> hwthread 94 - OK[0m[1;34m
[0m[1;34m	threadid 22761044964992 -> hwthread 95 - OK[0m[1;34m
[0m[1;34m	threadid 22760843638528 -> hwthread 96 - OK[0m[1;34m
[0m[1;34m	threadid 22760642307968 -> hwthread 97 - OK[0m[1;34m
[0m[1;34m	threadid 22760440981504 -> hwthread 98 - OK[0m[1;34m
[0m[1;34m	threadid 22760239655040 -> hwthread 99 - OK[0m[1;34m
[0m[1;34m	threadid 22760038328576 -> hwthread 100 - OK[0m[1;34m
[0m[1;34m	threadid 22759837002112 -> hwthread 101 - OK[0m[1;34m
[0m[1;34m	threadid 22759635675648 -> hwthread 102 - OK[0m[1;34m
[0m[1;34m	threadid 22759434349184 -> hwthread 103 - OK[0m[1;34m
[0m[1;34m	threadid 22759233022720 -> hwthread 104 - OK[0m[1;34m
[0m[1;34m	threadid 22759031696256 -> hwthread 105 - OK[0m[1;34m
[0m[1;34m	threadid 22758830369792 -> hwthread 106 - OK[0m[1;34m
[0m[1;34m	threadid 22758629043328 -> hwthread 107 - OK[0m[1;34m
[0m[1;34m	threadid 22758427716864 -> hwthread 108 - OK[0m[1;34m
[0m[1;34m	threadid 22758226390400 -> hwthread 109 - OK[0m[1;34m
[0m[1;34m	threadid 22758025063936 -> hwthread 110 - OK[0m[1;34m
[0m[1;34m	threadid 22757823737472 -> hwthread 111 - OK[0m[1;34m
[0m[1;34m	threadid 22757622411008 -> hwthread 112 - OK[0m[1;34m
[0m[1;34m	threadid 22757421084544 -> hwthread 113 - OK[0m[1;34m
[0m[1;34m	threadid 22757219758080 -> hwthread 114 - OK[0m[1;34m
[0m[1;34m	threadid 22757018431616 -> hwthread 115 - OK[0m[1;34m
[0m[1;34m	threadid 22756817105152 -> hwthread 116 - OK[0m[1;34m
[0m[1;34m	threadid 22756615778688 -> hwthread 117 - OK[0m[1;34m
[0m[1;34m	threadid 22756414452224 -> hwthread 118 - OK[0m[1;34m
[0m[1;34m	threadid 22756213125760 -> hwthread 119 - OK[0m[1;34m
[0m[1;34m	threadid 22756011799296 -> hwthread 120 - OK[0m[1;34m
[0m[1;34m	threadid 22755810472832 -> hwthread 121 - OK[0m[1;34m
[0m[1;34m	threadid 22755609146368 -> hwthread 122 - OK[0m[1;34m
[0m[1;34m	threadid 22755407819904 -> hwthread 123 - OK[0m[1;34m
[0m[1;34m	threadid 22755206493440 -> hwthread 124 - OK[0m[1;34m
[0m[1;34m	threadid 22755005166976 -> hwthread 125 - OK[0m[1;34m
[0m[1;34m	threadid 22754803840512 -> hwthread 126 - OK[0m[1;34m
[0m[1;34m	threadid 22754602514048 -> hwthread 127 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22767013570304 -> hwthread 64 - OK[0m[1;34m
[0m[1;34m	threadid 22767006979840 -> hwthread 65 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 84, m: 84)                                                                 	 0.596146  	 700       	 6.49562   	 0         	 0.199634  	 32.5375   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4200, cols: 84, reductionFactor: 37, colBlockingSize: 12)                  	 0.364194  	 600       	 100.286   	 0         	 4.74283   	 21.1447   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 84, r: 84, r2: 4200, leftOrthog: 0)        	 0.13593   	 600       	 261.623   	 0         	 37.873    	 6.90789   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4200, cols: 34, reductionFactor: 37, colBlockingSize: 12)                  	 0.0862958 	 700       	 80.8961   	 0         	 9.34175   	 8.65963   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 84, n: 50, r: 84, r2: 84)             	 0.0655626 	 600       	 542.416   	 0         	 52.1753   	 10.396    
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 84, reductionFactor: 37, colBlockingSize: 12)                  	 0.0585043 	 100       	 61.9331   	 0         	 2.96807   	 20.8665   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 4200, Xcols: 34, r: 34, streamingCols: 0)                   	 0.0504729 	 700       	 67.3359   	 0         	 31.7516   	 2.12071   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 84, Qr2: 34)       	 0.0455492 	 700       	 0         	 0         	 76.2991   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 84)                                                                 	 0.0454297 	 100       	 4.06489   	 0         	 0.192826  	 21.0807   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                 	 0.0366354 	 100       	 3.18453   	 0         	 0.164868  	 19.3157   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 34, k: 2500)   	 0.0298513 	 800       	 227.796   	 0         	 45.3877   	 5.01889   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4200, cols: 50, reductionFactor: 37, colBlockingSize: 12)                  	 0.0251128 	 100       	 85.8829   	 0         	 6.76946   	 12.6868   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 2500, m: 34, k: 50)	 0.0200009 	 800       	 339.985   	 0         	 67.7409   	 5.01889   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 34, m: 34)                                                                  	 0.0191694 	 900       	 2.46036   	 0         	 1.31535   	 1.8705    
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 4200, m: 34)                                                                       	 0.0163984 	 700       	 0         	 0         	 97.5313   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 4200, leftOrthog: 0)        	 0.0131194 	 100       	 160.069   	 0         	 38.7214   	 4.13386   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 1700, k: 34) 	 0.011749  	 800       	 393.565   	 0         	 78.7131   	 5         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 34, reductionFactor: 37, colBlockingSize: 12)                  	 0.0117287 	 100       	 50.6127   	 0         	 5.87659   	 8.6126    
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 4200, m: 34)                                                              	 0.0117034 	 700       	 0         	 0         	 136.658   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 84, r: 84, r2: 2500, leftOrthog: 0)        	 0.0116009 	 100       	 304.114   	 0         	 44.418    	 6.84664   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 34, n: 50, r2: 34)                                                                                         	 0.0114039 	 800       	 0         	 0         	 64.8761   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 34, n: 50, r2: 34)                   	 0.00998384	 700       	 0         	 0         	 160.195   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 84, n: 50, r: 84, r2: 50)             	 0.00887758	 100       	 397.405   	 0         	 51.095    	 7.77778   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 34, m: 1700, k: 34) 	 0.00832391	 700       	 330.527   	 0         	 78.5488   	 4.20792   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r: 84, r2: 84)             	 0.00725633	 100       	 486.196   	 0         	 47.0823   	 10.3265   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 84, reductionFactor: 37, colBlockingSize: 12)                    	 0.00619491	 100       	 11.6978   	 0         	 1.45358   	 8.0476    
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 34, r: 34, streamingCols: 0)                   	 0.00520188	 100       	 55.5568   	 0         	 26.2333   	 2.1178    
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 50, Qr2: 34)       	 0.00367848	 100       	 0         	 0         	 91.342    	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 2500, m: 34)                                                                       	 0.00328067	 100       	 0         	 0         	 41.455    	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 0, n: 50, r2: 34)                    	 0.0029421 	 100       	 0         	 0         	 46.2255   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 34)                                                              	 0.00280042	 100       	 0         	 0         	 48.5642   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 84, r: 50, r2: 50, leftOrthog: 0)          	 0.00181893	 100       	 23.0905   	 0         	 7.74081   	 2.98295   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 34, reductionFactor: 37, colBlockingSize: 12)                    	 0.00181256	 100       	 6.5501    	 0         	 1.26054   	 5.19627   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                   	 0.000877066	 100       	 0.570083  	 0         	 2.28033   	 0.25      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 34)                                                                                          	 0.000821338	 200       	 0         	 0         	 6.62334   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 34, n: 50, r2: 1)                                                                                          	 0.000784755	 200       	 0         	 0         	 6.9321    	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 34, k: 50)     	 0.000755276	 100       	 22.5083   	 0         	 6.24937   	 3.60169   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 50, r2: 50)              	 0.000741292	 100       	 33.7249   	 0         	 8.09398   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 50, m: 34, k: 50)  	 0.000677109	 100       	 25.1067   	 0         	 6.97081   	 3.60169   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 50, k: 34)   	 0.000571375	 100       	 29.7528   	 0         	 8.26077   	 3.60169   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 34, m: 34, fromLeft: 0)                	 0.000542596	 800       	 0         	 0         	 27.2704   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                          	 0.000501908	 100       	 0         	 0         	 7.96959   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 34, n: 50, r2: 1)                    	 0.000485919	 100       	 0         	 0         	 13.8295   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 1, r1low: 0, n: 50, r2: 34)                     	 0.000466807	 100       	 0         	 0         	 5.82682   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 34, m: 50, k: 34)   	 0.000447261	 100       	 25.8462   	 0         	 8.14916   	 3.17164   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                            	 0.000431498	 100       	 1.15875   	 0         	 13.905    	 0.0833333 
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 1, Xr2: 50, Qr1: 1, Qr2: 0)          	 0.000417533	 100       	 0         	 0         	 9.58008   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                 	 0.000409421	 100       	 0.610618  	 0         	 9.76989   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 34)                                                                	 0.000402396	 100       	 0         	 0         	 6.75951   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 34, n: 50, r2: 1)                                                                                 	 0.000347632	 100       	 0.489023  	 0         	 7.82437   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                 	 0.000326324	 100       	 0.76611   	 0         	 12.2578   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 0, m: 1700, k: 34)  	 5.961e-06 	 100       	 0         	 0         	 7757.09   	 0         
Timing statistics:
function                                                                                                                                                                                      	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                        	 2.19      	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_normalized(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                     	 2.18996   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::rightNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                            	 1.82882   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::rightNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                        	 1.82753   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double]	 1.73213   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                               	 0.678211  	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                  	 0.553843  	 1800      
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                            	 0.454601  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_leftOrthogonalize(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&) [with T = double]                                   	 0.361069  	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]           	 0.217256  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                	 0.162469  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.100307  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                           	 0.0824378 	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                    	 0.0556748 	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                                       	 0.0496452 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double]          	 0.0306065 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double]        	 0.0210975 	 1800      
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double]       	 0.020678  	 900       
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                       	 0.0196791 	 800       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.0191694 	 900       
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                              	 0.0149062 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                        	 0.0138787 	 1000      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                	 0.0135119 	 1300      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                	 0.00348438	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                              	 0.00292393	 6300      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                         	 0.00120242	 5200      
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                       	 0.00108338	 300       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                         	 0.000877066	 100       
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                           	 0.000542596	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                                                  	 0.000431498	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
orthoX: L, orthoY: L
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 64
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->65  [0m[1;34m1->66  [0m[1;34m2->67  [0m[1;34m3->68  [0m[1;34m4->69  [0m[1;34m5->70  [0m[1;34m6->71  [0m[1;34m7->72  [0m[1;34m8->73  [0m[1;34m9->74  [0m[1;34m10->75  [0m[1;34m11->76  [0m[1;34m12->77  [0m[1;34m13->78  [0m[1;34m14->79  [0m[1;34m15->80  [0m[1;34m16->81  [0m[1;34m17->82  [0m[1;34m18->83  [0m[1;34m19->84  [0m[1;34m20->85  [0m[1;34m21->86  [0m[1;34m22->87  [0m[1;34m23->88  [0m[1;34m24->89  [0m[1;34m25->90  [0m[1;34m26->91  [0m[1;34m27->92  [0m[1;34m28->93  [0m[1;34m29->94  [0m[1;34m30->95  [0m[1;34m31->96  [0m[1;34m32->97  [0m[1;34m33->98  [0m[1;34m34->99  [0m[1;34m35->100  [0m[1;34m36->101  [0m[1;34m37->102  [0m[1;34m38->103  [0m[1;34m39->104  [0m[1;34m40->105  [0m[1;34m41->106  [0m[1;34m42->107  [0m[1;34m43->108  [0m[1;34m44->109  [0m[1;34m45->110  [0m[1;34m46->111  [0m[1;34m47->112  [0m[1;34m48->113  [0m[1;34m49->114  [0m[1;34m50->115  [0m[1;34m51->116  [0m[1;34m52->117  [0m[1;34m53->118  [0m[1;34m54->119  [0m[1;34m55->120  [0m[1;34m56->121  [0m[1;34m57->122  [0m[1;34m58->123  [0m[1;34m59->124  [0m[1;34m60->125  [0m[1;34m61->126  [0m[1;34m62->127  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23134204970880 -> hwthread 65 - OK[0m[1;34m
[0m[1;34m	threadid 23133968918528 -> hwthread 66 - OK[0m[1;34m
[0m[1;34m	threadid 23133767592064 -> hwthread 67 - OK[0m[1;34m
[0m[1;34m	threadid 23133566265600 -> hwthread 68 - OK[0m[1;34m
[0m[1;34m	threadid 23133364939136 -> hwthread 69 - OK[0m[1;34m
[0m[1;34m	threadid 23133163612672 -> hwthread 70 - OK[0m[1;34m
[0m[1;34m	threadid 23132962286208 -> hwthread 71 - OK[0m[1;34m
[0m[1;34m	threadid 23132760959744 -> hwthread 72 - OK[0m[1;34m
[0m[1;34m	threadid 23132559633280 -> hwthread 73 - OK[0m[1;34m
[0m[1;34m	threadid 23132358306816 -> hwthread 74 - OK[0m[1;34m
[0m[1;34m	threadid 23132156980352 -> hwthread 75 - OK[0m[1;34m
[0m[1;34m	threadid 23131955653888 -> hwthread 76 - OK[0m[1;34m
[0m[1;34m	threadid 23131754327424 -> hwthread 77 - OK[0m[1;34m
[0m[1;34m	threadid 23131553000960 -> hwthread 78 - OK[0m[1;34m
[0m[1;34m	threadid 23131351674496 -> hwthread 79 - OK[0m[1;34m
[0m[1;34m	threadid 23131150348032 -> hwthread 80 - OK[0m[1;34m
[0m[1;34m	threadid 23130949021568 -> hwthread 81 - OK[0m[1;34m
[0m[1;34m	threadid 23130747695104 -> hwthread 82 - OK[0m[1;34m
[0m[1;34m	threadid 23130546368640 -> hwthread 83 - OK[0m[1;34m
[0m[1;34m	threadid 23130345042176 -> hwthread 84 - OK[0m[1;34m
[0m[1;34m	threadid 23130143715712 -> hwthread 85 - OK[0m[1;34m
[0m[1;34m	threadid 23129942389248 -> hwthread 86 - OK[0m[1;34m
[0m[1;34m	threadid 23129741062784 -> hwthread 87 - OK[0m[1;34m
[0m[1;34m	threadid 23129539736320 -> hwthread 88 - OK[0m[1;34m
[0m[1;34m	threadid 23129338409856 -> hwthread 89 - OK[0m[1;34m
[0m[1;34m	threadid 23129137083392 -> hwthread 90 - OK[0m[1;34m
[0m[1;34m	threadid 23128935756928 -> hwthread 91 - OK[0m[1;34m
[0m[1;34m	threadid 23128734430464 -> hwthread 92 - OK[0m[1;34m
[0m[1;34m	threadid 23128533104000 -> hwthread 93 - OK[0m[1;34m
[0m[1;34m	threadid 23128331777536 -> hwthread 94 - OK[0m[1;34m
[0m[1;34m	threadid 23128130451072 -> hwthread 95 - OK[0m[1;34m
[0m[1;34m	threadid 23127929124608 -> hwthread 96 - OK[0m[1;34m
[0m[1;34m	threadid 23127727794048 -> hwthread 97 - OK[0m[1;34m
[0m[1;34m	threadid 23127526467584 -> hwthread 98 - OK[0m[1;34m
[0m[1;34m	threadid 23127325141120 -> hwthread 99 - OK[0m[1;34m
[0m[1;34m	threadid 23127123814656 -> hwthread 100 - OK[0m[1;34m
[0m[1;34m	threadid 23126922488192 -> hwthread 101 - OK[0m[1;34m
[0m[1;34m	threadid 23126721161728 -> hwthread 102 - OK[0m[1;34m
[0m[1;34m	threadid 23126519835264 -> hwthread 103 - OK[0m[1;34m
[0m[1;34m	threadid 23126318508800 -> hwthread 104 - OK[0m[1;34m
[0m[1;34m	threadid 23126117182336 -> hwthread 105 - OK[0m[1;34m
[0m[1;34m	threadid 23125915855872 -> hwthread 106 - OK[0m[1;34m
[0m[1;34m	threadid 23125714529408 -> hwthread 107 - OK[0m[1;34m
[0m[1;34m	threadid 23125513202944 -> hwthread 108 - OK[0m[1;34m
[0m[1;34m	threadid 23125311876480 -> hwthread 109 - OK[0m[1;34m
[0m[1;34m	threadid 23125110550016 -> hwthread 110 - OK[0m[1;34m
[0m[1;34m	threadid 23124909223552 -> hwthread 111 - OK[0m[1;34m
[0m[1;34m	threadid 23124707897088 -> hwthread 112 - OK[0m[1;34m
[0m[1;34m	threadid 23124506570624 -> hwthread 113 - OK[0m[1;34m
[0m[1;34m	threadid 23124305244160 -> hwthread 114 - OK[0m[1;34m
[0m[1;34m	threadid 23124103917696 -> hwthread 115 - OK[0m[1;34m
[0m[1;34m	threadid 23123902591232 -> hwthread 116 - OK[0m[1;34m
[0m[1;34m	threadid 23123701264768 -> hwthread 117 - OK[0m[1;34m
[0m[1;34m	threadid 23123499938304 -> hwthread 118 - OK[0m[1;34m
[0m[1;34m	threadid 23123298611840 -> hwthread 119 - OK[0m[1;34m
[0m[1;34m	threadid 23123097285376 -> hwthread 120 - OK[0m[1;34m
[0m[1;34m	threadid 23122895958912 -> hwthread 121 - OK[0m[1;34m
[0m[1;34m	threadid 23122694632448 -> hwthread 122 - OK[0m[1;34m
[0m[1;34m	threadid 23122493305984 -> hwthread 123 - OK[0m[1;34m
[0m[1;34m	threadid 23122291979520 -> hwthread 124 - OK[0m[1;34m
[0m[1;34m	threadid 23122090653056 -> hwthread 125 - OK[0m[1;34m
[0m[1;34m	threadid 23121889326592 -> hwthread 126 - OK[0m[1;34m
[0m[1;34m	threadid 23121688000128 -> hwthread 127 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23134099310336 -> hwthread 64 - OK[0m[1;34m
[0m[1;34m	threadid 23134092719872 -> hwthread 65 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 85, m: 85)                                                                 	 0.648514  	 700       	 6.18689   	 0         	 0.1879    	 32.9264   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4250, cols: 85, reductionFactor: 37, colBlockingSize: 12)                  	 0.36656   	 600       	 103.239   	 0         	 4.82507   	 21.3964   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 85, r: 85, r2: 4250, leftOrthog: 0)        	 0.140067  	 600       	 263.07    	 0         	 37.6345   	 6.99013   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4250, cols: 35, reductionFactor: 37, colBlockingSize: 12)                  	 0.0895036 	 700       	 83.6362   	 0         	 9.38353   	 8.91308   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 85, n: 50, r: 85, r2: 85)             	 0.0717383 	 600       	 513.638   	 0         	 48.8258   	 10.5198   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 85, reductionFactor: 37, colBlockingSize: 12)                  	 0.0586778 	 100       	 63.2289   	 0         	 2.99568   	 21.1067   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 4250, Xcols: 35, r: 35, streamingCols: 0)                   	 0.053185  	 700       	 68.5226   	 0         	 31.3891   	 2.18301   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 85)                                                                 	 0.0461355 	 100       	 4.04606   	 0         	 0.19161   	 21.1161   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 85, Qr2: 35)       	 0.0454552 	 700       	 0         	 0         	 78.2309   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                 	 0.036418  	 100       	 3.20354   	 0         	 0.165852  	 19.3157   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 35, k: 2500)   	 0.0298507 	 800       	 234.5     	 0         	 45.9352   	 5.10502   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4250, cols: 50, reductionFactor: 37, colBlockingSize: 12)                  	 0.0247514 	 100       	 88.174    	 0         	 6.9491    	 12.6886   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 35, m: 35)                                                                  	 0.0206416 	 900       	 2.49251   	 0         	 1.29409   	 1.92608   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 2500, m: 35, k: 50)	 0.0202378 	 800       	 345.887   	 0         	 67.7543   	 5.10502   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 4250, m: 35)                                                                       	 0.0177003 	 700       	 0         	 0         	 94.1226   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 4250, leftOrthog: 0)        	 0.0149907 	 100       	 141.754   	 0         	 34.2879   	 4.13424   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 85, r: 85, r2: 2500, leftOrthog: 0)        	 0.0124066 	 100       	 291.176   	 0         	 42.039    	 6.92634   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 35, reductionFactor: 37, colBlockingSize: 12)                  	 0.0118569 	 100       	 53.054    	 0         	 5.98641   	 8.86241   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 35, n: 50, r2: 35)                                                                                         	 0.0114751 	 800       	 0         	 0         	 68.3221   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 4250, m: 35)                                                              	 0.0111891 	 700       	 0         	 0         	 148.895   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 1750, k: 35) 	 0.0108264 	 800       	 452.599   	 0         	 88.968    	 5.08721   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 35, n: 50, r2: 35)                   	 0.0104781 	 700       	 0         	 0         	 158.999   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 85, n: 50, r: 85, r2: 50)             	 0.00915998	 100       	 394.378   	 0         	 50.4804   	 7.8125    
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 35, m: 1750, k: 35) 	 0.00840916	 700       	 356.903   	 0         	 82.3935   	 4.33168   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r: 85, r2: 85)             	 0.00717082	 100       	 503.778   	 0         	 48.2204   	 10.4474   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 85, reductionFactor: 37, colBlockingSize: 12)                    	 0.00585706	 100       	 12.6689   	 0         	 1.56734   	 8.08308   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 35, r: 35, streamingCols: 0)                   	 0.00539761	 100       	 56.7381   	 0         	 26.0282   	 2.17987   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 50, Qr2: 35)       	 0.0036267 	 100       	 0         	 0         	 93.7492   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 2500, m: 35)                                                                       	 0.0033023 	 100       	 0         	 0         	 42.3947   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 0, n: 50, r2: 35)                    	 0.00263721	 100       	 0         	 0         	 53.0864   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 35)                                                              	 0.00246654	 100       	 0         	 0         	 56.7598   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 85, r: 50, r2: 50, leftOrthog: 0)          	 0.00189883	 100       	 22.3822   	 0         	 7.47829   	 2.99296   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 35, reductionFactor: 37, colBlockingSize: 12)                    	 0.00170412	 100       	 7.38274   	 0         	 1.39662   	 5.28617   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 35)                                                                                          	 0.000807529	 200       	 0         	 0         	 6.93474   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 35, k: 50)     	 0.000805846	 100       	 21.7163   	 0         	 5.95647   	 3.64583   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                   	 0.000804474	 100       	 0.621524  	 0         	 2.4861    	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 50, r2: 50)              	 0.000774269	 100       	 32.2885   	 0         	 7.74924   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 35, n: 50, r2: 1)                                                                                          	 0.0007489 	 200       	 0         	 0         	 7.47763   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 35, m: 35, fromLeft: 0)                	 0.000676023	 800       	 0         	 0         	 23.1945   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 50, m: 35, k: 50)  	 0.000660259	 100       	 26.5048   	 0         	 7.26987   	 3.64583   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 50, k: 35)   	 0.000553041	 100       	 31.6432   	 0         	 8.67928   	 3.64583   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                          	 0.000534939	 100       	 0         	 0         	 7.47749   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 35, m: 50, k: 35)   	 0.00050449	 100       	 24.2819   	 0         	 7.49272   	 3.24074   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 1, r1low: 0, n: 50, r2: 35)                     	 0.000497118	 100       	 0         	 0         	 5.63247   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 35, n: 50, r2: 1)                    	 0.000482851	 100       	 0         	 0         	 14.083    	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 1, Xr2: 50, Qr1: 1, Qr2: 0)          	 0.00042903	 100       	 0         	 0         	 9.32336   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 35)                                                                	 0.000421084	 100       	 0         	 0         	 6.6495    	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                            	 0.000410072	 100       	 1.2193    	 0         	 14.6316   	 0.0833333 
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                 	 0.000392285	 100       	 0.637292  	 0         	 10.1967   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                 	 0.000358884	 100       	 0.696604  	 0         	 11.1457   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 35, n: 50, r2: 1)                                                                                 	 0.000344471	 100       	 0.508025  	 0         	 8.12841   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 0, m: 1750, k: 35)  	 5.342e-06 	 100       	 0         	 0         	 9172.59   	 0         
Timing statistics:
function                                                                                                                                                                                      	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                        	 2.30868   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_normalized(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                     	 2.30862   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::rightNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                            	 1.9377    	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::rightNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                        	 1.93644   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double]	 1.83476   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                               	 0.731068  	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                  	 0.558911  	 1800      
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                            	 0.456523  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_leftOrthogonalize(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&) [with T = double]                                   	 0.370859  	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]           	 0.22699   	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                	 0.169363  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.103552  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                           	 0.0888434 	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                    	 0.0585826 	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                                       	 0.0495109 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double]          	 0.0306566 	 900       
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                       	 0.0210026 	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double]       	 0.0208981 	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.0206416 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double]        	 0.0202984 	 1800      
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                        	 0.0140953 	 1000      
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                              	 0.0140767 	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                	 0.0135664 	 1300      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                	 0.00499099	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                              	 0.00319935	 6300      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                         	 0.0020234 	 5200      
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                       	 0.00109564	 300       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                         	 0.000804474	 100       
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                           	 0.000676023	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                                                  	 0.000410072	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
orthoX: L, orthoY: L
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 64
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->65  [0m[1;34m1->66  [0m[1;34m2->67  [0m[1;34m3->68  [0m[1;34m4->69  [0m[1;34m5->70  [0m[1;34m6->71  [0m[1;34m7->72  [0m[1;34m8->73  [0m[1;34m9->74  [0m[1;34m10->75  [0m[1;34m11->76  [0m[1;34m12->77  [0m[1;34m13->78  [0m[1;34m14->79  [0m[1;34m15->80  [0m[1;34m16->81  [0m[1;34m17->82  [0m[1;34m18->83  [0m[1;34m19->84  [0m[1;34m20->85  [0m[1;34m21->86  [0m[1;34m22->87  [0m[1;34m23->88  [0m[1;34m24->89  [0m[1;34m25->90  [0m[1;34m26->91  [0m[1;34m27->92  [0m[1;34m28->93  [0m[1;34m29->94  [0m[1;34m30->95  [0m[1;34m31->96  [0m[1;34m32->97  [0m[1;34m33->98  [0m[1;34m34->99  [0m[1;34m35->100  [0m[1;34m36->101  [0m[1;34m37->102  [0m[1;34m38->103  [0m[1;34m39->104  [0m[1;34m40->105  [0m[1;34m41->106  [0m[1;34m42->107  [0m[1;34m43->108  [0m[1;34m44->109  [0m[1;34m45->110  [0m[1;34m46->111  [0m[1;34m47->112  [0m[1;34m48->113  [0m[1;34m49->114  [0m[1;34m50->115  [0m[1;34m51->116  [0m[1;34m52->117  [0m[1;34m53->118  [0m[1;34m54->119  [0m[1;34m55->120  [0m[1;34m56->121  [0m[1;34m57->122  [0m[1;34m58->123  [0m[1;34m59->124  [0m[1;34m60->125  [0m[1;34m61->126  [0m[1;34m62->127  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23259858249600 -> hwthread 65 - OK[0m[1;34m
[0m[1;34m	threadid 23259663820800 -> hwthread 66 - OK[0m[1;34m
[0m[1;34m	threadid 23259462494336 -> hwthread 67 - OK[0m[1;34m
[0m[1;34m	threadid 23259261167872 -> hwthread 68 - OK[0m[1;34m
[0m[1;34m	threadid 23259059841408 -> hwthread 69 - OK[0m[1;34m
[0m[1;34m	threadid 23258858514944 -> hwthread 70 - OK[0m[1;34m
[0m[1;34m	threadid 23258657188480 -> hwthread 71 - OK[0m[1;34m
[0m[1;34m	threadid 23258455862016 -> hwthread 72 - OK[0m[1;34m
[0m[1;34m	threadid 23258254535552 -> hwthread 73 - OK[0m[1;34m
[0m[1;34m	threadid 23258053209088 -> hwthread 74 - OK[0m[1;34m
[0m[1;34m	threadid 23257851882624 -> hwthread 75 - OK[0m[1;34m
[0m[1;34m	threadid 23257650556160 -> hwthread 76 - OK[0m[1;34m
[0m[1;34m	threadid 23257449229696 -> hwthread 77 - OK[0m[1;34m
[0m[1;34m	threadid 23257247903232 -> hwthread 78 - OK[0m[1;34m
[0m[1;34m	threadid 23257046576768 -> hwthread 79 - OK[0m[1;34m
[0m[1;34m	threadid 23256845250304 -> hwthread 80 - OK[0m[1;34m
[0m[1;34m	threadid 23256643923840 -> hwthread 81 - OK[0m[1;34m
[0m[1;34m	threadid 23256442597376 -> hwthread 82 - OK[0m[1;34m
[0m[1;34m	threadid 23256241270912 -> hwthread 83 - OK[0m[1;34m
[0m[1;34m	threadid 23256039944448 -> hwthread 84 - OK[0m[1;34m
[0m[1;34m	threadid 23255838617984 -> hwthread 85 - OK[0m[1;34m
[0m[1;34m	threadid 23255637291520 -> hwthread 86 - OK[0m[1;34m
[0m[1;34m	threadid 23255435965056 -> hwthread 87 - OK[0m[1;34m
[0m[1;34m	threadid 23255234638592 -> hwthread 88 - OK[0m[1;34m
[0m[1;34m	threadid 23255033312128 -> hwthread 89 - OK[0m[1;34m
[0m[1;34m	threadid 23254831985664 -> hwthread 90 - OK[0m[1;34m
[0m[1;34m	threadid 23254630659200 -> hwthread 91 - OK[0m[1;34m
[0m[1;34m	threadid 23254429332736 -> hwthread 92 - OK[0m[1;34m
[0m[1;34m	threadid 23254228006272 -> hwthread 93 - OK[0m[1;34m
[0m[1;34m	threadid 23254026679808 -> hwthread 94 - OK[0m[1;34m
[0m[1;34m	threadid 23253825353344 -> hwthread 95 - OK[0m[1;34m
[0m[1;34m	threadid 23253624026880 -> hwthread 96 - OK[0m[1;34m
[0m[1;34m	threadid 23253422696320 -> hwthread 97 - OK[0m[1;34m
[0m[1;34m	threadid 23253221369856 -> hwthread 98 - OK[0m[1;34m
[0m[1;34m	threadid 23253020043392 -> hwthread 99 - OK[0m[1;34m
[0m[1;34m	threadid 23252818716928 -> hwthread 100 - OK[0m[1;34m
[0m[1;34m	threadid 23252617390464 -> hwthread 101 - OK[0m[1;34m
[0m[1;34m	threadid 23252416064000 -> hwthread 102 - OK[0m[1;34m
[0m[1;34m	threadid 23252214737536 -> hwthread 103 - OK[0m[1;34m
[0m[1;34m	threadid 23252013411072 -> hwthread 104 - OK[0m[1;34m
[0m[1;34m	threadid 23251812084608 -> hwthread 105 - OK[0m[1;34m
[0m[1;34m	threadid 23251610758144 -> hwthread 106 - OK[0m[1;34m
[0m[1;34m	threadid 23251409431680 -> hwthread 107 - OK[0m[1;34m
[0m[1;34m	threadid 23251208105216 -> hwthread 108 - OK[0m[1;34m
[0m[1;34m	threadid 23251006778752 -> hwthread 109 - OK[0m[1;34m
[0m[1;34m	threadid 23250805452288 -> hwthread 110 - OK[0m[1;34m
[0m[1;34m	threadid 23250604125824 -> hwthread 111 - OK[0m[1;34m
[0m[1;34m	threadid 23250402799360 -> hwthread 112 - OK[0m[1;34m
[0m[1;34m	threadid 23250201472896 -> hwthread 113 - OK[0m[1;34m
[0m[1;34m	threadid 23250000146432 -> hwthread 114 - OK[0m[1;34m
[0m[1;34m	threadid 23249798819968 -> hwthread 115 - OK[0m[1;34m
[0m[1;34m	threadid 23249597493504 -> hwthread 116 - OK[0m[1;34m
[0m[1;34m	threadid 23249396167040 -> hwthread 117 - OK[0m[1;34m
[0m[1;34m	threadid 23249194840576 -> hwthread 118 - OK[0m[1;34m
[0m[1;34m	threadid 23248993514112 -> hwthread 119 - OK[0m[1;34m
[0m[1;34m	threadid 23248792187648 -> hwthread 120 - OK[0m[1;34m
[0m[1;34m	threadid 23248590861184 -> hwthread 121 - OK[0m[1;34m
[0m[1;34m	threadid 23248389534720 -> hwthread 122 - OK[0m[1;34m
[0m[1;34m	threadid 23248188208256 -> hwthread 123 - OK[0m[1;34m
[0m[1;34m	threadid 23247986881792 -> hwthread 124 - OK[0m[1;34m
[0m[1;34m	threadid 23247785555328 -> hwthread 125 - OK[0m[1;34m
[0m[1;34m	threadid 23247584228864 -> hwthread 126 - OK[0m[1;34m
[0m[1;34m	threadid 23247382902400 -> hwthread 127 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23259752589056 -> hwthread 64 - OK[0m[1;34m
[0m[1;34m	threadid 23259745998592 -> hwthread 65 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 86, m: 86)                                                                 	 0.651496  	 700       	 6.3785    	 0         	 0.191458  	 33.3153   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4300, cols: 86, reductionFactor: 37, colBlockingSize: 12)                  	 0.374017  	 600       	 104.794   	 0         	 4.84079   	 21.6481   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 86, r: 86, r2: 4300, leftOrthog: 0)        	 0.14271   	 600       	 267.42    	 0         	 37.8119   	 7.07237   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4300, cols: 36, reductionFactor: 37, colBlockingSize: 12)                  	 0.0965173 	 700       	 83.0191   	 0         	 9.05679   	 9.1665    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 86, n: 50, r: 86, r2: 86)             	 0.0657954 	 600       	 580.031   	 0         	 54.4959   	 10.6436   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 86, reductionFactor: 37, colBlockingSize: 12)                  	 0.05985   	 100       	 63.4577   	 0         	 2.97271   	 21.3468   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 4300, Xcols: 36, r: 36, streamingCols: 0)                   	 0.0559989 	 700       	 69.6614   	 0         	 31.0254   	 2.2453    
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 86, Qr2: 36)       	 0.0482631 	 700       	 0         	 0         	 75.3735   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 86)                                                                 	 0.0458846 	 100       	 4.11177   	 0         	 0.194401  	 21.151    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                 	 0.0367637 	 100       	 3.17342   	 0         	 0.164292  	 19.3157   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 36, k: 2500)   	 0.0311015 	 800       	 231.5     	 0         	 44.6126   	 5.18911   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4300, cols: 50, reductionFactor: 37, colBlockingSize: 12)                  	 0.0240324 	 100       	 91.8806   	 0         	 7.24024   	 12.6903   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 2500, m: 36, k: 50)	 0.0204854 	 800       	 351.47    	 0         	 67.7321   	 5.18911   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 36, m: 36)                                                                  	 0.020182  	 900       	 2.77412   	 0         	 1.3999    	 1.98165   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 4300, m: 36)                                                                       	 0.0176057 	 700       	 0         	 0         	 98.4772   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 4300, leftOrthog: 0)        	 0.0149048 	 100       	 144.249   	 0         	 34.8882   	 4.13462   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 36, reductionFactor: 37, colBlockingSize: 12)                  	 0.012815  	 100       	 51.9323   	 0         	 5.69931   	 9.11203   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 86, r: 86, r2: 2500, leftOrthog: 0)        	 0.012788  	 100       	 289.178   	 0         	 41.2758   	 7.006     
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 4300, m: 36)                                                              	 0.0121499 	 700       	 0         	 0         	 142.698   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 36, n: 50, r2: 36)                                                                                         	 0.0119912 	 800       	 0         	 0         	 69.1709   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 1800, k: 36) 	 0.0112412 	 800       	 461.16    	 0         	 89.1576   	 5.17241   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 36, n: 50, r2: 36)                   	 0.010555  	 700       	 0         	 0         	 164.26    	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 86, n: 50, r: 86, r2: 50)             	 0.00907793	 100       	 407.362   	 0         	 51.9149   	 7.84672   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 36, m: 1800, k: 36) 	 0.00834841	 700       	 391.203   	 0         	 87.8033   	 4.45545   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r: 86, r2: 86)             	 0.00736667	 100       	 501.991   	 0         	 47.5      	 10.5682   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 86, reductionFactor: 37, colBlockingSize: 12)                    	 0.0060727 	 100       	 12.5083   	 0         	 1.5408    	 8.11804   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 36, r: 36, streamingCols: 0)                   	 0.00561365	 100       	 57.7164   	 0         	 25.7441   	 2.24193   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 50, Qr2: 36)       	 0.00376186	 100       	 0         	 0         	 91.4442   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 0, n: 50, r2: 36)                    	 0.0031706 	 100       	 0         	 0         	 45.4173   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 2500, m: 36)                                                                       	 0.00307747	 100       	 0         	 0         	 46.7917   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 36)                                                              	 0.0025733 	 100       	 0         	 0         	 55.9594   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 86, r: 50, r2: 50, leftOrthog: 0)          	 0.00191541	 100       	 22.4495   	 0         	 7.47622   	 3.00279   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 36, reductionFactor: 37, colBlockingSize: 12)                    	 0.00191476	 100       	 6.95139   	 0         	 1.29353   	 5.37398   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 36)                                                                                          	 0.000838525	 200       	 0         	 0         	 6.8692    	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                   	 0.000825345	 100       	 0.605807  	 0         	 2.42323   	 0.25      
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 36, k: 50)     	 0.000806153	 100       	 22.3283   	 0         	 6.05344   	 3.68852   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 36, n: 50, r2: 1)                                                                                          	 0.000758357	 200       	 0         	 0         	 7.59537   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 50, r2: 50)              	 0.000720168	 100       	 34.7141   	 0         	 8.33139   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 50, m: 36, k: 50)  	 0.000644537	 100       	 27.927    	 0         	 7.57133   	 3.68852   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 36, m: 50, k: 36)   	 0.000621396	 100       	 20.8563   	 0         	 6.30323   	 3.30882   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 50, k: 36)   	 0.000545333	 100       	 33.0074   	 0         	 8.94866   	 3.68852   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 36, n: 50, r2: 1)                    	 0.00054503	 100       	 0         	 0         	 12.6232   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                          	 0.000524045	 100       	 0         	 0         	 7.63293   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 1, r1low: 0, n: 50, r2: 36)                     	 0.000483796	 100       	 0         	 0         	 5.95292   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 1, Xr2: 50, Qr1: 1, Qr2: 0)          	 0.000445792	 100       	 0         	 0         	 8.97279   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 36, m: 36, fromLeft: 0)                	 0.000434215	 800       	 0         	 0         	 38.2041   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 36)                                                                	 0.000431682	 100       	 0         	 0         	 6.67158   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                            	 0.000407036	 100       	 1.22839   	 0         	 14.7407   	 0.0833333 
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                 	 0.00038883	 100       	 0.642955  	 0         	 10.2873   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                 	 0.000354616	 100       	 0.704988  	 0         	 11.2798   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 36, n: 50, r2: 1)                                                                                 	 0.000341939	 100       	 0.52641   	 0         	 8.42255   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 0, m: 1800, k: 36)  	 6.96e-06  	 100       	 0         	 0         	 7448.28   	 0         
Timing statistics:
function                                                                                                                                                                                      	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                        	 2.32301   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_normalized(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                     	 2.32295   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::rightNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                            	 1.93642   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::rightNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                        	 1.93515   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double]	 1.83599   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                               	 0.734144  	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                  	 0.57522   	 1800      
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                            	 0.464599  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_leftOrthogonalize(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&) [with T = double]                                   	 0.386466  	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]           	 0.239113  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                	 0.172318  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.111715  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                           	 0.0829601 	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                    	 0.0616125 	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                                       	 0.0524708 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double]          	 0.0319077 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double]       	 0.0211299 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double]        	 0.0207633 	 1800      
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                       	 0.0206832 	 800       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.020182  	 900       
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                              	 0.0151549 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                        	 0.0147544 	 1000      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                	 0.0141121 	 1300      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                	 0.00529559	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                              	 0.0030422 	 6300      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                         	 0.00115199	 5200      
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                       	 0.00108538	 300       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                         	 0.000825345	 100       
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                           	 0.000434215	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                                                  	 0.000407036	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
orthoX: L, orthoY: L
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 64
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->65  [0m[1;34m1->66  [0m[1;34m2->67  [0m[1;34m3->68  [0m[1;34m4->69  [0m[1;34m5->70  [0m[1;34m6->71  [0m[1;34m7->72  [0m[1;34m8->73  [0m[1;34m9->74  [0m[1;34m10->75  [0m[1;34m11->76  [0m[1;34m12->77  [0m[1;34m13->78  [0m[1;34m14->79  [0m[1;34m15->80  [0m[1;34m16->81  [0m[1;34m17->82  [0m[1;34m18->83  [0m[1;34m19->84  [0m[1;34m20->85  [0m[1;34m21->86  [0m[1;34m22->87  [0m[1;34m23->88  [0m[1;34m24->89  [0m[1;34m25->90  [0m[1;34m26->91  [0m[1;34m27->92  [0m[1;34m28->93  [0m[1;34m29->94  [0m[1;34m30->95  [0m[1;34m31->96  [0m[1;34m32->97  [0m[1;34m33->98  [0m[1;34m34->99  [0m[1;34m35->100  [0m[1;34m36->101  [0m[1;34m37->102  [0m[1;34m38->103  [0m[1;34m39->104  [0m[1;34m40->105  [0m[1;34m41->106  [0m[1;34m42->107  [0m[1;34m43->108  [0m[1;34m44->109  [0m[1;34m45->110  [0m[1;34m46->111  [0m[1;34m47->112  [0m[1;34m48->113  [0m[1;34m49->114  [0m[1;34m50->115  [0m[1;34m51->116  [0m[1;34m52->117  [0m[1;34m53->118  [0m[1;34m54->119  [0m[1;34m55->120  [0m[1;34m56->121  [0m[1;34m57->122  [0m[1;34m58->123  [0m[1;34m59->124  [0m[1;34m60->125  [0m[1;34m61->126  [0m[1;34m62->127  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23295933446016 -> hwthread 65 - OK[0m[1;34m
[0m[1;34m	threadid 23295701280768 -> hwthread 66 - OK[0m[1;34m
[0m[1;34m	threadid 23295499954304 -> hwthread 67 - OK[0m[1;34m
[0m[1;34m	threadid 23295298627840 -> hwthread 68 - OK[0m[1;34m
[0m[1;34m	threadid 23295097301376 -> hwthread 69 - OK[0m[1;34m
[0m[1;34m	threadid 23294895974912 -> hwthread 70 - OK[0m[1;34m
[0m[1;34m	threadid 23294694648448 -> hwthread 71 - OK[0m[1;34m
[0m[1;34m	threadid 23294493321984 -> hwthread 72 - OK[0m[1;34m
[0m[1;34m	threadid 23294291995520 -> hwthread 73 - OK[0m[1;34m
[0m[1;34m	threadid 23294090669056 -> hwthread 74 - OK[0m[1;34m
[0m[1;34m	threadid 23293889342592 -> hwthread 75 - OK[0m[1;34m
[0m[1;34m	threadid 23293688016128 -> hwthread 76 - OK[0m[1;34m
[0m[1;34m	threadid 23293486689664 -> hwthread 77 - OK[0m[1;34m
[0m[1;34m	threadid 23293285363200 -> hwthread 78 - OK[0m[1;34m
[0m[1;34m	threadid 23293084036736 -> hwthread 79 - OK[0m[1;34m
[0m[1;34m	threadid 23292882710272 -> hwthread 80 - OK[0m[1;34m
[0m[1;34m	threadid 23292681383808 -> hwthread 81 - OK[0m[1;34m
[0m[1;34m	threadid 23292480057344 -> hwthread 82 - OK[0m[1;34m
[0m[1;34m	threadid 23292278730880 -> hwthread 83 - OK[0m[1;34m
[0m[1;34m	threadid 23292077404416 -> hwthread 84 - OK[0m[1;34m
[0m[1;34m	threadid 23291876077952 -> hwthread 85 - OK[0m[1;34m
[0m[1;34m	threadid 23291674751488 -> hwthread 86 - OK[0m[1;34m
[0m[1;34m	threadid 23291473425024 -> hwthread 87 - OK[0m[1;34m
[0m[1;34m	threadid 23291272098560 -> hwthread 88 - OK[0m[1;34m
[0m[1;34m	threadid 23291070772096 -> hwthread 89 - OK[0m[1;34m
[0m[1;34m	threadid 23290869445632 -> hwthread 90 - OK[0m[1;34m
[0m[1;34m	threadid 23290668119168 -> hwthread 91 - OK[0m[1;34m
[0m[1;34m	threadid 23290466792704 -> hwthread 92 - OK[0m[1;34m
[0m[1;34m	threadid 23290265466240 -> hwthread 93 - OK[0m[1;34m
[0m[1;34m	threadid 23290064139776 -> hwthread 94 - OK[0m[1;34m
[0m[1;34m	threadid 23289862813312 -> hwthread 95 - OK[0m[1;34m
[0m[1;34m	threadid 23289661486848 -> hwthread 96 - OK[0m[1;34m
[0m[1;34m	threadid 23289460156288 -> hwthread 97 - OK[0m[1;34m
[0m[1;34m	threadid 23289258829824 -> hwthread 98 - OK[0m[1;34m
[0m[1;34m	threadid 23289057503360 -> hwthread 99 - OK[0m[1;34m
[0m[1;34m	threadid 23288856176896 -> hwthread 100 - OK[0m[1;34m
[0m[1;34m	threadid 23288654850432 -> hwthread 101 - OK[0m[1;34m
[0m[1;34m	threadid 23288453523968 -> hwthread 102 - OK[0m[1;34m
[0m[1;34m	threadid 23288252197504 -> hwthread 103 - OK[0m[1;34m
[0m[1;34m	threadid 23288050871040 -> hwthread 104 - OK[0m[1;34m
[0m[1;34m	threadid 23287849544576 -> hwthread 105 - OK[0m[1;34m
[0m[1;34m	threadid 23287648218112 -> hwthread 106 - OK[0m[1;34m
[0m[1;34m	threadid 23287446891648 -> hwthread 107 - OK[0m[1;34m
[0m[1;34m	threadid 23287245565184 -> hwthread 108 - OK[0m[1;34m
[0m[1;34m	threadid 23287044238720 -> hwthread 109 - OK[0m[1;34m
[0m[1;34m	threadid 23286842912256 -> hwthread 110 - OK[0m[1;34m
[0m[1;34m	threadid 23286641585792 -> hwthread 111 - OK[0m[1;34m
[0m[1;34m	threadid 23286440259328 -> hwthread 112 - OK[0m[1;34m
[0m[1;34m	threadid 23286238932864 -> hwthread 113 - OK[0m[1;34m
[0m[1;34m	threadid 23286037606400 -> hwthread 114 - OK[0m[1;34m
[0m[1;34m	threadid 23285836279936 -> hwthread 115 - OK[0m[1;34m
[0m[1;34m	threadid 23285634953472 -> hwthread 116 - OK[0m[1;34m
[0m[1;34m	threadid 23285433627008 -> hwthread 117 - OK[0m[1;34m
[0m[1;34m	threadid 23285232300544 -> hwthread 118 - OK[0m[1;34m
[0m[1;34m	threadid 23285030974080 -> hwthread 119 - OK[0m[1;34m
[0m[1;34m	threadid 23284829647616 -> hwthread 120 - OK[0m[1;34m
[0m[1;34m	threadid 23284628321152 -> hwthread 121 - OK[0m[1;34m
[0m[1;34m	threadid 23284426994688 -> hwthread 122 - OK[0m[1;34m
[0m[1;34m	threadid 23284225668224 -> hwthread 123 - OK[0m[1;34m
[0m[1;34m	threadid 23284024341760 -> hwthread 124 - OK[0m[1;34m
[0m[1;34m	threadid 23283823015296 -> hwthread 125 - OK[0m[1;34m
[0m[1;34m	threadid 23283621688832 -> hwthread 126 - OK[0m[1;34m
[0m[1;34m	threadid 23283420362368 -> hwthread 127 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23295827785472 -> hwthread 64 - OK[0m[1;34m
[0m[1;34m	threadid 23295821195008 -> hwthread 65 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 87, m: 87)                                                                 	 0.6808    	 700       	 6.31936   	 0         	 0.187495  	 33.7042   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4350, cols: 87, reductionFactor: 37, colBlockingSize: 12)                  	 0.383567  	 600       	 105.791   	 0         	 4.83068   	 21.8998   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 87, r: 87, r2: 4350, leftOrthog: 0)        	 0.149089  	 600       	 265.011   	 0         	 37.0407   	 7.15461   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4350, cols: 37, reductionFactor: 37, colBlockingSize: 12)                  	 0.100198  	 700       	 85.4565   	 0         	 9.07193   	 9.41988   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 87, n: 50, r: 87, r2: 87)             	 0.0698888 	 600       	 565.33    	 0         	 52.5042   	 10.7673   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 87, reductionFactor: 37, colBlockingSize: 12)                  	 0.0612921 	 100       	 63.4141   	 0         	 2.93766   	 21.5866   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 4350, Xcols: 37, r: 37, streamingCols: 0)                   	 0.0577948 	 700       	 72.1277   	 0         	 31.2567   	 2.30759   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 87, Qr2: 37)       	 0.0478901 	 700       	 0         	 0         	 77.6913   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 87)                                                                 	 0.046702  	 100       	 4.08262   	 0         	 0.192711  	 21.1852   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                 	 0.0372092 	 100       	 3.13542   	 0         	 0.162325  	 19.3157   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 37, k: 2500)   	 0.0313796 	 800       	 235.822   	 0         	 44.7374   	 5.27126   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4350, cols: 50, reductionFactor: 37, colBlockingSize: 12)                  	 0.02444   	 100       	 91.3988   	 0         	 7.20132   	 12.692    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 37, m: 37)                                                                  	 0.0223844 	 900       	 2.71539   	 0         	 1.33293   	 2.03716   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 2500, m: 37, k: 50)	 0.0209862 	 800       	 352.613   	 0         	 66.8935   	 5.27126   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 4350, m: 37)                                                                       	 0.0179953 	 700       	 0         	 0         	 100.173   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 4350, leftOrthog: 0)        	 0.0140644 	 100       	 154.645   	 0         	 37.3993   	 4.13498   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 37, reductionFactor: 37, colBlockingSize: 12)                  	 0.0134132 	 100       	 52.411    	 0         	 5.5986    	 9.36145   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 4350, m: 37)                                                              	 0.0126165 	 700       	 0         	 0         	 142.88    	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 37, n: 50, r2: 37)                                                                                         	 0.0123842 	 800       	 0         	 0         	 70.7479   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 87, r: 87, r2: 2500, leftOrthog: 0)        	 0.0123725 	 100       	 305.88    	 0         	 43.1692   	 7.08561   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 1850, k: 37) 	 0.0115417 	 800       	 474.453   	 0         	 90.2743   	 5.25568   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 37, n: 50, r2: 37)                   	 0.0102967 	 700       	 0         	 0         	 175.07    	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 87, n: 50, r: 87, r2: 50)             	 0.00930029	 100       	 406.923   	 0         	 51.6371   	 7.88043   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 37, m: 1850, k: 37) 	 0.00903655	 700       	 392.374   	 0         	 85.6861   	 4.57921   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r: 87, r2: 87)             	 0.00745699	 100       	 507.51    	 0         	 47.4796   	 10.689    
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 87, reductionFactor: 37, colBlockingSize: 12)                    	 0.00681804	 100       	 11.4015   	 0         	 1.39852   	 8.1525    
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 37, r: 37, streamingCols: 0)                   	 0.00578063	 100       	 59.2064   	 0         	 25.6975   	 2.30398   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 50, Qr2: 37)       	 0.00372782	 100       	 0         	 0         	 93.3521   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 2500, m: 37)                                                                       	 0.00325218	 100       	 0         	 0         	 45.508    	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 0, n: 50, r2: 37)                    	 0.00312816	 100       	 0         	 0         	 47.3122   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 37)                                                              	 0.00258821	 100       	 0         	 0         	 57.1823   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 37, reductionFactor: 37, colBlockingSize: 12)                    	 0.00205454	 100       	 6.84338   	 0         	 1.25342   	 5.45977   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 87, r: 50, r2: 50, leftOrthog: 0)          	 0.00200646	 100       	 21.68     	 0         	 7.19675   	 3.01247   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 37, k: 50)     	 0.000864173	 100       	 21.4078   	 0         	 5.73959   	 3.72984   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                   	 0.000862219	 100       	 0.579899  	 0         	 2.3196    	 0.25      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 37)                                                                                          	 0.00081971	 200       	 0         	 0         	 7.22207   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 37, n: 50, r2: 1)                                                                                          	 0.000767918	 200       	 0         	 0         	 7.70916   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 50, r2: 50)              	 0.000753903	 100       	 33.1608   	 0         	 7.95858   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 50, m: 37, k: 50)  	 0.00072239	 100       	 25.6094   	 0         	 6.8661    	 3.72984   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 37, m: 37, fromLeft: 0)                	 0.000707684	 800       	 0         	 0         	 24.7613   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 50, k: 37)   	 0.000599022	 100       	 30.8837   	 0         	 8.28016   	 3.72984   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 37, m: 50, k: 37)   	 0.000573326	 100       	 23.8782   	 0         	 7.07311   	 3.37591   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 37, n: 50, r2: 1)                    	 0.000546443	 100       	 0         	 0         	 12.7369   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                          	 0.000519385	 100       	 0         	 0         	 7.70142   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 1, Xr2: 50, Qr1: 1, Qr2: 0)          	 0.000471754	 100       	 0         	 0         	 8.479     	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 1, r1low: 0, n: 50, r2: 37)                     	 0.000468937	 100       	 0         	 0         	 6.31215   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                 	 0.000415892	 100       	 0.601118  	 0         	 9.61788   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                            	 0.00041021	 100       	 1.21889   	 0         	 14.6267   	 0.0833333 
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 37)                                                                	 0.00040937	 100       	 0         	 0         	 7.23062   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 37, n: 50, r2: 1)                                                                                 	 0.000344187	 100       	 0.537499  	 0         	 8.59998   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                 	 0.000321218	 100       	 0.778288  	 0         	 12.4526   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 0, m: 1850, k: 37)  	 6.87e-06  	 100       	 0         	 0         	 7970.89   	 0         
Timing statistics:
function                                                                                                                                                                                      	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                        	 2.42772   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_normalized(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                     	 2.42767   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::rightNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                            	 2.02615   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::rightNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                        	 2.02488   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double]	 1.92338   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                               	 0.764711  	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                  	 0.591783  	 1800      
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                            	 0.47674   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_leftOrthogonalize(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&) [with T = double]                                   	 0.401455  	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]           	 0.248255  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                	 0.177532  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.116141  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                           	 0.0873999 	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                    	 0.0635754 	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                                       	 0.0520896 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double]          	 0.0322438 	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.0223844 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double]        	 0.0217575 	 1800      
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double]       	 0.0217086 	 900       
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                       	 0.0212475 	 800       
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                              	 0.0156141 	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                	 0.0144913 	 1300      
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                        	 0.0144402 	 1000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                	 0.00594928	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                              	 0.00316641	 6300      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                         	 0.00112993	 5200      
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                       	 0.0010813 	 300       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                         	 0.000862219	 100       
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                           	 0.000707684	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                                                  	 0.00041021	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
orthoX: L, orthoY: L
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 64
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->65  [0m[1;34m1->66  [0m[1;34m2->67  [0m[1;34m3->68  [0m[1;34m4->69  [0m[1;34m5->70  [0m[1;34m6->71  [0m[1;34m7->72  [0m[1;34m8->73  [0m[1;34m9->74  [0m[1;34m10->75  [0m[1;34m11->76  [0m[1;34m12->77  [0m[1;34m13->78  [0m[1;34m14->79  [0m[1;34m15->80  [0m[1;34m16->81  [0m[1;34m17->82  [0m[1;34m18->83  [0m[1;34m19->84  [0m[1;34m20->85  [0m[1;34m21->86  [0m[1;34m22->87  [0m[1;34m23->88  [0m[1;34m24->89  [0m[1;34m25->90  [0m[1;34m26->91  [0m[1;34m27->92  [0m[1;34m28->93  [0m[1;34m29->94  [0m[1;34m30->95  [0m[1;34m31->96  [0m[1;34m32->97  [0m[1;34m33->98  [0m[1;34m34->99  [0m[1;34m35->100  [0m[1;34m36->101  [0m[1;34m37->102  [0m[1;34m38->103  [0m[1;34m39->104  [0m[1;34m40->105  [0m[1;34m41->106  [0m[1;34m42->107  [0m[1;34m43->108  [0m[1;34m44->109  [0m[1;34m45->110  [0m[1;34m46->111  [0m[1;34m47->112  [0m[1;34m48->113  [0m[1;34m49->114  [0m[1;34m50->115  [0m[1;34m51->116  [0m[1;34m52->117  [0m[1;34m53->118  [0m[1;34m54->119  [0m[1;34m55->120  [0m[1;34m56->121  [0m[1;34m57->122  [0m[1;34m58->123  [0m[1;34m59->124  [0m[1;34m60->125  [0m[1;34m61->126  [0m[1;34m62->127  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22876258473856 -> hwthread 65 - OK[0m[1;34m
[0m[1;34m	threadid 22876069554176 -> hwthread 66 - OK[0m[1;34m
[0m[1;34m	threadid 22875868227712 -> hwthread 67 - OK[0m[1;34m
[0m[1;34m	threadid 22875666901248 -> hwthread 68 - OK[0m[1;34m
[0m[1;34m	threadid 22875465574784 -> hwthread 69 - OK[0m[1;34m
[0m[1;34m	threadid 22875264248320 -> hwthread 70 - OK[0m[1;34m
[0m[1;34m	threadid 22875062921856 -> hwthread 71 - OK[0m[1;34m
[0m[1;34m	threadid 22874861595392 -> hwthread 72 - OK[0m[1;34m
[0m[1;34m	threadid 22874660268928 -> hwthread 73 - OK[0m[1;34m
[0m[1;34m	threadid 22874458942464 -> hwthread 74 - OK[0m[1;34m
[0m[1;34m	threadid 22874257616000 -> hwthread 75 - OK[0m[1;34m
[0m[1;34m	threadid 22874056289536 -> hwthread 76 - OK[0m[1;34m
[0m[1;34m	threadid 22873854963072 -> hwthread 77 - OK[0m[1;34m
[0m[1;34m	threadid 22873653636608 -> hwthread 78 - OK[0m[1;34m
[0m[1;34m	threadid 22873452310144 -> hwthread 79 - OK[0m[1;34m
[0m[1;34m	threadid 22873250983680 -> hwthread 80 - OK[0m[1;34m
[0m[1;34m	threadid 22873049657216 -> hwthread 81 - OK[0m[1;34m
[0m[1;34m	threadid 22872848330752 -> hwthread 82 - OK[0m[1;34m
[0m[1;34m	threadid 22872647004288 -> hwthread 83 - OK[0m[1;34m
[0m[1;34m	threadid 22872445677824 -> hwthread 84 - OK[0m[1;34m
[0m[1;34m	threadid 22872244351360 -> hwthread 85 - OK[0m[1;34m
[0m[1;34m	threadid 22872043024896 -> hwthread 86 - OK[0m[1;34m
[0m[1;34m	threadid 22871841698432 -> hwthread 87 - OK[0m[1;34m
[0m[1;34m	threadid 22871640371968 -> hwthread 88 - OK[0m[1;34m
[0m[1;34m	threadid 22871439045504 -> hwthread 89 - OK[0m[1;34m
[0m[1;34m	threadid 22871237719040 -> hwthread 90 - OK[0m[1;34m
[0m[1;34m	threadid 22871036392576 -> hwthread 91 - OK[0m[1;34m
[0m[1;34m	threadid 22870835066112 -> hwthread 92 - OK[0m[1;34m
[0m[1;34m	threadid 22870633739648 -> hwthread 93 - OK[0m[1;34m
[0m[1;34m	threadid 22870432413184 -> hwthread 94 - OK[0m[1;34m
[0m[1;34m	threadid 22870231086720 -> hwthread 95 - OK[0m[1;34m
[0m[1;34m	threadid 22870029760256 -> hwthread 96 - OK[0m[1;34m
[0m[1;34m	threadid 22869828429696 -> hwthread 97 - OK[0m[1;34m
[0m[1;34m	threadid 22869627103232 -> hwthread 98 - OK[0m[1;34m
[0m[1;34m	threadid 22869425776768 -> hwthread 99 - OK[0m[1;34m
[0m[1;34m	threadid 22869224450304 -> hwthread 100 - OK[0m[1;34m
[0m[1;34m	threadid 22869023123840 -> hwthread 101 - OK[0m[1;34m
[0m[1;34m	threadid 22868821797376 -> hwthread 102 - OK[0m[1;34m
[0m[1;34m	threadid 22868620470912 -> hwthread 103 - OK[0m[1;34m
[0m[1;34m	threadid 22868419144448 -> hwthread 104 - OK[0m[1;34m
[0m[1;34m	threadid 22868217817984 -> hwthread 105 - OK[0m[1;34m
[0m[1;34m	threadid 22868016491520 -> hwthread 106 - OK[0m[1;34m
[0m[1;34m	threadid 22867815165056 -> hwthread 107 - OK[0m[1;34m
[0m[1;34m	threadid 22867613838592 -> hwthread 108 - OK[0m[1;34m
[0m[1;34m	threadid 22867412512128 -> hwthread 109 - OK[0m[1;34m
[0m[1;34m	threadid 22867211185664 -> hwthread 110 - OK[0m[1;34m
[0m[1;34m	threadid 22867009859200 -> hwthread 111 - OK[0m[1;34m
[0m[1;34m	threadid 22866808532736 -> hwthread 112 - OK[0m[1;34m
[0m[1;34m	threadid 22866607206272 -> hwthread 113 - OK[0m[1;34m
[0m[1;34m	threadid 22866405879808 -> hwthread 114 - OK[0m[1;34m
[0m[1;34m	threadid 22866204553344 -> hwthread 115 - OK[0m[1;34m
[0m[1;34m	threadid 22866003226880 -> hwthread 116 - OK[0m[1;34m
[0m[1;34m	threadid 22865801900416 -> hwthread 117 - OK[0m[1;34m
[0m[1;34m	threadid 22865600573952 -> hwthread 118 - OK[0m[1;34m
[0m[1;34m	threadid 22865399247488 -> hwthread 119 - OK[0m[1;34m
[0m[1;34m	threadid 22865197921024 -> hwthread 120 - OK[0m[1;34m
[0m[1;34m	threadid 22864996594560 -> hwthread 121 - OK[0m[1;34m
[0m[1;34m	threadid 22864795268096 -> hwthread 122 - OK[0m[1;34m
[0m[1;34m	threadid 22864593941632 -> hwthread 123 - OK[0m[1;34m
[0m[1;34m	threadid 22864392615168 -> hwthread 124 - OK[0m[1;34m
[0m[1;34m	threadid 22864191288704 -> hwthread 125 - OK[0m[1;34m
[0m[1;34m	threadid 22863989962240 -> hwthread 126 - OK[0m[1;34m
[0m[1;34m	threadid 22863788635776 -> hwthread 127 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22876152813312 -> hwthread 64 - OK[0m[1;34m
[0m[1;34m	threadid 22876146222848 -> hwthread 65 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 88, m: 88)                                                                 	 0.663031  	 700       	 6.71504   	 0         	 0.196962  	 34.0931   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4400, cols: 88, reductionFactor: 37, colBlockingSize: 12)                  	 0.39124   	 600       	 107.334   	 0         	 4.84544   	 22.1516   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 88, r: 88, r2: 4400, leftOrthog: 0)        	 0.150617  	 600       	 271.472   	 0         	 37.5125   	 7.23684   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4400, cols: 38, reductionFactor: 37, colBlockingSize: 12)                  	 0.105233  	 700       	 86.8113   	 0         	 8.9744    	 9.67322   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 88, n: 50, r: 88, r2: 88)             	 0.0752331 	 600       	 543.489   	 0         	 49.9022   	 10.8911   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 88, reductionFactor: 37, colBlockingSize: 12)                  	 0.0644166 	 100       	 61.7333   	 0         	 2.82839   	 21.8263   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 4400, Xcols: 38, r: 38, streamingCols: 0)                   	 0.0608589 	 700       	 73.0792   	 0         	 30.8366   	 2.36988   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 88, Qr2: 38)       	 0.0480963 	 700       	 0         	 0         	 79.1047   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 88)                                                                 	 0.0464136 	 100       	 4.15108   	 0         	 0.195632  	 21.2188   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                 	 0.0363209 	 100       	 3.21211   	 0         	 0.166295  	 19.3157   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 38, k: 2500)   	 0.0328737 	 800       	 231.188   	 0         	 43.2005   	 5.35151   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4400, cols: 50, reductionFactor: 37, colBlockingSize: 12)                  	 0.0242814 	 100       	 93.0533   	 0         	 7.33073   	 12.6936   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 38, m: 38)                                                                  	 0.021994  	 900       	 2.99381   	 0         	 1.43057   	 2.09273   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 2500, m: 38, k: 50)	 0.0218413 	 800       	 347.964   	 0         	 65.0217   	 5.35151   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 4400, m: 38)                                                                       	 0.0192652 	 700       	 0         	 0         	 97.2034   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 38, reductionFactor: 37, colBlockingSize: 12)                  	 0.0139773 	 100       	 53.0513   	 0         	 5.52003   	 9.61067   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 4400, leftOrthog: 0)        	 0.0139158 	 100       	 158.094   	 0         	 38.23     	 4.13534   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 1900, k: 38) 	 0.0133319 	 800       	 433.245   	 0         	 81.1765   	 5.33708   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 4400, m: 38)                                                              	 0.0130946 	 700       	 0         	 0         	 143.009   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 38, n: 50, r2: 38)                                                                                         	 0.0127163 	 800       	 0         	 0         	 72.6751   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 88, r: 88, r2: 2500, leftOrthog: 0)        	 0.0122947 	 100       	 314.933   	 0         	 43.9532   	 7.16519   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 38, n: 50, r2: 38)                   	 0.0106183 	 700       	 0         	 0         	 176.36    	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 88, n: 50, r: 88, r2: 50)             	 0.00966974	 100       	 400.424   	 0         	 50.5991   	 7.91367   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 38, m: 1900, k: 38) 	 0.00946548	 700       	 405.795   	 0         	 86.2847   	 4.70297   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r: 88, r2: 88)             	 0.00777962	 100       	 497.711   	 0         	 46.0428   	 10.8097   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 88, reductionFactor: 37, colBlockingSize: 12)                    	 0.00631099	 100       	 12.6023   	 0         	 1.53941   	 8.18645   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 38, r: 38, streamingCols: 0)                   	 0.00593399	 100       	 60.8359   	 0         	 25.7125   	 2.36601   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 50, Qr2: 38)       	 0.00383256	 100       	 0         	 0         	 91.8447   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 2500, m: 38)                                                                       	 0.00365668	 100       	 0         	 0         	 41.5677   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 0, n: 50, r2: 38)                    	 0.00333201	 100       	 0         	 0         	 45.6182   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 38)                                                              	 0.00319952	 100       	 0         	 0         	 47.5071   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 38, reductionFactor: 37, colBlockingSize: 12)                    	 0.00204421	 100       	 7.25477   	 0         	 1.30867   	 5.54361   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 88, r: 50, r2: 50, leftOrthog: 0)          	 0.0019134 	 100       	 22.9957   	 0         	 7.60949   	 3.02198   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                   	 0.000901047	 100       	 0.55491   	 0         	 2.21964   	 0.25      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 38)                                                                                          	 0.000849971	 200       	 0         	 0         	 7.15319   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 38, k: 50)     	 0.000794677	 100       	 23.9091   	 0         	 6.3422    	 3.76984   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 38, n: 50, r2: 1)                                                                                          	 0.000752748	 200       	 0         	 0         	 8.07707   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 50, r2: 50)              	 0.000750438	 100       	 33.3139   	 0         	 7.99533   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 50, m: 38, k: 50)  	 0.000666039	 100       	 28.5269   	 0         	 7.56712   	 3.76984   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 38, m: 38, fromLeft: 0)                	 0.000603431	 800       	 0         	 0         	 30.6302   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 50, k: 38)   	 0.000596289	 100       	 31.8637   	 0         	 8.45228   	 3.76984   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 38, m: 50, k: 38)   	 0.000558206	 100       	 25.8686   	 0         	 7.51551   	 3.44203   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 38, n: 50, r2: 1)                    	 0.000524569	 100       	 0         	 0         	 13.4205   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                          	 0.000523398	 100       	 0         	 0         	 7.64237   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 1, r1low: 0, n: 50, r2: 38)                     	 0.000479013	 100       	 0         	 0         	 6.34638   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                 	 0.000420664	 100       	 0.594299  	 0         	 9.50878   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 1, Xr2: 50, Qr1: 1, Qr2: 0)          	 0.000405772	 100       	 0         	 0         	 9.85775   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                            	 0.000402974	 100       	 1.24077   	 0         	 14.8893   	 0.0833333 
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 38)                                                                	 0.00038487	 100       	 0         	 0         	 7.89877   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                 	 0.0003676 	 100       	 0.680087  	 0         	 10.8814   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 38, n: 50, r2: 1)                                                                                 	 0.0003552 	 100       	 0.53491   	 0         	 8.55856   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 0, m: 1900, k: 38)  	 7.35e-06  	 100       	 0         	 0         	 7858.5    	 0         
Timing statistics:
function                                                                                                                                                                                      	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                        	 2.44029   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_normalized(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                     	 2.44025   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::rightNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                            	 2.02332   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::rightNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                        	 2.02197   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double]	 1.91486   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                               	 0.745766  	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                  	 0.607504  	 1800      
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                            	 0.486877  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_leftOrthogonalize(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&) [with T = double]                                   	 0.416857  	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]           	 0.258258  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                	 0.178741  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.121704  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                           	 0.0934328 	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                    	 0.0667929 	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                                       	 0.0523346 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double]          	 0.0336683 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double]        	 0.0239593 	 1800      
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                       	 0.0229219 	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double]       	 0.0225074 	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.021994  	 900       
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                              	 0.0166789 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                        	 0.0149539 	 1000      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                	 0.0148424 	 1300      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                	 0.00587437	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                              	 0.00289255	 6300      
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                       	 0.00114346	 300       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                         	 0.00111749	 5200      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                         	 0.000901047	 100       
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                           	 0.000603431	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                                                  	 0.000402974	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
orthoX: L, orthoY: L
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 64
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->65  [0m[1;34m1->66  [0m[1;34m2->67  [0m[1;34m3->68  [0m[1;34m4->69  [0m[1;34m5->70  [0m[1;34m6->71  [0m[1;34m7->72  [0m[1;34m8->73  [0m[1;34m9->74  [0m[1;34m10->75  [0m[1;34m11->76  [0m[1;34m12->77  [0m[1;34m13->78  [0m[1;34m14->79  [0m[1;34m15->80  [0m[1;34m16->81  [0m[1;34m17->82  [0m[1;34m18->83  [0m[1;34m19->84  [0m[1;34m20->85  [0m[1;34m21->86  [0m[1;34m22->87  [0m[1;34m23->88  [0m[1;34m24->89  [0m[1;34m25->90  [0m[1;34m26->91  [0m[1;34m27->92  [0m[1;34m28->93  [0m[1;34m29->94  [0m[1;34m30->95  [0m[1;34m31->96  [0m[1;34m32->97  [0m[1;34m33->98  [0m[1;34m34->99  [0m[1;34m35->100  [0m[1;34m36->101  [0m[1;34m37->102  [0m[1;34m38->103  [0m[1;34m39->104  [0m[1;34m40->105  [0m[1;34m41->106  [0m[1;34m42->107  [0m[1;34m43->108  [0m[1;34m44->109  [0m[1;34m45->110  [0m[1;34m46->111  [0m[1;34m47->112  [0m[1;34m48->113  [0m[1;34m49->114  [0m[1;34m50->115  [0m[1;34m51->116  [0m[1;34m52->117  [0m[1;34m53->118  [0m[1;34m54->119  [0m[1;34m55->120  [0m[1;34m56->121  [0m[1;34m57->122  [0m[1;34m58->123  [0m[1;34m59->124  [0m[1;34m60->125  [0m[1;34m61->126  [0m[1;34m62->127  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23431187363712 -> hwthread 65 - OK[0m[1;34m
[0m[1;34m	threadid 23430992750592 -> hwthread 66 - OK[0m[1;34m
[0m[1;34m	threadid 23430791424128 -> hwthread 67 - OK[0m[1;34m
[0m[1;34m	threadid 23430590097664 -> hwthread 68 - OK[0m[1;34m
[0m[1;34m	threadid 23430388771200 -> hwthread 69 - OK[0m[1;34m
[0m[1;34m	threadid 23430187444736 -> hwthread 70 - OK[0m[1;34m
[0m[1;34m	threadid 23429986118272 -> hwthread 71 - OK[0m[1;34m
[0m[1;34m	threadid 23429784791808 -> hwthread 72 - OK[0m[1;34m
[0m[1;34m	threadid 23429583465344 -> hwthread 73 - OK[0m[1;34m
[0m[1;34m	threadid 23429382138880 -> hwthread 74 - OK[0m[1;34m
[0m[1;34m	threadid 23429180812416 -> hwthread 75 - OK[0m[1;34m
[0m[1;34m	threadid 23428979485952 -> hwthread 76 - OK[0m[1;34m
[0m[1;34m	threadid 23428778159488 -> hwthread 77 - OK[0m[1;34m
[0m[1;34m	threadid 23428576833024 -> hwthread 78 - OK[0m[1;34m
[0m[1;34m	threadid 23428375506560 -> hwthread 79 - OK[0m[1;34m
[0m[1;34m	threadid 23428174180096 -> hwthread 80 - OK[0m[1;34m
[0m[1;34m	threadid 23427972853632 -> hwthread 81 - OK[0m[1;34m
[0m[1;34m	threadid 23427771527168 -> hwthread 82 - OK[0m[1;34m
[0m[1;34m	threadid 23427570200704 -> hwthread 83 - OK[0m[1;34m
[0m[1;34m	threadid 23427368874240 -> hwthread 84 - OK[0m[1;34m
[0m[1;34m	threadid 23427167547776 -> hwthread 85 - OK[0m[1;34m
[0m[1;34m	threadid 23426966221312 -> hwthread 86 - OK[0m[1;34m
[0m[1;34m	threadid 23426764894848 -> hwthread 87 - OK[0m[1;34m
[0m[1;34m	threadid 23426563568384 -> hwthread 88 - OK[0m[1;34m
[0m[1;34m	threadid 23426362241920 -> hwthread 89 - OK[0m[1;34m
[0m[1;34m	threadid 23426160915456 -> hwthread 90 - OK[0m[1;34m
[0m[1;34m	threadid 23425959588992 -> hwthread 91 - OK[0m[1;34m
[0m[1;34m	threadid 23425758262528 -> hwthread 92 - OK[0m[1;34m
[0m[1;34m	threadid 23425556936064 -> hwthread 93 - OK[0m[1;34m
[0m[1;34m	threadid 23425355609600 -> hwthread 94 - OK[0m[1;34m
[0m[1;34m	threadid 23425154283136 -> hwthread 95 - OK[0m[1;34m
[0m[1;34m	threadid 23424952956672 -> hwthread 96 - OK[0m[1;34m
[0m[1;34m	threadid 23424751626112 -> hwthread 97 - OK[0m[1;34m
[0m[1;34m	threadid 23424550299648 -> hwthread 98 - OK[0m[1;34m
[0m[1;34m	threadid 23424348973184 -> hwthread 99 - OK[0m[1;34m
[0m[1;34m	threadid 23424147646720 -> hwthread 100 - OK[0m[1;34m
[0m[1;34m	threadid 23423946320256 -> hwthread 101 - OK[0m[1;34m
[0m[1;34m	threadid 23423744993792 -> hwthread 102 - OK[0m[1;34m
[0m[1;34m	threadid 23423543667328 -> hwthread 103 - OK[0m[1;34m
[0m[1;34m	threadid 23423342340864 -> hwthread 104 - OK[0m[1;34m
[0m[1;34m	threadid 23423141014400 -> hwthread 105 - OK[0m[1;34m
[0m[1;34m	threadid 23422939687936 -> hwthread 106 - OK[0m[1;34m
[0m[1;34m	threadid 23422738361472 -> hwthread 107 - OK[0m[1;34m
[0m[1;34m	threadid 23422537035008 -> hwthread 108 - OK[0m[1;34m
[0m[1;34m	threadid 23422335708544 -> hwthread 109 - OK[0m[1;34m
[0m[1;34m	threadid 23422134382080 -> hwthread 110 - OK[0m[1;34m
[0m[1;34m	threadid 23421933055616 -> hwthread 111 - OK[0m[1;34m
[0m[1;34m	threadid 23421731729152 -> hwthread 112 - OK[0m[1;34m
[0m[1;34m	threadid 23421530402688 -> hwthread 113 - OK[0m[1;34m
[0m[1;34m	threadid 23421329076224 -> hwthread 114 - OK[0m[1;34m
[0m[1;34m	threadid 23421127749760 -> hwthread 115 - OK[0m[1;34m
[0m[1;34m	threadid 23420926423296 -> hwthread 116 - OK[0m[1;34m
[0m[1;34m	threadid 23420725096832 -> hwthread 117 - OK[0m[1;34m
[0m[1;34m	threadid 23420523770368 -> hwthread 118 - OK[0m[1;34m
[0m[1;34m	threadid 23420322443904 -> hwthread 119 - OK[0m[1;34m
[0m[1;34m	threadid 23420121117440 -> hwthread 120 - OK[0m[1;34m
[0m[1;34m	threadid 23419919790976 -> hwthread 121 - OK[0m[1;34m
[0m[1;34m	threadid 23419718464512 -> hwthread 122 - OK[0m[1;34m
[0m[1;34m	threadid 23419517138048 -> hwthread 123 - OK[0m[1;34m
[0m[1;34m	threadid 23419315811584 -> hwthread 124 - OK[0m[1;34m
[0m[1;34m	threadid 23419114485120 -> hwthread 125 - OK[0m[1;34m
[0m[1;34m	threadid 23418913158656 -> hwthread 126 - OK[0m[1;34m
[0m[1;34m	threadid 23418711832192 -> hwthread 127 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23431081703168 -> hwthread 64 - OK[0m[1;34m
[0m[1;34m	threadid 23431075112704 -> hwthread 65 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 89, m: 89)                                                                 	 0.702961  	 700       	 6.552     	 0         	 0.190012  	 34.482    
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4450, cols: 89, reductionFactor: 37, colBlockingSize: 12)                  	 0.403089  	 600       	 107.771   	 0         	 4.8105    	 22.4033   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 89, r: 89, r2: 4450, leftOrthog: 0)        	 0.157806  	 600       	 268.039   	 0         	 36.6219   	 7.31908   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4450, cols: 39, reductionFactor: 37, colBlockingSize: 12)                  	 0.109551  	 700       	 88.8346   	 0         	 8.94923   	 9.92652   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 89, n: 50, r: 89, r2: 89)             	 0.0766272 	 600       	 551.999   	 0         	 50.1141   	 11.0149   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 89, reductionFactor: 37, colBlockingSize: 12)                  	 0.0645469 	 100       	 63.0169   	 0         	 2.85586   	 22.0658   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 4450, Xcols: 39, r: 39, streamingCols: 0)                   	 0.0634203 	 700       	 74.7066   	 0         	 30.716    	 2.43217   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 89, Qr2: 39)       	 0.0516228 	 700       	 0         	 0         	 75.3497   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 89)                                                                 	 0.0473372 	 100       	 4.11234   	 0         	 0.193505  	 21.2518   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                 	 0.0373381 	 100       	 3.1246    	 0         	 0.161765  	 19.3157   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 39, k: 2500)   	 0.0340415 	 800       	 229.132   	 0         	 42.1979   	 5.42994   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4450, cols: 50, reductionFactor: 37, colBlockingSize: 12)                  	 0.0241451 	 100       	 94.6418   	 0         	 7.45493   	 12.6952   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 39, m: 39)                                                                  	 0.023426  	 900       	 3.03863   	 0         	 1.41443   	 2.14831   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 2500, m: 39, k: 50)	 0.0217765 	 800       	 358.185   	 0         	 65.9648   	 5.42994   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 4450, m: 39)                                                                       	 0.0208364 	 700       	 0         	 0         	 93.2866   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 39, reductionFactor: 37, colBlockingSize: 12)                  	 0.0147281 	 100       	 53.0314   	 0         	 5.3786    	 9.8597    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 4450, leftOrthog: 0)        	 0.0141915 	 100       	 156.784   	 0         	 37.91     	 4.13569   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 89, r: 89, r2: 2500, leftOrthog: 0)        	 0.0131775 	 100       	 300.551   	 0         	 41.4855   	 7.24473   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 39, n: 50, r2: 39)                                                                                         	 0.0131486 	 800       	 0         	 0         	 74.0335   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 1950, k: 39) 	 0.0125177 	 800       	 486.034   	 0         	 89.7293   	 5.41667   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 4450, m: 39)                                                              	 0.0123982 	 700       	 0         	 0         	 156.777   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 39, n: 50, r2: 39)                   	 0.0116151 	 700       	 0         	 0         	 167.347   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 89, n: 50, r: 89, r2: 50)             	 0.0097392 	 100       	 406.656   	 0         	 51.1746   	 7.94643   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 39, m: 1950, k: 39) 	 0.00898146	 700       	 462.322   	 0         	 95.7837   	 4.82673   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r: 89, r2: 89)             	 0.00773122	 100       	 512.274   	 0         	 46.8667   	 10.9304   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 89, reductionFactor: 37, colBlockingSize: 12)                    	 0.00638975	 100       	 12.7315   	 0         	 1.54886   	 8.21991   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 39, r: 39, streamingCols: 0)                   	 0.00615714	 100       	 61.7576   	 0         	 25.4353   	 2.42803   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 50, Qr2: 39)       	 0.00383266	 100       	 0         	 0         	 92.8858   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 2500, m: 39)                                                                       	 0.0035945 	 100       	 0         	 0         	 43.3997   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 0, n: 50, r2: 39)                    	 0.00338644	 100       	 0         	 0         	 46.0661   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 39)                                                              	 0.00247762	 100       	 0         	 0         	 62.9638   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 39, reductionFactor: 37, colBlockingSize: 12)                    	 0.00208989	 100       	 7.4746    	 0         	 1.32868   	 5.62557   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 89, r: 50, r2: 50, leftOrthog: 0)          	 0.0019861 	 100       	 22.4057   	 0         	 7.39137   	 3.03134   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 39, k: 50)     	 0.00102294	 100       	 19.0628   	 0         	 5.0052    	 3.80859   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                   	 0.000897171	 100       	 0.557307  	 0         	 2.22923   	 0.25      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 39)                                                                                          	 0.000868781	 200       	 0         	 0         	 7.18248   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 39, m: 39, fromLeft: 0)                	 0.00080608	 800       	 0         	 0         	 24.1524   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 39, n: 50, r2: 1)                                                                                          	 0.000792841	 200       	 0         	 0         	 7.87043   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 50, r2: 50)              	 0.000778807	 100       	 32.1004   	 0         	 7.70409   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 50, m: 39, k: 50)  	 0.000711304	 100       	 27.4144   	 0         	 7.19805   	 3.80859   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 50, k: 39)   	 0.000582683	 100       	 33.4659   	 0         	 8.78694   	 3.80859   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 39, m: 50, k: 39)   	 0.000570699	 100       	 26.6515   	 0         	 7.5991    	 3.50719   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 39, n: 50, r2: 1)                    	 0.000537354	 100       	 0         	 0         	 13.2501   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                          	 0.000531933	 100       	 0         	 0         	 7.51974   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 1, r1low: 0, n: 50, r2: 39)                     	 0.000478489	 100       	 0         	 0         	 6.52053   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                            	 0.000422794	 100       	 1.18261   	 0         	 14.1913   	 0.0833333 
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                 	 0.000409983	 100       	 0.609781  	 0         	 9.7565    	 0.0625    
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 39)                                                                	 0.000409688	 100       	 0         	 0         	 7.61555   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 1, Xr2: 50, Qr1: 1, Qr2: 0)          	 0.000405471	 100       	 0         	 0         	 9.86507   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 39, n: 50, r2: 1)                                                                                 	 0.000351199	 100       	 0.555241  	 0         	 8.88385   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                 	 0.000343144	 100       	 0.728557  	 0         	 11.6569   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 0, m: 1950, k: 39)  	 6.29e-06  	 100       	 0         	 0         	 9672.5    	 0         
Timing statistics:
function                                                                                                                                                                                      	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                        	 2.54105   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_normalized(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                     	 2.541     	 100       
<PITTS::TensorTrain<double>> :: T PITTS::rightNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                            	 2.11279   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::rightNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                        	 2.11146   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double]	 1.99617   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                               	 0.787636  	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                  	 0.62454   	 1800      
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                            	 0.498823  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_leftOrthogonalize(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&) [with T = double]                                   	 0.428143  	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]           	 0.268704  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                	 0.187161  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.126875  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                           	 0.0948764 	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                    	 0.0695774 	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                                       	 0.0558609 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double]          	 0.0350644 	 900       
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                       	 0.0244309 	 800       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.023426  	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double]        	 0.0226588 	 1800      
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double]       	 0.0224878 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                        	 0.0160174 	 1000      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                	 0.0153422 	 1300      
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                              	 0.0152855 	 900       
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                	 0.00556124	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                              	 0.0030576 	 6300      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                         	 0.00119536	 5200      
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                       	 0.00110433	 300       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                         	 0.000897171	 100       
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                           	 0.00080608	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                                                  	 0.000422794	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
orthoX: L, orthoY: L
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 64
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->65  [0m[1;34m1->66  [0m[1;34m2->67  [0m[1;34m3->68  [0m[1;34m4->69  [0m[1;34m5->70  [0m[1;34m6->71  [0m[1;34m7->72  [0m[1;34m8->73  [0m[1;34m9->74  [0m[1;34m10->75  [0m[1;34m11->76  [0m[1;34m12->77  [0m[1;34m13->78  [0m[1;34m14->79  [0m[1;34m15->80  [0m[1;34m16->81  [0m[1;34m17->82  [0m[1;34m18->83  [0m[1;34m19->84  [0m[1;34m20->85  [0m[1;34m21->86  [0m[1;34m22->87  [0m[1;34m23->88  [0m[1;34m24->89  [0m[1;34m25->90  [0m[1;34m26->91  [0m[1;34m27->92  [0m[1;34m28->93  [0m[1;34m29->94  [0m[1;34m30->95  [0m[1;34m31->96  [0m[1;34m32->97  [0m[1;34m33->98  [0m[1;34m34->99  [0m[1;34m35->100  [0m[1;34m36->101  [0m[1;34m37->102  [0m[1;34m38->103  [0m[1;34m39->104  [0m[1;34m40->105  [0m[1;34m41->106  [0m[1;34m42->107  [0m[1;34m43->108  [0m[1;34m44->109  [0m[1;34m45->110  [0m[1;34m46->111  [0m[1;34m47->112  [0m[1;34m48->113  [0m[1;34m49->114  [0m[1;34m50->115  [0m[1;34m51->116  [0m[1;34m52->117  [0m[1;34m53->118  [0m[1;34m54->119  [0m[1;34m55->120  [0m[1;34m56->121  [0m[1;34m57->122  [0m[1;34m58->123  [0m[1;34m59->124  [0m[1;34m60->125  [0m[1;34m61->126  [0m[1;34m62->127  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23042428839808 -> hwthread 65 - OK[0m[1;34m
[0m[1;34m	threadid 23042231101440 -> hwthread 66 - OK[0m[1;34m
[0m[1;34m	threadid 23042029774976 -> hwthread 67 - OK[0m[1;34m
[0m[1;34m	threadid 23041828448512 -> hwthread 68 - OK[0m[1;34m
[0m[1;34m	threadid 23041627122048 -> hwthread 69 - OK[0m[1;34m
[0m[1;34m	threadid 23041425795584 -> hwthread 70 - OK[0m[1;34m
[0m[1;34m	threadid 23041224469120 -> hwthread 71 - OK[0m[1;34m
[0m[1;34m	threadid 23041023142656 -> hwthread 72 - OK[0m[1;34m
[0m[1;34m	threadid 23040821816192 -> hwthread 73 - OK[0m[1;34m
[0m[1;34m	threadid 23040620489728 -> hwthread 74 - OK[0m[1;34m
[0m[1;34m	threadid 23040419163264 -> hwthread 75 - OK[0m[1;34m
[0m[1;34m	threadid 23040217836800 -> hwthread 76 - OK[0m[1;34m
[0m[1;34m	threadid 23040016510336 -> hwthread 77 - OK[0m[1;34m
[0m[1;34m	threadid 23039815183872 -> hwthread 78 - OK[0m[1;34m
[0m[1;34m	threadid 23039613857408 -> hwthread 79 - OK[0m[1;34m
[0m[1;34m	threadid 23039412530944 -> hwthread 80 - OK[0m[1;34m
[0m[1;34m	threadid 23039211204480 -> hwthread 81 - OK[0m[1;34m
[0m[1;34m	threadid 23039009878016 -> hwthread 82 - OK[0m[1;34m
[0m[1;34m	threadid 23038808551552 -> hwthread 83 - OK[0m[1;34m
[0m[1;34m	threadid 23038607225088 -> hwthread 84 - OK[0m[1;34m
[0m[1;34m	threadid 23038405898624 -> hwthread 85 - OK[0m[1;34m
[0m[1;34m	threadid 23038204572160 -> hwthread 86 - OK[0m[1;34m
[0m[1;34m	threadid 23038003245696 -> hwthread 87 - OK[0m[1;34m
[0m[1;34m	threadid 23037801919232 -> hwthread 88 - OK[0m[1;34m
[0m[1;34m	threadid 23037600592768 -> hwthread 89 - OK[0m[1;34m
[0m[1;34m	threadid 23037399266304 -> hwthread 90 - OK[0m[1;34m
[0m[1;34m	threadid 23037197939840 -> hwthread 91 - OK[0m[1;34m
[0m[1;34m	threadid 23036996613376 -> hwthread 92 - OK[0m[1;34m
[0m[1;34m	threadid 23036795286912 -> hwthread 93 - OK[0m[1;34m
[0m[1;34m	threadid 23036593960448 -> hwthread 94 - OK[0m[1;34m
[0m[1;34m	threadid 23036392633984 -> hwthread 95 - OK[0m[1;34m
[0m[1;34m	threadid 23036191307520 -> hwthread 96 - OK[0m[1;34m
[0m[1;34m	threadid 23035989976960 -> hwthread 97 - OK[0m[1;34m
[0m[1;34m	threadid 23035788650496 -> hwthread 98 - OK[0m[1;34m
[0m[1;34m	threadid 23035587324032 -> hwthread 99 - OK[0m[1;34m
[0m[1;34m	threadid 23035385997568 -> hwthread 100 - OK[0m[1;34m
[0m[1;34m	threadid 23035184671104 -> hwthread 101 - OK[0m[1;34m
[0m[1;34m	threadid 23034983344640 -> hwthread 102 - OK[0m[1;34m
[0m[1;34m	threadid 23034782018176 -> hwthread 103 - OK[0m[1;34m
[0m[1;34m	threadid 23034580691712 -> hwthread 104 - OK[0m[1;34m
[0m[1;34m	threadid 23034379365248 -> hwthread 105 - OK[0m[1;34m
[0m[1;34m	threadid 23034178038784 -> hwthread 106 - OK[0m[1;34m
[0m[1;34m	threadid 23033976712320 -> hwthread 107 - OK[0m[1;34m
[0m[1;34m	threadid 23033775385856 -> hwthread 108 - OK[0m[1;34m
[0m[1;34m	threadid 23033574059392 -> hwthread 109 - OK[0m[1;34m
[0m[1;34m	threadid 23033372732928 -> hwthread 110 - OK[0m[1;34m
[0m[1;34m	threadid 23033171406464 -> hwthread 111 - OK[0m[1;34m
[0m[1;34m	threadid 23032970080000 -> hwthread 112 - OK[0m[1;34m
[0m[1;34m	threadid 23032768753536 -> hwthread 113 - OK[0m[1;34m
[0m[1;34m	threadid 23032567427072 -> hwthread 114 - OK[0m[1;34m
[0m[1;34m	threadid 23032366100608 -> hwthread 115 - OK[0m[1;34m
[0m[1;34m	threadid 23032164774144 -> hwthread 116 - OK[0m[1;34m
[0m[1;34m	threadid 23031963447680 -> hwthread 117 - OK[0m[1;34m
[0m[1;34m	threadid 23031762121216 -> hwthread 118 - OK[0m[1;34m
[0m[1;34m	threadid 23031560794752 -> hwthread 119 - OK[0m[1;34m
[0m[1;34m	threadid 23031359468288 -> hwthread 120 - OK[0m[1;34m
[0m[1;34m	threadid 23031158141824 -> hwthread 121 - OK[0m[1;34m
[0m[1;34m	threadid 23030956815360 -> hwthread 122 - OK[0m[1;34m
[0m[1;34m	threadid 23030755488896 -> hwthread 123 - OK[0m[1;34m
[0m[1;34m	threadid 23030554162432 -> hwthread 124 - OK[0m[1;34m
[0m[1;34m	threadid 23030352835968 -> hwthread 125 - OK[0m[1;34m
[0m[1;34m	threadid 23030151509504 -> hwthread 126 - OK[0m[1;34m
[0m[1;34m	threadid 23029950183040 -> hwthread 127 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23042323179264 -> hwthread 64 - OK[0m[1;34m
[0m[1;34m	threadid 23042316588800 -> hwthread 65 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 90, m: 90)                                                                 	 0.707497  	 700       	 6.7319    	 0         	 0.193052  	 34.8708   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4500, cols: 90, reductionFactor: 37, colBlockingSize: 12)                  	 0.411198  	 600       	 109.247   	 0         	 4.8222    	 22.655    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 90, r: 90, r2: 4500, leftOrthog: 0)        	 0.158459  	 600       	 276.033   	 0         	 37.2952   	 7.40132   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4500, cols: 40, reductionFactor: 37, colBlockingSize: 12)                  	 0.115366  	 700       	 89.7352   	 0         	 8.81504   	 10.1798   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 90, n: 50, r: 90, r2: 90)             	 0.0743773 	 600       	 588.082   	 0         	 52.7967   	 11.1386   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 90, reductionFactor: 37, colBlockingSize: 12)                  	 0.0654221 	 100       	 63.5788   	 0         	 2.85041   	 22.3051   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 4500, Xcols: 40, r: 40, streamingCols: 0)                   	 0.0644401 	 700       	 78.2121   	 0         	 31.3544   	 2.49446   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 90, Qr2: 40)       	 0.0522321 	 700       	 0         	 0         	 76.1218   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 90)                                                                 	 0.0467122 	 100       	 4.21018   	 0         	 0.197807  	 21.2843   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                 	 0.0374024 	 100       	 3.11923   	 0         	 0.161487  	 19.3157   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 40, k: 2500)   	 0.0339161 	 800       	 235.876   	 0         	 42.8351   	 5.50661   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4500, cols: 50, reductionFactor: 37, colBlockingSize: 12)                  	 0.0242889 	 100       	 95.1385   	 0         	 7.49313   	 12.6968   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 40, m: 40)                                                                  	 0.0238958 	 900       	 3.21391   	 0         	 1.45833   	 2.20382   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 2500, m: 40, k: 50)	 0.0227174 	 800       	 352.153   	 0         	 63.9511   	 5.50661   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 4500, m: 40)                                                                       	 0.0190857 	 700       	 0         	 0         	 105.629   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 4500, m: 40)                                                              	 0.0179658 	 700       	 0         	 0         	 112.214   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 40, reductionFactor: 37, colBlockingSize: 12)                  	 0.0151074 	 100       	 54.3854   	 0         	 5.38015   	 10.1085   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 4500, leftOrthog: 0)        	 0.0150656 	 100       	 149.347   	 0         	 36.1087   	 4.13603   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 40, n: 50, r2: 40)                                                                                         	 0.0138947 	 800       	 0         	 0         	 73.6973   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 90, r: 90, r2: 2500, leftOrthog: 0)        	 0.0135211 	 100       	 299.532   	 0         	 40.896    	 7.32422   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 2000, k: 40) 	 0.0134445 	 800       	 476.031   	 0         	 86.6377   	 5.49451   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 40, n: 50, r2: 40)                   	 0.0118338 	 700       	 0         	 0         	 170.36    	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 90, n: 50, r: 90, r2: 50)             	 0.00985141	 100       	 411.109   	 0         	 51.5256   	 7.97872   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 40, m: 2000, k: 40) 	 0.00898699	 700       	 498.498   	 0         	 100.697   	 4.9505    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r: 90, r2: 90)             	 0.00766115	 100       	 528.641   	 0         	 47.8362   	 11.0511   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 90, reductionFactor: 37, colBlockingSize: 12)                    	 0.00659614	 100       	 12.6118   	 0         	 1.52817   	 8.2529    
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 40, r: 40, streamingCols: 0)                   	 0.00640945	 100       	 62.4078   	 0         	 25.063    	 2.49004   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 50, Qr2: 40)       	 0.00391527	 100       	 0         	 0         	 91.9476   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 40)                                                              	 0.00336287	 100       	 0         	 0         	 47.5785   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 2500, m: 40)                                                                       	 0.00302826	 100       	 0         	 0         	 52.8356   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 0, n: 50, r2: 40)                    	 0.00267216	 100       	 0         	 0         	 59.8766   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 40, reductionFactor: 37, colBlockingSize: 12)                    	 0.00230347	 100       	 7.13377   	 0         	 1.25029   	 5.70571   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 90, r: 50, r2: 50, leftOrthog: 0)          	 0.00191208	 100       	 23.5346   	 0         	 7.74025   	 3.04054   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 40, k: 50)     	 0.000866127	 100       	 23.0913   	 0         	 6.00374   	 3.84615   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 40)                                                                                          	 0.000852738	 200       	 0         	 0         	 7.50524   	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                   	 0.000814305	 100       	 0.614021  	 0         	 2.45608   	 0.25      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 40, n: 50, r2: 1)                                                                                          	 0.000780963	 200       	 0         	 0         	 8.19501   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 50, r2: 50)              	 0.000769441	 100       	 32.4911   	 0         	 7.79787   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 50, m: 40, k: 50)  	 0.000701644	 100       	 28.5045   	 0         	 7.41117   	 3.84615   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 50, k: 40)   	 0.000604368	 100       	 33.0924   	 0         	 8.60403   	 3.84615   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 40, n: 50, r2: 1)                    	 0.000572843	 100       	 0         	 0         	 12.5689   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                          	 0.000530615	 100       	 0         	 0         	 7.53842   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 40, m: 40, fromLeft: 0)                	 0.000516981	 800       	 0         	 0         	 39.6146   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 1, r1low: 0, n: 50, r2: 40)                     	 0.000507674	 100       	 0         	 0         	 6.30326   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 40, m: 50, k: 40)   	 0.000484203	 100       	 33.044    	 0         	 9.25232   	 3.57143   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 1, Xr2: 50, Qr1: 1, Qr2: 0)          	 0.000424224	 100       	 0         	 0         	 9.42898   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 40)                                                                	 0.000419655	 100       	 0         	 0         	 7.62531   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                 	 0.000396562	 100       	 0.630418  	 0         	 10.0867   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                            	 0.000395659	 100       	 1.26371   	 0         	 15.1646   	 0.0833333 
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 40, n: 50, r2: 1)                                                                                 	 0.000351387	 100       	 0.569173  	 0         	 9.10677   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                 	 0.000326932	 100       	 0.764685  	 0         	 12.235    	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 0, m: 2000, k: 40)  	 6.08e-06  	 100       	 0         	 0         	 10526.3   	 0         
Timing statistics:
function                                                                                                                                                                                      	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                        	 2.55025   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_normalized(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                     	 2.55018   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::rightNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                            	 2.10649   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::rightNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                        	 2.10525   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double]	 1.99367   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                               	 0.791612  	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                  	 0.640283  	 1800      
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                            	 0.508156  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_leftOrthogonalize(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&) [with T = double]                                   	 0.443613  	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]           	 0.282573  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                	 0.188958  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.133242  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                           	 0.0926593 	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                    	 0.0708496 	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                                       	 0.0565716 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double]          	 0.0347822 	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.0238958 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double]        	 0.0235261 	 1800      
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double]       	 0.023419  	 900       
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                       	 0.0221139 	 800       
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                              	 0.0217483 	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                	 0.016059  	 1300      
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                        	 0.0155864 	 1000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                	 0.00628199	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                              	 0.0032801 	 6300      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                         	 0.0011565 	 5200      
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                       	 0.00107488	 300       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                         	 0.000814305	 100       
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                           	 0.000516981	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                                                  	 0.000395659	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
orthoX: L, orthoY: L
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 64
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->65  [0m[1;34m1->66  [0m[1;34m2->67  [0m[1;34m3->68  [0m[1;34m4->69  [0m[1;34m5->70  [0m[1;34m6->71  [0m[1;34m7->72  [0m[1;34m8->73  [0m[1;34m9->74  [0m[1;34m10->75  [0m[1;34m11->76  [0m[1;34m12->77  [0m[1;34m13->78  [0m[1;34m14->79  [0m[1;34m15->80  [0m[1;34m16->81  [0m[1;34m17->82  [0m[1;34m18->83  [0m[1;34m19->84  [0m[1;34m20->85  [0m[1;34m21->86  [0m[1;34m22->87  [0m[1;34m23->88  [0m[1;34m24->89  [0m[1;34m25->90  [0m[1;34m26->91  [0m[1;34m27->92  [0m[1;34m28->93  [0m[1;34m29->94  [0m[1;34m30->95  [0m[1;34m31->96  [0m[1;34m32->97  [0m[1;34m33->98  [0m[1;34m34->99  [0m[1;34m35->100  [0m[1;34m36->101  [0m[1;34m37->102  [0m[1;34m38->103  [0m[1;34m39->104  [0m[1;34m40->105  [0m[1;34m41->106  [0m[1;34m42->107  [0m[1;34m43->108  [0m[1;34m44->109  [0m[1;34m45->110  [0m[1;34m46->111  [0m[1;34m47->112  [0m[1;34m48->113  [0m[1;34m49->114  [0m[1;34m50->115  [0m[1;34m51->116  [0m[1;34m52->117  [0m[1;34m53->118  [0m[1;34m54->119  [0m[1;34m55->120  [0m[1;34m56->121  [0m[1;34m57->122  [0m[1;34m58->123  [0m[1;34m59->124  [0m[1;34m60->125  [0m[1;34m61->126  [0m[1;34m62->127  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22690772338560 -> hwthread 65 - OK[0m[1;34m
[0m[1;34m	threadid 22690580654080 -> hwthread 66 - OK[0m[1;34m
[0m[1;34m	threadid 22690379327616 -> hwthread 67 - OK[0m[1;34m
[0m[1;34m	threadid 22690178001152 -> hwthread 68 - OK[0m[1;34m
[0m[1;34m	threadid 22689976674688 -> hwthread 69 - OK[0m[1;34m
[0m[1;34m	threadid 22689775348224 -> hwthread 70 - OK[0m[1;34m
[0m[1;34m	threadid 22689574021760 -> hwthread 71 - OK[0m[1;34m
[0m[1;34m	threadid 22689372695296 -> hwthread 72 - OK[0m[1;34m
[0m[1;34m	threadid 22689171368832 -> hwthread 73 - OK[0m[1;34m
[0m[1;34m	threadid 22688970042368 -> hwthread 74 - OK[0m[1;34m
[0m[1;34m	threadid 22688768715904 -> hwthread 75 - OK[0m[1;34m
[0m[1;34m	threadid 22688567389440 -> hwthread 76 - OK[0m[1;34m
[0m[1;34m	threadid 22688366062976 -> hwthread 77 - OK[0m[1;34m
[0m[1;34m	threadid 22688164736512 -> hwthread 78 - OK[0m[1;34m
[0m[1;34m	threadid 22687963410048 -> hwthread 79 - OK[0m[1;34m
[0m[1;34m	threadid 22687762083584 -> hwthread 80 - OK[0m[1;34m
[0m[1;34m	threadid 22687560757120 -> hwthread 81 - OK[0m[1;34m
[0m[1;34m	threadid 22687359430656 -> hwthread 82 - OK[0m[1;34m
[0m[1;34m	threadid 22687158104192 -> hwthread 83 - OK[0m[1;34m
[0m[1;34m	threadid 22686956777728 -> hwthread 84 - OK[0m[1;34m
[0m[1;34m	threadid 22686755451264 -> hwthread 85 - OK[0m[1;34m
[0m[1;34m	threadid 22686554124800 -> hwthread 86 - OK[0m[1;34m
[0m[1;34m	threadid 22686352798336 -> hwthread 87 - OK[0m[1;34m
[0m[1;34m	threadid 22686151471872 -> hwthread 88 - OK[0m[1;34m
[0m[1;34m	threadid 22685950145408 -> hwthread 89 - OK[0m[1;34m
[0m[1;34m	threadid 22685748818944 -> hwthread 90 - OK[0m[1;34m
[0m[1;34m	threadid 22685547492480 -> hwthread 91 - OK[0m[1;34m
[0m[1;34m	threadid 22685346166016 -> hwthread 92 - OK[0m[1;34m
[0m[1;34m	threadid 22685144839552 -> hwthread 93 - OK[0m[1;34m
[0m[1;34m	threadid 22684943513088 -> hwthread 94 - OK[0m[1;34m
[0m[1;34m	threadid 22684742186624 -> hwthread 95 - OK[0m[1;34m
[0m[1;34m	threadid 22684540860160 -> hwthread 96 - OK[0m[1;34m
[0m[1;34m	threadid 22684339529600 -> hwthread 97 - OK[0m[1;34m
[0m[1;34m	threadid 22684138203136 -> hwthread 98 - OK[0m[1;34m
[0m[1;34m	threadid 22683936876672 -> hwthread 99 - OK[0m[1;34m
[0m[1;34m	threadid 22683735550208 -> hwthread 100 - OK[0m[1;34m
[0m[1;34m	threadid 22683534223744 -> hwthread 101 - OK[0m[1;34m
[0m[1;34m	threadid 22683332897280 -> hwthread 102 - OK[0m[1;34m
[0m[1;34m	threadid 22683131570816 -> hwthread 103 - OK[0m[1;34m
[0m[1;34m	threadid 22682930244352 -> hwthread 104 - OK[0m[1;34m
[0m[1;34m	threadid 22682728917888 -> hwthread 105 - OK[0m[1;34m
[0m[1;34m	threadid 22682527591424 -> hwthread 106 - OK[0m[1;34m
[0m[1;34m	threadid 22682326264960 -> hwthread 107 - OK[0m[1;34m
[0m[1;34m	threadid 22682124938496 -> hwthread 108 - OK[0m[1;34m
[0m[1;34m	threadid 22681923612032 -> hwthread 109 - OK[0m[1;34m
[0m[1;34m	threadid 22681722285568 -> hwthread 110 - OK[0m[1;34m
[0m[1;34m	threadid 22681520959104 -> hwthread 111 - OK[0m[1;34m
[0m[1;34m	threadid 22681319632640 -> hwthread 112 - OK[0m[1;34m
[0m[1;34m	threadid 22681118306176 -> hwthread 113 - OK[0m[1;34m
[0m[1;34m	threadid 22680916979712 -> hwthread 114 - OK[0m[1;34m
[0m[1;34m	threadid 22680715653248 -> hwthread 115 - OK[0m[1;34m
[0m[1;34m	threadid 22680514326784 -> hwthread 116 - OK[0m[1;34m
[0m[1;34m	threadid 22680313000320 -> hwthread 117 - OK[0m[1;34m
[0m[1;34m	threadid 22680111673856 -> hwthread 118 - OK[0m[1;34m
[0m[1;34m	threadid 22679910347392 -> hwthread 119 - OK[0m[1;34m
[0m[1;34m	threadid 22679709020928 -> hwthread 120 - OK[0m[1;34m
[0m[1;34m	threadid 22679507694464 -> hwthread 121 - OK[0m[1;34m
[0m[1;34m	threadid 22679306368000 -> hwthread 122 - OK[0m[1;34m
[0m[1;34m	threadid 22679105041536 -> hwthread 123 - OK[0m[1;34m
[0m[1;34m	threadid 22678903715072 -> hwthread 124 - OK[0m[1;34m
[0m[1;34m	threadid 22678702388608 -> hwthread 125 - OK[0m[1;34m
[0m[1;34m	threadid 22678501062144 -> hwthread 126 - OK[0m[1;34m
[0m[1;34m	threadid 22678299735680 -> hwthread 127 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22690666678016 -> hwthread 64 - OK[0m[1;34m
[0m[1;34m	threadid 22690660087552 -> hwthread 65 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 91, m: 91)                                                                 	 0.734147  	 700       	 6.70619   	 0         	 0.190194  	 35.2597   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4550, cols: 91, reductionFactor: 37, colBlockingSize: 12)                  	 0.423658  	 600       	 109.608   	 0         	 4.78496   	 22.9067   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 91, r: 91, r2: 4550, leftOrthog: 0)        	 0.165799  	 600       	 272.706   	 0         	 36.4407   	 7.48355   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4550, cols: 41, reductionFactor: 37, colBlockingSize: 12)                  	 0.121827  	 700       	 90.2706   	 0         	 8.6524    	 10.433    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 91, n: 50, r: 91, r2: 91)             	 0.075409  	 600       	 599.587   	 0         	 53.2381   	 11.2624   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 91, reductionFactor: 37, colBlockingSize: 12)                  	 0.0670503 	 100       	 63.4212   	 0         	 2.81318   	 22.5443   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 4550, Xcols: 41, r: 41, streamingCols: 0)                   	 0.0664519 	 700       	 80.5694   	 0         	 31.5125   	 2.55674   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 91, Qr2: 41)       	 0.0537015 	 700       	 0         	 0         	 75.6657   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 91)                                                                 	 0.0483231 	 100       	 4.11121   	 0         	 0.192868  	 21.3162   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                 	 0.0386123 	 100       	 3.02149   	 0         	 0.156427  	 19.3157   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 41, k: 2500)   	 0.033824  	 800       	 242.431   	 0         	 43.4342   	 5.58157   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 41, m: 41)                                                                  	 0.0263665 	 900       	 3.13673   	 0         	 1.38831   	 2.25939   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4550, cols: 50, reductionFactor: 37, colBlockingSize: 12)                  	 0.0243588 	 100       	 95.9195   	 0         	 7.55373   	 12.6983   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 2500, m: 41, k: 50)	 0.0218988 	 800       	 374.45    	 0         	 67.0868   	 5.58157   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 4550, m: 41)                                                                       	 0.0207552 	 700       	 0         	 0         	 100.667   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 41, reductionFactor: 37, colBlockingSize: 12)                  	 0.0166666 	 100       	 51.7932   	 0         	 5.00071   	 10.3572   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 4550, leftOrthog: 0)        	 0.0153029 	 100       	 148.665   	 0         	 35.9409   	 4.13636   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 41, n: 50, r2: 41)                                                                                         	 0.0141695 	 800       	 0         	 0         	 75.9266   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 4550, m: 41)                                                              	 0.0136602 	 700       	 0         	 0         	 152.952   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 2050, k: 41) 	 0.0134175 	 800       	 501.136   	 0         	 89.96     	 5.57065   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 91, r: 91, r2: 2500, leftOrthog: 0)        	 0.0133932 	 100       	 309.15    	 0         	 41.7563   	 7.40367   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 41, n: 50, r2: 41)                   	 0.0107845 	 700       	 0         	 0         	 193.737   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 91, n: 50, r: 91, r2: 50)             	 0.00999275	 100       	 414.35    	 0         	 51.7255   	 8.01056   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 41, m: 2050, k: 41) 	 0.00955984	 700       	 504.66    	 0         	 99.4549   	 5.07426   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r: 91, r2: 91)             	 0.00789495	 100       	 524.449   	 0         	 46.9445   	 11.1717   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 91, reductionFactor: 37, colBlockingSize: 12)                    	 0.00689788	 100       	 12.3296   	 0         	 1.48811   	 8.28541   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 41, r: 41, streamingCols: 0)                   	 0.00631893	 100       	 66.5065   	 0         	 26.0602   	 2.55204   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 50, Qr2: 41)       	 0.00393036	 100       	 0         	 0         	 92.6124   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 2500, m: 41)                                                                       	 0.00339013	 100       	 0         	 0         	 48.3758   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 41)                                                              	 0.00230351	 100       	 0         	 0         	 71.1957   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 0, n: 50, r2: 41)                    	 0.00210463	 100       	 0         	 0         	 77.9233   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 41, reductionFactor: 37, colBlockingSize: 12)                    	 0.0020986 	 100       	 8.2266    	 0         	 1.42228   	 5.78408   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 91, r: 50, r2: 50, leftOrthog: 0)          	 0.00194336	 100       	 23.4131   	 0         	 7.67744   	 3.0496    
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                   	 0.000906143	 100       	 0.551789  	 0         	 2.20716   	 0.25      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 41)                                                                                          	 0.000847113	 200       	 0         	 0         	 7.74395   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 41, k: 50)     	 0.000836237	 100       	 24.5146   	 0         	 6.314     	 3.88258   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 41, m: 41, fromLeft: 0)                	 0.000831563	 800       	 0         	 0         	 25.8751   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 41, n: 50, r2: 1)                                                                                          	 0.000783964	 200       	 0         	 0         	 8.36773   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 50, r2: 50)              	 0.000748056	 100       	 33.42     	 0         	 8.02079   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 50, m: 41, k: 50)  	 0.000742625	 100       	 27.6048   	 0         	 7.10991   	 3.88258   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 41, m: 50, k: 41)   	 0.00063199	 100       	 26.5985   	 0         	 7.31784   	 3.63475   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 50, k: 41)   	 0.000602324	 100       	 34.0348   	 0         	 8.76605   	 3.88258   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 41, n: 50, r2: 1)                    	 0.000516897	 100       	 0         	 0         	 14.084    	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                          	 0.000509649	 100       	 0         	 0         	 7.84854   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 1, r1low: 0, n: 50, r2: 41)                     	 0.000508508	 100       	 0         	 0         	 6.45024   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 1, Xr2: 50, Qr1: 1, Qr2: 0)          	 0.000429097	 100       	 0         	 0         	 9.3219    	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 41)                                                                	 0.000405754	 100       	 0         	 0         	 8.08372   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                            	 0.00039981	 100       	 1.25059   	 0         	 15.0071   	 0.0833333 
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                 	 0.000393089	 100       	 0.635988  	 0         	 10.1758   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 41, n: 50, r2: 1)                                                                                 	 0.000352304	 100       	 0.581884  	 0         	 9.31014   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                 	 0.000330441	 100       	 0.756565  	 0         	 12.105    	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 0, m: 2050, k: 41)  	 6.83e-06  	 100       	 0         	 0         	 9844.8    	 0         
Timing statistics:
function                                                                                                                                                                                      	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                        	 2.65699   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_normalized(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                     	 2.65694   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::rightNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                            	 2.20327   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::rightNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                        	 2.20193   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double]	 2.08727   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                               	 0.821082  	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                  	 0.662557  	 1800      
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                            	 0.522564  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_leftOrthogonalize(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&) [with T = double]                                   	 0.453594  	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]           	 0.290199  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                	 0.196438  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.141045  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                           	 0.0940447 	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                    	 0.0727708 	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                                       	 0.058061  	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double]          	 0.0346602 	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.0263665 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double]        	 0.0242185 	 1800      
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                       	 0.0241454 	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double]       	 0.0226414 	 900       
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                              	 0.0163695 	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                	 0.0163102 	 1300      
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                        	 0.0139145 	 1000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                	 0.00624366	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                              	 0.00341465	 6300      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                         	 0.00115057	 5200      
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                       	 0.00107583	 300       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                         	 0.000906143	 100       
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                           	 0.000831563	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                                                  	 0.00039981	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
orthoX: L, orthoY: L
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 64
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->65  [0m[1;34m1->66  [0m[1;34m2->67  [0m[1;34m3->68  [0m[1;34m4->69  [0m[1;34m5->70  [0m[1;34m6->71  [0m[1;34m7->72  [0m[1;34m8->73  [0m[1;34m9->74  [0m[1;34m10->75  [0m[1;34m11->76  [0m[1;34m12->77  [0m[1;34m13->78  [0m[1;34m14->79  [0m[1;34m15->80  [0m[1;34m16->81  [0m[1;34m17->82  [0m[1;34m18->83  [0m[1;34m19->84  [0m[1;34m20->85  [0m[1;34m21->86  [0m[1;34m22->87  [0m[1;34m23->88  [0m[1;34m24->89  [0m[1;34m25->90  [0m[1;34m26->91  [0m[1;34m27->92  [0m[1;34m28->93  [0m[1;34m29->94  [0m[1;34m30->95  [0m[1;34m31->96  [0m[1;34m32->97  [0m[1;34m33->98  [0m[1;34m34->99  [0m[1;34m35->100  [0m[1;34m36->101  [0m[1;34m37->102  [0m[1;34m38->103  [0m[1;34m39->104  [0m[1;34m40->105  [0m[1;34m41->106  [0m[1;34m42->107  [0m[1;34m43->108  [0m[1;34m44->109  [0m[1;34m45->110  [0m[1;34m46->111  [0m[1;34m47->112  [0m[1;34m48->113  [0m[1;34m49->114  [0m[1;34m50->115  [0m[1;34m51->116  [0m[1;34m52->117  [0m[1;34m53->118  [0m[1;34m54->119  [0m[1;34m55->120  [0m[1;34m56->121  [0m[1;34m57->122  [0m[1;34m58->123  [0m[1;34m59->124  [0m[1;34m60->125  [0m[1;34m61->126  [0m[1;34m62->127  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23436636456832 -> hwthread 65 - OK[0m[1;34m
[0m[1;34m	threadid 23436428568576 -> hwthread 66 - OK[0m[1;34m
[0m[1;34m	threadid 23436227242112 -> hwthread 67 - OK[0m[1;34m
[0m[1;34m	threadid 23436025915648 -> hwthread 68 - OK[0m[1;34m
[0m[1;34m	threadid 23435824589184 -> hwthread 69 - OK[0m[1;34m
[0m[1;34m	threadid 23435623262720 -> hwthread 70 - OK[0m[1;34m
[0m[1;34m	threadid 23435421936256 -> hwthread 71 - OK[0m[1;34m
[0m[1;34m	threadid 23435220609792 -> hwthread 72 - OK[0m[1;34m
[0m[1;34m	threadid 23435019283328 -> hwthread 73 - OK[0m[1;34m
[0m[1;34m	threadid 23434817956864 -> hwthread 74 - OK[0m[1;34m
[0m[1;34m	threadid 23434616630400 -> hwthread 75 - OK[0m[1;34m
[0m[1;34m	threadid 23434415303936 -> hwthread 76 - OK[0m[1;34m
[0m[1;34m	threadid 23434213977472 -> hwthread 77 - OK[0m[1;34m
[0m[1;34m	threadid 23434012651008 -> hwthread 78 - OK[0m[1;34m
[0m[1;34m	threadid 23433811324544 -> hwthread 79 - OK[0m[1;34m
[0m[1;34m	threadid 23433609998080 -> hwthread 80 - OK[0m[1;34m
[0m[1;34m	threadid 23433408671616 -> hwthread 81 - OK[0m[1;34m
[0m[1;34m	threadid 23433207345152 -> hwthread 82 - OK[0m[1;34m
[0m[1;34m	threadid 23433006018688 -> hwthread 83 - OK[0m[1;34m
[0m[1;34m	threadid 23432804692224 -> hwthread 84 - OK[0m[1;34m
[0m[1;34m	threadid 23432603365760 -> hwthread 85 - OK[0m[1;34m
[0m[1;34m	threadid 23432402039296 -> hwthread 86 - OK[0m[1;34m
[0m[1;34m	threadid 23432200712832 -> hwthread 87 - OK[0m[1;34m
[0m[1;34m	threadid 23431999386368 -> hwthread 88 - OK[0m[1;34m
[0m[1;34m	threadid 23431798059904 -> hwthread 89 - OK[0m[1;34m
[0m[1;34m	threadid 23431596733440 -> hwthread 90 - OK[0m[1;34m
[0m[1;34m	threadid 23431395406976 -> hwthread 91 - OK[0m[1;34m
[0m[1;34m	threadid 23431194080512 -> hwthread 92 - OK[0m[1;34m
[0m[1;34m	threadid 23430992754048 -> hwthread 93 - OK[0m[1;34m
[0m[1;34m	threadid 23430791427584 -> hwthread 94 - OK[0m[1;34m
[0m[1;34m	threadid 23430590101120 -> hwthread 95 - OK[0m[1;34m
[0m[1;34m	threadid 23430388774656 -> hwthread 96 - OK[0m[1;34m
[0m[1;34m	threadid 23430187444096 -> hwthread 97 - OK[0m[1;34m
[0m[1;34m	threadid 23429986117632 -> hwthread 98 - OK[0m[1;34m
[0m[1;34m	threadid 23429784791168 -> hwthread 99 - OK[0m[1;34m
[0m[1;34m	threadid 23429583464704 -> hwthread 100 - OK[0m[1;34m
[0m[1;34m	threadid 23429382138240 -> hwthread 101 - OK[0m[1;34m
[0m[1;34m	threadid 23429180811776 -> hwthread 102 - OK[0m[1;34m
[0m[1;34m	threadid 23428979485312 -> hwthread 103 - OK[0m[1;34m
[0m[1;34m	threadid 23428778158848 -> hwthread 104 - OK[0m[1;34m
[0m[1;34m	threadid 23428576832384 -> hwthread 105 - OK[0m[1;34m
[0m[1;34m	threadid 23428375505920 -> hwthread 106 - OK[0m[1;34m
[0m[1;34m	threadid 23428174179456 -> hwthread 107 - OK[0m[1;34m
[0m[1;34m	threadid 23427972852992 -> hwthread 108 - OK[0m[1;34m
[0m[1;34m	threadid 23427771526528 -> hwthread 109 - OK[0m[1;34m
[0m[1;34m	threadid 23427570200064 -> hwthread 110 - OK[0m[1;34m
[0m[1;34m	threadid 23427368873600 -> hwthread 111 - OK[0m[1;34m
[0m[1;34m	threadid 23427167547136 -> hwthread 112 - OK[0m[1;34m
[0m[1;34m	threadid 23426966220672 -> hwthread 113 - OK[0m[1;34m
[0m[1;34m	threadid 23426764894208 -> hwthread 114 - OK[0m[1;34m
[0m[1;34m	threadid 23426563567744 -> hwthread 115 - OK[0m[1;34m
[0m[1;34m	threadid 23426362241280 -> hwthread 116 - OK[0m[1;34m
[0m[1;34m	threadid 23426160914816 -> hwthread 117 - OK[0m[1;34m
[0m[1;34m	threadid 23425959588352 -> hwthread 118 - OK[0m[1;34m
[0m[1;34m	threadid 23425758261888 -> hwthread 119 - OK[0m[1;34m
[0m[1;34m	threadid 23425556935424 -> hwthread 120 - OK[0m[1;34m
[0m[1;34m	threadid 23425355608960 -> hwthread 121 - OK[0m[1;34m
[0m[1;34m	threadid 23425154282496 -> hwthread 122 - OK[0m[1;34m
[0m[1;34m	threadid 23424952956032 -> hwthread 123 - OK[0m[1;34m
[0m[1;34m	threadid 23424751629568 -> hwthread 124 - OK[0m[1;34m
[0m[1;34m	threadid 23424550303104 -> hwthread 125 - OK[0m[1;34m
[0m[1;34m	threadid 23424348976640 -> hwthread 126 - OK[0m[1;34m
[0m[1;34m	threadid 23424147650176 -> hwthread 127 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23436530796288 -> hwthread 64 - OK[0m[1;34m
[0m[1;34m	threadid 23436524205824 -> hwthread 65 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 92, m: 92)                                                                 	 0.719875  	 700       	 7.0671    	 0         	 0.198243  	 35.6486   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4600, cols: 92, reductionFactor: 37, colBlockingSize: 12)                  	 0.423665  	 600       	 113.259   	 0         	 4.89063   	 23.1585   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 92, r: 92, r2: 4600, leftOrthog: 0)        	 0.16058   	 600       	 290.953   	 0         	 38.4564   	 7.56579   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4600, cols: 42, reductionFactor: 37, colBlockingSize: 12)                  	 0.124502  	 700       	 93.7107   	 0         	 8.76931   	 10.6862   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 92, n: 50, r: 92, r2: 92)             	 0.0712911 	 600       	 655.359   	 0         	 57.5576   	 11.3861   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 4600, Xcols: 42, r: 42, streamingCols: 0)                   	 0.0688126 	 700       	 82.5442   	 0         	 31.5172   	 2.61902   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 92, reductionFactor: 37, colBlockingSize: 12)                  	 0.0671415 	 100       	 64.7346   	 0         	 2.84133   	 22.7832   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 92, Qr2: 42)       	 0.0572986 	 700       	 0         	 0         	 72.4597   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 92)                                                                 	 0.0486837 	 100       	 4.12184   	 0         	 0.193083  	 21.3475   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                 	 0.0377275 	 100       	 3.09235   	 0         	 0.160095  	 19.3157   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 42, k: 2500)   	 0.0360247 	 800       	 233.173   	 0         	 41.2339   	 5.65489   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 42, m: 42)                                                                  	 0.0266035 	 900       	 3.34188   	 0         	 1.4436    	 2.31496   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4600, cols: 50, reductionFactor: 37, colBlockingSize: 12)                  	 0.0246425 	 100       	 95.8572   	 0         	 7.54793   	 12.6998   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 2500, m: 42, k: 50)	 0.0235237 	 800       	 357.086   	 0         	 63.1465   	 5.65489   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 4600, m: 42)                                                                       	 0.0223815 	 700       	 0         	 0         	 96.6797   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 4600, leftOrthog: 0)        	 0.0167974 	 100       	 136.926   	 0         	 33.1004   	 4.13669   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 42, reductionFactor: 37, colBlockingSize: 12)                  	 0.016388  	 100       	 55.2745   	 0         	 5.21182   	 10.6056   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 42, n: 50, r2: 42)                                                                                         	 0.0147367 	 800       	 0         	 0         	 76.6089   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 4600, m: 42)                                                              	 0.0137888 	 700       	 0         	 0         	 156.927   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 2100, k: 42) 	 0.0137566 	 800       	 512.918   	 0         	 90.8598   	 5.64516   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 42, n: 50, r2: 42)                   	 0.0130438 	 700       	 0         	 0         	 165.89    	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 92, r: 92, r2: 2500, leftOrthog: 0)        	 0.0127192 	 100       	 332.725   	 0         	 44.4636   	 7.48308   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 92, n: 50, r: 92, r2: 50)             	 0.0103451 	 100       	 409.084   	 0         	 50.8688   	 8.04196   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 42, m: 2100, k: 42) 	 0.0100298 	 700       	 517.076   	 0         	 99.4756   	 5.19802   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r: 92, r2: 92)             	 0.00847328	 100       	 499.452   	 0         	 44.2298   	 11.2922   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 92, reductionFactor: 37, colBlockingSize: 12)                    	 0.00668172	 100       	 13.0098   	 0         	 1.56415   	 8.31747   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 42, r: 42, streamingCols: 0)                   	 0.00652396	 100       	 67.597    	 0         	 25.8594   	 2.61402   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 50, Qr2: 42)       	 0.00401663	 100       	 0         	 0         	 91.6192   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 2500, m: 42)                                                                       	 0.00358417	 100       	 0         	 0         	 46.8728   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 0, n: 50, r2: 42)                    	 0.00356902	 100       	 0         	 0         	 47.0717   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 42)                                                              	 0.00282612	 100       	 0         	 0         	 59.4455   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 42, reductionFactor: 37, colBlockingSize: 12)                    	 0.00219   	 100       	 8.27248   	 0         	 1.4115    	 5.86075   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 92, r: 50, r2: 50, leftOrthog: 0)          	 0.00193245	 100       	 23.804    	 0         	 7.78288   	 3.05851   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                   	 0.000919372	 100       	 0.543849  	 0         	 2.1754    	 0.25      
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 42, k: 50)     	 0.000847036	 100       	 24.7923   	 0         	 6.32795   	 3.91791   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 42)                                                                                          	 0.000833083	 200       	 0         	 0         	 8.06642   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 42, n: 50, r2: 1)                                                                                          	 0.000787388	 200       	 0         	 0         	 8.53455   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 50, r2: 50)              	 0.000739046	 100       	 33.8274   	 0         	 8.11857   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 50, m: 42, k: 50)  	 0.000719079	 100       	 29.204    	 0         	 7.45398   	 3.91791   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 42, m: 42, fromLeft: 0)                	 0.000706256	 800       	 0         	 0         	 31.9703   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 50, k: 42)   	 0.000592659	 100       	 35.4335   	 0         	 9.04399   	 3.91791   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 42, m: 50, k: 42)   	 0.000546582	 100       	 32.2733   	 0         	 8.72916   	 3.69718   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 1, r1low: 0, n: 50, r2: 42)                     	 0.000525425	 100       	 0         	 0         	 6.39482   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                          	 0.000525059	 100       	 0         	 0         	 7.61819   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 42, n: 50, r2: 1)                    	 0.000512058	 100       	 0         	 0         	 14.3734   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 1, Xr2: 50, Qr1: 1, Qr2: 0)          	 0.00041066	 100       	 0         	 0         	 9.74042   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                            	 0.000407394	 100       	 1.22731   	 0         	 14.7278   	 0.0833333 
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 42)                                                                	 0.000397899	 100       	 0         	 0         	 8.44435   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                 	 0.000396829	 100       	 0.629994  	 0         	 10.0799   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                 	 0.000381615	 100       	 0.655111  	 0         	 10.4818   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 42, n: 50, r2: 1)                                                                                 	 0.000358202	 100       	 0.586261  	 0         	 9.38018   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 0, m: 2100, k: 42)  	 6.42e-06  	 100       	 0         	 0         	 10990.7   	 0         
Timing statistics:
function                                                                                                                                                                                      	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                        	 2.63112   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_normalized(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                     	 2.63108   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::rightNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                            	 2.16153   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::rightNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                        	 2.16014   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double]	 2.0515    	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                               	 0.806286  	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                  	 0.66521   	 1800      
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                            	 0.522761  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_leftOrthogonalize(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&) [with T = double]                                   	 0.469481  	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]           	 0.297895  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                	 0.192029  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.143528  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                           	 0.0908485 	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                    	 0.0753366 	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                                       	 0.0617259 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double]          	 0.0368717 	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.0266035 	 900       
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                       	 0.0259657 	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double]        	 0.024932  	 1800      
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double]       	 0.0242428 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                        	 0.0176503 	 1000      
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                              	 0.0170128 	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                	 0.0168822 	 1300      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                	 0.00428404	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                              	 0.00286389	 6300      
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                       	 0.00113665	 300       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                         	 0.0011111 	 5200      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                         	 0.000919372	 100       
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                           	 0.000706256	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                                                  	 0.000407394	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
orthoX: L, orthoY: L
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 64
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->65  [0m[1;34m1->66  [0m[1;34m2->67  [0m[1;34m3->68  [0m[1;34m4->69  [0m[1;34m5->70  [0m[1;34m6->71  [0m[1;34m7->72  [0m[1;34m8->73  [0m[1;34m9->74  [0m[1;34m10->75  [0m[1;34m11->76  [0m[1;34m12->77  [0m[1;34m13->78  [0m[1;34m14->79  [0m[1;34m15->80  [0m[1;34m16->81  [0m[1;34m17->82  [0m[1;34m18->83  [0m[1;34m19->84  [0m[1;34m20->85  [0m[1;34m21->86  [0m[1;34m22->87  [0m[1;34m23->88  [0m[1;34m24->89  [0m[1;34m25->90  [0m[1;34m26->91  [0m[1;34m27->92  [0m[1;34m28->93  [0m[1;34m29->94  [0m[1;34m30->95  [0m[1;34m31->96  [0m[1;34m32->97  [0m[1;34m33->98  [0m[1;34m34->99  [0m[1;34m35->100  [0m[1;34m36->101  [0m[1;34m37->102  [0m[1;34m38->103  [0m[1;34m39->104  [0m[1;34m40->105  [0m[1;34m41->106  [0m[1;34m42->107  [0m[1;34m43->108  [0m[1;34m44->109  [0m[1;34m45->110  [0m[1;34m46->111  [0m[1;34m47->112  [0m[1;34m48->113  [0m[1;34m49->114  [0m[1;34m50->115  [0m[1;34m51->116  [0m[1;34m52->117  [0m[1;34m53->118  [0m[1;34m54->119  [0m[1;34m55->120  [0m[1;34m56->121  [0m[1;34m57->122  [0m[1;34m58->123  [0m[1;34m59->124  [0m[1;34m60->125  [0m[1;34m61->126  [0m[1;34m62->127  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22419101013888 -> hwthread 65 - OK[0m[1;34m
[0m[1;34m	threadid 22418923972608 -> hwthread 66 - OK[0m[1;34m
[0m[1;34m	threadid 22418722646144 -> hwthread 67 - OK[0m[1;34m
[0m[1;34m	threadid 22418521319680 -> hwthread 68 - OK[0m[1;34m
[0m[1;34m	threadid 22418319993216 -> hwthread 69 - OK[0m[1;34m
[0m[1;34m	threadid 22418118666752 -> hwthread 70 - OK[0m[1;34m
[0m[1;34m	threadid 22417917340288 -> hwthread 71 - OK[0m[1;34m
[0m[1;34m	threadid 22417716013824 -> hwthread 72 - OK[0m[1;34m
[0m[1;34m	threadid 22417514687360 -> hwthread 73 - OK[0m[1;34m
[0m[1;34m	threadid 22417313360896 -> hwthread 74 - OK[0m[1;34m
[0m[1;34m	threadid 22417112034432 -> hwthread 75 - OK[0m[1;34m
[0m[1;34m	threadid 22416910707968 -> hwthread 76 - OK[0m[1;34m
[0m[1;34m	threadid 22416709381504 -> hwthread 77 - OK[0m[1;34m
[0m[1;34m	threadid 22416508055040 -> hwthread 78 - OK[0m[1;34m
[0m[1;34m	threadid 22416306728576 -> hwthread 79 - OK[0m[1;34m
[0m[1;34m	threadid 22416105402112 -> hwthread 80 - OK[0m[1;34m
[0m[1;34m	threadid 22415904075648 -> hwthread 81 - OK[0m[1;34m
[0m[1;34m	threadid 22415702749184 -> hwthread 82 - OK[0m[1;34m
[0m[1;34m	threadid 22415501422720 -> hwthread 83 - OK[0m[1;34m
[0m[1;34m	threadid 22415300096256 -> hwthread 84 - OK[0m[1;34m
[0m[1;34m	threadid 22415098769792 -> hwthread 85 - OK[0m[1;34m
[0m[1;34m	threadid 22414897443328 -> hwthread 86 - OK[0m[1;34m
[0m[1;34m	threadid 22414696116864 -> hwthread 87 - OK[0m[1;34m
[0m[1;34m	threadid 22414494790400 -> hwthread 88 - OK[0m[1;34m
[0m[1;34m	threadid 22414293463936 -> hwthread 89 - OK[0m[1;34m
[0m[1;34m	threadid 22414092137472 -> hwthread 90 - OK[0m[1;34m
[0m[1;34m	threadid 22413890811008 -> hwthread 91 - OK[0m[1;34m
[0m[1;34m	threadid 22413689484544 -> hwthread 92 - OK[0m[1;34m
[0m[1;34m	threadid 22413488158080 -> hwthread 93 - OK[0m[1;34m
[0m[1;34m	threadid 22413286831616 -> hwthread 94 - OK[0m[1;34m
[0m[1;34m	threadid 22413085505152 -> hwthread 95 - OK[0m[1;34m
[0m[1;34m	threadid 22412884178688 -> hwthread 96 - OK[0m[1;34m
[0m[1;34m	threadid 22412682848128 -> hwthread 97 - OK[0m[1;34m
[0m[1;34m	threadid 22412481521664 -> hwthread 98 - OK[0m[1;34m
[0m[1;34m	threadid 22412280195200 -> hwthread 99 - OK[0m[1;34m
[0m[1;34m	threadid 22412078868736 -> hwthread 100 - OK[0m[1;34m
[0m[1;34m	threadid 22411877542272 -> hwthread 101 - OK[0m[1;34m
[0m[1;34m	threadid 22411676215808 -> hwthread 102 - OK[0m[1;34m
[0m[1;34m	threadid 22411474889344 -> hwthread 103 - OK[0m[1;34m
[0m[1;34m	threadid 22411273562880 -> hwthread 104 - OK[0m[1;34m
[0m[1;34m	threadid 22411072236416 -> hwthread 105 - OK[0m[1;34m
[0m[1;34m	threadid 22410870909952 -> hwthread 106 - OK[0m[1;34m
[0m[1;34m	threadid 22410669583488 -> hwthread 107 - OK[0m[1;34m
[0m[1;34m	threadid 22410468257024 -> hwthread 108 - OK[0m[1;34m
[0m[1;34m	threadid 22410266930560 -> hwthread 109 - OK[0m[1;34m
[0m[1;34m	threadid 22410065604096 -> hwthread 110 - OK[0m[1;34m
[0m[1;34m	threadid 22409864277632 -> hwthread 111 - OK[0m[1;34m
[0m[1;34m	threadid 22409662951168 -> hwthread 112 - OK[0m[1;34m
[0m[1;34m	threadid 22409461624704 -> hwthread 113 - OK[0m[1;34m
[0m[1;34m	threadid 22409260298240 -> hwthread 114 - OK[0m[1;34m
[0m[1;34m	threadid 22409058971776 -> hwthread 115 - OK[0m[1;34m
[0m[1;34m	threadid 22408857645312 -> hwthread 116 - OK[0m[1;34m
[0m[1;34m	threadid 22408656318848 -> hwthread 117 - OK[0m[1;34m
[0m[1;34m	threadid 22408454992384 -> hwthread 118 - OK[0m[1;34m
[0m[1;34m	threadid 22408253665920 -> hwthread 119 - OK[0m[1;34m
[0m[1;34m	threadid 22408052339456 -> hwthread 120 - OK[0m[1;34m
[0m[1;34m	threadid 22407851012992 -> hwthread 121 - OK[0m[1;34m
[0m[1;34m	threadid 22407649686528 -> hwthread 122 - OK[0m[1;34m
[0m[1;34m	threadid 22407448360064 -> hwthread 123 - OK[0m[1;34m
[0m[1;34m	threadid 22407247033600 -> hwthread 124 - OK[0m[1;34m
[0m[1;34m	threadid 22407045707136 -> hwthread 125 - OK[0m[1;34m
[0m[1;34m	threadid 22406844380672 -> hwthread 126 - OK[0m[1;34m
[0m[1;34m	threadid 22406643054208 -> hwthread 127 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22418995353344 -> hwthread 64 - OK[0m[1;34m
[0m[1;34m	threadid 22418816763648 -> hwthread 65 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 93, m: 93)                                                                 	 0.762298  	 700       	 6.8938    	 0         	 0.191295  	 36.0375   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4650, cols: 93, reductionFactor: 37, colBlockingSize: 12)                  	 0.434918  	 600       	 113.966   	 0         	 4.86822   	 23.4102   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 93, r: 93, r2: 4650, leftOrthog: 0)        	 0.169789  	 600       	 284.243   	 0         	 37.1655   	 7.64803   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4650, cols: 43, reductionFactor: 37, colBlockingSize: 12)                  	 0.130961  	 700       	 94.3971   	 0         	 8.6291    	 10.9394   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 93, n: 50, r: 93, r2: 93)             	 0.0802302 	 600       	 601.537   	 0         	 52.2625   	 11.5099   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 93, reductionFactor: 37, colBlockingSize: 12)                  	 0.0708314 	 100       	 62.7036   	 0         	 2.72364   	 23.022    
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 4650, Xcols: 43, r: 43, streamingCols: 0)                   	 0.0692421 	 700       	 86.9196   	 0         	 32.4169   	 2.6813    
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 93, Qr2: 43)       	 0.0558639 	 700       	 0         	 0         	 75.9245   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 93)                                                                 	 0.0491688 	 100       	 4.12185   	 0         	 0.192805  	 21.3783   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                 	 0.0375655 	 100       	 3.10568   	 0         	 0.160786  	 19.3157   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 43, k: 2500)   	 0.0350487 	 800       	 245.373   	 0         	 42.8479   	 5.72661   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 43, m: 43)                                                                  	 0.0286916 	 900       	 3.32527   	 0         	 1.40278   	 2.37048   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4650, cols: 50, reductionFactor: 37, colBlockingSize: 12)                  	 0.0251377 	 100       	 94.9904   	 0         	 7.47881   	 12.7013   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 2500, m: 43, k: 50)	 0.0232597 	 800       	 369.738   	 0         	 64.5648   	 5.72661   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 4650, m: 43)                                                                       	 0.0216056 	 700       	 0         	 0         	 103.651   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 43, reductionFactor: 37, colBlockingSize: 12)                  	 0.0169402 	 100       	 56.0492   	 0         	 5.16399   	 10.8539   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 43, n: 50, r2: 43)                                                                                         	 0.0148156 	 800       	 0         	 0         	 79.8725   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 4650, m: 43)                                                              	 0.0142518 	 700       	 0         	 0         	 157.134   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 2150, k: 43) 	 0.0140316 	 800       	 527.097   	 0         	 92.1807   	 5.71809   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 4650, leftOrthog: 0)        	 0.0137832 	 100       	 168.683   	 0         	 40.7742   	 4.13701   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 93, r: 93, r2: 2500, leftOrthog: 0)        	 0.0137118 	 100       	 315.386   	 0         	 41.7042   	 7.56245   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 43, n: 50, r2: 43)                   	 0.0123194 	 700       	 0         	 0         	 181.782   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 93, n: 50, r: 93, r2: 50)             	 0.0104233 	 100       	 414.887   	 0         	 51.3925   	 8.07292   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 43, m: 2150, k: 43) 	 0.0103007 	 700       	 540.3     	 0         	 101.526   	 5.32178   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r: 93, r2: 93)             	 0.00802893	 100       	 538.615   	 0         	 47.1942   	 11.4127   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 93, reductionFactor: 37, colBlockingSize: 12)                    	 0.00713352	 100       	 12.4521   	 0         	 1.49144   	 8.34908   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 43, r: 43, streamingCols: 0)                   	 0.00649153	 100       	 71.2082   	 0         	 26.61     	 2.67599   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 50, Qr2: 43)       	 0.0039451 	 100       	 0         	 0         	 94.2941   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 2500, m: 43)                                                                       	 0.00389922	 100       	 0         	 0         	 44.1114   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 43)                                                              	 0.00313008	 100       	 0         	 0         	 54.9506   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 0, n: 50, r2: 43)                    	 0.00300316	 100       	 0         	 0         	 57.2731   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 43, reductionFactor: 37, colBlockingSize: 12)                    	 0.00228142	 100       	 8.32365   	 0         	 1.40229   	 5.93577   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 93, r: 50, r2: 50, leftOrthog: 0)          	 0.00206849	 100       	 22.4802   	 0         	 7.32903   	 3.06728   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 43, m: 43, fromLeft: 0)                	 0.000900695	 800       	 0         	 0         	 26.2766   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 43)                                                                                          	 0.000841119	 200       	 0         	 0         	 8.17958   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 43, k: 50)     	 0.000840201	 100       	 25.5891   	 0         	 6.47464   	 3.95221   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                   	 0.000825508	 100       	 0.605688  	 0         	 2.42275   	 0.25      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 43, n: 50, r2: 1)                                                                                          	 0.000772493	 200       	 0         	 0         	 8.90623   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 50, r2: 50)              	 0.000737527	 100       	 33.8971   	 0         	 8.1353    	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 50, m: 43, k: 50)  	 0.00068843	 100       	 31.2305   	 0         	 7.90204   	 3.95221   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 50, k: 43)   	 0.000643141	 100       	 33.4297   	 0         	 8.45849   	 3.95221   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 43, m: 50, k: 43)   	 0.00055456	 100       	 33.3417   	 0         	 8.87046   	 3.75874   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                          	 0.000547334	 100       	 0         	 0         	 7.30815   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 43, n: 50, r2: 1)                    	 0.000526458	 100       	 0         	 0         	 14.1322   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 1, r1low: 0, n: 50, r2: 43)                     	 0.000488515	 100       	 0         	 0         	 7.04175   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 43)                                                                	 0.000428376	 100       	 0         	 0         	 8.03033   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 1, Xr2: 50, Qr1: 1, Qr2: 0)          	 0.000421263	 100       	 0         	 0         	 9.49526   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                 	 0.000406285	 100       	 0.615332  	 0         	 9.84531   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                            	 0.000394752	 100       	 1.26662   	 0         	 15.1994   	 0.0833333 
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 43, n: 50, r2: 1)                                                                                 	 0.000353221	 100       	 0.608684  	 0         	 9.73895   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                 	 0.000346554	 100       	 0.721388  	 0         	 11.5422   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 0, m: 2150, k: 43)  	 6.98e-06  	 100       	 0         	 0         	 10596     	 0         
Timing statistics:
function                                                                                                                                                                                      	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                        	 2.75311   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_normalized(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                     	 2.75305   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::rightNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                            	 2.27077   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::rightNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                        	 2.26951   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double]	 2.15007   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                               	 0.849033  	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                  	 0.688203  	 1800      
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                            	 0.538678  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_leftOrthogonalize(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&) [with T = double]                                   	 0.482205  	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]           	 0.310036  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                	 0.199353  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.150648  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                           	 0.09942   	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                    	 0.0757337 	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                                       	 0.0602303 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double]          	 0.0358889 	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.0286916 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double]        	 0.025537  	 1800      
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                       	 0.0255048 	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double]       	 0.0239482 	 900       
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                              	 0.0178102 	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                	 0.0169766 	 1300      
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                        	 0.0163375 	 1000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                	 0.00609283	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                              	 0.00329069	 6300      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                         	 0.00114072	 5200      
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                       	 0.00110606	 300       
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                           	 0.000900695	 800       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                         	 0.000825508	 100       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                                                  	 0.000394752	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
orthoX: L, orthoY: L
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 64
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->65  [0m[1;34m1->66  [0m[1;34m2->67  [0m[1;34m3->68  [0m[1;34m4->69  [0m[1;34m5->70  [0m[1;34m6->71  [0m[1;34m7->72  [0m[1;34m8->73  [0m[1;34m9->74  [0m[1;34m10->75  [0m[1;34m11->76  [0m[1;34m12->77  [0m[1;34m13->78  [0m[1;34m14->79  [0m[1;34m15->80  [0m[1;34m16->81  [0m[1;34m17->82  [0m[1;34m18->83  [0m[1;34m19->84  [0m[1;34m20->85  [0m[1;34m21->86  [0m[1;34m22->87  [0m[1;34m23->88  [0m[1;34m24->89  [0m[1;34m25->90  [0m[1;34m26->91  [0m[1;34m27->92  [0m[1;34m28->93  [0m[1;34m29->94  [0m[1;34m30->95  [0m[1;34m31->96  [0m[1;34m32->97  [0m[1;34m33->98  [0m[1;34m34->99  [0m[1;34m35->100  [0m[1;34m36->101  [0m[1;34m37->102  [0m[1;34m38->103  [0m[1;34m39->104  [0m[1;34m40->105  [0m[1;34m41->106  [0m[1;34m42->107  [0m[1;34m43->108  [0m[1;34m44->109  [0m[1;34m45->110  [0m[1;34m46->111  [0m[1;34m47->112  [0m[1;34m48->113  [0m[1;34m49->114  [0m[1;34m50->115  [0m[1;34m51->116  [0m[1;34m52->117  [0m[1;34m53->118  [0m[1;34m54->119  [0m[1;34m55->120  [0m[1;34m56->121  [0m[1;34m57->122  [0m[1;34m58->123  [0m[1;34m59->124  [0m[1;34m60->125  [0m[1;34m61->126  [0m[1;34m62->127  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22534865864576 -> hwthread 65 - OK[0m[1;34m
[0m[1;34m	threadid 22534686763008 -> hwthread 66 - OK[0m[1;34m
[0m[1;34m	threadid 22534485436544 -> hwthread 67 - OK[0m[1;34m
[0m[1;34m	threadid 22534284110080 -> hwthread 68 - OK[0m[1;34m
[0m[1;34m	threadid 22534082783616 -> hwthread 69 - OK[0m[1;34m
[0m[1;34m	threadid 22533881457152 -> hwthread 70 - OK[0m[1;34m
[0m[1;34m	threadid 22533680130688 -> hwthread 71 - OK[0m[1;34m
[0m[1;34m	threadid 22533478804224 -> hwthread 72 - OK[0m[1;34m
[0m[1;34m	threadid 22533277477760 -> hwthread 73 - OK[0m[1;34m
[0m[1;34m	threadid 22533076151296 -> hwthread 74 - OK[0m[1;34m
[0m[1;34m	threadid 22532874824832 -> hwthread 75 - OK[0m[1;34m
[0m[1;34m	threadid 22532673498368 -> hwthread 76 - OK[0m[1;34m
[0m[1;34m	threadid 22532472171904 -> hwthread 77 - OK[0m[1;34m
[0m[1;34m	threadid 22532270845440 -> hwthread 78 - OK[0m[1;34m
[0m[1;34m	threadid 22532069518976 -> hwthread 79 - OK[0m[1;34m
[0m[1;34m	threadid 22531868192512 -> hwthread 80 - OK[0m[1;34m
[0m[1;34m	threadid 22531666866048 -> hwthread 81 - OK[0m[1;34m
[0m[1;34m	threadid 22531465539584 -> hwthread 82 - OK[0m[1;34m
[0m[1;34m	threadid 22531264213120 -> hwthread 83 - OK[0m[1;34m
[0m[1;34m	threadid 22531062886656 -> hwthread 84 - OK[0m[1;34m
[0m[1;34m	threadid 22530861560192 -> hwthread 85 - OK[0m[1;34m
[0m[1;34m	threadid 22530660233728 -> hwthread 86 - OK[0m[1;34m
[0m[1;34m	threadid 22530458907264 -> hwthread 87 - OK[0m[1;34m
[0m[1;34m	threadid 22530257580800 -> hwthread 88 - OK[0m[1;34m
[0m[1;34m	threadid 22530056254336 -> hwthread 89 - OK[0m[1;34m
[0m[1;34m	threadid 22529854927872 -> hwthread 90 - OK[0m[1;34m
[0m[1;34m	threadid 22529653601408 -> hwthread 91 - OK[0m[1;34m
[0m[1;34m	threadid 22529452274944 -> hwthread 92 - OK[0m[1;34m
[0m[1;34m	threadid 22529250948480 -> hwthread 93 - OK[0m[1;34m
[0m[1;34m	threadid 22529049622016 -> hwthread 94 - OK[0m[1;34m
[0m[1;34m	threadid 22528848295552 -> hwthread 95 - OK[0m[1;34m
[0m[1;34m	threadid 22528646969088 -> hwthread 96 - OK[0m[1;34m
[0m[1;34m	threadid 22528445638528 -> hwthread 97 - OK[0m[1;34m
[0m[1;34m	threadid 22528244312064 -> hwthread 98 - OK[0m[1;34m
[0m[1;34m	threadid 22528042985600 -> hwthread 99 - OK[0m[1;34m
[0m[1;34m	threadid 22527841659136 -> hwthread 100 - OK[0m[1;34m
[0m[1;34m	threadid 22527640332672 -> hwthread 101 - OK[0m[1;34m
[0m[1;34m	threadid 22527439006208 -> hwthread 102 - OK[0m[1;34m
[0m[1;34m	threadid 22527237679744 -> hwthread 103 - OK[0m[1;34m
[0m[1;34m	threadid 22527036353280 -> hwthread 104 - OK[0m[1;34m
[0m[1;34m	threadid 22526835026816 -> hwthread 105 - OK[0m[1;34m
[0m[1;34m	threadid 22526633700352 -> hwthread 106 - OK[0m[1;34m
[0m[1;34m	threadid 22526432373888 -> hwthread 107 - OK[0m[1;34m
[0m[1;34m	threadid 22526231047424 -> hwthread 108 - OK[0m[1;34m
[0m[1;34m	threadid 22526029720960 -> hwthread 109 - OK[0m[1;34m
[0m[1;34m	threadid 22525828394496 -> hwthread 110 - OK[0m[1;34m
[0m[1;34m	threadid 22525627068032 -> hwthread 111 - OK[0m[1;34m
[0m[1;34m	threadid 22525425741568 -> hwthread 112 - OK[0m[1;34m
[0m[1;34m	threadid 22525224415104 -> hwthread 113 - OK[0m[1;34m
[0m[1;34m	threadid 22525023088640 -> hwthread 114 - OK[0m[1;34m
[0m[1;34m	threadid 22524821762176 -> hwthread 115 - OK[0m[1;34m
[0m[1;34m	threadid 22524620435712 -> hwthread 116 - OK[0m[1;34m
[0m[1;34m	threadid 22524419109248 -> hwthread 117 - OK[0m[1;34m
[0m[1;34m	threadid 22524217782784 -> hwthread 118 - OK[0m[1;34m
[0m[1;34m	threadid 22524016456320 -> hwthread 119 - OK[0m[1;34m
[0m[1;34m	threadid 22523815129856 -> hwthread 120 - OK[0m[1;34m
[0m[1;34m	threadid 22523613803392 -> hwthread 121 - OK[0m[1;34m
[0m[1;34m	threadid 22523412476928 -> hwthread 122 - OK[0m[1;34m
[0m[1;34m	threadid 22523211150464 -> hwthread 123 - OK[0m[1;34m
[0m[1;34m	threadid 22523009824000 -> hwthread 124 - OK[0m[1;34m
[0m[1;34m	threadid 22522808497536 -> hwthread 125 - OK[0m[1;34m
[0m[1;34m	threadid 22522607171072 -> hwthread 126 - OK[0m[1;34m
[0m[1;34m	threadid 22522405844608 -> hwthread 127 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22534760204032 -> hwthread 64 - OK[0m[1;34m
[0m[1;34m	threadid 22534581364480 -> hwthread 65 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 94, m: 94)                                                                 	 0.763225  	 700       	 7.10994   	 0         	 0.195186  	 36.4264   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4700, cols: 94, reductionFactor: 37, colBlockingSize: 12)                  	 0.446169  	 600       	 114.714   	 0         	 4.84806   	 23.6619   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 94, r: 94, r2: 4700, leftOrthog: 0)        	 0.179567  	 600       	 277.529   	 0         	 35.9017   	 7.73026   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4700, cols: 44, reductionFactor: 37, colBlockingSize: 12)                  	 0.137656  	 700       	 95.0428   	 0         	 8.49164   	 11.1925   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 94, n: 50, r: 94, r2: 94)             	 0.0828969 	 600       	 601.169   	 0         	 51.6749   	 11.6337   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 4700, Xcols: 44, r: 44, streamingCols: 0)                   	 0.0722171 	 700       	 88.1985   	 0         	 32.1472   	 2.74358   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 94, reductionFactor: 37, colBlockingSize: 12)                  	 0.0704213 	 100       	 64.4323   	 0         	 2.77003   	 23.2605   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 94, Qr2: 44)       	 0.0560207 	 700       	 0         	 0         	 77.3314   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 94)                                                                 	 0.0485876 	 100       	 4.21232   	 0         	 0.196758  	 21.4086   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                 	 0.038673  	 100       	 3.01675   	 0         	 0.156181  	 19.3157   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 44, k: 2500)   	 0.0367043 	 800       	 239.754   	 0         	 41.3597   	 5.7968    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 44, m: 44)                                                                  	 0.027647  	 900       	 3.69734   	 0         	 1.52402   	 2.42605   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4700, cols: 50, reductionFactor: 37, colBlockingSize: 12)                  	 0.0244362 	 100       	 98.7678   	 0         	 7.77534   	 12.7027   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 2500, m: 44, k: 50)	 0.0241339 	 800       	 364.632   	 0         	 62.9024   	 5.7968    
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 4700, m: 44)                                                                       	 0.0224929 	 700       	 0         	 0         	 102.973   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 44, reductionFactor: 37, colBlockingSize: 12)                  	 0.0176773 	 100       	 56.2395   	 0         	 5.06575   	 11.1019   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 44, n: 50, r2: 44)                                                                                         	 0.0157507 	 800       	 0         	 0         	 78.6656   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 4700, m: 44)                                                              	 0.0155288 	 700       	 0         	 0         	 149.153   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 2200, k: 44) 	 0.0150579 	 800       	 514.281   	 0         	 88.8304   	 5.78947   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 4700, leftOrthog: 0)        	 0.0141971 	 100       	 165.526   	 0         	 40.0081   	 4.13732   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 94, r: 94, r2: 2500, leftOrthog: 0)        	 0.0139537 	 100       	 316.617   	 0         	 41.4324   	 7.64178   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 44, n: 50, r2: 44)                   	 0.0121605 	 700       	 0         	 0         	 190.466   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 94, n: 50, r: 94, r2: 50)             	 0.0103831 	 100       	 425.497   	 0         	 52.5082   	 8.10345   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 44, m: 2200, k: 44) 	 0.0103796 	 700       	 574.479   	 0         	 105.495   	 5.44554   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r: 94, r2: 94)             	 0.00822017	 100       	 537.458   	 0         	 46.6011   	 11.5332   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 94, reductionFactor: 37, colBlockingSize: 12)                    	 0.0074229 	 100       	 12.2254   	 0         	 1.45884   	 8.38026   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 44, r: 44, streamingCols: 0)                   	 0.00680221	 100       	 71.1533   	 0         	 25.9878   	 2.73795   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 50, Qr2: 44)       	 0.0041829 	 100       	 0         	 0         	 89.8898   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 2500, m: 44)                                                                       	 0.00384728	 100       	 0         	 0         	 45.7466   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 0, n: 50, r2: 44)                    	 0.00339195	 100       	 0         	 0         	 51.8876   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 44)                                                              	 0.00276547	 100       	 0         	 0         	 63.642    	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 44, reductionFactor: 37, colBlockingSize: 12)                    	 0.00231636	 100       	 8.58383   	 0         	 1.42845   	 6.0092    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 94, r: 50, r2: 50, leftOrthog: 0)          	 0.00197609	 100       	 23.7843   	 0         	 7.73242   	 3.07592   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                   	 0.000933528	 100       	 0.535603  	 0         	 2.14241   	 0.25      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 44)                                                                                          	 0.000877363	 200       	 0         	 0         	 8.02404   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 44, k: 50)     	 0.000811381	 100       	 27.1143   	 0         	 6.80322   	 3.98551   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 44, n: 50, r2: 1)                                                                                          	 0.0007951 	 200       	 0         	 0         	 8.85423   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 50, r2: 50)              	 0.000746198	 100       	 33.5032   	 0         	 8.04076   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 50, m: 44, k: 50)  	 0.000686684	 100       	 32.038    	 0         	 8.03863   	 3.98551   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 50, k: 44)   	 0.000604413	 100       	 36.399    	 0         	 9.13283   	 3.98551   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 44, m: 44, fromLeft: 0)                	 0.000586559	 800       	 0         	 0         	 42.2478   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 44, m: 50, k: 44)   	 0.000538167	 100       	 35.974    	 0         	 9.41864   	 3.81944   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                          	 0.000521074	 100       	 0         	 0         	 7.67645   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 44, n: 50, r2: 1)                    	 0.000508286	 100       	 0         	 0         	 14.7948   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 1, r1low: 0, n: 50, r2: 44)                     	 0.000506683	 100       	 0         	 0         	 6.94714   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                            	 0.000409669	 100       	 1.2205    	 0         	 14.646    	 0.0833333 
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 44)                                                                	 0.000405768	 100       	 0         	 0         	 8.67491   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                 	 0.000398244	 100       	 0.627756  	 0         	 10.0441   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 1, Xr2: 50, Qr1: 1, Qr2: 0)          	 0.000395588	 100       	 0         	 0         	 10.1115   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 44, n: 50, r2: 1)                                                                                 	 0.000390705	 100       	 0.563085  	 0         	 9.00935   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                 	 0.000335883	 100       	 0.744307  	 0         	 11.9089   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 0, m: 2200, k: 44)  	 6.39e-06  	 100       	 0         	 0         	 12118.9   	 0         
Timing statistics:
function                                                                                                                                                                                      	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                        	 2.80964   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_normalized(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                     	 2.80959   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::rightNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                            	 2.31402   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::rightNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                        	 2.31267   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double]	 2.18301   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                               	 0.850486  	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                  	 0.706099  	 1800      
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                            	 0.549098  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_leftOrthogonalize(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&) [with T = double]                                   	 0.495494  	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]           	 0.320027  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                	 0.209694  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.158216  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                           	 0.102246  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                    	 0.0790193 	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                                       	 0.0605992 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double]          	 0.0375157 	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.027647  	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double]        	 0.0265865 	 1800      
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                       	 0.0263402 	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double]       	 0.0248206 	 900       
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                              	 0.0187    	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                	 0.0179443 	 1300      
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                        	 0.0165674 	 1000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                	 0.00852498	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                              	 0.00320417	 6300      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                         	 0.00118887	 5200      
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                       	 0.00112483	 300       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                         	 0.000933528	 100       
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                           	 0.000586559	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                                                  	 0.000409669	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
orthoX: L, orthoY: L
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 64
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->65  [0m[1;34m1->66  [0m[1;34m2->67  [0m[1;34m3->68  [0m[1;34m4->69  [0m[1;34m5->70  [0m[1;34m6->71  [0m[1;34m7->72  [0m[1;34m8->73  [0m[1;34m9->74  [0m[1;34m10->75  [0m[1;34m11->76  [0m[1;34m12->77  [0m[1;34m13->78  [0m[1;34m14->79  [0m[1;34m15->80  [0m[1;34m16->81  [0m[1;34m17->82  [0m[1;34m18->83  [0m[1;34m19->84  [0m[1;34m20->85  [0m[1;34m21->86  [0m[1;34m22->87  [0m[1;34m23->88  [0m[1;34m24->89  [0m[1;34m25->90  [0m[1;34m26->91  [0m[1;34m27->92  [0m[1;34m28->93  [0m[1;34m29->94  [0m[1;34m30->95  [0m[1;34m31->96  [0m[1;34m32->97  [0m[1;34m33->98  [0m[1;34m34->99  [0m[1;34m35->100  [0m[1;34m36->101  [0m[1;34m37->102  [0m[1;34m38->103  [0m[1;34m39->104  [0m[1;34m40->105  [0m[1;34m41->106  [0m[1;34m42->107  [0m[1;34m43->108  [0m[1;34m44->109  [0m[1;34m45->110  [0m[1;34m46->111  [0m[1;34m47->112  [0m[1;34m48->113  [0m[1;34m49->114  [0m[1;34m50->115  [0m[1;34m51->116  [0m[1;34m52->117  [0m[1;34m53->118  [0m[1;34m54->119  [0m[1;34m55->120  [0m[1;34m56->121  [0m[1;34m57->122  [0m[1;34m58->123  [0m[1;34m59->124  [0m[1;34m60->125  [0m[1;34m61->126  [0m[1;34m62->127  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22404429858688 -> hwthread 65 - OK[0m[1;34m
[0m[1;34m	threadid 22404227131392 -> hwthread 66 - OK[0m[1;34m
[0m[1;34m	threadid 22404025804928 -> hwthread 67 - OK[0m[1;34m
[0m[1;34m	threadid 22403824478464 -> hwthread 68 - OK[0m[1;34m
[0m[1;34m	threadid 22403623152000 -> hwthread 69 - OK[0m[1;34m
[0m[1;34m	threadid 22403421825536 -> hwthread 70 - OK[0m[1;34m
[0m[1;34m	threadid 22403220499072 -> hwthread 71 - OK[0m[1;34m
[0m[1;34m	threadid 22403019172608 -> hwthread 72 - OK[0m[1;34m
[0m[1;34m	threadid 22402817846144 -> hwthread 73 - OK[0m[1;34m
[0m[1;34m	threadid 22402616519680 -> hwthread 74 - OK[0m[1;34m
[0m[1;34m	threadid 22402415193216 -> hwthread 75 - OK[0m[1;34m
[0m[1;34m	threadid 22402213866752 -> hwthread 76 - OK[0m[1;34m
[0m[1;34m	threadid 22402012540288 -> hwthread 77 - OK[0m[1;34m
[0m[1;34m	threadid 22401811213824 -> hwthread 78 - OK[0m[1;34m
[0m[1;34m	threadid 22401609887360 -> hwthread 79 - OK[0m[1;34m
[0m[1;34m	threadid 22401408560896 -> hwthread 80 - OK[0m[1;34m
[0m[1;34m	threadid 22401207234432 -> hwthread 81 - OK[0m[1;34m
[0m[1;34m	threadid 22401005907968 -> hwthread 82 - OK[0m[1;34m
[0m[1;34m	threadid 22400804581504 -> hwthread 83 - OK[0m[1;34m
[0m[1;34m	threadid 22400603255040 -> hwthread 84 - OK[0m[1;34m
[0m[1;34m	threadid 22400401928576 -> hwthread 85 - OK[0m[1;34m
[0m[1;34m	threadid 22400200602112 -> hwthread 86 - OK[0m[1;34m
[0m[1;34m	threadid 22399999275648 -> hwthread 87 - OK[0m[1;34m
[0m[1;34m	threadid 22399797949184 -> hwthread 88 - OK[0m[1;34m
[0m[1;34m	threadid 22399596622720 -> hwthread 89 - OK[0m[1;34m
[0m[1;34m	threadid 22399395296256 -> hwthread 90 - OK[0m[1;34m
[0m[1;34m	threadid 22399193969792 -> hwthread 91 - OK[0m[1;34m
[0m[1;34m	threadid 22398992643328 -> hwthread 92 - OK[0m[1;34m
[0m[1;34m	threadid 22398791316864 -> hwthread 93 - OK[0m[1;34m
[0m[1;34m	threadid 22398589990400 -> hwthread 94 - OK[0m[1;34m
[0m[1;34m	threadid 22398388663936 -> hwthread 95 - OK[0m[1;34m
[0m[1;34m	threadid 22398187337472 -> hwthread 96 - OK[0m[1;34m
[0m[1;34m	threadid 22397986006912 -> hwthread 97 - OK[0m[1;34m
[0m[1;34m	threadid 22397784680448 -> hwthread 98 - OK[0m[1;34m
[0m[1;34m	threadid 22397583353984 -> hwthread 99 - OK[0m[1;34m
[0m[1;34m	threadid 22397382027520 -> hwthread 100 - OK[0m[1;34m
[0m[1;34m	threadid 22397180701056 -> hwthread 101 - OK[0m[1;34m
[0m[1;34m	threadid 22396979374592 -> hwthread 102 - OK[0m[1;34m
[0m[1;34m	threadid 22396778048128 -> hwthread 103 - OK[0m[1;34m
[0m[1;34m	threadid 22396576721664 -> hwthread 104 - OK[0m[1;34m
[0m[1;34m	threadid 22396375395200 -> hwthread 105 - OK[0m[1;34m
[0m[1;34m	threadid 22396174068736 -> hwthread 106 - OK[0m[1;34m
[0m[1;34m	threadid 22395972742272 -> hwthread 107 - OK[0m[1;34m
[0m[1;34m	threadid 22395771415808 -> hwthread 108 - OK[0m[1;34m
[0m[1;34m	threadid 22395570089344 -> hwthread 109 - OK[0m[1;34m
[0m[1;34m	threadid 22395368762880 -> hwthread 110 - OK[0m[1;34m
[0m[1;34m	threadid 22395167436416 -> hwthread 111 - OK[0m[1;34m
[0m[1;34m	threadid 22394966109952 -> hwthread 112 - OK[0m[1;34m
[0m[1;34m	threadid 22394764783488 -> hwthread 113 - OK[0m[1;34m
[0m[1;34m	threadid 22394563457024 -> hwthread 114 - OK[0m[1;34m
[0m[1;34m	threadid 22394362130560 -> hwthread 115 - OK[0m[1;34m
[0m[1;34m	threadid 22394160804096 -> hwthread 116 - OK[0m[1;34m
[0m[1;34m	threadid 22393959477632 -> hwthread 117 - OK[0m[1;34m
[0m[1;34m	threadid 22393758151168 -> hwthread 118 - OK[0m[1;34m
[0m[1;34m	threadid 22393556824704 -> hwthread 119 - OK[0m[1;34m
[0m[1;34m	threadid 22393355498240 -> hwthread 120 - OK[0m[1;34m
[0m[1;34m	threadid 22393154171776 -> hwthread 121 - OK[0m[1;34m
[0m[1;34m	threadid 22392952845312 -> hwthread 122 - OK[0m[1;34m
[0m[1;34m	threadid 22392751518848 -> hwthread 123 - OK[0m[1;34m
[0m[1;34m	threadid 22392550192384 -> hwthread 124 - OK[0m[1;34m
[0m[1;34m	threadid 22392348865920 -> hwthread 125 - OK[0m[1;34m
[0m[1;34m	threadid 22392147539456 -> hwthread 126 - OK[0m[1;34m
[0m[1;34m	threadid 22391946212992 -> hwthread 127 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22404324198144 -> hwthread 64 - OK[0m[1;34m
[0m[1;34m	threadid 22404317607680 -> hwthread 65 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 95, m: 95)                                                                 	 0.793974  	 700       	 7.05503   	 0         	 0.191633  	 36.8153   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4750, cols: 95, reductionFactor: 37, colBlockingSize: 12)                  	 0.503547  	 600       	 104.921   	 0         	 4.38752   	 23.9136   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 95, r: 95, r2: 4750, leftOrthog: 0)        	 0.180611  	 600       	 284.825   	 0         	 36.4576   	 7.8125    
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4750, cols: 45, reductionFactor: 37, colBlockingSize: 12)                  	 0.15539   	 700       	 89.003    	 0         	 7.77616   	 11.4456   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 95, n: 50, r: 95, r2: 95)             	 0.084673  	 600       	 607.543   	 0         	 51.6731   	 11.7574   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 4750, Xcols: 45, r: 45, streamingCols: 0)                   	 0.0746985 	 700       	 90.1373   	 0         	 32.1247   	 2.80585   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 95, reductionFactor: 37, colBlockingSize: 12)                  	 0.072358  	 100       	 64.0491   	 0         	 2.72562   	 23.4989   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 95, Qr2: 45)       	 0.058299  	 700       	 0         	 0         	 75.8847   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 95)                                                                 	 0.0479968 	 100       	 4.30584   	 0         	 0.200847  	 21.4385   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                 	 0.0388114 	 100       	 3.00599   	 0         	 0.155624  	 19.3157   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 45, k: 2500)   	 0.0379816 	 800       	 236.957   	 0         	 40.3985   	 5.86548   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 45, m: 45)                                                                  	 0.0308669 	 900       	 3.54263   	 0         	 1.42755   	 2.48162   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4750, cols: 50, reductionFactor: 37, colBlockingSize: 12)                  	 0.0283437 	 100       	 86.0576   	 0         	 6.774     	 12.7041   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 2500, m: 45, k: 50)	 0.0243864 	 800       	 369.058   	 0         	 62.9202   	 5.86548   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 4750, m: 45)                                                                       	 0.0218151 	 700       	 0         	 0         	 109.741   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 45, reductionFactor: 37, colBlockingSize: 12)                  	 0.0182552 	 100       	 56.9628   	 0         	 5.01886   	 11.3498   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 45, n: 50, r2: 45)                                                                                         	 0.0165516 	 800       	 0         	 0         	 78.3004   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 2250, k: 45) 	 0.0154707 	 800       	 523.57    	 0         	 89.356    	 5.85938   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 4750, leftOrthog: 0)        	 0.0153926 	 100       	 154.295   	 0         	 37.2907   	 4.13763   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 4750, m: 45)                                                              	 0.0148266 	 700       	 0         	 0         	 161.466   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 95, r: 95, r2: 2500, leftOrthog: 0)        	 0.0138969 	 100       	 324.712   	 0         	 42.0553   	 7.72107   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 45, n: 50, r2: 45)                   	 0.013005  	 700       	 0         	 0         	 184.083   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 45, m: 2250, k: 45) 	 0.0111297 	 700       	 573.126   	 0         	 102.908   	 5.56931   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 95, n: 50, r: 95, r2: 50)             	 0.0106328 	 100       	 424.395   	 0         	 52.1782   	 8.13356   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 95, reductionFactor: 37, colBlockingSize: 12)                    	 0.00903772	 100       	 10.2558   	 0         	 1.21933   	 8.411     
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r: 95, r2: 95)             	 0.00847722	 100       	 532.309   	 0         	 45.6777   	 11.6536   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 45, r: 45, streamingCols: 0)                   	 0.00696535	 100       	 72.6812   	 0         	 25.9585   	 2.7999    
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 50, Qr2: 45)       	 0.00426722	 100       	 0         	 0         	 89.051    	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 2500, m: 45)                                                                       	 0.00411947	 100       	 0         	 0         	 43.6949   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 45)                                                              	 0.00345727	 100       	 0         	 0         	 52.0642   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 0, n: 50, r2: 45)                    	 0.00335219	 100       	 0         	 0         	 53.6962   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 45, reductionFactor: 37, colBlockingSize: 12)                    	 0.00274516	 100       	 7.57598   	 0         	 1.24583   	 6.08108   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 95, r: 50, r2: 50, leftOrthog: 0)          	 0.00198492	 100       	 23.9305   	 0         	 7.75852   	 3.08442   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 45, n: 50, r2: 1)                                                                                          	 0.00106424	 200       	 0         	 0         	 6.76537   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 45, m: 45, fromLeft: 0)                	 0.000937447	 800       	 0         	 0         	 27.6496   	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                   	 0.000877962	 100       	 0.569501  	 0         	 2.278     	 0.25      
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 45, k: 50)     	 0.000870367	 100       	 25.8512   	 0         	 6.43407   	 4.01786   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 45)                                                                                          	 0.000832677	 200       	 0         	 0         	 8.64681   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 50, r2: 50)              	 0.00078478	 100       	 31.8561   	 0         	 7.64545   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 50, m: 45, k: 50)  	 0.000711349	 100       	 31.63     	 0         	 7.87237   	 4.01786   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 50, k: 45)   	 0.000617697	 100       	 36.4256   	 0         	 9.06593   	 4.01786   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 45, m: 50, k: 45)   	 0.000587684	 100       	 34.4573   	 0         	 8.88232   	 3.87931   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 45, n: 50, r2: 1)                    	 0.000543106	 100       	 0         	 0         	 13.9936   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                          	 0.00051547	 100       	 0         	 0         	 7.75991   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 1, r1low: 0, n: 50, r2: 45)                     	 0.000511965	 100       	 0         	 0         	 7.03173   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 45)                                                                	 0.000453672	 100       	 0         	 0         	 7.93525   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                            	 0.000430235	 100       	 1.16216   	 0         	 13.9459   	 0.0833333 
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 1, Xr2: 50, Qr1: 1, Qr2: 0)          	 0.000409743	 100       	 0         	 0         	 9.76222   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                 	 0.000403807	 100       	 0.619108  	 0         	 9.90572   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 45, n: 50, r2: 1)                                                                                 	 0.000363015	 100       	 0.619809  	 0         	 9.91695   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                 	 0.00032994	 100       	 0.757714  	 0         	 12.1234   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 0, m: 2250, k: 45)  	 6.211e-06 	 100       	 0         	 0         	 13041.4   	 0         
Timing statistics:
function                                                                                                                                                                                      	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                        	 2.96054   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_normalized(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                     	 2.96049   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::rightNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                            	 2.43721   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::rightNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                        	 2.43591   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double]	 2.30783   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                               	 0.880783  	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                  	 0.789677  	 1800      
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                            	 0.613918  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_leftOrthogonalize(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&) [with T = double]                                   	 0.523213  	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]           	 0.344461  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                	 0.211885  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.176918  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                           	 0.104568  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                    	 0.0816639 	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                                       	 0.0629759 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double]          	 0.038852  	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.0308669 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double]        	 0.027812  	 1800      
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                       	 0.0259346 	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double]       	 0.0250978 	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                	 0.018964  	 1300      
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                              	 0.0187376 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                        	 0.0174123 	 1000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                	 0.00661269	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                              	 0.0032819 	 6300      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                         	 0.00112561	 5200      
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                       	 0.00109676	 300       
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                           	 0.000937447	 800       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                         	 0.000877962	 100       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                                                  	 0.000430235	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
orthoX: L, orthoY: L
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 64
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->65  [0m[1;34m1->66  [0m[1;34m2->67  [0m[1;34m3->68  [0m[1;34m4->69  [0m[1;34m5->70  [0m[1;34m6->71  [0m[1;34m7->72  [0m[1;34m8->73  [0m[1;34m9->74  [0m[1;34m10->75  [0m[1;34m11->76  [0m[1;34m12->77  [0m[1;34m13->78  [0m[1;34m14->79  [0m[1;34m15->80  [0m[1;34m16->81  [0m[1;34m17->82  [0m[1;34m18->83  [0m[1;34m19->84  [0m[1;34m20->85  [0m[1;34m21->86  [0m[1;34m22->87  [0m[1;34m23->88  [0m[1;34m24->89  [0m[1;34m25->90  [0m[1;34m26->91  [0m[1;34m27->92  [0m[1;34m28->93  [0m[1;34m29->94  [0m[1;34m30->95  [0m[1;34m31->96  [0m[1;34m32->97  [0m[1;34m33->98  [0m[1;34m34->99  [0m[1;34m35->100  [0m[1;34m36->101  [0m[1;34m37->102  [0m[1;34m38->103  [0m[1;34m39->104  [0m[1;34m40->105  [0m[1;34m41->106  [0m[1;34m42->107  [0m[1;34m43->108  [0m[1;34m44->109  [0m[1;34m45->110  [0m[1;34m46->111  [0m[1;34m47->112  [0m[1;34m48->113  [0m[1;34m49->114  [0m[1;34m50->115  [0m[1;34m51->116  [0m[1;34m52->117  [0m[1;34m53->118  [0m[1;34m54->119  [0m[1;34m55->120  [0m[1;34m56->121  [0m[1;34m57->122  [0m[1;34m58->123  [0m[1;34m59->124  [0m[1;34m60->125  [0m[1;34m61->126  [0m[1;34m62->127  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23097835730816 -> hwthread 65 - OK[0m[1;34m
[0m[1;34m	threadid 23097663023104 -> hwthread 66 - OK[0m[1;34m
[0m[1;34m	threadid 23097461696640 -> hwthread 67 - OK[0m[1;34m
[0m[1;34m	threadid 23097260370176 -> hwthread 68 - OK[0m[1;34m
[0m[1;34m	threadid 23097059043712 -> hwthread 69 - OK[0m[1;34m
[0m[1;34m	threadid 23096857717248 -> hwthread 70 - OK[0m[1;34m
[0m[1;34m	threadid 23096656390784 -> hwthread 71 - OK[0m[1;34m
[0m[1;34m	threadid 23096455064320 -> hwthread 72 - OK[0m[1;34m
[0m[1;34m	threadid 23096253737856 -> hwthread 73 - OK[0m[1;34m
[0m[1;34m	threadid 23096052411392 -> hwthread 74 - OK[0m[1;34m
[0m[1;34m	threadid 23095851084928 -> hwthread 75 - OK[0m[1;34m
[0m[1;34m	threadid 23095649758464 -> hwthread 76 - OK[0m[1;34m
[0m[1;34m	threadid 23095448432000 -> hwthread 77 - OK[0m[1;34m
[0m[1;34m	threadid 23095247105536 -> hwthread 78 - OK[0m[1;34m
[0m[1;34m	threadid 23095045779072 -> hwthread 79 - OK[0m[1;34m
[0m[1;34m	threadid 23094844452608 -> hwthread 80 - OK[0m[1;34m
[0m[1;34m	threadid 23094643126144 -> hwthread 81 - OK[0m[1;34m
[0m[1;34m	threadid 23094441799680 -> hwthread 82 - OK[0m[1;34m
[0m[1;34m	threadid 23094240473216 -> hwthread 83 - OK[0m[1;34m
[0m[1;34m	threadid 23094039146752 -> hwthread 84 - OK[0m[1;34m
[0m[1;34m	threadid 23093837820288 -> hwthread 85 - OK[0m[1;34m
[0m[1;34m	threadid 23093636493824 -> hwthread 86 - OK[0m[1;34m
[0m[1;34m	threadid 23093435167360 -> hwthread 87 - OK[0m[1;34m
[0m[1;34m	threadid 23093233840896 -> hwthread 88 - OK[0m[1;34m
[0m[1;34m	threadid 23093032514432 -> hwthread 89 - OK[0m[1;34m
[0m[1;34m	threadid 23092831187968 -> hwthread 90 - OK[0m[1;34m
[0m[1;34m	threadid 23092629861504 -> hwthread 91 - OK[0m[1;34m
[0m[1;34m	threadid 23092428535040 -> hwthread 92 - OK[0m[1;34m
[0m[1;34m	threadid 23092227208576 -> hwthread 93 - OK[0m[1;34m
[0m[1;34m	threadid 23092025882112 -> hwthread 94 - OK[0m[1;34m
[0m[1;34m	threadid 23091824555648 -> hwthread 95 - OK[0m[1;34m
[0m[1;34m	threadid 23091623229184 -> hwthread 96 - OK[0m[1;34m
[0m[1;34m	threadid 23091421898624 -> hwthread 97 - OK[0m[1;34m
[0m[1;34m	threadid 23091220572160 -> hwthread 98 - OK[0m[1;34m
[0m[1;34m	threadid 23091019245696 -> hwthread 99 - OK[0m[1;34m
[0m[1;34m	threadid 23090817919232 -> hwthread 100 - OK[0m[1;34m
[0m[1;34m	threadid 23090616592768 -> hwthread 101 - OK[0m[1;34m
[0m[1;34m	threadid 23090415266304 -> hwthread 102 - OK[0m[1;34m
[0m[1;34m	threadid 23090213939840 -> hwthread 103 - OK[0m[1;34m
[0m[1;34m	threadid 23090012613376 -> hwthread 104 - OK[0m[1;34m
[0m[1;34m	threadid 23089811286912 -> hwthread 105 - OK[0m[1;34m
[0m[1;34m	threadid 23089609960448 -> hwthread 106 - OK[0m[1;34m
[0m[1;34m	threadid 23089408633984 -> hwthread 107 - OK[0m[1;34m
[0m[1;34m	threadid 23089207307520 -> hwthread 108 - OK[0m[1;34m
[0m[1;34m	threadid 23089005981056 -> hwthread 109 - OK[0m[1;34m
[0m[1;34m	threadid 23088804654592 -> hwthread 110 - OK[0m[1;34m
[0m[1;34m	threadid 23088603328128 -> hwthread 111 - OK[0m[1;34m
[0m[1;34m	threadid 23088402001664 -> hwthread 112 - OK[0m[1;34m
[0m[1;34m	threadid 23088200675200 -> hwthread 113 - OK[0m[1;34m
[0m[1;34m	threadid 23087999348736 -> hwthread 114 - OK[0m[1;34m
[0m[1;34m	threadid 23087798022272 -> hwthread 115 - OK[0m[1;34m
[0m[1;34m	threadid 23087596695808 -> hwthread 116 - OK[0m[1;34m
[0m[1;34m	threadid 23087395369344 -> hwthread 117 - OK[0m[1;34m
[0m[1;34m	threadid 23087194042880 -> hwthread 118 - OK[0m[1;34m
[0m[1;34m	threadid 23086992716416 -> hwthread 119 - OK[0m[1;34m
[0m[1;34m	threadid 23086791389952 -> hwthread 120 - OK[0m[1;34m
[0m[1;34m	threadid 23086590063488 -> hwthread 121 - OK[0m[1;34m
[0m[1;34m	threadid 23086388737024 -> hwthread 122 - OK[0m[1;34m
[0m[1;34m	threadid 23086187410560 -> hwthread 123 - OK[0m[1;34m
[0m[1;34m	threadid 23085986084096 -> hwthread 124 - OK[0m[1;34m
[0m[1;34m	threadid 23085784757632 -> hwthread 125 - OK[0m[1;34m
[0m[1;34m	threadid 23085583431168 -> hwthread 126 - OK[0m[1;34m
[0m[1;34m	threadid 23085382104704 -> hwthread 127 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23097558075136 -> hwthread 64 - OK[0m[1;34m
[0m[1;34m	threadid 23097551505152 -> hwthread 65 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 96, m: 96)                                                                 	 0.79252   	 700       	 7.29354   	 0         	 0.196041  	 37.2042   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4800, cols: 96, reductionFactor: 37, colBlockingSize: 12)                  	 0.515838  	 600       	 105.69    	 0         	 4.37361   	 24.1653   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 96, r: 96, r2: 4800, leftOrthog: 0)        	 0.177889  	 600       	 298.412   	 0         	 37.7989   	 7.89474   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4800, cols: 46, reductionFactor: 37, colBlockingSize: 12)                  	 0.159798  	 700       	 91.3894   	 0         	 7.81193   	 11.6987   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 96, n: 50, r: 96, r2: 96)             	 0.0974298 	 600       	 544.845   	 0         	 45.8578   	 11.8812   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 4800, Xcols: 46, r: 46, streamingCols: 0)                   	 0.0769064 	 700       	 92.4469   	 0         	 32.2325   	 2.86813   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 96, reductionFactor: 37, colBlockingSize: 12)                  	 0.0753144 	 100       	 62.8371   	 0         	 2.64721   	 23.7371   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 96, Qr2: 46)       	 0.0610283 	 700       	 0         	 0         	 74.0142   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 96)                                                                 	 0.0496706 	 100       	 4.20101   	 0         	 0.195689  	 21.4678   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 46, k: 2500)   	 0.0384011 	 800       	 239.577   	 0         	 40.3822   	 5.93273   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                 	 0.0381524 	 100       	 3.05791   	 0         	 0.158312  	 19.3157   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 46, m: 46)                                                                  	 0.0309407 	 900       	 3.77502   	 0         	 1.4879    	 2.53714   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4800, cols: 50, reductionFactor: 37, colBlockingSize: 12)                  	 0.02804   	 100       	 87.9053   	 0         	 6.91868   	 12.7055   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 2500, m: 46, k: 50)	 0.0249876 	 800       	 368.183   	 0         	 62.0596   	 5.93273   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 4800, m: 46)                                                                       	 0.0221288 	 700       	 0         	 0         	 111.753   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 46, reductionFactor: 37, colBlockingSize: 12)                  	 0.0193705 	 100       	 56.0954   	 0         	 4.83689   	 11.5974   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 46, n: 50, r2: 46)                                                                                         	 0.0171295 	 800       	 0         	 0         	 79.0589   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 2300, k: 46) 	 0.0165277 	 800       	 512.11    	 0         	 86.3908   	 5.92784   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 96, r: 96, r2: 2500, leftOrthog: 0)        	 0.0158609 	 100       	 290.525   	 0         	 37.2454   	 7.80031   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 4800, leftOrthog: 0)        	 0.0157697 	 100       	 152.191   	 0         	 36.7795   	 4.13793   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 4800, m: 46)                                                              	 0.0154568 	 700       	 0         	 0         	 159.991   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 46, n: 50, r2: 46)                   	 0.0127206 	 700       	 0         	 0         	 194.406   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 96, n: 50, r: 96, r2: 50)             	 0.0117059 	 100       	 393.648   	 0         	 48.2219   	 8.16327   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 46, m: 2300, k: 46) 	 0.0109236 	 700       	 623.745   	 0         	 109.562   	 5.69307   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r: 96, r2: 96)             	 0.00886403	 100       	 519.854   	 0         	 44.1529   	 11.7739   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 96, reductionFactor: 37, colBlockingSize: 12)                    	 0.0085617 	 100       	 11.0551   	 0         	 1.30965   	 8.44132   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 46, r: 46, streamingCols: 0)                   	 0.00705285	 100       	 75.0052   	 0         	 26.2088   	 2.86184   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 50, Qr2: 46)       	 0.00403594	 100       	 0         	 0         	 95.1451   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 2500, m: 46)                                                                       	 0.00399948	 100       	 0         	 0         	 46.006    	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 0, n: 50, r2: 46)                    	 0.00341003	 100       	 0         	 0         	 53.9585   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 46)                                                              	 0.00329403	 100       	 0         	 0         	 55.8585   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 46, reductionFactor: 37, colBlockingSize: 12)                    	 0.00276535	 100       	 7.85864   	 0         	 1.27752   	 6.15146   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 96, r: 50, r2: 50, leftOrthog: 0)          	 0.00208451	 100       	 23.027    	 0         	 7.4454    	 3.09278   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 46, k: 50)     	 0.00102559	 100       	 22.4262   	 0         	 5.5383    	 4.0493    
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                   	 0.000878412	 100       	 0.569209  	 0         	 2.27684   	 0.25      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 46)                                                                                          	 0.00086302	 200       	 0         	 0         	 8.52819   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 46, m: 46, fromLeft: 0)                	 0.000846508	 800       	 0         	 0         	 31.9959   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 46, n: 50, r2: 1)                                                                                          	 0.000791166	 200       	 0         	 0         	 9.30273   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 50, r2: 50)              	 0.000772013	 100       	 32.3829   	 0         	 7.77189   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 50, m: 46, k: 50)  	 0.000730207	 100       	 31.4979   	 0         	 7.77862   	 4.0493    
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 50, k: 46)   	 0.000643941	 100       	 35.7176   	 0         	 8.82068   	 4.0493    
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 46, m: 50, k: 46)   	 0.000544975	 100       	 38.8275   	 0         	 9.8588    	 3.93836   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                          	 0.000519453	 100       	 0         	 0         	 7.70041   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 46, n: 50, r2: 1)                    	 0.00051265	 100       	 0         	 0         	 14.981    	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 1, r1low: 0, n: 50, r2: 46)                     	 0.000494395	 100       	 0         	 0         	 7.44344   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 1, Xr2: 50, Qr1: 1, Qr2: 0)          	 0.000437795	 100       	 0         	 0         	 9.1367    	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 46)                                                                	 0.000423426	 100       	 0         	 0         	 8.69101   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                            	 0.000423032	 100       	 1.18194   	 0         	 14.1833   	 0.0833333 
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                 	 0.000416156	 100       	 0.600736  	 0         	 9.61178   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 46, n: 50, r2: 1)                                                                                 	 0.000371572	 100       	 0.618992  	 0         	 9.90387   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                 	 0.000344585	 100       	 0.72551   	 0         	 11.6082   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 0, m: 2300, k: 46)  	 7.13e-06  	 100       	 0         	 0         	 11871     	 0         
Timing statistics:
function                                                                                                                                                                                      	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                        	 3.12423   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_normalized(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                     	 3.12419   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::rightNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                            	 2.5882    	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::rightNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                        	 2.58688   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double]	 2.44389   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                               	 0.880342  	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                  	 0.809688  	 1800      
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                            	 0.628383  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_leftOrthogonalize(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&) [with T = double]                                   	 0.535924  	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]           	 0.353343  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                	 0.211604  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.182395  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                           	 0.118772  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                    	 0.0839593 	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                                       	 0.0655021 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double]          	 0.0394267 	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.0309407 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double]        	 0.0286473 	 1800      
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                       	 0.0261283 	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double]       	 0.0257178 	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                	 0.0193031 	 1300      
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                              	 0.0191743 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                        	 0.0171377 	 1000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                	 0.00568107	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                              	 0.00327439	 6300      
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                       	 0.00113231	 300       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                         	 0.00110852	 5200      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                         	 0.000878412	 100       
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                           	 0.000846508	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                                                  	 0.000423032	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
orthoX: L, orthoY: L
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 64
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->65  [0m[1;34m1->66  [0m[1;34m2->67  [0m[1;34m3->68  [0m[1;34m4->69  [0m[1;34m5->70  [0m[1;34m6->71  [0m[1;34m7->72  [0m[1;34m8->73  [0m[1;34m9->74  [0m[1;34m10->75  [0m[1;34m11->76  [0m[1;34m12->77  [0m[1;34m13->78  [0m[1;34m14->79  [0m[1;34m15->80  [0m[1;34m16->81  [0m[1;34m17->82  [0m[1;34m18->83  [0m[1;34m19->84  [0m[1;34m20->85  [0m[1;34m21->86  [0m[1;34m22->87  [0m[1;34m23->88  [0m[1;34m24->89  [0m[1;34m25->90  [0m[1;34m26->91  [0m[1;34m27->92  [0m[1;34m28->93  [0m[1;34m29->94  [0m[1;34m30->95  [0m[1;34m31->96  [0m[1;34m32->97  [0m[1;34m33->98  [0m[1;34m34->99  [0m[1;34m35->100  [0m[1;34m36->101  [0m[1;34m37->102  [0m[1;34m38->103  [0m[1;34m39->104  [0m[1;34m40->105  [0m[1;34m41->106  [0m[1;34m42->107  [0m[1;34m43->108  [0m[1;34m44->109  [0m[1;34m45->110  [0m[1;34m46->111  [0m[1;34m47->112  [0m[1;34m48->113  [0m[1;34m49->114  [0m[1;34m50->115  [0m[1;34m51->116  [0m[1;34m52->117  [0m[1;34m53->118  [0m[1;34m54->119  [0m[1;34m55->120  [0m[1;34m56->121  [0m[1;34m57->122  [0m[1;34m58->123  [0m[1;34m59->124  [0m[1;34m60->125  [0m[1;34m61->126  [0m[1;34m62->127  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22541903378304 -> hwthread 65 - OK[0m[1;34m
[0m[1;34m	threadid 22541666084864 -> hwthread 66 - OK[0m[1;34m
[0m[1;34m	threadid 22541464758400 -> hwthread 67 - OK[0m[1;34m
[0m[1;34m	threadid 22541263431936 -> hwthread 68 - OK[0m[1;34m
[0m[1;34m	threadid 22541062105472 -> hwthread 69 - OK[0m[1;34m
[0m[1;34m	threadid 22540860779008 -> hwthread 70 - OK[0m[1;34m
[0m[1;34m	threadid 22540659452544 -> hwthread 71 - OK[0m[1;34m
[0m[1;34m	threadid 22540458126080 -> hwthread 72 - OK[0m[1;34m
[0m[1;34m	threadid 22540256799616 -> hwthread 73 - OK[0m[1;34m
[0m[1;34m	threadid 22540055473152 -> hwthread 74 - OK[0m[1;34m
[0m[1;34m	threadid 22539854146688 -> hwthread 75 - OK[0m[1;34m
[0m[1;34m	threadid 22539652820224 -> hwthread 76 - OK[0m[1;34m
[0m[1;34m	threadid 22539451493760 -> hwthread 77 - OK[0m[1;34m
[0m[1;34m	threadid 22539250167296 -> hwthread 78 - OK[0m[1;34m
[0m[1;34m	threadid 22539048840832 -> hwthread 79 - OK[0m[1;34m
[0m[1;34m	threadid 22538847514368 -> hwthread 80 - OK[0m[1;34m
[0m[1;34m	threadid 22538646187904 -> hwthread 81 - OK[0m[1;34m
[0m[1;34m	threadid 22538444861440 -> hwthread 82 - OK[0m[1;34m
[0m[1;34m	threadid 22538243534976 -> hwthread 83 - OK[0m[1;34m
[0m[1;34m	threadid 22538042208512 -> hwthread 84 - OK[0m[1;34m
[0m[1;34m	threadid 22537840882048 -> hwthread 85 - OK[0m[1;34m
[0m[1;34m	threadid 22537639555584 -> hwthread 86 - OK[0m[1;34m
[0m[1;34m	threadid 22537438229120 -> hwthread 87 - OK[0m[1;34m
[0m[1;34m	threadid 22537236902656 -> hwthread 88 - OK[0m[1;34m
[0m[1;34m	threadid 22537035576192 -> hwthread 89 - OK[0m[1;34m
[0m[1;34m	threadid 22536834249728 -> hwthread 90 - OK[0m[1;34m
[0m[1;34m	threadid 22536632923264 -> hwthread 91 - OK[0m[1;34m
[0m[1;34m	threadid 22536431596800 -> hwthread 92 - OK[0m[1;34m
[0m[1;34m	threadid 22536230270336 -> hwthread 93 - OK[0m[1;34m
[0m[1;34m	threadid 22536028943872 -> hwthread 94 - OK[0m[1;34m
[0m[1;34m	threadid 22535827617408 -> hwthread 95 - OK[0m[1;34m
[0m[1;34m	threadid 22535626290944 -> hwthread 96 - OK[0m[1;34m
[0m[1;34m	threadid 22535424960384 -> hwthread 97 - OK[0m[1;34m
[0m[1;34m	threadid 22535223633920 -> hwthread 98 - OK[0m[1;34m
[0m[1;34m	threadid 22535022307456 -> hwthread 99 - OK[0m[1;34m
[0m[1;34m	threadid 22534820980992 -> hwthread 100 - OK[0m[1;34m
[0m[1;34m	threadid 22534619654528 -> hwthread 101 - OK[0m[1;34m
[0m[1;34m	threadid 22534418328064 -> hwthread 102 - OK[0m[1;34m
[0m[1;34m	threadid 22534217001600 -> hwthread 103 - OK[0m[1;34m
[0m[1;34m	threadid 22534015675136 -> hwthread 104 - OK[0m[1;34m
[0m[1;34m	threadid 22533814348672 -> hwthread 105 - OK[0m[1;34m
[0m[1;34m	threadid 22533613022208 -> hwthread 106 - OK[0m[1;34m
[0m[1;34m	threadid 22533411695744 -> hwthread 107 - OK[0m[1;34m
[0m[1;34m	threadid 22533210369280 -> hwthread 108 - OK[0m[1;34m
[0m[1;34m	threadid 22533009042816 -> hwthread 109 - OK[0m[1;34m
[0m[1;34m	threadid 22532807716352 -> hwthread 110 - OK[0m[1;34m
[0m[1;34m	threadid 22532606389888 -> hwthread 111 - OK[0m[1;34m
[0m[1;34m	threadid 22532405063424 -> hwthread 112 - OK[0m[1;34m
[0m[1;34m	threadid 22532203736960 -> hwthread 113 - OK[0m[1;34m
[0m[1;34m	threadid 22532002410496 -> hwthread 114 - OK[0m[1;34m
[0m[1;34m	threadid 22531801084032 -> hwthread 115 - OK[0m[1;34m
[0m[1;34m	threadid 22531599757568 -> hwthread 116 - OK[0m[1;34m
[0m[1;34m	threadid 22531398431104 -> hwthread 117 - OK[0m[1;34m
[0m[1;34m	threadid 22531197104640 -> hwthread 118 - OK[0m[1;34m
[0m[1;34m	threadid 22530995778176 -> hwthread 119 - OK[0m[1;34m
[0m[1;34m	threadid 22530794451712 -> hwthread 120 - OK[0m[1;34m
[0m[1;34m	threadid 22530593125248 -> hwthread 121 - OK[0m[1;34m
[0m[1;34m	threadid 22530391798784 -> hwthread 122 - OK[0m[1;34m
[0m[1;34m	threadid 22530190472320 -> hwthread 123 - OK[0m[1;34m
[0m[1;34m	threadid 22529989145856 -> hwthread 124 - OK[0m[1;34m
[0m[1;34m	threadid 22529787819392 -> hwthread 125 - OK[0m[1;34m
[0m[1;34m	threadid 22529586492928 -> hwthread 126 - OK[0m[1;34m
[0m[1;34m	threadid 22529385166464 -> hwthread 127 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22541797717760 -> hwthread 64 - OK[0m[1;34m
[0m[1;34m	threadid 22541791127296 -> hwthread 65 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 97, m: 97)                                                                 	 0.823701  	 700       	 7.23903   	 0         	 0.192563  	 37.593    
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4850, cols: 97, reductionFactor: 37, colBlockingSize: 12)                  	 0.537592  	 600       	 104.615   	 0         	 4.28452   	 24.4171   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 97, n: 50, r: 97, r2: 97)             	 0.210546  	 600       	 260.088   	 0         	 21.6651   	 12.005    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 97, r: 97, r2: 4850, leftOrthog: 0)        	 0.183631  	 600       	 298.209   	 0         	 37.3837   	 7.97697   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4850, cols: 47, reductionFactor: 37, colBlockingSize: 12)                  	 0.164471  	 700       	 93.661    	 0         	 7.83659   	 11.9517   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 4850, Xcols: 47, r: 47, streamingCols: 0)                   	 0.0775302 	 700       	 96.7308   	 0         	 33.0094   	 2.9304    
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 97, reductionFactor: 37, colBlockingSize: 12)                  	 0.0747892 	 100       	 64.6035   	 0         	 2.6946    	 23.9752   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 97, Qr2: 47)       	 0.0610211 	 700       	 0         	 0         	 75.5647   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 97)                                                                 	 0.0493174 	 100       	 4.27165   	 0         	 0.198713  	 21.4966   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 47, k: 2500)   	 0.0388294 	 800       	 242.084   	 0         	 40.357    	 5.99857   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                 	 0.0388234 	 100       	 3.00506   	 0         	 0.155576  	 19.3157   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 47, m: 47)                                                                  	 0.0339416 	 900       	 3.67062   	 0         	 1.41575   	 2.59271   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4850, cols: 50, reductionFactor: 37, colBlockingSize: 12)                  	 0.0279702 	 100       	 89.0426   	 0         	 7.00746   	 12.7068   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 2500, m: 47, k: 50)	 0.0247848 	 800       	 379.265   	 0         	 63.2259   	 5.99857   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 4850, m: 47)                                                                       	 0.0238611 	 700       	 0         	 0         	 106.996   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 47, reductionFactor: 37, colBlockingSize: 12)                  	 0.020344  	 100       	 55.7585   	 0         	 4.70739   	 11.8449   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 47, n: 50, r2: 47)                                                                                         	 0.0182016 	 800       	 0         	 0         	 77.6722   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r: 97, r2: 97)             	 0.0168041 	 100       	 279.962   	 0         	 23.5376   	 11.8943   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 4850, leftOrthog: 0)        	 0.0157277 	 100       	 154.187   	 0         	 37.2591   	 4.13823   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 2350, k: 47) 	 0.0156635 	 800       	 564.114   	 0         	 94.099    	 5.9949    
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 4850, m: 47)                                                              	 0.0153024 	 700       	 0         	 0         	 166.839   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 97, r: 97, r2: 2500, leftOrthog: 0)        	 0.0147289 	 100       	 319.407   	 0         	 40.5363   	 7.87952   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 47, n: 50, r2: 47)                   	 0.0135126 	 700       	 0         	 0         	 188.938   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 97, n: 50, r: 97, r2: 50)             	 0.0112601 	 100       	 417.803   	 0         	 50.9978   	 8.19257   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 47, m: 2350, k: 47) 	 0.011221  	 700       	 647.68    	 0         	 111.346   	 5.81683   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 97, reductionFactor: 37, colBlockingSize: 12)                    	 0.00808939	 100       	 11.9456   	 0         	 1.41014   	 8.47123   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 47, r: 47, streamingCols: 0)                   	 0.00707484	 100       	 78.0583   	 0         	 26.6979   	 2.92376   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 50, Qr2: 47)       	 0.00495309	 100       	 0         	 0         	 78.3349   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 2500, m: 47)                                                                       	 0.00378332	 100       	 0         	 0         	 49.6918   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 47, reductionFactor: 37, colBlockingSize: 12)                    	 0.00269036	 100       	 8.43272   	 0         	 1.35566   	 6.2204    
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 0, n: 50, r2: 47)                    	 0.00232321	 100       	 0         	 0         	 80.9227   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 47)                                                              	 0.00227853	 100       	 0         	 0         	 82.5093   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 97, r: 50, r2: 50, leftOrthog: 0)          	 0.00210314	 100       	 23.0607   	 0         	 7.4365    	 3.10102   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 47, m: 47, fromLeft: 0)                	 0.000962618	 800       	 0         	 0         	 29.3732   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 47, k: 50)     	 0.000882359	 100       	 26.6332   	 0         	 6.52796   	 4.07986   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 47)                                                                                          	 0.000849923	 200       	 0         	 0         	 8.84786   	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                   	 0.000813551	 100       	 0.61459   	 0         	 2.45836   	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 50, r2: 50)              	 0.000796316	 100       	 31.3946   	 0         	 7.5347    	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 47, n: 50, r2: 1)                                                                                          	 0.000753972	 200       	 0         	 0         	 9.97385   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 50, m: 47, k: 50)  	 0.000730162	 100       	 32.1846   	 0         	 7.88866   	 4.07986   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 50, k: 47)   	 0.000658166	 100       	 35.7053   	 0         	 8.75159   	 4.07986   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 47, m: 50, k: 47)   	 0.000550543	 100       	 40.124    	 0         	 10.0395   	 3.9966    
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 47, n: 50, r2: 1)                    	 0.000549316	 100       	 0         	 0         	 14.1267   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                          	 0.000528599	 100       	 0         	 0         	 7.56717   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 1, r1low: 0, n: 50, r2: 47)                     	 0.000512761	 100       	 0         	 0         	 7.33285   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 47)                                                                	 0.000422982	 100       	 0         	 0         	 8.88927   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                            	 0.000407779	 100       	 1.22615   	 0         	 14.7139   	 0.0833333 
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 1, Xr2: 50, Qr1: 1, Qr2: 0)          	 0.000406102	 100       	 0         	 0         	 9.84974   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                 	 0.000385531	 100       	 0.648456  	 0         	 10.3753   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 47, n: 50, r2: 1)                                                                                 	 0.000344671	 100       	 0.68181   	 0         	 10.909    	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                 	 0.000339594	 100       	 0.736173  	 0         	 11.7788   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 0, m: 2350, k: 47)  	 6.671e-06 	 100       	 0         	 0         	 13245.4   	 0         
Timing statistics:
function                                                                                                                                                                                      	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                        	 3.21159   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_normalized(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                     	 3.21154   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::rightNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                            	 2.66387   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::rightNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                        	 2.66263   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double]	 2.39214   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                               	 0.911842  	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                  	 0.835946  	 1800      
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                            	 0.649061  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_leftOrthogonalize(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&) [with T = double]                                   	 0.547594  	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]           	 0.36356   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                           	 0.239406  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                	 0.21619   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.188029  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                    	 0.084605  	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                                       	 0.0663803 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double]          	 0.0397118 	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.0339416 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double]        	 0.0280999 	 1800      
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                       	 0.0276444 	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double]       	 0.0255149 	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                	 0.0203341 	 1300      
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                              	 0.0180039 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                        	 0.0168979 	 1000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                	 0.00806881	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                              	 0.00303132	 6300      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                         	 0.00117316	 5200      
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                       	 0.0010698 	 300       
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                           	 0.000962618	 800       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                         	 0.000813551	 100       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                                                  	 0.000407779	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
orthoX: L, orthoY: L
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 64
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->65  [0m[1;34m1->66  [0m[1;34m2->67  [0m[1;34m3->68  [0m[1;34m4->69  [0m[1;34m5->70  [0m[1;34m6->71  [0m[1;34m7->72  [0m[1;34m8->73  [0m[1;34m9->74  [0m[1;34m10->75  [0m[1;34m11->76  [0m[1;34m12->77  [0m[1;34m13->78  [0m[1;34m14->79  [0m[1;34m15->80  [0m[1;34m16->81  [0m[1;34m17->82  [0m[1;34m18->83  [0m[1;34m19->84  [0m[1;34m20->85  [0m[1;34m21->86  [0m[1;34m22->87  [0m[1;34m23->88  [0m[1;34m24->89  [0m[1;34m25->90  [0m[1;34m26->91  [0m[1;34m27->92  [0m[1;34m28->93  [0m[1;34m29->94  [0m[1;34m30->95  [0m[1;34m31->96  [0m[1;34m32->97  [0m[1;34m33->98  [0m[1;34m34->99  [0m[1;34m35->100  [0m[1;34m36->101  [0m[1;34m37->102  [0m[1;34m38->103  [0m[1;34m39->104  [0m[1;34m40->105  [0m[1;34m41->106  [0m[1;34m42->107  [0m[1;34m43->108  [0m[1;34m44->109  [0m[1;34m45->110  [0m[1;34m46->111  [0m[1;34m47->112  [0m[1;34m48->113  [0m[1;34m49->114  [0m[1;34m50->115  [0m[1;34m51->116  [0m[1;34m52->117  [0m[1;34m53->118  [0m[1;34m54->119  [0m[1;34m55->120  [0m[1;34m56->121  [0m[1;34m57->122  [0m[1;34m58->123  [0m[1;34m59->124  [0m[1;34m60->125  [0m[1;34m61->126  [0m[1;34m62->127  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22374526175104 -> hwthread 65 - OK[0m[1;34m
[0m[1;34m	threadid 22374296578048 -> hwthread 66 - OK[0m[1;34m
[0m[1;34m	threadid 22374095251584 -> hwthread 67 - OK[0m[1;34m
[0m[1;34m	threadid 22373893925120 -> hwthread 68 - OK[0m[1;34m
[0m[1;34m	threadid 22373692598656 -> hwthread 69 - OK[0m[1;34m
[0m[1;34m	threadid 22373491272192 -> hwthread 70 - OK[0m[1;34m
[0m[1;34m	threadid 22373289945728 -> hwthread 71 - OK[0m[1;34m
[0m[1;34m	threadid 22373088619264 -> hwthread 72 - OK[0m[1;34m
[0m[1;34m	threadid 22372887292800 -> hwthread 73 - OK[0m[1;34m
[0m[1;34m	threadid 22372685966336 -> hwthread 74 - OK[0m[1;34m
[0m[1;34m	threadid 22372484639872 -> hwthread 75 - OK[0m[1;34m
[0m[1;34m	threadid 22372283313408 -> hwthread 76 - OK[0m[1;34m
[0m[1;34m	threadid 22372081986944 -> hwthread 77 - OK[0m[1;34m
[0m[1;34m	threadid 22371880660480 -> hwthread 78 - OK[0m[1;34m
[0m[1;34m	threadid 22371679334016 -> hwthread 79 - OK[0m[1;34m
[0m[1;34m	threadid 22371478007552 -> hwthread 80 - OK[0m[1;34m
[0m[1;34m	threadid 22371276681088 -> hwthread 81 - OK[0m[1;34m
[0m[1;34m	threadid 22371075354624 -> hwthread 82 - OK[0m[1;34m
[0m[1;34m	threadid 22370874028160 -> hwthread 83 - OK[0m[1;34m
[0m[1;34m	threadid 22370672701696 -> hwthread 84 - OK[0m[1;34m
[0m[1;34m	threadid 22370471375232 -> hwthread 85 - OK[0m[1;34m
[0m[1;34m	threadid 22370270048768 -> hwthread 86 - OK[0m[1;34m
[0m[1;34m	threadid 22370068722304 -> hwthread 87 - OK[0m[1;34m
[0m[1;34m	threadid 22369867395840 -> hwthread 88 - OK[0m[1;34m
[0m[1;34m	threadid 22369666069376 -> hwthread 89 - OK[0m[1;34m
[0m[1;34m	threadid 22369464742912 -> hwthread 90 - OK[0m[1;34m
[0m[1;34m	threadid 22369263416448 -> hwthread 91 - OK[0m[1;34m
[0m[1;34m	threadid 22369062089984 -> hwthread 92 - OK[0m[1;34m
[0m[1;34m	threadid 22368860763520 -> hwthread 93 - OK[0m[1;34m
[0m[1;34m	threadid 22368659437056 -> hwthread 94 - OK[0m[1;34m
[0m[1;34m	threadid 22368458110592 -> hwthread 95 - OK[0m[1;34m
[0m[1;34m	threadid 22368256784128 -> hwthread 96 - OK[0m[1;34m
[0m[1;34m	threadid 22368055453568 -> hwthread 97 - OK[0m[1;34m
[0m[1;34m	threadid 22367854127104 -> hwthread 98 - OK[0m[1;34m
[0m[1;34m	threadid 22367652800640 -> hwthread 99 - OK[0m[1;34m
[0m[1;34m	threadid 22367451474176 -> hwthread 100 - OK[0m[1;34m
[0m[1;34m	threadid 22367250147712 -> hwthread 101 - OK[0m[1;34m
[0m[1;34m	threadid 22367048821248 -> hwthread 102 - OK[0m[1;34m
[0m[1;34m	threadid 22366847494784 -> hwthread 103 - OK[0m[1;34m
[0m[1;34m	threadid 22366646168320 -> hwthread 104 - OK[0m[1;34m
[0m[1;34m	threadid 22366444841856 -> hwthread 105 - OK[0m[1;34m
[0m[1;34m	threadid 22366243515392 -> hwthread 106 - OK[0m[1;34m
[0m[1;34m	threadid 22366042188928 -> hwthread 107 - OK[0m[1;34m
[0m[1;34m	threadid 22365840862464 -> hwthread 108 - OK[0m[1;34m
[0m[1;34m	threadid 22365639536000 -> hwthread 109 - OK[0m[1;34m
[0m[1;34m	threadid 22365438209536 -> hwthread 110 - OK[0m[1;34m
[0m[1;34m	threadid 22365236883072 -> hwthread 111 - OK[0m[1;34m
[0m[1;34m	threadid 22365035556608 -> hwthread 112 - OK[0m[1;34m
[0m[1;34m	threadid 22364834230144 -> hwthread 113 - OK[0m[1;34m
[0m[1;34m	threadid 22364632903680 -> hwthread 114 - OK[0m[1;34m
[0m[1;34m	threadid 22364431577216 -> hwthread 115 - OK[0m[1;34m
[0m[1;34m	threadid 22364230250752 -> hwthread 116 - OK[0m[1;34m
[0m[1;34m	threadid 22364028924288 -> hwthread 117 - OK[0m[1;34m
[0m[1;34m	threadid 22363827597824 -> hwthread 118 - OK[0m[1;34m
[0m[1;34m	threadid 22363626271360 -> hwthread 119 - OK[0m[1;34m
[0m[1;34m	threadid 22363424944896 -> hwthread 120 - OK[0m[1;34m
[0m[1;34m	threadid 22363223618432 -> hwthread 121 - OK[0m[1;34m
[0m[1;34m	threadid 22363022291968 -> hwthread 122 - OK[0m[1;34m
[0m[1;34m	threadid 22362820965504 -> hwthread 123 - OK[0m[1;34m
[0m[1;34m	threadid 22362619639040 -> hwthread 124 - OK[0m[1;34m
[0m[1;34m	threadid 22362418312576 -> hwthread 125 - OK[0m[1;34m
[0m[1;34m	threadid 22362216986112 -> hwthread 126 - OK[0m[1;34m
[0m[1;34m	threadid 22362015659648 -> hwthread 127 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22374420514560 -> hwthread 64 - OK[0m[1;34m
[0m[1;34m	threadid 22374413924096 -> hwthread 65 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 98, m: 98)                                                                 	 0.824077  	 700       	 7.46183   	 0         	 0.196457  	 37.9819   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4900, cols: 98, reductionFactor: 37, colBlockingSize: 12)                  	 0.543962  	 600       	 106.621   	 0         	 4.3221    	 24.6688   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 98, n: 50, r: 98, r2: 98)             	 0.224466  	 600       	 251.582   	 0         	 20.7427   	 12.1287   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 98, r: 98, r2: 4900, leftOrthog: 0)        	 0.187332  	 600       	 301.452   	 0         	 37.4046   	 8.05921   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4900, cols: 48, reductionFactor: 37, colBlockingSize: 12)                  	 0.175781  	 700       	 92.3454   	 0         	 7.56634   	 12.2048   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 4900, Xcols: 48, r: 48, streamingCols: 0)                   	 0.0817205 	 700       	 96.7042   	 0         	 32.3137   	 2.99267   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 98, reductionFactor: 37, colBlockingSize: 12)                  	 0.0781035 	 100       	 63.1442   	 0         	 2.60786   	 24.213    
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 98, Qr2: 48)       	 0.0626653 	 700       	 0         	 0         	 75.1012   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 98)                                                                 	 0.0497417 	 100       	 4.27542   	 0         	 0.198626  	 21.525    
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 48, k: 2500)   	 0.03977   	 800       	 241.388   	 0         	 39.8129   	 6.06306   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                 	 0.0376991 	 100       	 3.09468   	 0         	 0.160216  	 19.3157   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 48, m: 48)                                                                  	 0.0316717 	 900       	 4.19019   	 0         	 1.58223   	 2.64828   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4900, cols: 50, reductionFactor: 37, colBlockingSize: 12)                  	 0.0281046 	 100       	 89.5305   	 0         	 7.04512   	 12.7082   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 4900, m: 48)                                                                       	 0.0258767 	 700       	 0         	 0         	 101.8     	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 2500, m: 48, k: 50)	 0.0255677 	 800       	 375.474   	 0         	 61.9282   	 6.06306   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 48, reductionFactor: 37, colBlockingSize: 12)                  	 0.0207321 	 100       	 57.0678   	 0         	 4.71941   	 12.0922   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 48, n: 50, r2: 48)                                                                                         	 0.0196312 	 800       	 0         	 0         	 75.1131   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r: 98, r2: 98)             	 0.0170261 	 100       	 282.037   	 0         	 23.4747   	 12.0145   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 2400, k: 48) 	 0.0162064 	 800       	 568.665   	 0         	 93.8298   	 6.06061   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 4900, m: 48)                                                              	 0.0157095 	 700       	 0         	 0         	 167.685   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 98, r: 98, r2: 2500, leftOrthog: 0)        	 0.0149607 	 100       	 320.975   	 0         	 40.3301   	 7.95868   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 4900, leftOrthog: 0)        	 0.0147879 	 100       	 165.675   	 0         	 40.0326   	 4.13851   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 48, n: 50, r2: 48)                   	 0.0146894 	 700       	 0         	 0         	 179.33    	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 98, n: 50, r: 98, r2: 50)             	 0.011694  	 100       	 410.638   	 0         	 49.947    	 8.22148   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 48, m: 2400, k: 48) 	 0.0106185 	 700       	 729.055   	 0         	 122.724   	 5.94059   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 98, reductionFactor: 37, colBlockingSize: 12)                    	 0.00876391	 100       	 11.2548   	 0         	 1.32398   	 8.50073   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 48, r: 48, streamingCols: 0)                   	 0.00727926	 100       	 79.1289   	 0         	 26.5029   	 2.98567   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 50, Qr2: 48)       	 0.00519209	 100       	 0         	 0         	 75.4994   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 2500, m: 48)                                                                       	 0.00422653	 100       	 0         	 0         	 45.4273   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 0, n: 50, r2: 48)                    	 0.0036711 	 100       	 0         	 0         	 52.3004   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 48)                                                              	 0.00290554	 100       	 0         	 0         	 66.0807   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 48, reductionFactor: 37, colBlockingSize: 12)                    	 0.00284552	 100       	 8.31578   	 0         	 1.3225    	 6.28792   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 98, r: 50, r2: 50, leftOrthog: 0)          	 0.0023289 	 100       	 21.04     	 0         	 6.76715   	 3.10914   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 48, n: 50, r2: 1)                                                                                          	 0.00100479	 200       	 0         	 0         	 7.64337   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 48, k: 50)     	 0.000898925	 100       	 26.6986   	 0         	 6.49665   	 4.10959   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                   	 0.000827299	 100       	 0.604376  	 0         	 2.41751   	 0.25      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 48)                                                                                          	 0.000814628	 200       	 0         	 0         	 9.42762   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 50, r2: 50)              	 0.000756676	 100       	 33.0392   	 0         	 7.92942   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 50, m: 48, k: 50)  	 0.000722429	 100       	 33.2213   	 0         	 8.08384   	 4.10959   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 48, m: 48, fromLeft: 0)                	 0.000668632	 800       	 0         	 0         	 44.1068   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 50, k: 48)   	 0.000617309	 100       	 38.8784   	 0         	 9.46042   	 4.10959   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 48, m: 50, k: 48)   	 0.000580569	 100       	 39.6852   	 0         	 9.78902   	 4.05405   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 1, r1low: 0, n: 50, r2: 48)                     	 0.000559355	 100       	 0         	 0         	 6.86505   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 48, n: 50, r2: 1)                    	 0.000545872	 100       	 0         	 0         	 14.3623   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                          	 0.000534674	 100       	 0         	 0         	 7.48119   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                            	 0.000429895	 100       	 1.16307   	 0         	 13.9569   	 0.0833333 
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 1, Xr2: 50, Qr1: 1, Qr2: 0)          	 0.000424733	 100       	 0         	 0         	 9.41768   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                 	 0.000421993	 100       	 0.592427  	 0         	 9.47883   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 48)                                                                	 0.000408927	 100       	 0         	 0         	 9.39043   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                 	 0.000351828	 100       	 0.710574  	 0         	 11.3692   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 48, n: 50, r2: 1)                                                                                 	 0.000350731	 100       	 0.684285  	 0         	 10.9486   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 0, m: 2400, k: 48)  	 6.87e-06  	 100       	 0         	 0         	 13414.8   	 0         
Timing statistics:
function                                                                                                                                                                                      	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                        	 3.27007   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_normalized(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                     	 3.27001   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::rightNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                            	 2.69915   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::rightNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                        	 2.69788   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double]	 2.41153   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                               	 0.911518  	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                  	 0.858293  	 1800      
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                            	 0.659659  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_leftOrthogonalize(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&) [with T = double]                                   	 0.570782  	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]           	 0.379569  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                           	 0.253943  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                	 0.219409  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.199828  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                    	 0.0889998 	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                                       	 0.0682821 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double]          	 0.0406689 	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.0316717 	 900       
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                       	 0.0301033 	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double]        	 0.0280296 	 1800      
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double]       	 0.0262901 	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                	 0.0219853 	 1300      
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                        	 0.0194657 	 1000      
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                              	 0.0190239 	 900       
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                	 0.00876524	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                              	 0.0031881 	 6300      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                         	 0.00118607	 5200      
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                       	 0.00112455	 300       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                         	 0.000827299	 100       
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                           	 0.000668632	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                                                  	 0.000429895	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
orthoX: L, orthoY: L
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 64
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->65  [0m[1;34m1->66  [0m[1;34m2->67  [0m[1;34m3->68  [0m[1;34m4->69  [0m[1;34m5->70  [0m[1;34m6->71  [0m[1;34m7->72  [0m[1;34m8->73  [0m[1;34m9->74  [0m[1;34m10->75  [0m[1;34m11->76  [0m[1;34m12->77  [0m[1;34m13->78  [0m[1;34m14->79  [0m[1;34m15->80  [0m[1;34m16->81  [0m[1;34m17->82  [0m[1;34m18->83  [0m[1;34m19->84  [0m[1;34m20->85  [0m[1;34m21->86  [0m[1;34m22->87  [0m[1;34m23->88  [0m[1;34m24->89  [0m[1;34m25->90  [0m[1;34m26->91  [0m[1;34m27->92  [0m[1;34m28->93  [0m[1;34m29->94  [0m[1;34m30->95  [0m[1;34m31->96  [0m[1;34m32->97  [0m[1;34m33->98  [0m[1;34m34->99  [0m[1;34m35->100  [0m[1;34m36->101  [0m[1;34m37->102  [0m[1;34m38->103  [0m[1;34m39->104  [0m[1;34m40->105  [0m[1;34m41->106  [0m[1;34m42->107  [0m[1;34m43->108  [0m[1;34m44->109  [0m[1;34m45->110  [0m[1;34m46->111  [0m[1;34m47->112  [0m[1;34m48->113  [0m[1;34m49->114  [0m[1;34m50->115  [0m[1;34m51->116  [0m[1;34m52->117  [0m[1;34m53->118  [0m[1;34m54->119  [0m[1;34m55->120  [0m[1;34m56->121  [0m[1;34m57->122  [0m[1;34m58->123  [0m[1;34m59->124  [0m[1;34m60->125  [0m[1;34m61->126  [0m[1;34m62->127  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23076291524480 -> hwthread 65 - OK[0m[1;34m
[0m[1;34m	threadid 23076053968896 -> hwthread 66 - OK[0m[1;34m
[0m[1;34m	threadid 23075852642432 -> hwthread 67 - OK[0m[1;34m
[0m[1;34m	threadid 23075651315968 -> hwthread 68 - OK[0m[1;34m
[0m[1;34m	threadid 23075449989504 -> hwthread 69 - OK[0m[1;34m
[0m[1;34m	threadid 23075248663040 -> hwthread 70 - OK[0m[1;34m
[0m[1;34m	threadid 23075047336576 -> hwthread 71 - OK[0m[1;34m
[0m[1;34m	threadid 23074846010112 -> hwthread 72 - OK[0m[1;34m
[0m[1;34m	threadid 23074644683648 -> hwthread 73 - OK[0m[1;34m
[0m[1;34m	threadid 23074443357184 -> hwthread 74 - OK[0m[1;34m
[0m[1;34m	threadid 23074242030720 -> hwthread 75 - OK[0m[1;34m
[0m[1;34m	threadid 23074040704256 -> hwthread 76 - OK[0m[1;34m
[0m[1;34m	threadid 23073839377792 -> hwthread 77 - OK[0m[1;34m
[0m[1;34m	threadid 23073638051328 -> hwthread 78 - OK[0m[1;34m
[0m[1;34m	threadid 23073436724864 -> hwthread 79 - OK[0m[1;34m
[0m[1;34m	threadid 23073235398400 -> hwthread 80 - OK[0m[1;34m
[0m[1;34m	threadid 23073034071936 -> hwthread 81 - OK[0m[1;34m
[0m[1;34m	threadid 23072832745472 -> hwthread 82 - OK[0m[1;34m
[0m[1;34m	threadid 23072631419008 -> hwthread 83 - OK[0m[1;34m
[0m[1;34m	threadid 23072430092544 -> hwthread 84 - OK[0m[1;34m
[0m[1;34m	threadid 23072228766080 -> hwthread 85 - OK[0m[1;34m
[0m[1;34m	threadid 23072027439616 -> hwthread 86 - OK[0m[1;34m
[0m[1;34m	threadid 23071826113152 -> hwthread 87 - OK[0m[1;34m
[0m[1;34m	threadid 23071624786688 -> hwthread 88 - OK[0m[1;34m
[0m[1;34m	threadid 23071423460224 -> hwthread 89 - OK[0m[1;34m
[0m[1;34m	threadid 23071222133760 -> hwthread 90 - OK[0m[1;34m
[0m[1;34m	threadid 23071020807296 -> hwthread 91 - OK[0m[1;34m
[0m[1;34m	threadid 23070819480832 -> hwthread 92 - OK[0m[1;34m
[0m[1;34m	threadid 23070618154368 -> hwthread 93 - OK[0m[1;34m
[0m[1;34m	threadid 23070416827904 -> hwthread 94 - OK[0m[1;34m
[0m[1;34m	threadid 23070215501440 -> hwthread 95 - OK[0m[1;34m
[0m[1;34m	threadid 23070014174976 -> hwthread 96 - OK[0m[1;34m
[0m[1;34m	threadid 23069812844416 -> hwthread 97 - OK[0m[1;34m
[0m[1;34m	threadid 23069611517952 -> hwthread 98 - OK[0m[1;34m
[0m[1;34m	threadid 23069410191488 -> hwthread 99 - OK[0m[1;34m
[0m[1;34m	threadid 23069208865024 -> hwthread 100 - OK[0m[1;34m
[0m[1;34m	threadid 23069007538560 -> hwthread 101 - OK[0m[1;34m
[0m[1;34m	threadid 23068806212096 -> hwthread 102 - OK[0m[1;34m
[0m[1;34m	threadid 23068604885632 -> hwthread 103 - OK[0m[1;34m
[0m[1;34m	threadid 23068403559168 -> hwthread 104 - OK[0m[1;34m
[0m[1;34m	threadid 23068202232704 -> hwthread 105 - OK[0m[1;34m
[0m[1;34m	threadid 23068000906240 -> hwthread 106 - OK[0m[1;34m
[0m[1;34m	threadid 23067799579776 -> hwthread 107 - OK[0m[1;34m
[0m[1;34m	threadid 23067598253312 -> hwthread 108 - OK[0m[1;34m
[0m[1;34m	threadid 23067396926848 -> hwthread 109 - OK[0m[1;34m
[0m[1;34m	threadid 23067195600384 -> hwthread 110 - OK[0m[1;34m
[0m[1;34m	threadid 23066994273920 -> hwthread 111 - OK[0m[1;34m
[0m[1;34m	threadid 23066792947456 -> hwthread 112 - OK[0m[1;34m
[0m[1;34m	threadid 23066591620992 -> hwthread 113 - OK[0m[1;34m
[0m[1;34m	threadid 23066390294528 -> hwthread 114 - OK[0m[1;34m
[0m[1;34m	threadid 23066188968064 -> hwthread 115 - OK[0m[1;34m
[0m[1;34m	threadid 23065987641600 -> hwthread 116 - OK[0m[1;34m
[0m[1;34m	threadid 23065786315136 -> hwthread 117 - OK[0m[1;34m
[0m[1;34m	threadid 23065584988672 -> hwthread 118 - OK[0m[1;34m
[0m[1;34m	threadid 23065383662208 -> hwthread 119 - OK[0m[1;34m
[0m[1;34m	threadid 23065182335744 -> hwthread 120 - OK[0m[1;34m
[0m[1;34m	threadid 23064981009280 -> hwthread 121 - OK[0m[1;34m
[0m[1;34m	threadid 23064779682816 -> hwthread 122 - OK[0m[1;34m
[0m[1;34m	threadid 23064578356352 -> hwthread 123 - OK[0m[1;34m
[0m[1;34m	threadid 23064377029888 -> hwthread 124 - OK[0m[1;34m
[0m[1;34m	threadid 23064175703424 -> hwthread 125 - OK[0m[1;34m
[0m[1;34m	threadid 23063974376960 -> hwthread 126 - OK[0m[1;34m
[0m[1;34m	threadid 23063773050496 -> hwthread 127 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23076185863936 -> hwthread 64 - OK[0m[1;34m
[0m[1;34m	threadid 23076179273472 -> hwthread 65 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 99, m: 99)                                                                 	 0.867874  	 700       	 7.30439   	 0         	 0.190363  	 38.3708   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4950, cols: 99, reductionFactor: 37, colBlockingSize: 12)                  	 0.554073  	 600       	 107.913   	 0         	 4.33027   	 24.9205   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 99, n: 50, r: 99, r2: 99)             	 0.235755  	 600       	 246.943   	 0         	 20.1545   	 12.2525   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4950, cols: 49, reductionFactor: 37, colBlockingSize: 12)                  	 0.191555  	 700       	 89.21     	 0         	 7.161     	 12.4578   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 99, r: 99, r2: 4950, leftOrthog: 0)        	 0.187763  	 600       	 310.06    	 0         	 38.0842   	 8.14145   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 4950, Xcols: 49, r: 49, streamingCols: 0)                   	 0.0825069 	 700       	 100.834   	 0         	 33.0067   	 3.05494   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 99, reductionFactor: 37, colBlockingSize: 12)                  	 0.0765635 	 100       	 65.7356   	 0         	 2.6885    	 24.4507   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 99, Qr2: 49)       	 0.0657096 	 700       	 0         	 0         	 73.0877   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 99)                                                                 	 0.0508656 	 100       	 4.22027   	 0         	 0.19581   	 21.5529   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                 	 0.038553  	 100       	 3.02614   	 0         	 0.156668  	 19.3157   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 49, m: 49)                                                                  	 0.0342492 	 900       	 4.12207   	 0         	 1.52454   	 2.70381   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 49, k: 2500)   	 0.0324495 	 800       	 302.007   	 0         	 49.2975   	 6.12623   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4950, cols: 50, reductionFactor: 37, colBlockingSize: 12)                  	 0.028442  	 100       	 89.3712   	 0         	 7.03187   	 12.7095   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 4950, m: 49)                                                                       	 0.0257085 	 700       	 0         	 0         	 105.668   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 2500, m: 49, k: 50)	 0.0223527 	 800       	 438.426   	 0         	 71.5654   	 6.12623   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 49, reductionFactor: 37, colBlockingSize: 12)                  	 0.0221654 	 100       	 55.6247   	 0         	 4.50795   	 12.3392   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 49, n: 50, r2: 49)                                                                                         	 0.0197241 	 800       	 0         	 0         	 77.9065   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 2450, k: 49) 	 0.0184031 	 800       	 521.87    	 0         	 85.2032   	 6.125     
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r: 99, r2: 99)             	 0.0170115 	 100       	 288.07    	 0         	 23.7393   	 12.1347   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 4950, leftOrthog: 0)        	 0.0167598 	 100       	 147.675   	 0         	 35.6806   	 4.1388    
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 4950, m: 49)                                                              	 0.0165969 	 700       	 0         	 0         	 163.679   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 99, r: 99, r2: 2500, leftOrthog: 0)        	 0.0149167 	 100       	 328.524   	 0         	 40.8724   	 8.0378    
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 49, m: 2450, k: 49) 	 0.0144126 	 700       	 571.403   	 0         	 94.2232   	 6.06436   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 49, n: 50, r2: 49)                   	 0.013894  	 700       	 0         	 0         	 195.52    	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 99, n: 50, r: 99, r2: 50)             	 0.0118828 	 100       	 412.401   	 0         	 49.988    	 8.25      
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 99, reductionFactor: 37, colBlockingSize: 12)                    	 0.00819781	 100       	 12.2788   	 0         	 1.43951   	 8.52984   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 49, r: 49, streamingCols: 0)                   	 0.00752744	 100       	 79.7416   	 0         	 26.1656   	 3.04757   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 50, Qr2: 49)       	 0.0052362 	 100       	 0         	 0         	 75.6274   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 2500, m: 49)                                                                       	 0.00437887	 100       	 0         	 0         	 44.7604   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 0, n: 50, r2: 49)                    	 0.00370171	 100       	 0         	 0         	 52.9485   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 49)                                                              	 0.00342283	 100       	 0         	 0         	 57.2625   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 49, reductionFactor: 37, colBlockingSize: 12)                    	 0.00325156	 100       	 7.58372   	 0         	 1.19352   	 6.35408   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 99, r: 50, r2: 50, leftOrthog: 0)          	 0.00216849	 100       	 22.827    	 0         	 7.32308   	 3.11713   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 49, m: 49, fromLeft: 0)                	 0.0010779 	 800       	 0         	 0         	 28.5118   	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                   	 0.000833907	 100       	 0.599587  	 0         	 2.39835   	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 50, r2: 50)              	 0.000813416	 100       	 30.7346   	 0         	 7.3763    	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 49)                                                                                          	 0.000800923	 200       	 0         	 0         	 9.78871   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 49, n: 50, r2: 1)                                                                                          	 0.00079836	 200       	 0         	 0         	 9.82013   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 49, k: 50)     	 0.000760266	 100       	 32.2256   	 0         	 7.78675   	 4.13851   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 50, k: 49)   	 0.000678425	 100       	 36.1131   	 0         	 8.72609   	 4.13851   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 50, m: 49, k: 50)  	 0.000640024	 100       	 38.2798   	 0         	 9.24965   	 4.13851   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 49, m: 50, k: 49)   	 0.000615181	 100       	 39.0292   	 0         	 9.49444   	 4.11074   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                          	 0.00056237	 100       	 0         	 0         	 7.11275   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 49, n: 50, r2: 1)                    	 0.000543265	 100       	 0         	 0         	 14.5785   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 1, r1low: 0, n: 50, r2: 49)                     	 0.000532505	 100       	 0         	 0         	 7.36143   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                            	 0.0004255 	 100       	 1.17509   	 0         	 14.1011   	 0.0833333 
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 1, Xr2: 50, Qr1: 1, Qr2: 0)          	 0.000417534	 100       	 0         	 0         	 9.58006   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 49)                                                                	 0.000416213	 100       	 0         	 0         	 9.41825   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                 	 0.000386071	 100       	 0.647549  	 0         	 10.3608   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 49, n: 50, r2: 1)                                                                                 	 0.000349451	 100       	 0.7011    	 0         	 11.2176   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                 	 0.000319024	 100       	 0.78364   	 0         	 12.5382   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 0, m: 2450, k: 49)  	 7.14e-06  	 100       	 0         	 0         	 13451     	 0         
Timing statistics:
function                                                                                                                                                                                      	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                        	 3.35745   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_normalized(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                     	 3.3574    	 100       
<PITTS::TensorTrain<double>> :: T PITTS::rightNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                            	 2.76555   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::rightNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                        	 2.76431   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double]	 2.46975   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                               	 0.957292  	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                  	 0.884248  	 1800      
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                            	 0.667853  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_leftOrthogonalize(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&) [with T = double]                                   	 0.591778  	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]           	 0.403683  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                           	 0.265462  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                	 0.221608  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.217431  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                    	 0.0900343 	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                                       	 0.0713633 	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.0342492 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double]        	 0.0341164 	 1800      
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double]          	 0.0332098 	 900       
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                       	 0.0300873 	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double]       	 0.0229927 	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                	 0.0218858 	 1300      
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                              	 0.020436  	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                        	 0.0186715 	 1000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                	 0.00610189	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                              	 0.00315479	 6300      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                         	 0.00131416	 5200      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                           	 0.0010779 	 800       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                       	 0.00105455	 300       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                         	 0.000833907	 100       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                                                  	 0.0004255 	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
orthoX: L, orthoY: L
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 64
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->65  [0m[1;34m1->66  [0m[1;34m2->67  [0m[1;34m3->68  [0m[1;34m4->69  [0m[1;34m5->70  [0m[1;34m6->71  [0m[1;34m7->72  [0m[1;34m8->73  [0m[1;34m9->74  [0m[1;34m10->75  [0m[1;34m11->76  [0m[1;34m12->77  [0m[1;34m13->78  [0m[1;34m14->79  [0m[1;34m15->80  [0m[1;34m16->81  [0m[1;34m17->82  [0m[1;34m18->83  [0m[1;34m19->84  [0m[1;34m20->85  [0m[1;34m21->86  [0m[1;34m22->87  [0m[1;34m23->88  [0m[1;34m24->89  [0m[1;34m25->90  [0m[1;34m26->91  [0m[1;34m27->92  [0m[1;34m28->93  [0m[1;34m29->94  [0m[1;34m30->95  [0m[1;34m31->96  [0m[1;34m32->97  [0m[1;34m33->98  [0m[1;34m34->99  [0m[1;34m35->100  [0m[1;34m36->101  [0m[1;34m37->102  [0m[1;34m38->103  [0m[1;34m39->104  [0m[1;34m40->105  [0m[1;34m41->106  [0m[1;34m42->107  [0m[1;34m43->108  [0m[1;34m44->109  [0m[1;34m45->110  [0m[1;34m46->111  [0m[1;34m47->112  [0m[1;34m48->113  [0m[1;34m49->114  [0m[1;34m50->115  [0m[1;34m51->116  [0m[1;34m52->117  [0m[1;34m53->118  [0m[1;34m54->119  [0m[1;34m55->120  [0m[1;34m56->121  [0m[1;34m57->122  [0m[1;34m58->123  [0m[1;34m59->124  [0m[1;34m60->125  [0m[1;34m61->126  [0m[1;34m62->127  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22430109661056 -> hwthread 65 - OK[0m[1;34m
[0m[1;34m	threadid 22429929826304 -> hwthread 66 - OK[0m[1;34m
[0m[1;34m	threadid 22429728499840 -> hwthread 67 - OK[0m[1;34m
[0m[1;34m	threadid 22429527173376 -> hwthread 68 - OK[0m[1;34m
[0m[1;34m	threadid 22429325846912 -> hwthread 69 - OK[0m[1;34m
[0m[1;34m	threadid 22429124520448 -> hwthread 70 - OK[0m[1;34m
[0m[1;34m	threadid 22428923193984 -> hwthread 71 - OK[0m[1;34m
[0m[1;34m	threadid 22428721867520 -> hwthread 72 - OK[0m[1;34m
[0m[1;34m	threadid 22428520541056 -> hwthread 73 - OK[0m[1;34m
[0m[1;34m	threadid 22428319214592 -> hwthread 74 - OK[0m[1;34m
[0m[1;34m	threadid 22428117888128 -> hwthread 75 - OK[0m[1;34m
[0m[1;34m	threadid 22427916561664 -> hwthread 76 - OK[0m[1;34m
[0m[1;34m	threadid 22427715235200 -> hwthread 77 - OK[0m[1;34m
[0m[1;34m	threadid 22427513908736 -> hwthread 78 - OK[0m[1;34m
[0m[1;34m	threadid 22427312582272 -> hwthread 79 - OK[0m[1;34m
[0m[1;34m	threadid 22427111255808 -> hwthread 80 - OK[0m[1;34m
[0m[1;34m	threadid 22426909929344 -> hwthread 81 - OK[0m[1;34m
[0m[1;34m	threadid 22426708602880 -> hwthread 82 - OK[0m[1;34m
[0m[1;34m	threadid 22426507276416 -> hwthread 83 - OK[0m[1;34m
[0m[1;34m	threadid 22426305949952 -> hwthread 84 - OK[0m[1;34m
[0m[1;34m	threadid 22426104623488 -> hwthread 85 - OK[0m[1;34m
[0m[1;34m	threadid 22425903297024 -> hwthread 86 - OK[0m[1;34m
[0m[1;34m	threadid 22425701970560 -> hwthread 87 - OK[0m[1;34m
[0m[1;34m	threadid 22425500644096 -> hwthread 88 - OK[0m[1;34m
[0m[1;34m	threadid 22425299317632 -> hwthread 89 - OK[0m[1;34m
[0m[1;34m	threadid 22425097991168 -> hwthread 90 - OK[0m[1;34m
[0m[1;34m	threadid 22424896664704 -> hwthread 91 - OK[0m[1;34m
[0m[1;34m	threadid 22424695338240 -> hwthread 92 - OK[0m[1;34m
[0m[1;34m	threadid 22424494011776 -> hwthread 93 - OK[0m[1;34m
[0m[1;34m	threadid 22424292685312 -> hwthread 94 - OK[0m[1;34m
[0m[1;34m	threadid 22424091358848 -> hwthread 95 - OK[0m[1;34m
[0m[1;34m	threadid 22423890032384 -> hwthread 96 - OK[0m[1;34m
[0m[1;34m	threadid 22423688701824 -> hwthread 97 - OK[0m[1;34m
[0m[1;34m	threadid 22423487375360 -> hwthread 98 - OK[0m[1;34m
[0m[1;34m	threadid 22423286048896 -> hwthread 99 - OK[0m[1;34m
[0m[1;34m	threadid 22423084722432 -> hwthread 100 - OK[0m[1;34m
[0m[1;34m	threadid 22422883395968 -> hwthread 101 - OK[0m[1;34m
[0m[1;34m	threadid 22422682069504 -> hwthread 102 - OK[0m[1;34m
[0m[1;34m	threadid 22422480743040 -> hwthread 103 - OK[0m[1;34m
[0m[1;34m	threadid 22422279416576 -> hwthread 104 - OK[0m[1;34m
[0m[1;34m	threadid 22422078090112 -> hwthread 105 - OK[0m[1;34m
[0m[1;34m	threadid 22421876763648 -> hwthread 106 - OK[0m[1;34m
[0m[1;34m	threadid 22421675437184 -> hwthread 107 - OK[0m[1;34m
[0m[1;34m	threadid 22421474110720 -> hwthread 108 - OK[0m[1;34m
[0m[1;34m	threadid 22421272784256 -> hwthread 109 - OK[0m[1;34m
[0m[1;34m	threadid 22421071457792 -> hwthread 110 - OK[0m[1;34m
[0m[1;34m	threadid 22420870131328 -> hwthread 111 - OK[0m[1;34m
[0m[1;34m	threadid 22420668804864 -> hwthread 112 - OK[0m[1;34m
[0m[1;34m	threadid 22420467478400 -> hwthread 113 - OK[0m[1;34m
[0m[1;34m	threadid 22420266151936 -> hwthread 114 - OK[0m[1;34m
[0m[1;34m	threadid 22420064825472 -> hwthread 115 - OK[0m[1;34m
[0m[1;34m	threadid 22419863499008 -> hwthread 116 - OK[0m[1;34m
[0m[1;34m	threadid 22419662172544 -> hwthread 117 - OK[0m[1;34m
[0m[1;34m	threadid 22419460846080 -> hwthread 118 - OK[0m[1;34m
[0m[1;34m	threadid 22419259519616 -> hwthread 119 - OK[0m[1;34m
[0m[1;34m	threadid 22419058193152 -> hwthread 120 - OK[0m[1;34m
[0m[1;34m	threadid 22418856866688 -> hwthread 121 - OK[0m[1;34m
[0m[1;34m	threadid 22418655540224 -> hwthread 122 - OK[0m[1;34m
[0m[1;34m	threadid 22418454213760 -> hwthread 123 - OK[0m[1;34m
[0m[1;34m	threadid 22418252887296 -> hwthread 124 - OK[0m[1;34m
[0m[1;34m	threadid 22418051560832 -> hwthread 125 - OK[0m[1;34m
[0m[1;34m	threadid 22417850234368 -> hwthread 126 - OK[0m[1;34m
[0m[1;34m	threadid 22417648907904 -> hwthread 127 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22430004000512 -> hwthread 64 - OK[0m[1;34m
[0m[1;34m	threadid 22429824964352 -> hwthread 65 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 100, m: 100)                                                               	 0.835371  	 700       	 7.82087   	 0         	 0.201778  	 38.7597   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5000, cols: 100, reductionFactor: 37, colBlockingSize: 12)                 	 0.561737  	 600       	 109.698   	 0         	 4.35791   	 25.1722   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 100, n: 50, r: 100, r2: 100)          	 0.230433  	 600       	 260.379   	 0         	 21.0386   	 12.3762   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5000, cols: 50, reductionFactor: 37, colBlockingSize: 12)                  	 0.225485  	 800       	 91.0948   	 0         	 7.16677   	 12.7107   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 100, r: 100, r2: 5000, leftOrthog: 0)      	 0.190731  	 600       	 314.579   	 0         	 38.2528   	 8.22368   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 5000, Xcols: 50, r: 50, streamingCols: 0)                   	 0.0849261 	 700       	 103.031   	 0         	 33.0523   	 3.11721   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 100, reductionFactor: 37, colBlockingSize: 12)                 	 0.0777224 	 100       	 66.0702   	 0         	 2.67619   	 24.6881   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 100, Qr2: 50)      	 0.0642243 	 700       	 0         	 0         	 76.2951   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 100)                                                                	 0.0513063 	 100       	 4.22301   	 0         	 0.195688  	 21.5803   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                 	 0.039192  	 100       	 2.97679   	 0         	 0.154113  	 19.3157   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                  	 0.0364291 	 900       	 4.11757   	 0         	 1.49221   	 2.75937   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50, k: 2500)   	 0.0327122 	 800       	 305.696   	 0         	 49.4005   	 6.18812   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 2500, k: 50) 	 0.0310029 	 1500      	 604.782   	 0         	 97.7327   	 6.18812   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 5000, m: 50)                                                                       	 0.0259942 	 700       	 0         	 0         	 107.716   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 2500, m: 50, k: 50)	 0.0238691 	 800       	 418.952   	 0         	 67.7026   	 6.18812   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 50, reductionFactor: 37, colBlockingSize: 12)                  	 0.0228572 	 100       	 56.1655   	 0         	 4.4625    	 12.5861   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 50)                                                                                         	 0.0209685 	 800       	 0         	 0         	 76.3051   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 5000, m: 50)                                                              	 0.017946  	 700       	 0         	 0         	 156.023   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r: 100, r2: 100)           	 0.0176392 	 100       	 283.459   	 0         	 23.1303   	 12.2549   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 50, n: 50, r2: 50)                   	 0.015141  	 700       	 0         	 0         	 184.928   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 100, r: 100, r2: 2500, leftOrthog: 0)      	 0.0142505 	 100       	 350.864   	 0         	 43.2265   	 8.11688   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 5000, leftOrthog: 0)        	 0.0137296 	 100       	 182.088   	 0         	 43.9925   	 4.13907   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 100, n: 50, r: 100, r2: 50)           	 0.011684  	 100       	 427.935   	 0         	 51.6945   	 8.27815   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 100, reductionFactor: 37, colBlockingSize: 12)                   	 0.00848196	 100       	 12.1084   	 0         	 1.41477   	 8.55856   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 50, r: 50, streamingCols: 0)                   	 0.0076696 	 100       	 81.4905   	 0         	 26.2074   	 3.10945   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 50, Qr2: 50)       	 0.00494226	 100       	 0         	 0         	 80.9346   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 2500, m: 50)                                                                       	 0.00369316	 100       	 0         	 0         	 54.1541   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 50, reductionFactor: 37, colBlockingSize: 12)                    	 0.00360075	 100       	 7.13065   	 0         	 1.11088   	 6.41892   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 50)                                                              	 0.00285299	 100       	 0         	 0         	 70.1018   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 0, n: 50, r2: 50)                    	 0.00212817	 100       	 0         	 0         	 93.9775   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 100, r: 50, r2: 50, leftOrthog: 0)         	 0.0020977 	 100       	 23.8357   	 0         	 7.62742   	 3.125     
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                          	 0.00134826	 300       	 0         	 0         	 8.90037   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 50, k: 50)   	 0.00131339	 200       	 38.0694   	 0         	 9.13665   	 4.16667   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 50, m: 50, fromLeft: 0)                	 0.000903017	 800       	 0         	 0         	 35.4368   	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                   	 0.000902445	 100       	 0.55405   	 0         	 2.2162    	 0.25      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                          	 0.000819962	 200       	 0         	 0         	 9.75655   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50, k: 50)     	 0.000801658	 100       	 31.1854   	 0         	 7.48449   	 4.16667   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 50, r2: 50)              	 0.000765601	 100       	 32.6541   	 0         	 7.83698   	 4.16667   
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                 	 0.000760233	 200       	 0.657693  	 0         	 10.5231   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 50, m: 50, k: 50)  	 0.000644981	 100       	 38.7608   	 0         	 9.3026    	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 1, r1low: 0, n: 50, r2: 50)                     	 0.000517935	 100       	 0         	 0         	 7.72298   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 50, n: 50, r2: 1)                    	 0.00051229	 100       	 0         	 0         	 15.6162   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                            	 0.000419644	 100       	 1.19149   	 0         	 14.2978   	 0.0833333 
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 50)                                                                	 0.000416781	 100       	 0         	 0         	 9.59737   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 1, Xr2: 50, Qr1: 1, Qr2: 0)          	 0.00039714	 100       	 0         	 0         	 10.072    	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                 	 0.000328557	 100       	 0.760903  	 0         	 12.1744   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 0, m: 2500, k: 50)  	 6.202e-06 	 100       	 0         	 0         	 16123.8   	 0         
Timing statistics:
function                                                                                                                                                                                      	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                        	 3.37822   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_normalized(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                     	 3.37818   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::rightNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                            	 2.77411   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::rightNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                        	 2.7728    	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double]	 2.48078   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                               	 0.92587   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                  	 0.899885  	 1800      
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                            	 0.677399  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_leftOrthogonalize(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&) [with T = double]                                   	 0.604007  	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]           	 0.414546  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                           	 0.260522  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.223625  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                	 0.220809  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                    	 0.0925957 	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                                       	 0.0695637 	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.0364291 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double]          	 0.0335138 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double]        	 0.0323225 	 1800      
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                       	 0.0296873 	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double]       	 0.0245141 	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                	 0.0231367 	 1300      
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                              	 0.0212158 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                        	 0.0182994 	 1000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                	 0.0104763 	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                              	 0.00322927	 6300      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                         	 0.00121823	 5000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                       	 0.00108879	 300       
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                           	 0.000903017	 800       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                         	 0.000902445	 100       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                                                  	 0.000419644	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
orthoX: L, orthoY: L
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 64
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->65  [0m[1;34m1->66  [0m[1;34m2->67  [0m[1;34m3->68  [0m[1;34m4->69  [0m[1;34m5->70  [0m[1;34m6->71  [0m[1;34m7->72  [0m[1;34m8->73  [0m[1;34m9->74  [0m[1;34m10->75  [0m[1;34m11->76  [0m[1;34m12->77  [0m[1;34m13->78  [0m[1;34m14->79  [0m[1;34m15->80  [0m[1;34m16->81  [0m[1;34m17->82  [0m[1;34m18->83  [0m[1;34m19->84  [0m[1;34m20->85  [0m[1;34m21->86  [0m[1;34m22->87  [0m[1;34m23->88  [0m[1;34m24->89  [0m[1;34m25->90  [0m[1;34m26->91  [0m[1;34m27->92  [0m[1;34m28->93  [0m[1;34m29->94  [0m[1;34m30->95  [0m[1;34m31->96  [0m[1;34m32->97  [0m[1;34m33->98  [0m[1;34m34->99  [0m[1;34m35->100  [0m[1;34m36->101  [0m[1;34m37->102  [0m[1;34m38->103  [0m[1;34m39->104  [0m[1;34m40->105  [0m[1;34m41->106  [0m[1;34m42->107  [0m[1;34m43->108  [0m[1;34m44->109  [0m[1;34m45->110  [0m[1;34m46->111  [0m[1;34m47->112  [0m[1;34m48->113  [0m[1;34m49->114  [0m[1;34m50->115  [0m[1;34m51->116  [0m[1;34m52->117  [0m[1;34m53->118  [0m[1;34m54->119  [0m[1;34m55->120  [0m[1;34m56->121  [0m[1;34m57->122  [0m[1;34m58->123  [0m[1;34m59->124  [0m[1;34m60->125  [0m[1;34m61->126  [0m[1;34m62->127  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22982349666176 -> hwthread 65 - OK[0m[1;34m
[0m[1;34m	threadid 22982168668160 -> hwthread 66 - OK[0m[1;34m
[0m[1;34m	threadid 22981967341696 -> hwthread 67 - OK[0m[1;34m
[0m[1;34m	threadid 22981766015232 -> hwthread 68 - OK[0m[1;34m
[0m[1;34m	threadid 22981564688768 -> hwthread 69 - OK[0m[1;34m
[0m[1;34m	threadid 22981363362304 -> hwthread 70 - OK[0m[1;34m
[0m[1;34m	threadid 22981162035840 -> hwthread 71 - OK[0m[1;34m
[0m[1;34m	threadid 22980960709376 -> hwthread 72 - OK[0m[1;34m
[0m[1;34m	threadid 22980759382912 -> hwthread 73 - OK[0m[1;34m
[0m[1;34m	threadid 22980558056448 -> hwthread 74 - OK[0m[1;34m
[0m[1;34m	threadid 22980356729984 -> hwthread 75 - OK[0m[1;34m
[0m[1;34m	threadid 22980155403520 -> hwthread 76 - OK[0m[1;34m
[0m[1;34m	threadid 22979954077056 -> hwthread 77 - OK[0m[1;34m
[0m[1;34m	threadid 22979752750592 -> hwthread 78 - OK[0m[1;34m
[0m[1;34m	threadid 22979551424128 -> hwthread 79 - OK[0m[1;34m
[0m[1;34m	threadid 22979350097664 -> hwthread 80 - OK[0m[1;34m
[0m[1;34m	threadid 22979148771200 -> hwthread 81 - OK[0m[1;34m
[0m[1;34m	threadid 22978947444736 -> hwthread 82 - OK[0m[1;34m
[0m[1;34m	threadid 22978746118272 -> hwthread 83 - OK[0m[1;34m
[0m[1;34m	threadid 22978544791808 -> hwthread 84 - OK[0m[1;34m
[0m[1;34m	threadid 22978343465344 -> hwthread 85 - OK[0m[1;34m
[0m[1;34m	threadid 22978142138880 -> hwthread 86 - OK[0m[1;34m
[0m[1;34m	threadid 22977940812416 -> hwthread 87 - OK[0m[1;34m
[0m[1;34m	threadid 22977739485952 -> hwthread 88 - OK[0m[1;34m
[0m[1;34m	threadid 22977538159488 -> hwthread 89 - OK[0m[1;34m
[0m[1;34m	threadid 22977336833024 -> hwthread 90 - OK[0m[1;34m
[0m[1;34m	threadid 22977135506560 -> hwthread 91 - OK[0m[1;34m
[0m[1;34m	threadid 22976934180096 -> hwthread 92 - OK[0m[1;34m
[0m[1;34m	threadid 22976732853632 -> hwthread 93 - OK[0m[1;34m
[0m[1;34m	threadid 22976531527168 -> hwthread 94 - OK[0m[1;34m
[0m[1;34m	threadid 22976330200704 -> hwthread 95 - OK[0m[1;34m
[0m[1;34m	threadid 22976128874240 -> hwthread 96 - OK[0m[1;34m
[0m[1;34m	threadid 22975927543680 -> hwthread 97 - OK[0m[1;34m
[0m[1;34m	threadid 22975726217216 -> hwthread 98 - OK[0m[1;34m
[0m[1;34m	threadid 22975524890752 -> hwthread 99 - OK[0m[1;34m
[0m[1;34m	threadid 22975323564288 -> hwthread 100 - OK[0m[1;34m
[0m[1;34m	threadid 22975122237824 -> hwthread 101 - OK[0m[1;34m
[0m[1;34m	threadid 22974920911360 -> hwthread 102 - OK[0m[1;34m
[0m[1;34m	threadid 22974719584896 -> hwthread 103 - OK[0m[1;34m
[0m[1;34m	threadid 22974518258432 -> hwthread 104 - OK[0m[1;34m
[0m[1;34m	threadid 22974316931968 -> hwthread 105 - OK[0m[1;34m
[0m[1;34m	threadid 22974115605504 -> hwthread 106 - OK[0m[1;34m
[0m[1;34m	threadid 22973914279040 -> hwthread 107 - OK[0m[1;34m
[0m[1;34m	threadid 22973712952576 -> hwthread 108 - OK[0m[1;34m
[0m[1;34m	threadid 22973511626112 -> hwthread 109 - OK[0m[1;34m
[0m[1;34m	threadid 22973310299648 -> hwthread 110 - OK[0m[1;34m
[0m[1;34m	threadid 22973108973184 -> hwthread 111 - OK[0m[1;34m
[0m[1;34m	threadid 22972907646720 -> hwthread 112 - OK[0m[1;34m
[0m[1;34m	threadid 22972706320256 -> hwthread 113 - OK[0m[1;34m
[0m[1;34m	threadid 22972504993792 -> hwthread 114 - OK[0m[1;34m
[0m[1;34m	threadid 22972303667328 -> hwthread 115 - OK[0m[1;34m
[0m[1;34m	threadid 22972102340864 -> hwthread 116 - OK[0m[1;34m
[0m[1;34m	threadid 22971901014400 -> hwthread 117 - OK[0m[1;34m
[0m[1;34m	threadid 22971699687936 -> hwthread 118 - OK[0m[1;34m
[0m[1;34m	threadid 22971498361472 -> hwthread 119 - OK[0m[1;34m
[0m[1;34m	threadid 22971297035008 -> hwthread 120 - OK[0m[1;34m
[0m[1;34m	threadid 22971095708544 -> hwthread 121 - OK[0m[1;34m
[0m[1;34m	threadid 22970894382080 -> hwthread 122 - OK[0m[1;34m
[0m[1;34m	threadid 22970693055616 -> hwthread 123 - OK[0m[1;34m
[0m[1;34m	threadid 22970491729152 -> hwthread 124 - OK[0m[1;34m
[0m[1;34m	threadid 22970290402688 -> hwthread 125 - OK[0m[1;34m
[0m[1;34m	threadid 22970089076224 -> hwthread 126 - OK[0m[1;34m
[0m[1;34m	threadid 22969887749760 -> hwthread 127 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22982244005632 -> hwthread 64 - OK[0m[1;34m
[0m[1;34m	threadid 22982063806208 -> hwthread 65 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 101, m: 101)                                                               	 0.920536  	 700       	 7.31237   	 0         	 0.186785  	 39.1486   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5050, cols: 101, reductionFactor: 37, colBlockingSize: 12)                 	 0.572002  	 600       	 110.994   	 0         	 4.36573   	 25.424    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 101, n: 50, r: 101, r2: 101)          	 0.226975  	 600       	 272.356   	 0         	 21.7885   	 12.5      
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5050, cols: 51, reductionFactor: 37, colBlockingSize: 12)                  	 0.205315  	 700       	 91.9859   	 0         	 7.09567   	 12.9637   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 101, r: 101, r2: 5050, leftOrthog: 0)      	 0.198658  	 600       	 311.179   	 0         	 37.4647   	 8.30592   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 5050, Xcols: 51, r: 51, streamingCols: 0)                   	 0.0871117 	 700       	 105.549   	 0         	 33.1969   	 3.17947   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 101, reductionFactor: 37, colBlockingSize: 12)                 	 0.0799577 	 100       	 65.514    	 0         	 2.6284    	 24.9254   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 101, Qr2: 51)      	 0.0677961 	 700       	 0         	 0         	 73.7294   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 101)                                                                	 0.0532875 	 100       	 4.10353   	 0         	 0.189913  	 21.6074   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                 	 0.0402135 	 100       	 2.90118   	 0         	 0.150198  	 19.3157   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 51, m: 51)                                                                  	 0.0347128 	 800       	 4.07615   	 0         	 1.44804   	 2.81494   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 51, k: 2500)   	 0.0333504 	 800       	 305.844   	 0         	 48.9446   	 6.24877   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5050, cols: 50, reductionFactor: 37, colBlockingSize: 12)                  	 0.0281865 	 100       	 92.0032   	 0         	 7.23752   	 12.712    
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 5050, m: 51)                                                                       	 0.0267933 	 700       	 0         	 0         	 107.66    	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 2500, m: 51, k: 50)	 0.0250459 	 800       	 407.252   	 0         	 65.173    	 6.24877   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 51, reductionFactor: 37, colBlockingSize: 12)                  	 0.0239551 	 100       	 55.7564   	 0         	 4.34484   	 12.8328   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 5050, m: 51)                                                              	 0.0200033 	 700       	 0         	 0         	 144.204   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 51, n: 50, r2: 51)                                                                                         	 0.019191  	 700       	 0         	 0         	 75.8981   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r: 101, r2: 101)           	 0.0175348 	 100       	 290.878   	 0         	 23.5053   	 12.375    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 101, r: 101, r2: 2500, leftOrthog: 0)      	 0.0153183 	 100       	 332.967   	 0         	 40.6259   	 8.19592   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 51, m: 2550, k: 51) 	 0.0147797 	 700       	 628.267   	 0         	 99.5372   	 6.31188   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 2550, k: 51) 	 0.0145299 	 700       	 626.536   	 0         	 100.246   	 6.25      
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 51, n: 50, r2: 51)                   	 0.0140404 	 700       	 0         	 0         	 205.446   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 5050, leftOrthog: 0)        	 0.0134824 	 100       	 187.282   	 0         	 45.2443   	 4.13934   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 101, n: 50, r: 101, r2: 50)           	 0.0119488 	 100       	 426.864   	 0         	 51.3927   	 8.30592   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 101, reductionFactor: 37, colBlockingSize: 12)                   	 0.0100762 	 100       	 10.3975   	 0         	 1.21085   	 8.5869    
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 51, r: 51, streamingCols: 0)                   	 0.00801439	 100       	 81.1353   	 0         	 25.584    	 3.17133   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 50, reductionFactor: 37, colBlockingSize: 12)                    	 0.00658928	 100       	 3.89658   	 0         	 0.607047  	 6.41892   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 50, Qr2: 51)       	 0.0050562 	 100       	 0         	 0         	 79.9019   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                  	 0.00441117	 100       	 3.77827   	 0         	 1.36925   	 2.75937   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 2550, k: 50) 	 0.00382867	 100       	 333.014   	 0         	 53.8045   	 6.18932   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 2500, m: 51)                                                                       	 0.00369791	 100       	 0         	 0         	 55.1663   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 51)                                                              	 0.00353053	 100       	 0         	 0         	 57.7817   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 0, n: 50, r2: 51)                    	 0.00328598	 100       	 0         	 0         	 62.082    	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 51)                                                                                         	 0.00221802	 100       	 0         	 0         	 91.974    	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 101, r: 50, r2: 50, leftOrthog: 0)         	 0.00219951	 100       	 22.9596   	 0         	 7.32889   	 3.13275   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 51, m: 51, fromLeft: 0)                	 0.00108405	 800       	 0         	 0         	 30.7114   	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                   	 0.000835078	 100       	 0.598746  	 0         	 2.39499   	 0.25      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                          	 0.00080555	 200       	 0         	 0         	 9.9311    	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50, k: 50)     	 0.000782814	 100       	 31.9361   	 0         	 7.66466   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 51, n: 50, r2: 1)                                                                                          	 0.000764839	 200       	 0         	 0         	 10.6689   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 50, r2: 50)              	 0.000728184	 100       	 34.332    	 0         	 8.23968   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 50, k: 51)   	 0.000675751	 100       	 37.7358   	 0         	 8.9974    	 4.19408   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 51, m: 50, k: 51)   	 0.000611817	 100       	 42.5127   	 0         	 10.0697   	 4.22185   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 50, m: 50, k: 50)  	 0.00060271	 100       	 41.4793   	 0         	 9.95504   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 1, r1low: 0, n: 50, r2: 50)                     	 0.000557941	 100       	 0         	 0         	 7.16922   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 51, n: 50, r2: 1)                    	 0.00054775	 100       	 0         	 0         	 14.7513   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                          	 0.000519125	 100       	 0         	 0         	 7.70527   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                            	 0.000431766	 100       	 1.15803   	 0         	 13.8964   	 0.0833333 
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 50)                                                                	 0.000425561	 100       	 0         	 0         	 9.39936   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 1, Xr2: 50, Qr1: 1, Qr2: 0)          	 0.000411097	 100       	 0         	 0         	 9.73006   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                 	 0.000387951	 100       	 0.644411  	 0         	 10.3106   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 51, n: 50, r2: 1)                                                                                 	 0.000354736	 100       	 0.718844  	 0         	 11.5015   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                 	 0.000334065	 100       	 0.748357  	 0         	 11.9737   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 0, m: 2550, k: 50)  	 6.96e-06  	 100       	 0         	 0         	 14655.2   	 0         
Timing statistics:
function                                                                                                                                                                                      	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                        	 3.50206   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_normalized(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                     	 3.502     	 100       
<PITTS::TensorTrain<double>> :: T PITTS::rightNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                            	 2.86893   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::rightNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                        	 2.86767   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double]	 2.58615   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                               	 1.01404   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                  	 0.926082  	 1800      
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                            	 0.690828  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_leftOrthogonalize(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&) [with T = double]                                   	 0.632996  	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]           	 0.437138  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                           	 0.257187  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.236325  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                	 0.229658  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                    	 0.0951261 	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                                       	 0.0732634 	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.0391239 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double]        	 0.0344328 	 1800      
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double]          	 0.0341332 	 900       
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                       	 0.0304912 	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double]       	 0.0256487 	 900       
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                              	 0.0239594 	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                	 0.0234985 	 1300      
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                        	 0.0184321 	 1000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                	 0.00732226	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                              	 0.00348775	 6400      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                         	 0.00130877	 5200      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                           	 0.00108405	 800       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                       	 0.00107675	 300       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                         	 0.000835078	 100       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                                                  	 0.000431766	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
orthoX: L, orthoY: L
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 64
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->65  [0m[1;34m1->66  [0m[1;34m2->67  [0m[1;34m3->68  [0m[1;34m4->69  [0m[1;34m5->70  [0m[1;34m6->71  [0m[1;34m7->72  [0m[1;34m8->73  [0m[1;34m9->74  [0m[1;34m10->75  [0m[1;34m11->76  [0m[1;34m12->77  [0m[1;34m13->78  [0m[1;34m14->79  [0m[1;34m15->80  [0m[1;34m16->81  [0m[1;34m17->82  [0m[1;34m18->83  [0m[1;34m19->84  [0m[1;34m20->85  [0m[1;34m21->86  [0m[1;34m22->87  [0m[1;34m23->88  [0m[1;34m24->89  [0m[1;34m25->90  [0m[1;34m26->91  [0m[1;34m27->92  [0m[1;34m28->93  [0m[1;34m29->94  [0m[1;34m30->95  [0m[1;34m31->96  [0m[1;34m32->97  [0m[1;34m33->98  [0m[1;34m34->99  [0m[1;34m35->100  [0m[1;34m36->101  [0m[1;34m37->102  [0m[1;34m38->103  [0m[1;34m39->104  [0m[1;34m40->105  [0m[1;34m41->106  [0m[1;34m42->107  [0m[1;34m43->108  [0m[1;34m44->109  [0m[1;34m45->110  [0m[1;34m46->111  [0m[1;34m47->112  [0m[1;34m48->113  [0m[1;34m49->114  [0m[1;34m50->115  [0m[1;34m51->116  [0m[1;34m52->117  [0m[1;34m53->118  [0m[1;34m54->119  [0m[1;34m55->120  [0m[1;34m56->121  [0m[1;34m57->122  [0m[1;34m58->123  [0m[1;34m59->124  [0m[1;34m60->125  [0m[1;34m61->126  [0m[1;34m62->127  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22786093803392 -> hwthread 65 - OK[0m[1;34m
[0m[1;34m	threadid 22785875240960 -> hwthread 66 - OK[0m[1;34m
[0m[1;34m	threadid 22785673914496 -> hwthread 67 - OK[0m[1;34m
[0m[1;34m	threadid 22785472588032 -> hwthread 68 - OK[0m[1;34m
[0m[1;34m	threadid 22785271261568 -> hwthread 69 - OK[0m[1;34m
[0m[1;34m	threadid 22785069935104 -> hwthread 70 - OK[0m[1;34m
[0m[1;34m	threadid 22784868608640 -> hwthread 71 - OK[0m[1;34m
[0m[1;34m	threadid 22784667282176 -> hwthread 72 - OK[0m[1;34m
[0m[1;34m	threadid 22784465955712 -> hwthread 73 - OK[0m[1;34m
[0m[1;34m	threadid 22784264629248 -> hwthread 74 - OK[0m[1;34m
[0m[1;34m	threadid 22784063302784 -> hwthread 75 - OK[0m[1;34m
[0m[1;34m	threadid 22783861976320 -> hwthread 76 - OK[0m[1;34m
[0m[1;34m	threadid 22783660649856 -> hwthread 77 - OK[0m[1;34m
[0m[1;34m	threadid 22783459323392 -> hwthread 78 - OK[0m[1;34m
[0m[1;34m	threadid 22783257996928 -> hwthread 79 - OK[0m[1;34m
[0m[1;34m	threadid 22783056670464 -> hwthread 80 - OK[0m[1;34m
[0m[1;34m	threadid 22782855344000 -> hwthread 81 - OK[0m[1;34m
[0m[1;34m	threadid 22782654017536 -> hwthread 82 - OK[0m[1;34m
[0m[1;34m	threadid 22782452691072 -> hwthread 83 - OK[0m[1;34m
[0m[1;34m	threadid 22782251364608 -> hwthread 84 - OK[0m[1;34m
[0m[1;34m	threadid 22782050038144 -> hwthread 85 - OK[0m[1;34m
[0m[1;34m	threadid 22781848711680 -> hwthread 86 - OK[0m[1;34m
[0m[1;34m	threadid 22781647385216 -> hwthread 87 - OK[0m[1;34m
[0m[1;34m	threadid 22781446058752 -> hwthread 88 - OK[0m[1;34m
[0m[1;34m	threadid 22781244732288 -> hwthread 89 - OK[0m[1;34m
[0m[1;34m	threadid 22781043405824 -> hwthread 90 - OK[0m[1;34m
[0m[1;34m	threadid 22780842079360 -> hwthread 91 - OK[0m[1;34m
[0m[1;34m	threadid 22780640752896 -> hwthread 92 - OK[0m[1;34m
[0m[1;34m	threadid 22780439426432 -> hwthread 93 - OK[0m[1;34m
[0m[1;34m	threadid 22780238099968 -> hwthread 94 - OK[0m[1;34m
[0m[1;34m	threadid 22780036773504 -> hwthread 95 - OK[0m[1;34m
[0m[1;34m	threadid 22779835447040 -> hwthread 96 - OK[0m[1;34m
[0m[1;34m	threadid 22779634116480 -> hwthread 97 - OK[0m[1;34m
[0m[1;34m	threadid 22779432790016 -> hwthread 98 - OK[0m[1;34m
[0m[1;34m	threadid 22779231463552 -> hwthread 99 - OK[0m[1;34m
[0m[1;34m	threadid 22779030137088 -> hwthread 100 - OK[0m[1;34m
[0m[1;34m	threadid 22778828810624 -> hwthread 101 - OK[0m[1;34m
[0m[1;34m	threadid 22778627484160 -> hwthread 102 - OK[0m[1;34m
[0m[1;34m	threadid 22778426157696 -> hwthread 103 - OK[0m[1;34m
[0m[1;34m	threadid 22778224831232 -> hwthread 104 - OK[0m[1;34m
[0m[1;34m	threadid 22778023504768 -> hwthread 105 - OK[0m[1;34m
[0m[1;34m	threadid 22777822178304 -> hwthread 106 - OK[0m[1;34m
[0m[1;34m	threadid 22777620851840 -> hwthread 107 - OK[0m[1;34m
[0m[1;34m	threadid 22777419525376 -> hwthread 108 - OK[0m[1;34m
[0m[1;34m	threadid 22777218198912 -> hwthread 109 - OK[0m[1;34m
[0m[1;34m	threadid 22777016872448 -> hwthread 110 - OK[0m[1;34m
[0m[1;34m	threadid 22776815545984 -> hwthread 111 - OK[0m[1;34m
[0m[1;34m	threadid 22776614219520 -> hwthread 112 - OK[0m[1;34m
[0m[1;34m	threadid 22776412893056 -> hwthread 113 - OK[0m[1;34m
[0m[1;34m	threadid 22776211566592 -> hwthread 114 - OK[0m[1;34m
[0m[1;34m	threadid 22776010240128 -> hwthread 115 - OK[0m[1;34m
[0m[1;34m	threadid 22775808913664 -> hwthread 116 - OK[0m[1;34m
[0m[1;34m	threadid 22775607587200 -> hwthread 117 - OK[0m[1;34m
[0m[1;34m	threadid 22775406260736 -> hwthread 118 - OK[0m[1;34m
[0m[1;34m	threadid 22775204934272 -> hwthread 119 - OK[0m[1;34m
[0m[1;34m	threadid 22775003607808 -> hwthread 120 - OK[0m[1;34m
[0m[1;34m	threadid 22774802281344 -> hwthread 121 - OK[0m[1;34m
[0m[1;34m	threadid 22774600954880 -> hwthread 122 - OK[0m[1;34m
[0m[1;34m	threadid 22774399628416 -> hwthread 123 - OK[0m[1;34m
[0m[1;34m	threadid 22774198301952 -> hwthread 124 - OK[0m[1;34m
[0m[1;34m	threadid 22773996975488 -> hwthread 125 - OK[0m[1;34m
[0m[1;34m	threadid 22773795649024 -> hwthread 126 - OK[0m[1;34m
[0m[1;34m	threadid 22773594322560 -> hwthread 127 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22785988142848 -> hwthread 64 - OK[0m[1;34m
[0m[1;34m	threadid 22785981552384 -> hwthread 65 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 102, m: 102)                                                               	 0.912085  	 700       	 7.60151   	 0         	 0.192261  	 39.5375   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5100, cols: 102, reductionFactor: 37, colBlockingSize: 12)                 	 0.574755  	 600       	 113.776   	 0         	 4.43128   	 25.6757   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 102, n: 50, r: 102, r2: 102)          	 0.230549  	 600       	 276.177   	 0         	 21.8776   	 12.6238   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5100, cols: 52, reductionFactor: 37, colBlockingSize: 12)                  	 0.206948  	 700       	 95.8133   	 0         	 7.24947   	 13.2166   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 102, r: 102, r2: 5100, leftOrthog: 0)      	 0.195632  	 600       	 325.471   	 0         	 38.8013   	 8.38816   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 5100, Xcols: 52, r: 52, streamingCols: 0)                   	 0.0897178 	 700       	 107.596   	 0         	 33.1909   	 3.24174   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 102, reductionFactor: 37, colBlockingSize: 12)                 	 0.0807519 	 100       	 66.1606   	 0         	 2.62933   	 25.1626   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 102, Qr2: 52)      	 0.0731218 	 700       	 0         	 0         	 69.7226   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 102)                                                                	 0.0518507 	 100       	 4.25581   	 0         	 0.196719  	 21.634    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                 	 0.0395123 	 100       	 2.95266   	 0         	 0.152864  	 19.3157   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 52, k: 2500)   	 0.0335591 	 800       	 309.901   	 0         	 49.1265   	 6.30823   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 52, m: 52)                                                                  	 0.0332761 	 800       	 4.50717   	 0         	 1.57019   	 2.87047   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 5100, m: 52)                                                                       	 0.0321043 	 700       	 0         	 0         	 92.5183   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5100, cols: 50, reductionFactor: 37, colBlockingSize: 12)                  	 0.0283088 	 100       	 92.5127   	 0         	 7.2769    	 12.7132   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 52, reductionFactor: 37, colBlockingSize: 12)                  	 0.0238982 	 100       	 58.1024   	 0         	 4.44231   	 13.0793   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 2500, m: 52, k: 50)	 0.0236397 	 800       	 439.938   	 0         	 69.7404   	 6.30823   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 52, n: 50, r2: 52)                                                                                         	 0.0198238 	 700       	 0         	 0         	 76.3851   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r: 102, r2: 102)           	 0.0185755 	 100       	 280.046   	 0         	 22.4125   	 12.4951   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 5100, m: 52)                                                              	 0.0177673 	 700       	 0         	 0         	 167.175   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 5100, leftOrthog: 0)        	 0.017231  	 100       	 147.989   	 0         	 35.7495   	 4.13961   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 52, m: 2600, k: 52) 	 0.0163717 	 700       	 601.194   	 0         	 93.4163   	 6.43564   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 102, r: 102, r2: 2500, leftOrthog: 0)      	 0.0155378 	 100       	 334.797   	 0         	 40.4593   	 8.27492   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 2600, k: 52) 	 0.0154733 	 700       	 611.635   	 0         	 96.9206   	 6.31068   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 52, n: 50, r2: 52)                   	 0.0144683 	 700       	 0         	 0         	 205.293   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 102, n: 50, r: 102, r2: 50)           	 0.0122085 	 100       	 426.095   	 0         	 51.1314   	 8.33333   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 102, reductionFactor: 37, colBlockingSize: 12)                   	 0.00845524	 100       	 12.6374   	 0         	 1.46692   	 8.61486   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 52, r: 52, streamingCols: 0)                   	 0.0082716 	 100       	 81.7254   	 0         	 25.277    	 3.23319   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 50, Qr2: 52)       	 0.00556641	 100       	 0         	 0         	 73.2967   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 2500, m: 52)                                                                       	 0.00474427	 100       	 0         	 0         	 43.8424   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                  	 0.00468783	 100       	 3.55529   	 0         	 1.28844   	 2.75937   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 52)                                                              	 0.00432224	 100       	 0         	 0         	 48.1233   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 0, n: 50, r2: 52)                    	 0.00427706	 100       	 0         	 0         	 48.6316   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 50, reductionFactor: 37, colBlockingSize: 12)                    	 0.00359592	 100       	 7.14022   	 0         	 1.11237   	 6.41892   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 2600, k: 50) 	 0.00318123	 100       	 408.646   	 0         	 66.0121   	 6.19048   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 102, r: 50, r2: 50, leftOrthog: 0)         	 0.0022277 	 100       	 22.8935   	 0         	 7.29002   	 3.14039   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 52)                                                                                         	 0.00211091	 100       	 0         	 0         	 98.5358   	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                   	 0.000835738	 100       	 0.598274  	 0         	 2.39309   	 0.25      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                          	 0.000813003	 200       	 0         	 0         	 9.84006   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 52, n: 50, r2: 1)                                                                                          	 0.000807206	 200       	 0         	 0         	 10.3072   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50, k: 50)     	 0.000786337	 100       	 31.793    	 0         	 7.63032   	 4.16667   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 50, r2: 50)              	 0.000759857	 100       	 32.9009   	 0         	 7.89622   	 4.16667   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 52, m: 52, fromLeft: 0)                	 0.000741637	 800       	 0         	 0         	 46.6687   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 52, m: 50, k: 52)   	 0.000716414	 100       	 37.7435   	 0         	 8.82618   	 4.27632   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 50, k: 52)   	 0.000709328	 100       	 36.6544   	 0         	 8.68428   	 4.22078   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 50, m: 50, k: 50)  	 0.000661705	 100       	 37.7812   	 0         	 9.06748   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 1, r1low: 0, n: 50, r2: 50)                     	 0.0005554 	 100       	 0         	 0         	 7.20202   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 52, n: 50, r2: 1)                    	 0.000536316	 100       	 0         	 0         	 15.2149   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                          	 0.000513673	 100       	 0         	 0         	 7.78706   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 50)                                                                	 0.000464944	 100       	 0         	 0         	 8.60319   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                            	 0.000464415	 100       	 1.07662   	 0         	 12.9195   	 0.0833333 
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 1, Xr2: 50, Qr1: 1, Qr2: 0)          	 0.000410815	 100       	 0         	 0         	 9.73674   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                 	 0.000395836	 100       	 0.631575  	 0         	 10.1052   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 52, n: 50, r2: 1)                                                                                 	 0.00035866	 100       	 0.724921  	 0         	 11.5987   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                 	 0.000327517	 100       	 0.763319  	 0         	 12.2131   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 0, m: 2600, k: 50)  	 6.8e-06   	 100       	 0         	 0         	 15294.1   	 0         
Timing statistics:
function                                                                                                                                                                                      	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                        	 3.49744   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_normalized(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                     	 3.49738   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::rightNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                            	 2.84873   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::rightNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                        	 2.84749   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double]	 2.55718   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                               	 1.00345   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                  	 0.926713  	 1800      
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                            	 0.692899  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_leftOrthogonalize(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&) [with T = double]                                   	 0.648592  	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]           	 0.441727  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                           	 0.262093  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.23491   	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                	 0.230628  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                    	 0.0979894 	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                                       	 0.079099  	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.0379639 	 900       
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                       	 0.0368486 	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double]        	 0.0364587 	 1800      
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double]          	 0.0343454 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double]       	 0.0243014 	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                	 0.0240685 	 1300      
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                              	 0.0225544 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                        	 0.019837  	 1000      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                         	 0.00508392	 5200      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                	 0.00450327	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                              	 0.00329164	 6400      
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                       	 0.00108201	 300       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                         	 0.000835738	 100       
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                           	 0.000741637	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                                                  	 0.000464415	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
orthoX: L, orthoY: L
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 64
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->65  [0m[1;34m1->66  [0m[1;34m2->67  [0m[1;34m3->68  [0m[1;34m4->69  [0m[1;34m5->70  [0m[1;34m6->71  [0m[1;34m7->72  [0m[1;34m8->73  [0m[1;34m9->74  [0m[1;34m10->75  [0m[1;34m11->76  [0m[1;34m12->77  [0m[1;34m13->78  [0m[1;34m14->79  [0m[1;34m15->80  [0m[1;34m16->81  [0m[1;34m17->82  [0m[1;34m18->83  [0m[1;34m19->84  [0m[1;34m20->85  [0m[1;34m21->86  [0m[1;34m22->87  [0m[1;34m23->88  [0m[1;34m24->89  [0m[1;34m25->90  [0m[1;34m26->91  [0m[1;34m27->92  [0m[1;34m28->93  [0m[1;34m29->94  [0m[1;34m30->95  [0m[1;34m31->96  [0m[1;34m32->97  [0m[1;34m33->98  [0m[1;34m34->99  [0m[1;34m35->100  [0m[1;34m36->101  [0m[1;34m37->102  [0m[1;34m38->103  [0m[1;34m39->104  [0m[1;34m40->105  [0m[1;34m41->106  [0m[1;34m42->107  [0m[1;34m43->108  [0m[1;34m44->109  [0m[1;34m45->110  [0m[1;34m46->111  [0m[1;34m47->112  [0m[1;34m48->113  [0m[1;34m49->114  [0m[1;34m50->115  [0m[1;34m51->116  [0m[1;34m52->117  [0m[1;34m53->118  [0m[1;34m54->119  [0m[1;34m55->120  [0m[1;34m56->121  [0m[1;34m57->122  [0m[1;34m58->123  [0m[1;34m59->124  [0m[1;34m60->125  [0m[1;34m61->126  [0m[1;34m62->127  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22743810901888 -> hwthread 65 - OK[0m[1;34m
[0m[1;34m	threadid 22743596656640 -> hwthread 66 - OK[0m[1;34m
[0m[1;34m	threadid 22743395330176 -> hwthread 67 - OK[0m[1;34m
[0m[1;34m	threadid 22743194003712 -> hwthread 68 - OK[0m[1;34m
[0m[1;34m	threadid 22742992677248 -> hwthread 69 - OK[0m[1;34m
[0m[1;34m	threadid 22742791350784 -> hwthread 70 - OK[0m[1;34m
[0m[1;34m	threadid 22742590024320 -> hwthread 71 - OK[0m[1;34m
[0m[1;34m	threadid 22742388697856 -> hwthread 72 - OK[0m[1;34m
[0m[1;34m	threadid 22742187371392 -> hwthread 73 - OK[0m[1;34m
[0m[1;34m	threadid 22741986044928 -> hwthread 74 - OK[0m[1;34m
[0m[1;34m	threadid 22741784718464 -> hwthread 75 - OK[0m[1;34m
[0m[1;34m	threadid 22741583392000 -> hwthread 76 - OK[0m[1;34m
[0m[1;34m	threadid 22741382065536 -> hwthread 77 - OK[0m[1;34m
[0m[1;34m	threadid 22741180739072 -> hwthread 78 - OK[0m[1;34m
[0m[1;34m	threadid 22740979412608 -> hwthread 79 - OK[0m[1;34m
[0m[1;34m	threadid 22740778086144 -> hwthread 80 - OK[0m[1;34m
[0m[1;34m	threadid 22740576759680 -> hwthread 81 - OK[0m[1;34m
[0m[1;34m	threadid 22740375433216 -> hwthread 82 - OK[0m[1;34m
[0m[1;34m	threadid 22740174106752 -> hwthread 83 - OK[0m[1;34m
[0m[1;34m	threadid 22739972780288 -> hwthread 84 - OK[0m[1;34m
[0m[1;34m	threadid 22739771453824 -> hwthread 85 - OK[0m[1;34m
[0m[1;34m	threadid 22739570127360 -> hwthread 86 - OK[0m[1;34m
[0m[1;34m	threadid 22739368800896 -> hwthread 87 - OK[0m[1;34m
[0m[1;34m	threadid 22739167474432 -> hwthread 88 - OK[0m[1;34m
[0m[1;34m	threadid 22738966147968 -> hwthread 89 - OK[0m[1;34m
[0m[1;34m	threadid 22738764821504 -> hwthread 90 - OK[0m[1;34m
[0m[1;34m	threadid 22738563495040 -> hwthread 91 - OK[0m[1;34m
[0m[1;34m	threadid 22738362168576 -> hwthread 92 - OK[0m[1;34m
[0m[1;34m	threadid 22738160842112 -> hwthread 93 - OK[0m[1;34m
[0m[1;34m	threadid 22737959515648 -> hwthread 94 - OK[0m[1;34m
[0m[1;34m	threadid 22737758189184 -> hwthread 95 - OK[0m[1;34m
[0m[1;34m	threadid 22737556862720 -> hwthread 96 - OK[0m[1;34m
[0m[1;34m	threadid 22737355532160 -> hwthread 97 - OK[0m[1;34m
[0m[1;34m	threadid 22737154205696 -> hwthread 98 - OK[0m[1;34m
[0m[1;34m	threadid 22736952879232 -> hwthread 99 - OK[0m[1;34m
[0m[1;34m	threadid 22736751552768 -> hwthread 100 - OK[0m[1;34m
[0m[1;34m	threadid 22736550226304 -> hwthread 101 - OK[0m[1;34m
[0m[1;34m	threadid 22736348899840 -> hwthread 102 - OK[0m[1;34m
[0m[1;34m	threadid 22736147573376 -> hwthread 103 - OK[0m[1;34m
[0m[1;34m	threadid 22735946246912 -> hwthread 104 - OK[0m[1;34m
[0m[1;34m	threadid 22735744920448 -> hwthread 105 - OK[0m[1;34m
[0m[1;34m	threadid 22735543593984 -> hwthread 106 - OK[0m[1;34m
[0m[1;34m	threadid 22735342267520 -> hwthread 107 - OK[0m[1;34m
[0m[1;34m	threadid 22735140941056 -> hwthread 108 - OK[0m[1;34m
[0m[1;34m	threadid 22734939614592 -> hwthread 109 - OK[0m[1;34m
[0m[1;34m	threadid 22734738288128 -> hwthread 110 - OK[0m[1;34m
[0m[1;34m	threadid 22734536961664 -> hwthread 111 - OK[0m[1;34m
[0m[1;34m	threadid 22734335635200 -> hwthread 112 - OK[0m[1;34m
[0m[1;34m	threadid 22734134308736 -> hwthread 113 - OK[0m[1;34m
[0m[1;34m	threadid 22733932982272 -> hwthread 114 - OK[0m[1;34m
[0m[1;34m	threadid 22733731655808 -> hwthread 115 - OK[0m[1;34m
[0m[1;34m	threadid 22733530329344 -> hwthread 116 - OK[0m[1;34m
[0m[1;34m	threadid 22733329002880 -> hwthread 117 - OK[0m[1;34m
[0m[1;34m	threadid 22733127676416 -> hwthread 118 - OK[0m[1;34m
[0m[1;34m	threadid 22732926349952 -> hwthread 119 - OK[0m[1;34m
[0m[1;34m	threadid 22732725023488 -> hwthread 120 - OK[0m[1;34m
[0m[1;34m	threadid 22732523697024 -> hwthread 121 - OK[0m[1;34m
[0m[1;34m	threadid 22732322370560 -> hwthread 122 - OK[0m[1;34m
[0m[1;34m	threadid 22732121044096 -> hwthread 123 - OK[0m[1;34m
[0m[1;34m	threadid 22731919717632 -> hwthread 124 - OK[0m[1;34m
[0m[1;34m	threadid 22731718391168 -> hwthread 125 - OK[0m[1;34m
[0m[1;34m	threadid 22731517064704 -> hwthread 126 - OK[0m[1;34m
[0m[1;34m	threadid 22731315738240 -> hwthread 127 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22743705241344 -> hwthread 64 - OK[0m[1;34m
[0m[1;34m	threadid 22743698650880 -> hwthread 65 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 103, m: 103)                                                               	 0.949709  	 700       	 7.51719   	 0         	 0.188277  	 39.9263   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5150, cols: 103, reductionFactor: 37, colBlockingSize: 12)                 	 0.586393  	 600       	 114.83    	 0         	 4.42891   	 25.9274   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 103, n: 50, r: 103, r2: 103)          	 0.233662  	 600       	 280.592   	 0         	 22.0115   	 12.7475   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5150, cols: 53, reductionFactor: 37, colBlockingSize: 12)                  	 0.210449  	 700       	 98.8374   	 0         	 7.33787   	 13.4695   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 103, r: 103, r2: 5150, leftOrthog: 0)      	 0.197628  	 600       	 331.753   	 0         	 39.1662   	 8.47039   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 5150, Xcols: 53, r: 53, streamingCols: 0)                   	 0.0903434 	 700       	 112.088   	 0         	 33.9251   	 3.304     
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 103, reductionFactor: 37, colBlockingSize: 12)                 	 0.0821343 	 100       	 66.3288   	 0         	 2.61142   	 25.3995   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 103, Qr2: 53)      	 0.0712275 	 700       	 0         	 0         	 72.9921   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 103)                                                                	 0.0522961 	 100       	 4.25781   	 0         	 0.196573  	 21.6602   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                 	 0.0409528 	 100       	 2.84881   	 0         	 0.147487  	 19.3157   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 53, m: 53)                                                                  	 0.0369878 	 800       	 4.29335   	 0         	 1.4673    	 2.92603   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 53, k: 2500)   	 0.0346576 	 800       	 305.85    	 0         	 48.0403   	 6.36652   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 5150, m: 53)                                                                       	 0.0322783 	 700       	 0         	 0         	 94.7089   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5150, cols: 50, reductionFactor: 37, colBlockingSize: 12)                  	 0.0284029 	 100       	 93.1099   	 0         	 7.32319   	 12.7144   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 2500, m: 53, k: 50)	 0.0250144 	 800       	 423.756   	 0         	 66.5601   	 6.36652   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 53, reductionFactor: 37, colBlockingSize: 12)                  	 0.024875  	 100       	 57.9883   	 0         	 4.35164   	 13.3256   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 53, n: 50, r2: 53)                                                                                         	 0.0200795 	 700       	 0         	 0         	 78.3404   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 5150, m: 53)                                                              	 0.0192477 	 700       	 0         	 0         	 158.826   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r: 103, r2: 103)           	 0.01814   	 100       	 292.42    	 0         	 23.1801   	 12.6151   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 53, m: 2650, k: 53) 	 0.0174171 	 700       	 598.343   	 0         	 91.2191   	 6.55941   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 5150, leftOrthog: 0)        	 0.0164244 	 100       	 156.779   	 0         	 37.8705   	 4.13987   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 2650, k: 53) 	 0.0157157 	 700       	 625.584   	 0         	 98.2048   	 6.37019   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 103, r: 103, r2: 2500, leftOrthog: 0)      	 0.0155882 	 100       	 340.289   	 0         	 40.7342   	 8.35388   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 53, n: 50, r2: 53)                   	 0.0146021 	 700       	 0         	 0         	 209.356   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 103, n: 50, r: 103, r2: 50)           	 0.0123173 	 100       	 430.655   	 0         	 51.5113   	 8.36039   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 103, reductionFactor: 37, colBlockingSize: 12)                   	 0.00868384	 100       	 12.5471   	 0         	 1.4518    	 8.64247   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 53, r: 53, streamingCols: 0)                   	 0.00837501	 100       	 83.8507   	 0         	 25.4476   	 3.29504   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 50, Qr2: 53)       	 0.00517339	 100       	 0         	 0         	 79.6383   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 2500, m: 53)                                                                       	 0.0046949 	 100       	 0         	 0         	 45.1554   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                  	 0.0045627 	 100       	 3.65279   	 0         	 1.32378   	 2.75937   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 0, n: 50, r2: 53)                    	 0.00401066	 100       	 0         	 0         	 52.8592   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 53)                                                              	 0.00391519	 100       	 0         	 0         	 54.1481   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 50, reductionFactor: 37, colBlockingSize: 12)                    	 0.0036133 	 100       	 7.10588   	 0         	 1.10702   	 6.41892   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 2650, k: 50) 	 0.00338851	 100       	 391.028   	 0         	 63.1546   	 6.19159   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 103, r: 50, r2: 50, leftOrthog: 0)         	 0.00223282	 100       	 23.065    	 0         	 7.32707   	 3.14792   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 53)                                                                                         	 0.00212041	 100       	 0         	 0         	 99.9805   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 53, m: 53, fromLeft: 0)                	 0.00118331	 800       	 0         	 0         	 30.3854   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 53, n: 50, r2: 1)                                                                                          	 0.000840782	 200       	 0         	 0         	 10.0858   	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                   	 0.000814192	 100       	 0.614106  	 0         	 2.45642   	 0.25      
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50, k: 50)     	 0.000802142	 100       	 31.1666   	 0         	 7.47997   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                          	 0.000790924	 200       	 0         	 0         	 10.1148   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 50, r2: 50)              	 0.000787444	 100       	 31.7483   	 0         	 7.61959   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 53, m: 50, k: 53)   	 0.000743917	 100       	 37.7596   	 0         	 8.72033   	 4.33007   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 50, k: 53)   	 0.000693646	 100       	 38.2039   	 0         	 8.99594   	 4.24679   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 50, m: 50, k: 50)  	 0.000603073	 100       	 41.4544   	 0         	 9.94904   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 1, r1low: 0, n: 50, r2: 50)                     	 0.000542447	 100       	 0         	 0         	 7.37399   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                          	 0.000525265	 100       	 0         	 0         	 7.6152    	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 53, n: 50, r2: 1)                    	 0.000500158	 100       	 0         	 0         	 16.4748   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                            	 0.000427341	 100       	 1.17003   	 0         	 14.0403   	 0.0833333 
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 50)                                                                	 0.000422295	 100       	 0         	 0         	 9.47205   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 1, Xr2: 50, Qr1: 1, Qr2: 0)          	 0.000417992	 100       	 0         	 0         	 9.56956   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                 	 0.000390165	 100       	 0.640755  	 0         	 10.2521   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 53, n: 50, r2: 1)                                                                                 	 0.000356204	 100       	 0.743956  	 0         	 11.9033   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                 	 0.000327809	 100       	 0.762639  	 0         	 12.2022   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 0, m: 2650, k: 50)  	 7.21e-06  	 100       	 0         	 0         	 14701.8   	 0         
Timing statistics:
function                                                                                                                                                                                      	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                        	 3.60017   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_normalized(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                     	 3.60012   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::rightNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                            	 2.94396   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::rightNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                        	 2.94273   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double]	 2.64725   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                               	 1.04296   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                  	 0.944551  	 1800      
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                            	 0.706232  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_leftOrthogonalize(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&) [with T = double]                                   	 0.656078  	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]           	 0.452441  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                           	 0.264907  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.239391  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                	 0.231873  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                    	 0.0987184 	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                                       	 0.0768188 	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.0415505 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double]        	 0.0379661 	 1800      
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                       	 0.0369732 	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double]          	 0.0354597 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double]       	 0.0256175 	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                	 0.0243569 	 1300      
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                              	 0.0235852 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                        	 0.0196554 	 1000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                	 0.00434074	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                              	 0.00350053	 6400      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                         	 0.00147345	 5200      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                           	 0.00118331	 800       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                       	 0.00107418	 300       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                         	 0.000814192	 100       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                                                  	 0.000427341	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
orthoX: L, orthoY: L
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 64
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->65  [0m[1;34m1->66  [0m[1;34m2->67  [0m[1;34m3->68  [0m[1;34m4->69  [0m[1;34m5->70  [0m[1;34m6->71  [0m[1;34m7->72  [0m[1;34m8->73  [0m[1;34m9->74  [0m[1;34m10->75  [0m[1;34m11->76  [0m[1;34m12->77  [0m[1;34m13->78  [0m[1;34m14->79  [0m[1;34m15->80  [0m[1;34m16->81  [0m[1;34m17->82  [0m[1;34m18->83  [0m[1;34m19->84  [0m[1;34m20->85  [0m[1;34m21->86  [0m[1;34m22->87  [0m[1;34m23->88  [0m[1;34m24->89  [0m[1;34m25->90  [0m[1;34m26->91  [0m[1;34m27->92  [0m[1;34m28->93  [0m[1;34m29->94  [0m[1;34m30->95  [0m[1;34m31->96  [0m[1;34m32->97  [0m[1;34m33->98  [0m[1;34m34->99  [0m[1;34m35->100  [0m[1;34m36->101  [0m[1;34m37->102  [0m[1;34m38->103  [0m[1;34m39->104  [0m[1;34m40->105  [0m[1;34m41->106  [0m[1;34m42->107  [0m[1;34m43->108  [0m[1;34m44->109  [0m[1;34m45->110  [0m[1;34m46->111  [0m[1;34m47->112  [0m[1;34m48->113  [0m[1;34m49->114  [0m[1;34m50->115  [0m[1;34m51->116  [0m[1;34m52->117  [0m[1;34m53->118  [0m[1;34m54->119  [0m[1;34m55->120  [0m[1;34m56->121  [0m[1;34m57->122  [0m[1;34m58->123  [0m[1;34m59->124  [0m[1;34m60->125  [0m[1;34m61->126  [0m[1;34m62->127  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23029396203392 -> hwthread 65 - OK[0m[1;34m
[0m[1;34m	threadid 23029211981824 -> hwthread 66 - OK[0m[1;34m
[0m[1;34m	threadid 23029010655360 -> hwthread 67 - OK[0m[1;34m
[0m[1;34m	threadid 23028809328896 -> hwthread 68 - OK[0m[1;34m
[0m[1;34m	threadid 23028608002432 -> hwthread 69 - OK[0m[1;34m
[0m[1;34m	threadid 23028406675968 -> hwthread 70 - OK[0m[1;34m
[0m[1;34m	threadid 23028205349504 -> hwthread 71 - OK[0m[1;34m
[0m[1;34m	threadid 23028004023040 -> hwthread 72 - OK[0m[1;34m
[0m[1;34m	threadid 23027802696576 -> hwthread 73 - OK[0m[1;34m
[0m[1;34m	threadid 23027601370112 -> hwthread 74 - OK[0m[1;34m
[0m[1;34m	threadid 23027400043648 -> hwthread 75 - OK[0m[1;34m
[0m[1;34m	threadid 23027198717184 -> hwthread 76 - OK[0m[1;34m
[0m[1;34m	threadid 23026997390720 -> hwthread 77 - OK[0m[1;34m
[0m[1;34m	threadid 23026796064256 -> hwthread 78 - OK[0m[1;34m
[0m[1;34m	threadid 23026594737792 -> hwthread 79 - OK[0m[1;34m
[0m[1;34m	threadid 23026393411328 -> hwthread 80 - OK[0m[1;34m
[0m[1;34m	threadid 23026192084864 -> hwthread 81 - OK[0m[1;34m
[0m[1;34m	threadid 23025990758400 -> hwthread 82 - OK[0m[1;34m
[0m[1;34m	threadid 23025789431936 -> hwthread 83 - OK[0m[1;34m
[0m[1;34m	threadid 23025588105472 -> hwthread 84 - OK[0m[1;34m
[0m[1;34m	threadid 23025386779008 -> hwthread 85 - OK[0m[1;34m
[0m[1;34m	threadid 23025185452544 -> hwthread 86 - OK[0m[1;34m
[0m[1;34m	threadid 23024984126080 -> hwthread 87 - OK[0m[1;34m
[0m[1;34m	threadid 23024782799616 -> hwthread 88 - OK[0m[1;34m
[0m[1;34m	threadid 23024581473152 -> hwthread 89 - OK[0m[1;34m
[0m[1;34m	threadid 23024380146688 -> hwthread 90 - OK[0m[1;34m
[0m[1;34m	threadid 23024178820224 -> hwthread 91 - OK[0m[1;34m
[0m[1;34m	threadid 23023977493760 -> hwthread 92 - OK[0m[1;34m
[0m[1;34m	threadid 23023776167296 -> hwthread 93 - OK[0m[1;34m
[0m[1;34m	threadid 23023574840832 -> hwthread 94 - OK[0m[1;34m
[0m[1;34m	threadid 23023373514368 -> hwthread 95 - OK[0m[1;34m
[0m[1;34m	threadid 23023172187904 -> hwthread 96 - OK[0m[1;34m
[0m[1;34m	threadid 23022970857344 -> hwthread 97 - OK[0m[1;34m
[0m[1;34m	threadid 23022769530880 -> hwthread 98 - OK[0m[1;34m
[0m[1;34m	threadid 23022568204416 -> hwthread 99 - OK[0m[1;34m
[0m[1;34m	threadid 23022366877952 -> hwthread 100 - OK[0m[1;34m
[0m[1;34m	threadid 23022165551488 -> hwthread 101 - OK[0m[1;34m
[0m[1;34m	threadid 23021964225024 -> hwthread 102 - OK[0m[1;34m
[0m[1;34m	threadid 23021762898560 -> hwthread 103 - OK[0m[1;34m
[0m[1;34m	threadid 23021561572096 -> hwthread 104 - OK[0m[1;34m
[0m[1;34m	threadid 23021360245632 -> hwthread 105 - OK[0m[1;34m
[0m[1;34m	threadid 23021158919168 -> hwthread 106 - OK[0m[1;34m
[0m[1;34m	threadid 23020957592704 -> hwthread 107 - OK[0m[1;34m
[0m[1;34m	threadid 23020756266240 -> hwthread 108 - OK[0m[1;34m
[0m[1;34m	threadid 23020554939776 -> hwthread 109 - OK[0m[1;34m
[0m[1;34m	threadid 23020353613312 -> hwthread 110 - OK[0m[1;34m
[0m[1;34m	threadid 23020152286848 -> hwthread 111 - OK[0m[1;34m
[0m[1;34m	threadid 23019950960384 -> hwthread 112 - OK[0m[1;34m
[0m[1;34m	threadid 23019749633920 -> hwthread 113 - OK[0m[1;34m
[0m[1;34m	threadid 23019548307456 -> hwthread 114 - OK[0m[1;34m
[0m[1;34m	threadid 23019346980992 -> hwthread 115 - OK[0m[1;34m
[0m[1;34m	threadid 23019145654528 -> hwthread 116 - OK[0m[1;34m
[0m[1;34m	threadid 23018944328064 -> hwthread 117 - OK[0m[1;34m
[0m[1;34m	threadid 23018743001600 -> hwthread 118 - OK[0m[1;34m
[0m[1;34m	threadid 23018541675136 -> hwthread 119 - OK[0m[1;34m
[0m[1;34m	threadid 23018340348672 -> hwthread 120 - OK[0m[1;34m
[0m[1;34m	threadid 23018139022208 -> hwthread 121 - OK[0m[1;34m
[0m[1;34m	threadid 23017937695744 -> hwthread 122 - OK[0m[1;34m
[0m[1;34m	threadid 23017736369280 -> hwthread 123 - OK[0m[1;34m
[0m[1;34m	threadid 23017535042816 -> hwthread 124 - OK[0m[1;34m
[0m[1;34m	threadid 23017333716352 -> hwthread 125 - OK[0m[1;34m
[0m[1;34m	threadid 23017132389888 -> hwthread 126 - OK[0m[1;34m
[0m[1;34m	threadid 23016931063424 -> hwthread 127 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23029290542848 -> hwthread 64 - OK[0m[1;34m
[0m[1;34m	threadid 23029283952384 -> hwthread 65 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 104, m: 104)                                                               	 0.891669  	 700       	 8.24197   	 0         	 0.204438  	 40.3152   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5200, cols: 104, reductionFactor: 37, colBlockingSize: 12)                 	 0.594955  	 600       	 116.506   	 0         	 4.45035   	 26.1791   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 104, n: 50, r: 104, r2: 104)          	 0.243245  	 600       	 277.464   	 0         	 21.5568   	 12.8713   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5200, cols: 54, reductionFactor: 37, colBlockingSize: 12)                  	 0.218361  	 700       	 99.8447   	 0         	 7.27606   	 13.7224   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 104, r: 104, r2: 5200, leftOrthog: 0)      	 0.20129   	 600       	 335.296   	 0         	 39.2038   	 8.55263   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 5200, Xcols: 54, r: 54, streamingCols: 0)                   	 0.0927239 	 700       	 114.471   	 0         	 34.0055   	 3.36626   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 104, reductionFactor: 37, colBlockingSize: 12)                 	 0.0831012 	 100       	 66.8361   	 0         	 2.6071    	 25.6362   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 104, Qr2: 54)      	 0.0730267 	 700       	 0         	 0         	 72.5893   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 104)                                                                	 0.0522546 	 100       	 4.29947   	 0         	 0.19826   	 21.686    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 54, m: 54)                                                                  	 0.0390864 	 800       	 4.29719   	 0         	 1.44124   	 2.9816    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                 	 0.0389554 	 100       	 2.99488   	 0         	 0.155049  	 19.3157   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 54, k: 2500)   	 0.033605  	 800       	 321.381   	 0         	 50.0306   	 6.42368   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 5200, m: 54)                                                                       	 0.0315263 	 700       	 0         	 0         	 99.7568   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5200, cols: 50, reductionFactor: 37, colBlockingSize: 12)                  	 0.0289309 	 100       	 92.2981   	 0         	 7.25867   	 12.7156   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 54, reductionFactor: 37, colBlockingSize: 12)                  	 0.0258181 	 100       	 57.9982   	 0         	 4.27346   	 13.5717   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 2500, m: 54, k: 50)	 0.025213  	 800       	 428.351   	 0         	 66.6831   	 6.42368   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 54, n: 50, r2: 54)                                                                                         	 0.0206686 	 700       	 0         	 0         	 79.0069   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 5200, m: 54)                                                              	 0.0200708 	 700       	 0         	 0         	 156.693   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r: 104, r2: 104)           	 0.0174128 	 100       	 310.575   	 0         	 24.3873   	 12.7351   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 2700, k: 54) 	 0.0173663 	 700       	 587.691   	 0         	 91.4186   	 6.42857   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 54, m: 2700, k: 54) 	 0.0170415 	 700       	 646.801   	 0         	 96.7806   	 6.68317   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 5200, leftOrthog: 0)        	 0.0168161 	 100       	 154.614   	 0         	 37.3452   	 4.14013   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 104, r: 104, r2: 2500, leftOrthog: 0)      	 0.0153605 	 100       	 352.073   	 0         	 41.7504   	 8.4328    
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 54, n: 50, r2: 54)                   	 0.014465  	 700       	 0         	 0         	 217.418   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 104, n: 50, r: 104, r2: 50)           	 0.0130195 	 100       	 415.378   	 0         	 49.5258   	 8.3871    
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 104, reductionFactor: 37, colBlockingSize: 12)                   	 0.0087909 	 100       	 12.6362   	 0         	 1.45751   	 8.66971   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 54, r: 54, streamingCols: 0)                   	 0.00843298	 100       	 86.4463   	 0         	 25.752    	 3.35687   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 50, Qr2: 54)       	 0.00506449	 100       	 0         	 0         	 82.1406   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 2500, m: 54)                                                                       	 0.00482428	 100       	 0         	 0         	 44.7735   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                  	 0.00455326	 100       	 3.66037   	 0         	 1.32652   	 2.75937   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 2700, k: 50) 	 0.00417093	 100       	 323.669   	 0         	 52.2665   	 6.19266   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 0, n: 50, r2: 54)                    	 0.00410359	 100       	 0         	 0         	 52.6369   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 54)                                                              	 0.00385448	 100       	 0         	 0         	 56.0387   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 50, reductionFactor: 37, colBlockingSize: 12)                    	 0.00339528	 100       	 7.56217   	 0         	 1.17811   	 6.41892   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 104, r: 50, r2: 50, leftOrthog: 0)         	 0.00240563	 100       	 21.616    	 0         	 6.8506    	 3.15534   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 54)                                                                                         	 0.00219922	 100       	 0         	 0         	 98.2168   	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                   	 0.00100983	 100       	 0.495131  	 0         	 1.98053   	 0.25      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 54, m: 54, fromLeft: 0)                	 0.000973977	 800       	 0         	 0         	 38.3221   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 54, n: 50, r2: 1)                                                                                          	 0.000795427	 200       	 0         	 0         	 10.8621   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50, k: 50)     	 0.000783158	 100       	 31.922    	 0         	 7.66129   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                          	 0.00077934	 200       	 0         	 0         	 10.2651   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 50, k: 54)   	 0.000765838	 100       	 35.2555   	 0         	 8.2524    	 4.27215   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 50, r2: 50)              	 0.000763925	 100       	 32.7257   	 0         	 7.85417   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 54, m: 50, k: 54)   	 0.000660205	 100       	 44.1681   	 0         	 10.0769   	 4.38312   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 50, m: 50, k: 50)  	 0.000603895	 100       	 41.3979   	 0         	 9.9355    	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 1, r1low: 0, n: 50, r2: 50)                     	 0.00053468	 100       	 0         	 0         	 7.48111   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                          	 0.000510304	 100       	 0         	 0         	 7.83846   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 54, n: 50, r2: 1)                    	 0.000485316	 100       	 0         	 0         	 17.1435   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 1, Xr2: 50, Qr1: 1, Qr2: 0)          	 0.000442616	 100       	 0         	 0         	 9.03718   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 50)                                                                	 0.000438248	 100       	 0         	 0         	 9.12725   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                            	 0.00042424	 100       	 1.17858   	 0         	 14.1429   	 0.0833333 
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                 	 0.000385512	 100       	 0.648488  	 0         	 10.3758   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 54, n: 50, r2: 1)                                                                                 	 0.000371987	 100       	 0.725832  	 0         	 11.6133   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                 	 0.000326601	 100       	 0.76546   	 0         	 12.2474   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 0, m: 2700, k: 50)  	 6.21e-06  	 100       	 0         	 0         	 17391.3   	 0         
Timing statistics:
function                                                                                                                                                                                      	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                        	 3.61287   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_normalized(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                     	 3.61281   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::rightNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                            	 2.94079   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::rightNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                        	 2.93937   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double]	 2.62745   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                               	 0.982879  	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                  	 0.963353  	 1800      
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                            	 0.716501  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_leftOrthogonalize(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&) [with T = double]                                   	 0.67195   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]           	 0.465365  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                           	 0.274442  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.248114  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                	 0.235872  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                    	 0.101157  	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                                       	 0.0785338 	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.0436397 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double]        	 0.040011  	 1800      
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                       	 0.0363506 	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double]          	 0.0343882 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double]       	 0.0258169 	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                	 0.0249529 	 1300      
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                              	 0.0243636 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                        	 0.0195886 	 1000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                	 0.00607358	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                              	 0.00338133	 6400      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                         	 0.00151556	 5200      
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                       	 0.0010841 	 300       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                         	 0.00100983	 100       
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                           	 0.000973977	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                                                  	 0.00042424	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
orthoX: L, orthoY: L
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 64
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->65  [0m[1;34m1->66  [0m[1;34m2->67  [0m[1;34m3->68  [0m[1;34m4->69  [0m[1;34m5->70  [0m[1;34m6->71  [0m[1;34m7->72  [0m[1;34m8->73  [0m[1;34m9->74  [0m[1;34m10->75  [0m[1;34m11->76  [0m[1;34m12->77  [0m[1;34m13->78  [0m[1;34m14->79  [0m[1;34m15->80  [0m[1;34m16->81  [0m[1;34m17->82  [0m[1;34m18->83  [0m[1;34m19->84  [0m[1;34m20->85  [0m[1;34m21->86  [0m[1;34m22->87  [0m[1;34m23->88  [0m[1;34m24->89  [0m[1;34m25->90  [0m[1;34m26->91  [0m[1;34m27->92  [0m[1;34m28->93  [0m[1;34m29->94  [0m[1;34m30->95  [0m[1;34m31->96  [0m[1;34m32->97  [0m[1;34m33->98  [0m[1;34m34->99  [0m[1;34m35->100  [0m[1;34m36->101  [0m[1;34m37->102  [0m[1;34m38->103  [0m[1;34m39->104  [0m[1;34m40->105  [0m[1;34m41->106  [0m[1;34m42->107  [0m[1;34m43->108  [0m[1;34m44->109  [0m[1;34m45->110  [0m[1;34m46->111  [0m[1;34m47->112  [0m[1;34m48->113  [0m[1;34m49->114  [0m[1;34m50->115  [0m[1;34m51->116  [0m[1;34m52->117  [0m[1;34m53->118  [0m[1;34m54->119  [0m[1;34m55->120  [0m[1;34m56->121  [0m[1;34m57->122  [0m[1;34m58->123  [0m[1;34m59->124  [0m[1;34m60->125  [0m[1;34m61->126  [0m[1;34m62->127  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22635665819520 -> hwthread 65 - OK[0m[1;34m
[0m[1;34m	threadid 22635484276736 -> hwthread 66 - OK[0m[1;34m
[0m[1;34m	threadid 22635282950272 -> hwthread 67 - OK[0m[1;34m
[0m[1;34m	threadid 22635081623808 -> hwthread 68 - OK[0m[1;34m
[0m[1;34m	threadid 22634880297344 -> hwthread 69 - OK[0m[1;34m
[0m[1;34m	threadid 22634678970880 -> hwthread 70 - OK[0m[1;34m
[0m[1;34m	threadid 22634477644416 -> hwthread 71 - OK[0m[1;34m
[0m[1;34m	threadid 22634276317952 -> hwthread 72 - OK[0m[1;34m
[0m[1;34m	threadid 22634074991488 -> hwthread 73 - OK[0m[1;34m
[0m[1;34m	threadid 22633873665024 -> hwthread 74 - OK[0m[1;34m
[0m[1;34m	threadid 22633672338560 -> hwthread 75 - OK[0m[1;34m
[0m[1;34m	threadid 22633471012096 -> hwthread 76 - OK[0m[1;34m
[0m[1;34m	threadid 22633269685632 -> hwthread 77 - OK[0m[1;34m
[0m[1;34m	threadid 22633068359168 -> hwthread 78 - OK[0m[1;34m
[0m[1;34m	threadid 22632867032704 -> hwthread 79 - OK[0m[1;34m
[0m[1;34m	threadid 22632665706240 -> hwthread 80 - OK[0m[1;34m
[0m[1;34m	threadid 22632464379776 -> hwthread 81 - OK[0m[1;34m
[0m[1;34m	threadid 22632263053312 -> hwthread 82 - OK[0m[1;34m
[0m[1;34m	threadid 22632061726848 -> hwthread 83 - OK[0m[1;34m
[0m[1;34m	threadid 22631860400384 -> hwthread 84 - OK[0m[1;34m
[0m[1;34m	threadid 22631659073920 -> hwthread 85 - OK[0m[1;34m
[0m[1;34m	threadid 22631457747456 -> hwthread 86 - OK[0m[1;34m
[0m[1;34m	threadid 22631256420992 -> hwthread 87 - OK[0m[1;34m
[0m[1;34m	threadid 22631055094528 -> hwthread 88 - OK[0m[1;34m
[0m[1;34m	threadid 22630853768064 -> hwthread 89 - OK[0m[1;34m
[0m[1;34m	threadid 22630652441600 -> hwthread 90 - OK[0m[1;34m
[0m[1;34m	threadid 22630451115136 -> hwthread 91 - OK[0m[1;34m
[0m[1;34m	threadid 22630249788672 -> hwthread 92 - OK[0m[1;34m
[0m[1;34m	threadid 22630048462208 -> hwthread 93 - OK[0m[1;34m
[0m[1;34m	threadid 22629847135744 -> hwthread 94 - OK[0m[1;34m
[0m[1;34m	threadid 22629645809280 -> hwthread 95 - OK[0m[1;34m
[0m[1;34m	threadid 22629444482816 -> hwthread 96 - OK[0m[1;34m
[0m[1;34m	threadid 22629243152256 -> hwthread 97 - OK[0m[1;34m
[0m[1;34m	threadid 22629041825792 -> hwthread 98 - OK[0m[1;34m
[0m[1;34m	threadid 22628840499328 -> hwthread 99 - OK[0m[1;34m
[0m[1;34m	threadid 22628639172864 -> hwthread 100 - OK[0m[1;34m
[0m[1;34m	threadid 22628437846400 -> hwthread 101 - OK[0m[1;34m
[0m[1;34m	threadid 22628236519936 -> hwthread 102 - OK[0m[1;34m
[0m[1;34m	threadid 22628035193472 -> hwthread 103 - OK[0m[1;34m
[0m[1;34m	threadid 22627833867008 -> hwthread 104 - OK[0m[1;34m
[0m[1;34m	threadid 22627632540544 -> hwthread 105 - OK[0m[1;34m
[0m[1;34m	threadid 22627431214080 -> hwthread 106 - OK[0m[1;34m
[0m[1;34m	threadid 22627229887616 -> hwthread 107 - OK[0m[1;34m
[0m[1;34m	threadid 22627028561152 -> hwthread 108 - OK[0m[1;34m
[0m[1;34m	threadid 22626827234688 -> hwthread 109 - OK[0m[1;34m
[0m[1;34m	threadid 22626625908224 -> hwthread 110 - OK[0m[1;34m
[0m[1;34m	threadid 22626424581760 -> hwthread 111 - OK[0m[1;34m
[0m[1;34m	threadid 22626223255296 -> hwthread 112 - OK[0m[1;34m
[0m[1;34m	threadid 22626021928832 -> hwthread 113 - OK[0m[1;34m
[0m[1;34m	threadid 22625820602368 -> hwthread 114 - OK[0m[1;34m
[0m[1;34m	threadid 22625619275904 -> hwthread 115 - OK[0m[1;34m
[0m[1;34m	threadid 22625417949440 -> hwthread 116 - OK[0m[1;34m
[0m[1;34m	threadid 22625216622976 -> hwthread 117 - OK[0m[1;34m
[0m[1;34m	threadid 22625015296512 -> hwthread 118 - OK[0m[1;34m
[0m[1;34m	threadid 22624813970048 -> hwthread 119 - OK[0m[1;34m
[0m[1;34m	threadid 22624612643584 -> hwthread 120 - OK[0m[1;34m
[0m[1;34m	threadid 22624411317120 -> hwthread 121 - OK[0m[1;34m
[0m[1;34m	threadid 22624209990656 -> hwthread 122 - OK[0m[1;34m
[0m[1;34m	threadid 22624008664192 -> hwthread 123 - OK[0m[1;34m
[0m[1;34m	threadid 22623807337728 -> hwthread 124 - OK[0m[1;34m
[0m[1;34m	threadid 22623606011264 -> hwthread 125 - OK[0m[1;34m
[0m[1;34m	threadid 22623404684800 -> hwthread 126 - OK[0m[1;34m
[0m[1;34m	threadid 22623203358336 -> hwthread 127 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22635560158976 -> hwthread 64 - OK[0m[1;34m
[0m[1;34m	threadid 22635553568512 -> hwthread 65 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 105, m: 105)                                                               	 0.947027  	 700       	 7.9862    	 0         	 0.196201  	 40.7041   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5250, cols: 105, reductionFactor: 37, colBlockingSize: 12)                 	 0.627164  	 600       	 113.742   	 0         	 4.30337   	 26.4308   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 105, n: 50, r: 105, r2: 105)          	 0.240171  	 600       	 289.2     	 0         	 22.2546   	 12.995    
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5250, cols: 55, reductionFactor: 37, colBlockingSize: 12)                  	 0.228544  	 700       	 99.9138   	 0         	 7.14936   	 13.9752   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 105, r: 105, r2: 5250, leftOrthog: 0)      	 0.208783  	 600       	 332.677   	 0         	 38.5272   	 8.63487   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 5250, Xcols: 55, r: 55, streamingCols: 0)                   	 0.0926739 	 700       	 119.957   	 0         	 34.988    	 3.42852   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 105, reductionFactor: 37, colBlockingSize: 12)                 	 0.0858091 	 100       	 65.9777   	 0         	 2.55008   	 25.8728   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 105, Qr2: 55)      	 0.0814418 	 700       	 0         	 0         	 66.3542   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 105)                                                                	 0.0526627 	 100       	 4.30412   	 0         	 0.198243  	 21.7114   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                 	 0.0394144 	 100       	 2.96      	 0         	 0.153244  	 19.3157   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 55, m: 55)                                                                  	 0.0387029 	 800       	 4.58533   	 0         	 1.50976   	 3.03713   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 55, k: 2500)   	 0.0364109 	 800       	 302.107   	 0         	 46.6234   	 6.47974   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 5250, m: 55)                                                                       	 0.0334743 	 700       	 0         	 0         	 96.6116   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5250, cols: 50, reductionFactor: 37, colBlockingSize: 12)                  	 0.0289216 	 100       	 93.2156   	 0         	 7.33016   	 12.7167   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 55, reductionFactor: 37, colBlockingSize: 12)                  	 0.0271366 	 100       	 57.2429   	 0         	 4.14275   	 13.8176   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 2500, m: 55, k: 50)	 0.0249904 	 800       	 440.169   	 0         	 67.93     	 6.47974   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 55, n: 50, r2: 55)                                                                                         	 0.0212084 	 700       	 0         	 0         	 79.8739   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 5250, m: 55)                                                              	 0.0193931 	 700       	 0         	 0         	 166.76    	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 55, m: 2750, k: 55) 	 0.01852   	 700       	 628.847   	 0         	 92.3833   	 6.80693   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r: 105, r2: 105)           	 0.0184224 	 100       	 299.227   	 0         	 23.277    	 12.855    
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 2750, k: 55) 	 0.0179168 	 700       	 590.924   	 0         	 91.1098   	 6.48585   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 5250, leftOrthog: 0)        	 0.0169674 	 100       	 154.708   	 0         	 37.3657   	 4.14038   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 105, r: 105, r2: 2500, leftOrthog: 0)      	 0.0164134 	 100       	 335.854   	 0         	 39.458    	 8.51167   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 55, n: 50, r2: 55)                   	 0.0148312 	 700       	 0         	 0         	 218.053   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 105, n: 50, r: 105, r2: 50)           	 0.0128315 	 100       	 429.606   	 0         	 51.0618   	 8.41346   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 105, reductionFactor: 37, colBlockingSize: 12)                   	 0.00989913	 100       	 11.4384   	 0         	 1.31527   	 8.6966    
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 55, r: 55, streamingCols: 0)                   	 0.00853617	 100       	 88.5936   	 0         	 25.9144   	 3.4187    
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 50, Qr2: 55)       	 0.00520695	 100       	 0         	 0         	 80.6614   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 2500, m: 55)                                                                       	 0.00520226	 100       	 0         	 0         	 42.2893   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 2750, k: 50) 	 0.00454677	 100       	 302.413   	 0         	 48.8259   	 6.19369   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                  	 0.0044218 	 100       	 3.76919   	 0         	 1.36596   	 2.75937   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 0, n: 50, r2: 55)                    	 0.00426005	 100       	 0         	 0         	 51.6425   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 55)                                                              	 0.00400097	 100       	 0         	 0         	 54.9867   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 50, reductionFactor: 37, colBlockingSize: 12)                    	 0.00323305	 100       	 7.94164   	 0         	 1.23722   	 6.41892   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 105, r: 50, r2: 50, leftOrthog: 0)         	 0.0024302 	 100       	 21.6032   	 0         	 6.83072   	 3.16265   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 55)                                                                                         	 0.00231791	 100       	 0         	 0         	 94.9132   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 55, m: 55, fromLeft: 0)                	 0.00123163	 800       	 0         	 0         	 31.438    	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                   	 0.000878976	 100       	 0.568844  	 0         	 2.27537   	 0.25      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                          	 0.000815979	 200       	 0         	 0         	 9.80417   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50, k: 50)     	 0.00080277	 100       	 31.1422   	 0         	 7.47412   	 4.16667   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 50, r2: 50)              	 0.0007871 	 100       	 31.7622   	 0         	 7.62292   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 55, n: 50, r2: 1)                                                                                          	 0.000779605	 200       	 0         	 0         	 11.2878   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 50, k: 55)   	 0.000757387	 100       	 36.309    	 0         	 8.45011   	 4.29688   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 55, m: 50, k: 55)   	 0.000716307	 100       	 42.2305   	 0         	 9.52106   	 4.43548   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 50, m: 50, k: 50)  	 0.000669982	 100       	 37.3144   	 0         	 8.95546   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 55, n: 50, r2: 1)                    	 0.000524728	 100       	 0         	 0         	 16.0083   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 1, r1low: 0, n: 50, r2: 50)                     	 0.000522607	 100       	 0         	 0         	 7.65393   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                          	 0.000521043	 100       	 0         	 0         	 7.67691   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                            	 0.000453582	 100       	 1.10234   	 0         	 13.228    	 0.0833333 
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 50)                                                                	 0.000423319	 100       	 0         	 0         	 9.44914   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                 	 0.000421039	 100       	 0.593769  	 0         	 9.50031   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 1, Xr2: 50, Qr1: 1, Qr2: 0)          	 0.000404286	 100       	 0         	 0         	 9.89399   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 55, n: 50, r2: 1)                                                                                 	 0.000367475	 100       	 0.74835   	 0         	 11.9736   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                 	 0.000335932	 100       	 0.744198  	 0         	 11.9072   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 0, m: 2750, k: 50)  	 6.14e-06  	 100       	 0         	 0         	 17915.3   	 0         
Timing statistics:
function                                                                                                                                                                                      	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                        	 3.76462   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_normalized(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                     	 3.76457   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::rightNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                            	 3.06615   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::rightNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                        	 3.06485   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double]	 2.74241   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                               	 1.0391    	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                  	 1.01071   	 1800      
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                            	 0.752369  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_leftOrthogonalize(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&) [with T = double]                                   	 0.698356  	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]           	 0.479263  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                           	 0.272212  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.259387  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                	 0.244594  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                    	 0.10121   	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                                       	 0.087053  	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.0431247 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double]        	 0.0424635 	 1800      
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                       	 0.0386765 	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double]          	 0.0372137 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double]       	 0.0256604 	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                	 0.025643  	 1300      
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                              	 0.0238174 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                        	 0.0201386 	 1000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                	 0.00755741	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                              	 0.00345096	 6400      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                         	 0.0016356 	 5200      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                           	 0.00123163	 800       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                       	 0.00112445	 300       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                         	 0.000878976	 100       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                                                  	 0.000453582	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
orthoX: L, orthoY: L
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 64
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->65  [0m[1;34m1->66  [0m[1;34m2->67  [0m[1;34m3->68  [0m[1;34m4->69  [0m[1;34m5->70  [0m[1;34m6->71  [0m[1;34m7->72  [0m[1;34m8->73  [0m[1;34m9->74  [0m[1;34m10->75  [0m[1;34m11->76  [0m[1;34m12->77  [0m[1;34m13->78  [0m[1;34m14->79  [0m[1;34m15->80  [0m[1;34m16->81  [0m[1;34m17->82  [0m[1;34m18->83  [0m[1;34m19->84  [0m[1;34m20->85  [0m[1;34m21->86  [0m[1;34m22->87  [0m[1;34m23->88  [0m[1;34m24->89  [0m[1;34m25->90  [0m[1;34m26->91  [0m[1;34m27->92  [0m[1;34m28->93  [0m[1;34m29->94  [0m[1;34m30->95  [0m[1;34m31->96  [0m[1;34m32->97  [0m[1;34m33->98  [0m[1;34m34->99  [0m[1;34m35->100  [0m[1;34m36->101  [0m[1;34m37->102  [0m[1;34m38->103  [0m[1;34m39->104  [0m[1;34m40->105  [0m[1;34m41->106  [0m[1;34m42->107  [0m[1;34m43->108  [0m[1;34m44->109  [0m[1;34m45->110  [0m[1;34m46->111  [0m[1;34m47->112  [0m[1;34m48->113  [0m[1;34m49->114  [0m[1;34m50->115  [0m[1;34m51->116  [0m[1;34m52->117  [0m[1;34m53->118  [0m[1;34m54->119  [0m[1;34m55->120  [0m[1;34m56->121  [0m[1;34m57->122  [0m[1;34m58->123  [0m[1;34m59->124  [0m[1;34m60->125  [0m[1;34m61->126  [0m[1;34m62->127  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23270311102336 -> hwthread 65 - OK[0m[1;34m
[0m[1;34m	threadid 23270132803584 -> hwthread 66 - OK[0m[1;34m
[0m[1;34m	threadid 23269931477120 -> hwthread 67 - OK[0m[1;34m
[0m[1;34m	threadid 23269730150656 -> hwthread 68 - OK[0m[1;34m
[0m[1;34m	threadid 23269528824192 -> hwthread 69 - OK[0m[1;34m
[0m[1;34m	threadid 23269327497728 -> hwthread 70 - OK[0m[1;34m
[0m[1;34m	threadid 23269126171264 -> hwthread 71 - OK[0m[1;34m
[0m[1;34m	threadid 23268924844800 -> hwthread 72 - OK[0m[1;34m
[0m[1;34m	threadid 23268723518336 -> hwthread 73 - OK[0m[1;34m
[0m[1;34m	threadid 23268522191872 -> hwthread 74 - OK[0m[1;34m
[0m[1;34m	threadid 23268320865408 -> hwthread 75 - OK[0m[1;34m
[0m[1;34m	threadid 23268119538944 -> hwthread 76 - OK[0m[1;34m
[0m[1;34m	threadid 23267918212480 -> hwthread 77 - OK[0m[1;34m
[0m[1;34m	threadid 23267716886016 -> hwthread 78 - OK[0m[1;34m
[0m[1;34m	threadid 23267515559552 -> hwthread 79 - OK[0m[1;34m
[0m[1;34m	threadid 23267314233088 -> hwthread 80 - OK[0m[1;34m
[0m[1;34m	threadid 23267112906624 -> hwthread 81 - OK[0m[1;34m
[0m[1;34m	threadid 23266911580160 -> hwthread 82 - OK[0m[1;34m
[0m[1;34m	threadid 23266710253696 -> hwthread 83 - OK[0m[1;34m
[0m[1;34m	threadid 23266508927232 -> hwthread 84 - OK[0m[1;34m
[0m[1;34m	threadid 23266307600768 -> hwthread 85 - OK[0m[1;34m
[0m[1;34m	threadid 23266106274304 -> hwthread 86 - OK[0m[1;34m
[0m[1;34m	threadid 23265904947840 -> hwthread 87 - OK[0m[1;34m
[0m[1;34m	threadid 23265703621376 -> hwthread 88 - OK[0m[1;34m
[0m[1;34m	threadid 23265502294912 -> hwthread 89 - OK[0m[1;34m
[0m[1;34m	threadid 23265300968448 -> hwthread 90 - OK[0m[1;34m
[0m[1;34m	threadid 23265099641984 -> hwthread 91 - OK[0m[1;34m
[0m[1;34m	threadid 23264898315520 -> hwthread 92 - OK[0m[1;34m
[0m[1;34m	threadid 23264696989056 -> hwthread 93 - OK[0m[1;34m
[0m[1;34m	threadid 23264495662592 -> hwthread 94 - OK[0m[1;34m
[0m[1;34m	threadid 23264294336128 -> hwthread 95 - OK[0m[1;34m
[0m[1;34m	threadid 23264093009664 -> hwthread 96 - OK[0m[1;34m
[0m[1;34m	threadid 23263891679104 -> hwthread 97 - OK[0m[1;34m
[0m[1;34m	threadid 23263690352640 -> hwthread 98 - OK[0m[1;34m
[0m[1;34m	threadid 23263489026176 -> hwthread 99 - OK[0m[1;34m
[0m[1;34m	threadid 23263287699712 -> hwthread 100 - OK[0m[1;34m
[0m[1;34m	threadid 23263086373248 -> hwthread 101 - OK[0m[1;34m
[0m[1;34m	threadid 23262885046784 -> hwthread 102 - OK[0m[1;34m
[0m[1;34m	threadid 23262683720320 -> hwthread 103 - OK[0m[1;34m
[0m[1;34m	threadid 23262482393856 -> hwthread 104 - OK[0m[1;34m
[0m[1;34m	threadid 23262281067392 -> hwthread 105 - OK[0m[1;34m
[0m[1;34m	threadid 23262079740928 -> hwthread 106 - OK[0m[1;34m
[0m[1;34m	threadid 23261878414464 -> hwthread 107 - OK[0m[1;34m
[0m[1;34m	threadid 23261677088000 -> hwthread 108 - OK[0m[1;34m
[0m[1;34m	threadid 23261475761536 -> hwthread 109 - OK[0m[1;34m
[0m[1;34m	threadid 23261274435072 -> hwthread 110 - OK[0m[1;34m
[0m[1;34m	threadid 23261073108608 -> hwthread 111 - OK[0m[1;34m
[0m[1;34m	threadid 23260871782144 -> hwthread 112 - OK[0m[1;34m
[0m[1;34m	threadid 23260670455680 -> hwthread 113 - OK[0m[1;34m
[0m[1;34m	threadid 23260469129216 -> hwthread 114 - OK[0m[1;34m
[0m[1;34m	threadid 23260267802752 -> hwthread 115 - OK[0m[1;34m
[0m[1;34m	threadid 23260066476288 -> hwthread 116 - OK[0m[1;34m
[0m[1;34m	threadid 23259865149824 -> hwthread 117 - OK[0m[1;34m
[0m[1;34m	threadid 23259663823360 -> hwthread 118 - OK[0m[1;34m
[0m[1;34m	threadid 23259462496896 -> hwthread 119 - OK[0m[1;34m
[0m[1;34m	threadid 23259261170432 -> hwthread 120 - OK[0m[1;34m
[0m[1;34m	threadid 23259059843968 -> hwthread 121 - OK[0m[1;34m
[0m[1;34m	threadid 23258858517504 -> hwthread 122 - OK[0m[1;34m
[0m[1;34m	threadid 23258657191040 -> hwthread 123 - OK[0m[1;34m
[0m[1;34m	threadid 23258455864576 -> hwthread 124 - OK[0m[1;34m
[0m[1;34m	threadid 23258254538112 -> hwthread 125 - OK[0m[1;34m
[0m[1;34m	threadid 23258053211648 -> hwthread 126 - OK[0m[1;34m
[0m[1;34m	threadid 23257851885184 -> hwthread 127 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23270205441792 -> hwthread 64 - OK[0m[1;34m
[0m[1;34m	threadid 23270026823424 -> hwthread 65 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 106, m: 106)                                                               	 0.939168  	 700       	 8.28532   	 0         	 0.201624  	 41.093    
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5300, cols: 106, reductionFactor: 37, colBlockingSize: 12)                 	 0.651414  	 600       	 112.666   	 0         	 4.22246   	 26.6826   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 106, n: 50, r: 106, r2: 106)          	 0.261186  	 600       	 273.602   	 0         	 20.8557   	 13.1188   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5300, cols: 56, reductionFactor: 37, colBlockingSize: 12)                  	 0.235424  	 700       	 101.51    	 0         	 7.13453   	 14.228    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 106, r: 106, r2: 5300, leftOrthog: 0)      	 0.210788  	 600       	 339.018   	 0         	 38.8911   	 8.71711   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 5300, Xcols: 56, r: 56, streamingCols: 0)                   	 0.0925493 	 700       	 125.712   	 0         	 36.0126   	 3.49078   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 106, reductionFactor: 37, colBlockingSize: 12)                 	 0.0872867 	 100       	 66.1022   	 0         	 2.53176   	 26.1092   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 106, Qr2: 56)      	 0.0799474 	 700       	 0         	 0         	 68.8973   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 106)                                                                	 0.0518286 	 100       	 4.41198   	 0         	 0.202977  	 21.7364   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                 	 0.0402543 	 100       	 2.89824   	 0         	 0.150046  	 19.3157   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 56, m: 56)                                                                  	 0.0373352 	 800       	 5.01733   	 0         	 1.62232   	 3.09269   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 56, k: 2500)   	 0.035542  	 800       	 315.12    	 0         	 48.2223   	 6.53473   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 5300, m: 56)                                                                       	 0.0338359 	 700       	 0         	 0         	 98.2435   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5300, cols: 50, reductionFactor: 37, colBlockingSize: 12)                  	 0.0290815 	 100       	 93.5862   	 0         	 7.35864   	 12.7179   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 56, reductionFactor: 37, colBlockingSize: 12)                  	 0.0275543 	 100       	 58.4437   	 0         	 4.15575   	 14.0634   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 2500, m: 56, k: 50)	 0.0251842 	 800       	 444.723   	 0         	 68.0553   	 6.53473   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 56, n: 50, r2: 56)                                                                                         	 0.0219595 	 700       	 0         	 0         	 79.9728   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 5300, m: 56)                                                              	 0.0192345 	 700       	 0         	 0         	 172.823   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r: 106, r2: 106)           	 0.0183152 	 100       	 306.74    	 0         	 23.6409   	 12.9749   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 56, m: 2800, k: 56) 	 0.0177493 	 700       	 692.599   	 0         	 99.9321   	 6.93069   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 2800, k: 56) 	 0.0173982 	 700       	 630.868   	 0         	 96.4327   	 6.54206   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 5300, leftOrthog: 0)        	 0.0169116 	 100       	 156.697   	 0         	 37.8438   	 4.14062   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 106, r: 106, r2: 2500, leftOrthog: 0)      	 0.0162818 	 100       	 345.047   	 0         	 40.1661   	 8.59051   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 56, n: 50, r2: 56)                   	 0.0146489 	 700       	 0         	 0         	 226.922   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 106, n: 50, r: 106, r2: 50)           	 0.0135126 	 100       	 415.76    	 0         	 49.2637   	 8.43949   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 106, reductionFactor: 37, colBlockingSize: 12)                   	 0.00983663	 100       	 11.7313   	 0         	 1.34485   	 8.72315   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 56, r: 56, streamingCols: 0)                   	 0.00870248	 100       	 90.0893   	 0         	 25.8839   	 3.48051   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 50, Qr2: 56)       	 0.00527185	 100       	 0         	 0         	 80.4271   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 2500, m: 56)                                                                       	 0.00505966	 100       	 0         	 0         	 44.2718   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 2800, k: 50) 	 0.00463304	 100       	 302.178   	 0         	 48.7801   	 6.19469   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 56)                                                              	 0.00455082	 100       	 0         	 0         	 49.2219   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                  	 0.00441099	 100       	 3.77843   	 0         	 1.36931   	 2.75937   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 0, n: 50, r2: 56)                    	 0.00439964	 100       	 0         	 0         	 50.9133   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 50, reductionFactor: 37, colBlockingSize: 12)                    	 0.00371458	 100       	 6.91214   	 0         	 1.07684   	 6.41892   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 106, r: 50, r2: 50, leftOrthog: 0)         	 0.00243214	 100       	 21.7915   	 0         	 6.87459   	 3.16986   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 56)                                                                                         	 0.00219399	 100       	 0         	 0         	 102.097   	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                   	 0.000815354	 100       	 0.613231  	 0         	 2.45292   	 0.25      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                          	 0.000800207	 200       	 0         	 0         	 9.99741   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 50, r2: 50)              	 0.000796526	 100       	 31.3863   	 0         	 7.53271   	 4.16667   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 56, m: 56, fromLeft: 0)                	 0.000796305	 800       	 0         	 0         	 50.4088   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 56, n: 50, r2: 1)                                                                                          	 0.000793744	 200       	 0         	 0         	 11.2883   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50, k: 50)     	 0.000793258	 100       	 31.5156   	 0         	 7.56374   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 50, k: 56)   	 0.00071859	 100       	 38.9652   	 0         	 9.01766   	 4.32099   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 50, m: 50, k: 50)  	 0.000640752	 100       	 39.0167   	 0         	 9.364     	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 56, m: 50, k: 56)   	 0.000632213	 100       	 49.6035   	 0         	 11.0545   	 4.48718   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 1, r1low: 0, n: 50, r2: 50)                     	 0.00058001	 100       	 0         	 0         	 6.89643   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 56, n: 50, r2: 1)                    	 0.000543828	 100       	 0         	 0         	 15.5932   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                          	 0.000511241	 100       	 0         	 0         	 7.8241    	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 50)                                                                	 0.00042817	 100       	 0         	 0         	 9.34208   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 1, Xr2: 50, Qr1: 1, Qr2: 0)          	 0.000420307	 100       	 0         	 0         	 9.51685   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                            	 0.000412651	 100       	 1.21168   	 0         	 14.5401   	 0.0833333 
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                 	 0.000404095	 100       	 0.618666  	 0         	 9.89866   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 56, n: 50, r2: 1)                                                                                 	 0.000374601	 100       	 0.747462  	 0         	 11.9594   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                 	 0.000330701	 100       	 0.75597   	 0         	 12.0955   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 0, m: 2800, k: 50)  	 6.83e-06  	 100       	 0         	 0         	 16398.2   	 0         
Timing statistics:
function                                                                                                                                                                                      	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                        	 3.78362   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_normalized(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                     	 3.78356   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::rightNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                            	 3.08153   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::rightNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                        	 3.08029   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double]	 2.74051   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                  	 1.04431   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                               	 1.03125   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                            	 0.778245  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_leftOrthogonalize(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&) [with T = double]                                   	 0.701964  	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]           	 0.485084  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                           	 0.29381   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.267178  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                	 0.246414  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                    	 0.101252  	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                                       	 0.0856395 	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.0417462 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double]        	 0.0411382 	 1800      
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                       	 0.0388956 	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double]          	 0.0363353 	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                	 0.0262586 	 1300      
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double]       	 0.025825  	 900       
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                              	 0.0242135 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                        	 0.0201724 	 1000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                	 0.00554283	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                              	 0.00352056	 6400      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                         	 0.00183244	 5200      
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                       	 0.0011094 	 300       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                         	 0.000815354	 100       
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                           	 0.000796305	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                                                  	 0.000412651	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
orthoX: L, orthoY: L
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 64
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->65  [0m[1;34m1->66  [0m[1;34m2->67  [0m[1;34m3->68  [0m[1;34m4->69  [0m[1;34m5->70  [0m[1;34m6->71  [0m[1;34m7->72  [0m[1;34m8->73  [0m[1;34m9->74  [0m[1;34m10->75  [0m[1;34m11->76  [0m[1;34m12->77  [0m[1;34m13->78  [0m[1;34m14->79  [0m[1;34m15->80  [0m[1;34m16->81  [0m[1;34m17->82  [0m[1;34m18->83  [0m[1;34m19->84  [0m[1;34m20->85  [0m[1;34m21->86  [0m[1;34m22->87  [0m[1;34m23->88  [0m[1;34m24->89  [0m[1;34m25->90  [0m[1;34m26->91  [0m[1;34m27->92  [0m[1;34m28->93  [0m[1;34m29->94  [0m[1;34m30->95  [0m[1;34m31->96  [0m[1;34m32->97  [0m[1;34m33->98  [0m[1;34m34->99  [0m[1;34m35->100  [0m[1;34m36->101  [0m[1;34m37->102  [0m[1;34m38->103  [0m[1;34m39->104  [0m[1;34m40->105  [0m[1;34m41->106  [0m[1;34m42->107  [0m[1;34m43->108  [0m[1;34m44->109  [0m[1;34m45->110  [0m[1;34m46->111  [0m[1;34m47->112  [0m[1;34m48->113  [0m[1;34m49->114  [0m[1;34m50->115  [0m[1;34m51->116  [0m[1;34m52->117  [0m[1;34m53->118  [0m[1;34m54->119  [0m[1;34m55->120  [0m[1;34m56->121  [0m[1;34m57->122  [0m[1;34m58->123  [0m[1;34m59->124  [0m[1;34m60->125  [0m[1;34m61->126  [0m[1;34m62->127  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22850536015744 -> hwthread 65 - OK[0m[1;34m
[0m[1;34m	threadid 22850299750400 -> hwthread 66 - OK[0m[1;34m
[0m[1;34m	threadid 22850098423936 -> hwthread 67 - OK[0m[1;34m
[0m[1;34m	threadid 22849897097472 -> hwthread 68 - OK[0m[1;34m
[0m[1;34m	threadid 22849695771008 -> hwthread 69 - OK[0m[1;34m
[0m[1;34m	threadid 22849494444544 -> hwthread 70 - OK[0m[1;34m
[0m[1;34m	threadid 22849293118080 -> hwthread 71 - OK[0m[1;34m
[0m[1;34m	threadid 22849091791616 -> hwthread 72 - OK[0m[1;34m
[0m[1;34m	threadid 22848890465152 -> hwthread 73 - OK[0m[1;34m
[0m[1;34m	threadid 22848689138688 -> hwthread 74 - OK[0m[1;34m
[0m[1;34m	threadid 22848487812224 -> hwthread 75 - OK[0m[1;34m
[0m[1;34m	threadid 22848286485760 -> hwthread 76 - OK[0m[1;34m
[0m[1;34m	threadid 22848085159296 -> hwthread 77 - OK[0m[1;34m
[0m[1;34m	threadid 22847883832832 -> hwthread 78 - OK[0m[1;34m
[0m[1;34m	threadid 22847682506368 -> hwthread 79 - OK[0m[1;34m
[0m[1;34m	threadid 22847481179904 -> hwthread 80 - OK[0m[1;34m
[0m[1;34m	threadid 22847279853440 -> hwthread 81 - OK[0m[1;34m
[0m[1;34m	threadid 22847078526976 -> hwthread 82 - OK[0m[1;34m
[0m[1;34m	threadid 22846877200512 -> hwthread 83 - OK[0m[1;34m
[0m[1;34m	threadid 22846675874048 -> hwthread 84 - OK[0m[1;34m
[0m[1;34m	threadid 22846474547584 -> hwthread 85 - OK[0m[1;34m
[0m[1;34m	threadid 22846273221120 -> hwthread 86 - OK[0m[1;34m
[0m[1;34m	threadid 22846071894656 -> hwthread 87 - OK[0m[1;34m
[0m[1;34m	threadid 22845870568192 -> hwthread 88 - OK[0m[1;34m
[0m[1;34m	threadid 22845669241728 -> hwthread 89 - OK[0m[1;34m
[0m[1;34m	threadid 22845467915264 -> hwthread 90 - OK[0m[1;34m
[0m[1;34m	threadid 22845266588800 -> hwthread 91 - OK[0m[1;34m
[0m[1;34m	threadid 22845065262336 -> hwthread 92 - OK[0m[1;34m
[0m[1;34m	threadid 22844863935872 -> hwthread 93 - OK[0m[1;34m
[0m[1;34m	threadid 22844662609408 -> hwthread 94 - OK[0m[1;34m
[0m[1;34m	threadid 22844461282944 -> hwthread 95 - OK[0m[1;34m
[0m[1;34m	threadid 22844259956480 -> hwthread 96 - OK[0m[1;34m
[0m[1;34m	threadid 22844058625920 -> hwthread 97 - OK[0m[1;34m
[0m[1;34m	threadid 22843857299456 -> hwthread 98 - OK[0m[1;34m
[0m[1;34m	threadid 22843655972992 -> hwthread 99 - OK[0m[1;34m
[0m[1;34m	threadid 22843454646528 -> hwthread 100 - OK[0m[1;34m
[0m[1;34m	threadid 22843253320064 -> hwthread 101 - OK[0m[1;34m
[0m[1;34m	threadid 22843051993600 -> hwthread 102 - OK[0m[1;34m
[0m[1;34m	threadid 22842850667136 -> hwthread 103 - OK[0m[1;34m
[0m[1;34m	threadid 22842649340672 -> hwthread 104 - OK[0m[1;34m
[0m[1;34m	threadid 22842448014208 -> hwthread 105 - OK[0m[1;34m
[0m[1;34m	threadid 22842246687744 -> hwthread 106 - OK[0m[1;34m
[0m[1;34m	threadid 22842045361280 -> hwthread 107 - OK[0m[1;34m
[0m[1;34m	threadid 22841844034816 -> hwthread 108 - OK[0m[1;34m
[0m[1;34m	threadid 22841642708352 -> hwthread 109 - OK[0m[1;34m
[0m[1;34m	threadid 22841441381888 -> hwthread 110 - OK[0m[1;34m
[0m[1;34m	threadid 22841240055424 -> hwthread 111 - OK[0m[1;34m
[0m[1;34m	threadid 22841038728960 -> hwthread 112 - OK[0m[1;34m
[0m[1;34m	threadid 22840837402496 -> hwthread 113 - OK[0m[1;34m
[0m[1;34m	threadid 22840636076032 -> hwthread 114 - OK[0m[1;34m
[0m[1;34m	threadid 22840434749568 -> hwthread 115 - OK[0m[1;34m
[0m[1;34m	threadid 22840233423104 -> hwthread 116 - OK[0m[1;34m
[0m[1;34m	threadid 22840032096640 -> hwthread 117 - OK[0m[1;34m
[0m[1;34m	threadid 22839830770176 -> hwthread 118 - OK[0m[1;34m
[0m[1;34m	threadid 22839629443712 -> hwthread 119 - OK[0m[1;34m
[0m[1;34m	threadid 22839428117248 -> hwthread 120 - OK[0m[1;34m
[0m[1;34m	threadid 22839226790784 -> hwthread 121 - OK[0m[1;34m
[0m[1;34m	threadid 22839025464320 -> hwthread 122 - OK[0m[1;34m
[0m[1;34m	threadid 22838824137856 -> hwthread 123 - OK[0m[1;34m
[0m[1;34m	threadid 22838622811392 -> hwthread 124 - OK[0m[1;34m
[0m[1;34m	threadid 22838421484928 -> hwthread 125 - OK[0m[1;34m
[0m[1;34m	threadid 22838220158464 -> hwthread 126 - OK[0m[1;34m
[0m[1;34m	threadid 22838018832000 -> hwthread 127 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22850430355200 -> hwthread 64 - OK[0m[1;34m
[0m[1;34m	threadid 22850423764736 -> hwthread 65 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 107, m: 107)                                                               	 0.972407  	 700       	 8.23072   	 0         	 0.198417  	 41.4819   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5350, cols: 107, reductionFactor: 37, colBlockingSize: 12)                 	 0.672525  	 600       	 112.247   	 0         	 4.16745   	 26.9343   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 107, n: 50, r: 107, r2: 107)          	 0.257508  	 600       	 285.439   	 0         	 21.5546   	 13.2426   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5350, cols: 57, reductionFactor: 37, colBlockingSize: 12)                  	 0.24873   	 700       	 100.481   	 0         	 6.93891   	 14.4809   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 107, r: 107, r2: 5350, leftOrthog: 0)      	 0.211571  	 600       	 347.414   	 0         	 39.4818   	 8.79934   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 5350, Xcols: 57, r: 57, streamingCols: 0)                   	 0.0941381 	 700       	 129.252   	 0         	 36.3778   	 3.55304   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 107, reductionFactor: 37, colBlockingSize: 12)                 	 0.0880831 	 100       	 66.7462   	 0         	 2.53351   	 26.3454   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 107, Qr2: 57)      	 0.0865133 	 700       	 0         	 0         	 64.8853   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 107)                                                                	 0.0536943 	 100       	 4.29592   	 0         	 0.197414  	 21.761    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 57, m: 57)                                                                  	 0.0408425 	 800       	 4.83661   	 0         	 1.53628   	 3.14826   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                 	 0.0402241 	 100       	 2.90041   	 0         	 0.150159  	 19.3157   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 5350, m: 57)                                                                       	 0.0359845 	 700       	 0         	 0         	 94.9141   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 57, k: 2500)   	 0.035868  	 800       	 317.832   	 0         	 48.2391   	 6.58868   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5350, cols: 50, reductionFactor: 37, colBlockingSize: 12)                  	 0.0292603 	 100       	 93.8917   	 0         	 7.38202   	 12.719    
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 57, reductionFactor: 37, colBlockingSize: 12)                  	 0.0284354 	 100       	 58.6735   	 0         	 4.10049   	 14.3089   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 2500, m: 57, k: 50)	 0.0255433 	 800       	 446.3     	 0         	 67.7374   	 6.58868   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 57, n: 50, r2: 57)                                                                                         	 0.0220959 	 700       	 0         	 0         	 82.3429   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 57, m: 2850, k: 57) 	 0.0200342 	 700       	 647.07    	 0         	 91.725    	 7.05446   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r: 107, r2: 107)           	 0.0196958 	 100       	 290.646   	 0         	 22.1956   	 13.0948   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 5350, m: 57)                                                              	 0.0194453 	 700       	 0         	 0         	 175.644   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 2850, k: 57) 	 0.0180767 	 700       	 629.07    	 0         	 95.3538   	 6.59722   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 107, r: 107, r2: 2500, leftOrthog: 0)      	 0.0165381 	 100       	 346.141   	 0         	 39.9272   	 8.6693    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 5350, leftOrthog: 0)        	 0.016067  	 100       	 166.49    	 0         	 40.2066   	 4.14087   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 57, n: 50, r2: 57)                   	 0.0150074 	 700       	 0         	 0         	 227.584   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 107, n: 50, r: 107, r2: 50)           	 0.013385  	 100       	 427.68    	 0         	 50.5222   	 8.46519   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 107, reductionFactor: 37, colBlockingSize: 12)                   	 0.00930869	 100       	 12.6317   	 0         	 1.44373   	 8.74935   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 57, r: 57, streamingCols: 0)                   	 0.00904571	 100       	 89.7939   	 0         	 25.349    	 3.54231   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 50, Qr2: 57)       	 0.00564605	 100       	 0         	 0         	 75.8052   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 2500, m: 57)                                                                       	 0.00512796	 100       	 0         	 0         	 44.4622   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 0, n: 50, r2: 57)                    	 0.00463212	 100       	 0         	 0         	 49.2215   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 2850, k: 50) 	 0.00453213	 100       	 314.422   	 0         	 50.7488   	 6.19565   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                  	 0.00448042	 100       	 3.71988   	 0         	 1.34809   	 2.75937   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 57)                                                              	 0.00426399	 100       	 0         	 0         	 53.471    	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 50, reductionFactor: 37, colBlockingSize: 12)                    	 0.00347729	 100       	 7.38382   	 0         	 1.15032   	 6.41892   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 107, r: 50, r2: 50, leftOrthog: 0)         	 0.00249424	 100       	 21.4494   	 0         	 6.75155   	 3.17696   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 57)                                                                                         	 0.00214141	 100       	 0         	 0         	 106.472   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 57, m: 57, fromLeft: 0)                	 0.0012655 	 800       	 0         	 0         	 32.8623   	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                   	 0.000885577	 100       	 0.564604  	 0         	 2.25841   	 0.25      
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50, k: 50)     	 0.000804078	 100       	 31.0915   	 0         	 7.46196   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                          	 0.000802421	 200       	 0         	 0         	 9.96983   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 57, n: 50, r2: 1)                                                                                          	 0.000797197	 200       	 0         	 0         	 11.4401   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 50, r2: 50)              	 0.000796354	 100       	 31.3931   	 0         	 7.53434   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 50, k: 57)   	 0.000748618	 100       	 38.0702   	 0         	 8.76281   	 4.34451   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 57, m: 50, k: 57)   	 0.000717748	 100       	 45.2666   	 0         	 9.97453   	 4.53822   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 50, m: 50, k: 50)  	 0.000665886	 100       	 37.544    	 0         	 9.01055   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 57, n: 50, r2: 1)                    	 0.000560073	 100       	 0         	 0         	 15.2837   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 1, r1low: 0, n: 50, r2: 50)                     	 0.000543231	 100       	 0         	 0         	 7.36335   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                          	 0.000488197	 100       	 0         	 0         	 8.19341   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 50)                                                                	 0.000432838	 100       	 0         	 0         	 9.24133   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 1, Xr2: 50, Qr1: 1, Qr2: 0)          	 0.000430936	 100       	 0         	 0         	 9.28212   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                            	 0.000419824	 100       	 1.19098   	 0         	 14.2917   	 0.0833333 
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                 	 0.000402316	 100       	 0.621402  	 0         	 9.94243   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 57, n: 50, r2: 1)                                                                                 	 0.000355542	 100       	 0.801593  	 0         	 12.8255   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                 	 0.00033051	 100       	 0.756407  	 0         	 12.1025   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 0, m: 2850, k: 50)  	 6.821e-06 	 100       	 0         	 0         	 16713.1   	 0         
Timing statistics:
function                                                                                                                                                                                      	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                        	 3.90331   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_normalized(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                     	 3.90326   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::rightNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                            	 3.16628   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::rightNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                        	 3.16497   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double]	 2.82499   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                  	 1.07982   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                               	 1.06633   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                            	 0.799851  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_leftOrthogonalize(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&) [with T = double]                                   	 0.736915  	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]           	 0.507008  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                           	 0.291385  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.281116  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                	 0.24667   	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                    	 0.103184  	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                                       	 0.0925902 	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.0453229 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double]        	 0.0441162 	 1800      
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                       	 0.0411125 	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double]          	 0.0366721 	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                	 0.0263251 	 1300      
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double]       	 0.0262092 	 900       
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                              	 0.0241421 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                        	 0.0207428 	 1000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                	 0.00582412	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                              	 0.00353032	 6400      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                         	 0.00174601	 5200      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                           	 0.0012655 	 800       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                       	 0.00108837	 300       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                         	 0.000885577	 100       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                                                  	 0.000419824	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
orthoX: L, orthoY: L
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 64
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->65  [0m[1;34m1->66  [0m[1;34m2->67  [0m[1;34m3->68  [0m[1;34m4->69  [0m[1;34m5->70  [0m[1;34m6->71  [0m[1;34m7->72  [0m[1;34m8->73  [0m[1;34m9->74  [0m[1;34m10->75  [0m[1;34m11->76  [0m[1;34m12->77  [0m[1;34m13->78  [0m[1;34m14->79  [0m[1;34m15->80  [0m[1;34m16->81  [0m[1;34m17->82  [0m[1;34m18->83  [0m[1;34m19->84  [0m[1;34m20->85  [0m[1;34m21->86  [0m[1;34m22->87  [0m[1;34m23->88  [0m[1;34m24->89  [0m[1;34m25->90  [0m[1;34m26->91  [0m[1;34m27->92  [0m[1;34m28->93  [0m[1;34m29->94  [0m[1;34m30->95  [0m[1;34m31->96  [0m[1;34m32->97  [0m[1;34m33->98  [0m[1;34m34->99  [0m[1;34m35->100  [0m[1;34m36->101  [0m[1;34m37->102  [0m[1;34m38->103  [0m[1;34m39->104  [0m[1;34m40->105  [0m[1;34m41->106  [0m[1;34m42->107  [0m[1;34m43->108  [0m[1;34m44->109  [0m[1;34m45->110  [0m[1;34m46->111  [0m[1;34m47->112  [0m[1;34m48->113  [0m[1;34m49->114  [0m[1;34m50->115  [0m[1;34m51->116  [0m[1;34m52->117  [0m[1;34m53->118  [0m[1;34m54->119  [0m[1;34m55->120  [0m[1;34m56->121  [0m[1;34m57->122  [0m[1;34m58->123  [0m[1;34m59->124  [0m[1;34m60->125  [0m[1;34m61->126  [0m[1;34m62->127  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23063076181888 -> hwthread 65 - OK[0m[1;34m
[0m[1;34m	threadid 23062900631552 -> hwthread 66 - OK[0m[1;34m
[0m[1;34m	threadid 23062699305088 -> hwthread 67 - OK[0m[1;34m
[0m[1;34m	threadid 23062497978624 -> hwthread 68 - OK[0m[1;34m
[0m[1;34m	threadid 23062296652160 -> hwthread 69 - OK[0m[1;34m
[0m[1;34m	threadid 23062095325696 -> hwthread 70 - OK[0m[1;34m
[0m[1;34m	threadid 23061893999232 -> hwthread 71 - OK[0m[1;34m
[0m[1;34m	threadid 23061692672768 -> hwthread 72 - OK[0m[1;34m
[0m[1;34m	threadid 23061491346304 -> hwthread 73 - OK[0m[1;34m
[0m[1;34m	threadid 23061290019840 -> hwthread 74 - OK[0m[1;34m
[0m[1;34m	threadid 23061088693376 -> hwthread 75 - OK[0m[1;34m
[0m[1;34m	threadid 23060887366912 -> hwthread 76 - OK[0m[1;34m
[0m[1;34m	threadid 23060686040448 -> hwthread 77 - OK[0m[1;34m
[0m[1;34m	threadid 23060484713984 -> hwthread 78 - OK[0m[1;34m
[0m[1;34m	threadid 23060283387520 -> hwthread 79 - OK[0m[1;34m
[0m[1;34m	threadid 23060082061056 -> hwthread 80 - OK[0m[1;34m
[0m[1;34m	threadid 23059880734592 -> hwthread 81 - OK[0m[1;34m
[0m[1;34m	threadid 23059679408128 -> hwthread 82 - OK[0m[1;34m
[0m[1;34m	threadid 23059478081664 -> hwthread 83 - OK[0m[1;34m
[0m[1;34m	threadid 23059276755200 -> hwthread 84 - OK[0m[1;34m
[0m[1;34m	threadid 23059075428736 -> hwthread 85 - OK[0m[1;34m
[0m[1;34m	threadid 23058874102272 -> hwthread 86 - OK[0m[1;34m
[0m[1;34m	threadid 23058672775808 -> hwthread 87 - OK[0m[1;34m
[0m[1;34m	threadid 23058471449344 -> hwthread 88 - OK[0m[1;34m
[0m[1;34m	threadid 23058270122880 -> hwthread 89 - OK[0m[1;34m
[0m[1;34m	threadid 23058068796416 -> hwthread 90 - OK[0m[1;34m
[0m[1;34m	threadid 23057867469952 -> hwthread 91 - OK[0m[1;34m
[0m[1;34m	threadid 23057666143488 -> hwthread 92 - OK[0m[1;34m
[0m[1;34m	threadid 23057464817024 -> hwthread 93 - OK[0m[1;34m
[0m[1;34m	threadid 23057263490560 -> hwthread 94 - OK[0m[1;34m
[0m[1;34m	threadid 23057062164096 -> hwthread 95 - OK[0m[1;34m
[0m[1;34m	threadid 23056860837632 -> hwthread 96 - OK[0m[1;34m
[0m[1;34m	threadid 23056659507072 -> hwthread 97 - OK[0m[1;34m
[0m[1;34m	threadid 23056458180608 -> hwthread 98 - OK[0m[1;34m
[0m[1;34m	threadid 23056256854144 -> hwthread 99 - OK[0m[1;34m
[0m[1;34m	threadid 23056055527680 -> hwthread 100 - OK[0m[1;34m
[0m[1;34m	threadid 23055854201216 -> hwthread 101 - OK[0m[1;34m
[0m[1;34m	threadid 23055652874752 -> hwthread 102 - OK[0m[1;34m
[0m[1;34m	threadid 23055451548288 -> hwthread 103 - OK[0m[1;34m
[0m[1;34m	threadid 23055250221824 -> hwthread 104 - OK[0m[1;34m
[0m[1;34m	threadid 23055048895360 -> hwthread 105 - OK[0m[1;34m
[0m[1;34m	threadid 23054847568896 -> hwthread 106 - OK[0m[1;34m
[0m[1;34m	threadid 23054646242432 -> hwthread 107 - OK[0m[1;34m
[0m[1;34m	threadid 23054444915968 -> hwthread 108 - OK[0m[1;34m
[0m[1;34m	threadid 23054243589504 -> hwthread 109 - OK[0m[1;34m
[0m[1;34m	threadid 23054042263040 -> hwthread 110 - OK[0m[1;34m
[0m[1;34m	threadid 23053840936576 -> hwthread 111 - OK[0m[1;34m
[0m[1;34m	threadid 23053639610112 -> hwthread 112 - OK[0m[1;34m
[0m[1;34m	threadid 23053438283648 -> hwthread 113 - OK[0m[1;34m
[0m[1;34m	threadid 23053236957184 -> hwthread 114 - OK[0m[1;34m
[0m[1;34m	threadid 23053035630720 -> hwthread 115 - OK[0m[1;34m
[0m[1;34m	threadid 23052834304256 -> hwthread 116 - OK[0m[1;34m
[0m[1;34m	threadid 23052632977792 -> hwthread 117 - OK[0m[1;34m
[0m[1;34m	threadid 23052431651328 -> hwthread 118 - OK[0m[1;34m
[0m[1;34m	threadid 23052230324864 -> hwthread 119 - OK[0m[1;34m
[0m[1;34m	threadid 23052028998400 -> hwthread 120 - OK[0m[1;34m
[0m[1;34m	threadid 23051827671936 -> hwthread 121 - OK[0m[1;34m
[0m[1;34m	threadid 23051626345472 -> hwthread 122 - OK[0m[1;34m
[0m[1;34m	threadid 23051425019008 -> hwthread 123 - OK[0m[1;34m
[0m[1;34m	threadid 23051223692544 -> hwthread 124 - OK[0m[1;34m
[0m[1;34m	threadid 23051022366080 -> hwthread 125 - OK[0m[1;34m
[0m[1;34m	threadid 23050821039616 -> hwthread 126 - OK[0m[1;34m
[0m[1;34m	threadid 23050619713152 -> hwthread 127 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23062970521344 -> hwthread 64 - OK[0m[1;34m
[0m[1;34m	threadid 23062791943936 -> hwthread 65 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 108, m: 108)                                                               	 0.964145  	 700       	 8.53618   	 0         	 0.20387   	 41.8708   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5400, cols: 108, reductionFactor: 37, colBlockingSize: 12)                 	 0.694394  	 600       	 111.789   	 0         	 4.112     	 27.186    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 108, n: 50, r: 108, r2: 108)          	 0.270176  	 600       	 279.754   	 0         	 20.9297   	 13.3663   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5400, cols: 58, reductionFactor: 37, colBlockingSize: 12)                  	 0.256725  	 700       	 101.74    	 0         	 6.90528   	 14.7336   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 108, r: 108, r2: 5400, leftOrthog: 0)      	 0.21236   	 600       	 355.918   	 0         	 40.0737   	 8.88158   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 5400, Xcols: 58, r: 58, streamingCols: 0)                   	 0.0943525 	 700       	 134.77    	 0         	 37.2779   	 3.61529   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 108, reductionFactor: 37, colBlockingSize: 12)                 	 0.0897898 	 100       	 66.7071   	 0         	 2.50954   	 26.5814   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 108, Qr2: 58)      	 0.0807051 	 700       	 0         	 0         	 70.8734   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 108)                                                                	 0.0537501 	 100       	 4.32868   	 0         	 0.198697  	 21.7853   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 58, m: 58)                                                                  	 0.0411748 	 800       	 5.05451   	 0         	 1.57766   	 3.20379   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                 	 0.0397968 	 100       	 2.93156   	 0         	 0.151771  	 19.3157   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 5400, m: 58)                                                                       	 0.037426  	 700       	 0         	 0         	 93.7275   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 58, k: 2500)   	 0.036444  	 800       	 318.297   	 0         	 47.9245   	 6.64163   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 58, reductionFactor: 37, colBlockingSize: 12)                  	 0.0302587 	 100       	 57.0896   	 0         	 3.92254   	 14.5542   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5400, cols: 50, reductionFactor: 37, colBlockingSize: 12)                  	 0.0299471 	 100       	 92.5958   	 0         	 7.27951   	 12.7201   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 2500, m: 58, k: 50)	 0.0256469 	 800       	 452.297   	 0         	 68.1003   	 6.64163   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 58, n: 50, r2: 58)                                                                                         	 0.0228864 	 700       	 0         	 0         	 82.3125   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 5400, m: 58)                                                              	 0.0211792 	 700       	 0         	 0         	 165.627   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r: 108, r2: 108)           	 0.0198146 	 100       	 294.328   	 0         	 22.273    	 13.2146   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 58, m: 2900, k: 58) 	 0.0195333 	 700       	 699.209   	 0         	 97.407    	 7.17822   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 2900, k: 58) 	 0.018363  	 700       	 641.182   	 0         	 96.3984   	 6.65138   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 108, r: 108, r2: 2500, leftOrthog: 0)      	 0.0165034 	 100       	 353.381   	 0         	 40.3954   	 8.74806   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 58, n: 50, r2: 58)                   	 0.0164691 	 700       	 0         	 0         	 212.995   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 5400, leftOrthog: 0)        	 0.0163957 	 100       	 164.677   	 0         	 39.7665   	 4.1411    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 108, n: 50, r: 108, r2: 50)           	 0.013665  	 100       	 426.783   	 0         	 50.2656   	 8.49057   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 108, reductionFactor: 37, colBlockingSize: 12)                   	 0.00992335	 100       	 12.0718   	 0         	 1.37566   	 8.77523   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 58, r: 58, streamingCols: 0)                   	 0.00900357	 100       	 93.4074   	 0         	 25.917    	 3.6041    
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 50, Qr2: 58)       	 0.00564764	 100       	 0         	 0         	 76.4922   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 2500, m: 58)                                                                       	 0.00504396	 100       	 0         	 0         	 45.9956   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                  	 0.00478307	 100       	 3.4845    	 0         	 1.26279   	 2.75937   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 0, n: 50, r2: 58)                    	 0.00420806	 100       	 0         	 0         	 55.1323   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 58)                                                              	 0.0041972 	 100       	 0         	 0         	 55.2749   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 2900, k: 50) 	 0.00382346	 100       	 379.237   	 0         	 61.2011   	 6.19658   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 50, reductionFactor: 37, colBlockingSize: 12)                    	 0.00348679	 100       	 7.36369   	 0         	 1.14719   	 6.41892   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 108, r: 50, r2: 50, leftOrthog: 0)         	 0.00248525	 100       	 21.7282   	 0         	 6.82425   	 3.18396   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 58)                                                                                         	 0.0021972 	 100       	 0         	 0         	 105.589   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 58, m: 58, fromLeft: 0)                	 0.00112121	 800       	 0         	 0         	 38.4043   	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                   	 0.000837415	 100       	 0.597076  	 0         	 2.3883    	 0.25      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 58, n: 50, r2: 1)                                                                                          	 0.000820769	 200       	 0         	 0         	 11.3065   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                          	 0.000818423	 200       	 0         	 0         	 9.7749    	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 58, m: 50, k: 58)   	 0.000801706	 100       	 41.9605   	 0         	 9.1445    	 4.58861   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50, k: 50)     	 0.000799571	 100       	 31.2668   	 0         	 7.50402   	 4.16667   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 50, r2: 50)              	 0.000793272	 100       	 31.515    	 0         	 7.56361   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 50, k: 58)   	 0.000777696	 100       	 37.2896   	 0         	 8.53804   	 4.36747   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 50, m: 50, k: 50)  	 0.00061598	 100       	 40.5857   	 0         	 9.74058   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 1, r1low: 0, n: 50, r2: 50)                     	 0.000521925	 100       	 0         	 0         	 7.66394   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                          	 0.000518413	 100       	 0         	 0         	 7.71586   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 58, n: 50, r2: 1)                    	 0.000497788	 100       	 0         	 0         	 17.3568   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                            	 0.000423783	 100       	 1.17985   	 0         	 14.1582   	 0.0833333 
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 1, Xr2: 50, Qr1: 1, Qr2: 0)          	 0.000421702	 100       	 0         	 0         	 9.48537   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 50)                                                                	 0.000420756	 100       	 0         	 0         	 9.5067    	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                 	 0.000411008	 100       	 0.608261  	 0         	 9.73217   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 58, n: 50, r2: 1)                                                                                 	 0.000361413	 100       	 0.802406  	 0         	 12.8385   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                 	 0.000328909	 100       	 0.760089  	 0         	 12.1614   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 0, m: 2900, k: 50)  	 7.03e-06  	 100       	 0         	 0         	 16500.7   	 0         
Timing statistics:
function                                                                                                                                                                                      	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                        	 3.9652    	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_normalized(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                     	 3.96515   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::rightNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                            	 3.21998   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::rightNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                        	 3.21873   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double]	 2.86608   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                  	 1.11452   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                               	 1.05769   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                            	 0.824691  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_leftOrthogonalize(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&) [with T = double]                                   	 0.745077  	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]           	 0.521043  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                           	 0.304449  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.290939  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                	 0.247744  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                    	 0.103356  	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                                       	 0.0867744 	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.0459579 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double]        	 0.0433061 	 1800      
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                       	 0.0424699 	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double]          	 0.0372435 	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                	 0.0272412 	 1300      
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double]       	 0.0262629 	 900       
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                              	 0.0257971 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                        	 0.0216969 	 1000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                	 0.00736487	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                              	 0.00353048	 6400      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                         	 0.00154337	 5200      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                           	 0.00112121	 800       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                       	 0.00110133	 300       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                         	 0.000837415	 100       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                                                  	 0.000423783	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
orthoX: L, orthoY: L
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 64
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->65  [0m[1;34m1->66  [0m[1;34m2->67  [0m[1;34m3->68  [0m[1;34m4->69  [0m[1;34m5->70  [0m[1;34m6->71  [0m[1;34m7->72  [0m[1;34m8->73  [0m[1;34m9->74  [0m[1;34m10->75  [0m[1;34m11->76  [0m[1;34m12->77  [0m[1;34m13->78  [0m[1;34m14->79  [0m[1;34m15->80  [0m[1;34m16->81  [0m[1;34m17->82  [0m[1;34m18->83  [0m[1;34m19->84  [0m[1;34m20->85  [0m[1;34m21->86  [0m[1;34m22->87  [0m[1;34m23->88  [0m[1;34m24->89  [0m[1;34m25->90  [0m[1;34m26->91  [0m[1;34m27->92  [0m[1;34m28->93  [0m[1;34m29->94  [0m[1;34m30->95  [0m[1;34m31->96  [0m[1;34m32->97  [0m[1;34m33->98  [0m[1;34m34->99  [0m[1;34m35->100  [0m[1;34m36->101  [0m[1;34m37->102  [0m[1;34m38->103  [0m[1;34m39->104  [0m[1;34m40->105  [0m[1;34m41->106  [0m[1;34m42->107  [0m[1;34m43->108  [0m[1;34m44->109  [0m[1;34m45->110  [0m[1;34m46->111  [0m[1;34m47->112  [0m[1;34m48->113  [0m[1;34m49->114  [0m[1;34m50->115  [0m[1;34m51->116  [0m[1;34m52->117  [0m[1;34m53->118  [0m[1;34m54->119  [0m[1;34m55->120  [0m[1;34m56->121  [0m[1;34m57->122  [0m[1;34m58->123  [0m[1;34m59->124  [0m[1;34m60->125  [0m[1;34m61->126  [0m[1;34m62->127  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22619240515456 -> hwthread 65 - OK[0m[1;34m
[0m[1;34m	threadid 22619042605056 -> hwthread 66 - OK[0m[1;34m
[0m[1;34m	threadid 22618841278592 -> hwthread 67 - OK[0m[1;34m
[0m[1;34m	threadid 22618639952128 -> hwthread 68 - OK[0m[1;34m
[0m[1;34m	threadid 22618438625664 -> hwthread 69 - OK[0m[1;34m
[0m[1;34m	threadid 22618237299200 -> hwthread 70 - OK[0m[1;34m
[0m[1;34m	threadid 22618035972736 -> hwthread 71 - OK[0m[1;34m
[0m[1;34m	threadid 22617834646272 -> hwthread 72 - OK[0m[1;34m
[0m[1;34m	threadid 22617633319808 -> hwthread 73 - OK[0m[1;34m
[0m[1;34m	threadid 22617431993344 -> hwthread 74 - OK[0m[1;34m
[0m[1;34m	threadid 22617230666880 -> hwthread 75 - OK[0m[1;34m
[0m[1;34m	threadid 22617029340416 -> hwthread 76 - OK[0m[1;34m
[0m[1;34m	threadid 22616828013952 -> hwthread 77 - OK[0m[1;34m
[0m[1;34m	threadid 22616626687488 -> hwthread 78 - OK[0m[1;34m
[0m[1;34m	threadid 22616425361024 -> hwthread 79 - OK[0m[1;34m
[0m[1;34m	threadid 22616224034560 -> hwthread 80 - OK[0m[1;34m
[0m[1;34m	threadid 22616022708096 -> hwthread 81 - OK[0m[1;34m
[0m[1;34m	threadid 22615821381632 -> hwthread 82 - OK[0m[1;34m
[0m[1;34m	threadid 22615620055168 -> hwthread 83 - OK[0m[1;34m
[0m[1;34m	threadid 22615418728704 -> hwthread 84 - OK[0m[1;34m
[0m[1;34m	threadid 22615217402240 -> hwthread 85 - OK[0m[1;34m
[0m[1;34m	threadid 22615016075776 -> hwthread 86 - OK[0m[1;34m
[0m[1;34m	threadid 22614814749312 -> hwthread 87 - OK[0m[1;34m
[0m[1;34m	threadid 22614613422848 -> hwthread 88 - OK[0m[1;34m
[0m[1;34m	threadid 22614412096384 -> hwthread 89 - OK[0m[1;34m
[0m[1;34m	threadid 22614210769920 -> hwthread 90 - OK[0m[1;34m
[0m[1;34m	threadid 22614009443456 -> hwthread 91 - OK[0m[1;34m
[0m[1;34m	threadid 22613808116992 -> hwthread 92 - OK[0m[1;34m
[0m[1;34m	threadid 22613606790528 -> hwthread 93 - OK[0m[1;34m
[0m[1;34m	threadid 22613405464064 -> hwthread 94 - OK[0m[1;34m
[0m[1;34m	threadid 22613204137600 -> hwthread 95 - OK[0m[1;34m
[0m[1;34m	threadid 22613002811136 -> hwthread 96 - OK[0m[1;34m
[0m[1;34m	threadid 22612801480576 -> hwthread 97 - OK[0m[1;34m
[0m[1;34m	threadid 22612600154112 -> hwthread 98 - OK[0m[1;34m
[0m[1;34m	threadid 22612398827648 -> hwthread 99 - OK[0m[1;34m
[0m[1;34m	threadid 22612197501184 -> hwthread 100 - OK[0m[1;34m
[0m[1;34m	threadid 22611996174720 -> hwthread 101 - OK[0m[1;34m
[0m[1;34m	threadid 22611794848256 -> hwthread 102 - OK[0m[1;34m
[0m[1;34m	threadid 22611593521792 -> hwthread 103 - OK[0m[1;34m
[0m[1;34m	threadid 22611392195328 -> hwthread 104 - OK[0m[1;34m
[0m[1;34m	threadid 22611190868864 -> hwthread 105 - OK[0m[1;34m
[0m[1;34m	threadid 22610989542400 -> hwthread 106 - OK[0m[1;34m
[0m[1;34m	threadid 22610788215936 -> hwthread 107 - OK[0m[1;34m
[0m[1;34m	threadid 22610586889472 -> hwthread 108 - OK[0m[1;34m
[0m[1;34m	threadid 22610385563008 -> hwthread 109 - OK[0m[1;34m
[0m[1;34m	threadid 22610184236544 -> hwthread 110 - OK[0m[1;34m
[0m[1;34m	threadid 22609982910080 -> hwthread 111 - OK[0m[1;34m
[0m[1;34m	threadid 22609781583616 -> hwthread 112 - OK[0m[1;34m
[0m[1;34m	threadid 22609580257152 -> hwthread 113 - OK[0m[1;34m
[0m[1;34m	threadid 22609378930688 -> hwthread 114 - OK[0m[1;34m
[0m[1;34m	threadid 22609177604224 -> hwthread 115 - OK[0m[1;34m
[0m[1;34m	threadid 22608976277760 -> hwthread 116 - OK[0m[1;34m
[0m[1;34m	threadid 22608774951296 -> hwthread 117 - OK[0m[1;34m
[0m[1;34m	threadid 22608573624832 -> hwthread 118 - OK[0m[1;34m
[0m[1;34m	threadid 22608372298368 -> hwthread 119 - OK[0m[1;34m
[0m[1;34m	threadid 22608170971904 -> hwthread 120 - OK[0m[1;34m
[0m[1;34m	threadid 22607969645440 -> hwthread 121 - OK[0m[1;34m
[0m[1;34m	threadid 22607768318976 -> hwthread 122 - OK[0m[1;34m
[0m[1;34m	threadid 22607566992512 -> hwthread 123 - OK[0m[1;34m
[0m[1;34m	threadid 22607365666048 -> hwthread 124 - OK[0m[1;34m
[0m[1;34m	threadid 22607164339584 -> hwthread 125 - OK[0m[1;34m
[0m[1;34m	threadid 22606963013120 -> hwthread 126 - OK[0m[1;34m
[0m[1;34m	threadid 22606761686656 -> hwthread 127 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22619134854912 -> hwthread 64 - OK[0m[1;34m
[0m[1;34m	threadid 22619128264448 -> hwthread 65 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 109, m: 109)                                                               	 1.01929   	 700       	 8.30072   	 0         	 0.196422  	 42.2597   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5450, cols: 109, reductionFactor: 37, colBlockingSize: 12)                 	 0.70504   	 600       	 113.188   	 0         	 4.12525   	 27.4377   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 109, n: 50, r: 109, r2: 109)          	 0.263133  	 600       	 295.295   	 0         	 21.8897   	 13.4901   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5450, cols: 59, reductionFactor: 37, colBlockingSize: 12)                  	 0.261282  	 700       	 104.4     	 0         	 6.96631   	 14.9864   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 109, r: 109, r2: 5450, leftOrthog: 0)      	 0.208221  	 600       	 373.169   	 0         	 41.6306   	 8.96382   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 109, Qr2: 59)      	 0.0989943 	 700       	 0         	 0         	 58.8656   	 0         
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 5450, Xcols: 59, r: 59, streamingCols: 0)                   	 0.0950757 	 700       	 139.678   	 0         	 37.9814   	 3.67755   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 109, reductionFactor: 37, colBlockingSize: 12)                 	 0.0948019 	 100       	 64.3558   	 0         	 2.39979   	 26.8173   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 109)                                                                	 0.055054  	 100       	 4.26248   	 0         	 0.195444  	 21.8092   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 59, m: 59)                                                                  	 0.0443465 	 800       	 4.93997   	 0         	 1.51563   	 3.25936   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                 	 0.0418268 	 100       	 2.78928   	 0         	 0.144405  	 19.3157   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 5450, m: 59)                                                                       	 0.0397284 	 700       	 0         	 0         	 90.6496   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 59, k: 2500)   	 0.0360041 	 800       	 327.741   	 0         	 48.9634   	 6.69359   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 59, reductionFactor: 37, colBlockingSize: 12)                  	 0.030765  	 100       	 58.1031   	 0         	 3.92605   	 14.7994   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5450, cols: 50, reductionFactor: 37, colBlockingSize: 12)                  	 0.0294603 	 100       	 94.9974   	 0         	 7.46768   	 12.7211   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 2500, m: 59, k: 50)	 0.0277706 	 800       	 424.91    	 0         	 63.4801   	 6.69359   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 59, n: 50, r2: 59)                                                                                         	 0.0234719 	 700       	 0         	 0         	 83.0507   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 59, m: 2950, k: 59) 	 0.0215241 	 700       	 667.928   	 0         	 91.4721   	 7.30198   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 5450, m: 59)                                                              	 0.0211861 	 700       	 0         	 0         	 169.987   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r: 109, r2: 109)           	 0.0192933 	 100       	 307.904   	 0         	 23.0911   	 13.3343   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 2950, k: 59) 	 0.0188927 	 700       	 644.879   	 0         	 96.1854   	 6.70455   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 59, n: 50, r2: 59)                   	 0.0184133 	 700       	 0         	 0         	 195.584   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 5450, leftOrthog: 0)        	 0.0183908 	 100       	 148.172   	 0         	 35.7787   	 4.14134   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 109, r: 109, r2: 2500, leftOrthog: 0)      	 0.0171102 	 100       	 347.191   	 0         	 39.3338   	 8.82677   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 109, n: 50, r: 109, r2: 50)           	 0.0138884 	 100       	 427.731   	 0         	 50.229    	 8.51562   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 59, r: 59, streamingCols: 0)                   	 0.00961869	 100       	 90.4749   	 0         	 24.6803   	 3.66587   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 109, reductionFactor: 37, colBlockingSize: 12)                   	 0.00953643	 100       	 12.7953   	 0         	 1.45388   	 8.80078   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 50, Qr2: 59)       	 0.00589234	 100       	 0         	 0         	 73.9943   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 2500, m: 59)                                                                       	 0.00556969	 100       	 0         	 0         	 42.3722   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 0, n: 50, r2: 59)                    	 0.00500248	 100       	 0         	 0         	 47.1766   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 59)                                                              	 0.00482542	 100       	 0         	 0         	 48.9077   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 2950, k: 50) 	 0.00464217	 100       	 317.739   	 0         	 51.2691   	 6.19748   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                  	 0.00445607	 100       	 3.7402    	 0         	 1.35545   	 2.75937   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 50, reductionFactor: 37, colBlockingSize: 12)                    	 0.00324407	 100       	 7.91464   	 0         	 1.23302   	 6.41892   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 109, r: 50, r2: 50, leftOrthog: 0)         	 0.00246555	 100       	 22.1046   	 0         	 6.92745   	 3.19087   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 59)                                                                                         	 0.00235141	 100       	 0         	 0         	 100.365   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 59, m: 59, fromLeft: 0)                	 0.00133386	 800       	 0         	 0         	 33.4044   	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                   	 0.000892132	 100       	 0.560455  	 0         	 2.24182   	 0.25      
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50, k: 50)     	 0.000840515	 100       	 29.7437   	 0         	 7.13848   	 4.16667   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 50, r2: 50)              	 0.000816722	 100       	 30.6102   	 0         	 7.34644   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 59, m: 50, k: 59)   	 0.000811356	 100       	 42.9035   	 0         	 9.2497    	 4.63836   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 59, n: 50, r2: 1)                                                                                          	 0.000794717	 200       	 0         	 0         	 11.8784   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                          	 0.000777868	 200       	 0         	 0         	 10.2845   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 50, k: 59)   	 0.000759897	 100       	 38.8211   	 0         	 8.8433    	 4.38988   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 50, m: 50, k: 50)  	 0.000631301	 100       	 39.6008   	 0         	 9.50418   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 1, r1low: 0, n: 50, r2: 50)                     	 0.000535505	 100       	 0         	 0         	 7.46958   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                          	 0.000504157	 100       	 0         	 0         	 7.93404   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 59, n: 50, r2: 1)                    	 0.000494982	 100       	 0         	 0         	 17.6168   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                            	 0.000437087	 100       	 1.14394   	 0         	 13.7272   	 0.0833333 
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 50)                                                                	 0.000429161	 100       	 0         	 0         	 9.32051   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                 	 0.000425847	 100       	 0.587065  	 0         	 9.39304   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 1, Xr2: 50, Qr1: 1, Qr2: 0)          	 0.000424659	 100       	 0         	 0         	 9.41932   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 59, n: 50, r2: 1)                                                                                 	 0.000363349	 100       	 0.811892  	 0         	 12.9903   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                 	 0.0003313 	 100       	 0.754603  	 0         	 12.0736   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 0, m: 2950, k: 50)  	 5.89e-06  	 100       	 0         	 0         	 20034     	 0         
Timing statistics:
function                                                                                                                                                                                      	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                        	 4.07449   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_normalized(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                     	 4.07444   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::rightNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                            	 3.28976   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::rightNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                        	 3.28844   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double]	 2.93426   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                  	 1.13413   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                               	 1.11617   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                            	 0.839479  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_leftOrthogonalize(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&) [with T = double]                                   	 0.784607  	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]           	 0.534531  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                           	 0.297131  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.295816  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                	 0.246188  	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                                       	 0.105311  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                    	 0.104694  	 800       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.0488026 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double]        	 0.0466361 	 1800      
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                       	 0.0452981 	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double]          	 0.0368446 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double]       	 0.0284019 	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                	 0.0279001 	 1300      
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                              	 0.0264406 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                        	 0.0244463 	 1000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                	 0.00500502	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                              	 0.00322174	 6400      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                         	 0.00291661	 5200      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                           	 0.00133386	 800       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                       	 0.0011205 	 300       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                         	 0.000892132	 100       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                                                  	 0.000437087	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
orthoX: L, orthoY: L
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 64
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->65  [0m[1;34m1->66  [0m[1;34m2->67  [0m[1;34m3->68  [0m[1;34m4->69  [0m[1;34m5->70  [0m[1;34m6->71  [0m[1;34m7->72  [0m[1;34m8->73  [0m[1;34m9->74  [0m[1;34m10->75  [0m[1;34m11->76  [0m[1;34m12->77  [0m[1;34m13->78  [0m[1;34m14->79  [0m[1;34m15->80  [0m[1;34m16->81  [0m[1;34m17->82  [0m[1;34m18->83  [0m[1;34m19->84  [0m[1;34m20->85  [0m[1;34m21->86  [0m[1;34m22->87  [0m[1;34m23->88  [0m[1;34m24->89  [0m[1;34m25->90  [0m[1;34m26->91  [0m[1;34m27->92  [0m[1;34m28->93  [0m[1;34m29->94  [0m[1;34m30->95  [0m[1;34m31->96  [0m[1;34m32->97  [0m[1;34m33->98  [0m[1;34m34->99  [0m[1;34m35->100  [0m[1;34m36->101  [0m[1;34m37->102  [0m[1;34m38->103  [0m[1;34m39->104  [0m[1;34m40->105  [0m[1;34m41->106  [0m[1;34m42->107  [0m[1;34m43->108  [0m[1;34m44->109  [0m[1;34m45->110  [0m[1;34m46->111  [0m[1;34m47->112  [0m[1;34m48->113  [0m[1;34m49->114  [0m[1;34m50->115  [0m[1;34m51->116  [0m[1;34m52->117  [0m[1;34m53->118  [0m[1;34m54->119  [0m[1;34m55->120  [0m[1;34m56->121  [0m[1;34m57->122  [0m[1;34m58->123  [0m[1;34m59->124  [0m[1;34m60->125  [0m[1;34m61->126  [0m[1;34m62->127  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22610922481536 -> hwthread 65 - OK[0m[1;34m
[0m[1;34m	threadid 22610721105920 -> hwthread 66 - OK[0m[1;34m
[0m[1;34m	threadid 22610519779456 -> hwthread 67 - OK[0m[1;34m
[0m[1;34m	threadid 22610318452992 -> hwthread 68 - OK[0m[1;34m
[0m[1;34m	threadid 22610117126528 -> hwthread 69 - OK[0m[1;34m
[0m[1;34m	threadid 22609915800064 -> hwthread 70 - OK[0m[1;34m
[0m[1;34m	threadid 22609714473600 -> hwthread 71 - OK[0m[1;34m
[0m[1;34m	threadid 22609513147136 -> hwthread 72 - OK[0m[1;34m
[0m[1;34m	threadid 22609311820672 -> hwthread 73 - OK[0m[1;34m
[0m[1;34m	threadid 22609110494208 -> hwthread 74 - OK[0m[1;34m
[0m[1;34m	threadid 22608909167744 -> hwthread 75 - OK[0m[1;34m
[0m[1;34m	threadid 22608707841280 -> hwthread 76 - OK[0m[1;34m
[0m[1;34m	threadid 22608506514816 -> hwthread 77 - OK[0m[1;34m
[0m[1;34m	threadid 22608305188352 -> hwthread 78 - OK[0m[1;34m
[0m[1;34m	threadid 22608103861888 -> hwthread 79 - OK[0m[1;34m
[0m[1;34m	threadid 22607902535424 -> hwthread 80 - OK[0m[1;34m
[0m[1;34m	threadid 22607701208960 -> hwthread 81 - OK[0m[1;34m
[0m[1;34m	threadid 22607499882496 -> hwthread 82 - OK[0m[1;34m
[0m[1;34m	threadid 22607298556032 -> hwthread 83 - OK[0m[1;34m
[0m[1;34m	threadid 22607097229568 -> hwthread 84 - OK[0m[1;34m
[0m[1;34m	threadid 22606895903104 -> hwthread 85 - OK[0m[1;34m
[0m[1;34m	threadid 22606694576640 -> hwthread 86 - OK[0m[1;34m
[0m[1;34m	threadid 22606493250176 -> hwthread 87 - OK[0m[1;34m
[0m[1;34m	threadid 22606291923712 -> hwthread 88 - OK[0m[1;34m
[0m[1;34m	threadid 22606090597248 -> hwthread 89 - OK[0m[1;34m
[0m[1;34m	threadid 22605889270784 -> hwthread 90 - OK[0m[1;34m
[0m[1;34m	threadid 22605687944320 -> hwthread 91 - OK[0m[1;34m
[0m[1;34m	threadid 22605486617856 -> hwthread 92 - OK[0m[1;34m
[0m[1;34m	threadid 22605285291392 -> hwthread 93 - OK[0m[1;34m
[0m[1;34m	threadid 22605083964928 -> hwthread 94 - OK[0m[1;34m
[0m[1;34m	threadid 22604882638464 -> hwthread 95 - OK[0m[1;34m
[0m[1;34m	threadid 22604681312000 -> hwthread 96 - OK[0m[1;34m
[0m[1;34m	threadid 22604479981440 -> hwthread 97 - OK[0m[1;34m
[0m[1;34m	threadid 22604278654976 -> hwthread 98 - OK[0m[1;34m
[0m[1;34m	threadid 22604077328512 -> hwthread 99 - OK[0m[1;34m
[0m[1;34m	threadid 22603876002048 -> hwthread 100 - OK[0m[1;34m
[0m[1;34m	threadid 22603674675584 -> hwthread 101 - OK[0m[1;34m
[0m[1;34m	threadid 22603473349120 -> hwthread 102 - OK[0m[1;34m
[0m[1;34m	threadid 22603272022656 -> hwthread 103 - OK[0m[1;34m
[0m[1;34m	threadid 22603070696192 -> hwthread 104 - OK[0m[1;34m
[0m[1;34m	threadid 22602869369728 -> hwthread 105 - OK[0m[1;34m
[0m[1;34m	threadid 22602668043264 -> hwthread 106 - OK[0m[1;34m
[0m[1;34m	threadid 22602466716800 -> hwthread 107 - OK[0m[1;34m
[0m[1;34m	threadid 22602265390336 -> hwthread 108 - OK[0m[1;34m
[0m[1;34m	threadid 22602064063872 -> hwthread 109 - OK[0m[1;34m
[0m[1;34m	threadid 22601862737408 -> hwthread 110 - OK[0m[1;34m
[0m[1;34m	threadid 22601661410944 -> hwthread 111 - OK[0m[1;34m
[0m[1;34m	threadid 22601460084480 -> hwthread 112 - OK[0m[1;34m
[0m[1;34m	threadid 22601258758016 -> hwthread 113 - OK[0m[1;34m
[0m[1;34m	threadid 22601057431552 -> hwthread 114 - OK[0m[1;34m
[0m[1;34m	threadid 22600856105088 -> hwthread 115 - OK[0m[1;34m
[0m[1;34m	threadid 22600654778624 -> hwthread 116 - OK[0m[1;34m
[0m[1;34m	threadid 22600453452160 -> hwthread 117 - OK[0m[1;34m
[0m[1;34m	threadid 22600252125696 -> hwthread 118 - OK[0m[1;34m
[0m[1;34m	threadid 22600050799232 -> hwthread 119 - OK[0m[1;34m
[0m[1;34m	threadid 22599849472768 -> hwthread 120 - OK[0m[1;34m
[0m[1;34m	threadid 22599648146304 -> hwthread 121 - OK[0m[1;34m
[0m[1;34m	threadid 22599446819840 -> hwthread 122 - OK[0m[1;34m
[0m[1;34m	threadid 22599245493376 -> hwthread 123 - OK[0m[1;34m
[0m[1;34m	threadid 22599044166912 -> hwthread 124 - OK[0m[1;34m
[0m[1;34m	threadid 22598842840448 -> hwthread 125 - OK[0m[1;34m
[0m[1;34m	threadid 22598641513984 -> hwthread 126 - OK[0m[1;34m
[0m[1;34m	threadid 22598440187520 -> hwthread 127 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22610816820992 -> hwthread 64 - OK[0m[1;34m
[0m[1;34m	threadid 22610810230528 -> hwthread 65 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 110, m: 110)                                                               	 0.984599  	 700       	 8.83188   	 0         	 0.207085  	 42.6485   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5500, cols: 110, reductionFactor: 37, colBlockingSize: 12)                 	 0.708265  	 600       	 115.802   	 0         	 4.18217   	 27.6895   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5500, cols: 60, reductionFactor: 37, colBlockingSize: 12)                  	 0.281931  	 700       	 100.979   	 0         	 6.62631   	 15.2392   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 110, n: 50, r: 110, r2: 110)          	 0.269282  	 600       	 296.567   	 0         	 21.7842   	 13.6139   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 110, r: 110, r2: 5500, leftOrthog: 0)      	 0.220868  	 600       	 361.573   	 0         	 39.9702   	 9.04605   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 5500, Xcols: 60, r: 60, streamingCols: 0)                   	 0.0971986 	 700       	 142.595   	 0         	 38.1289   	 3.7398    
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 110, reductionFactor: 37, colBlockingSize: 12)                 	 0.0938977 	 100       	 66.1732   	 0         	 2.44607   	 27.0529   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 110, Qr2: 60)      	 0.0904382 	 700       	 0         	 0         	 65.636    	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 110)                                                                	 0.0554632 	 100       	 4.26709   	 0         	 0.195445  	 21.8327   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 60, m: 60)                                                                  	 0.0427979 	 800       	 5.38344   	 0         	 1.62401   	 3.31492   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                 	 0.0400269 	 100       	 2.91471   	 0         	 0.150899  	 19.3157   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 5500, m: 60)                                                                       	 0.0375157 	 700       	 0         	 0         	 98.5188   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 60, k: 2500)   	 0.0369116 	 800       	 325.101   	 0         	 48.2016   	 6.7446    
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 60, reductionFactor: 37, colBlockingSize: 12)                  	 0.0332679 	 100       	 55.5685   	 0         	 3.69365   	 15.0443   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 5500, m: 60)                                                              	 0.030753  	 700       	 0         	 0         	 120.183   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5500, cols: 50, reductionFactor: 37, colBlockingSize: 12)                  	 0.0285009 	 100       	 99.0961   	 0         	 7.78924   	 12.7222   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 2500, m: 60, k: 50)	 0.0275366 	 800       	 435.784   	 0         	 64.6122   	 6.7446    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 60, n: 50, r2: 60)                                                                                         	 0.0237898 	 700       	 0         	 0         	 84.7423   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 60, m: 3000, k: 60) 	 0.0203527 	 700       	 742.9     	 0         	 100.044   	 7.42574   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r: 110, r2: 110)           	 0.0193579 	 100       	 312.534   	 0         	 23.2298   	 13.454    
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 3000, k: 60) 	 0.0191946 	 700       	 656.436   	 0         	 97.1525   	 6.75676   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 5500, leftOrthog: 0)        	 0.0177687 	 100       	 154.767   	 0         	 37.3692   	 4.14157   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 110, r: 110, r2: 2500, leftOrthog: 0)      	 0.0174147 	 100       	 347.407   	 0         	 39.0106   	 8.90544   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 60, n: 50, r2: 60)                   	 0.0172144 	 700       	 0         	 0         	 214.704   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 110, n: 50, r: 110, r2: 50)           	 0.0139563 	 100       	 433.495   	 0         	 50.7583   	 8.54037   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 110, reductionFactor: 37, colBlockingSize: 12)                   	 0.0110381 	 100       	 11.2583   	 0         	 1.27558   	 8.82601   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 60, r: 60, streamingCols: 0)                   	 0.00994703	 100       	 90.4793   	 0         	 24.2726   	 3.72763   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 60)                                                              	 0.00580053	 100       	 0         	 0         	 41.3755   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 2500, m: 60)                                                                       	 0.00554598	 100       	 0         	 0         	 43.2746   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 50, Qr2: 60)       	 0.00524371	 100       	 0         	 0         	 83.9101   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 0, n: 50, r2: 60)                    	 0.00453839	 100       	 0         	 0         	 52.8821   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                  	 0.00444595	 100       	 3.74871   	 0         	 1.35854   	 2.75937   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 3000, k: 50) 	 0.00407785	 100       	 367.841   	 0         	 59.3451   	 6.19835   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 50, reductionFactor: 37, colBlockingSize: 12)                    	 0.0036574 	 100       	 7.0202    	 0         	 1.09367   	 6.41892   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 110, r: 50, r2: 50, leftOrthog: 0)         	 0.00243478	 100       	 22.5893   	 0         	 7.06429   	 3.19767   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 60)                                                                                         	 0.00226231	 100       	 0         	 0         	 106.086   	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                   	 0.000969933	 100       	 0.5155    	 0         	 2.062     	 0.25      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 60, m: 60, fromLeft: 0)                	 0.000895887	 800       	 0         	 0         	 51.4351   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 60, n: 50, r2: 1)                                                                                          	 0.000840764	 200       	 0         	 0         	 11.4182   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50, k: 50)     	 0.000830571	 100       	 30.0998   	 0         	 7.22395   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                          	 0.000813117	 200       	 0         	 0         	 9.83868   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 60, m: 50, k: 60)   	 0.000798153	 100       	 45.1041   	 0         	 9.62222   	 4.6875    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 50, r2: 50)              	 0.000778469	 100       	 32.1143   	 0         	 7.70744   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 50, k: 60)   	 0.000771395	 100       	 38.8906   	 0         	 8.8152    	 4.41176   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 50, m: 50, k: 50)  	 0.000633821	 100       	 39.4433   	 0         	 9.4664    	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 1, r1low: 0, n: 50, r2: 50)                     	 0.000580547	 100       	 0         	 0         	 6.89005   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 60, n: 50, r2: 1)                    	 0.000568363	 100       	 0         	 0         	 15.4831   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                          	 0.000561302	 100       	 0         	 0         	 7.12629   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 50)                                                                	 0.000445011	 100       	 0         	 0         	 8.98854   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                            	 0.000431618	 100       	 1.15843   	 0         	 13.9012   	 0.0833333 
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 1, Xr2: 50, Qr1: 1, Qr2: 0)          	 0.000417721	 100       	 0         	 0         	 9.57577   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                 	 0.000391479	 100       	 0.638604  	 0         	 10.2177   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 60, n: 50, r2: 1)                                                                                 	 0.00038229	 100       	 0.784745  	 0         	 12.5559   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                 	 0.000336601	 100       	 0.742719  	 0         	 11.8835   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 0, m: 3000, k: 50)  	 6.79e-06  	 100       	 0         	 0         	 17673     	 0         
Timing statistics:
function                                                                                                                                                                                      	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                        	 4.09274   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_normalized(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                     	 4.09268   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::rightNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                            	 3.28855   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::rightNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                        	 3.28715   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double]	 2.93008   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                  	 1.16056   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                               	 1.08009   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                            	 0.842337  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_leftOrthogonalize(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&) [with T = double]                                   	 0.804066  	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]           	 0.56619   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.319324  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                           	 0.303374  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                	 0.258487  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                    	 0.107146  	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                                       	 0.0960996 	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.0472438 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double]        	 0.0452014 	 1800      
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                       	 0.0430617 	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double]          	 0.0377422 	 900       
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                              	 0.0369985 	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                	 0.0282673 	 1300      
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double]       	 0.0281704 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                        	 0.0229017 	 1000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                	 0.00747723	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                              	 0.00342383	 6400      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                         	 0.00174147	 5200      
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                       	 0.00111037	 300       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                         	 0.000969933	 100       
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                           	 0.000895887	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                                                  	 0.000431618	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
orthoX: L, orthoY: L
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 64
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->65  [0m[1;34m1->66  [0m[1;34m2->67  [0m[1;34m3->68  [0m[1;34m4->69  [0m[1;34m5->70  [0m[1;34m6->71  [0m[1;34m7->72  [0m[1;34m8->73  [0m[1;34m9->74  [0m[1;34m10->75  [0m[1;34m11->76  [0m[1;34m12->77  [0m[1;34m13->78  [0m[1;34m14->79  [0m[1;34m15->80  [0m[1;34m16->81  [0m[1;34m17->82  [0m[1;34m18->83  [0m[1;34m19->84  [0m[1;34m20->85  [0m[1;34m21->86  [0m[1;34m22->87  [0m[1;34m23->88  [0m[1;34m24->89  [0m[1;34m25->90  [0m[1;34m26->91  [0m[1;34m27->92  [0m[1;34m28->93  [0m[1;34m29->94  [0m[1;34m30->95  [0m[1;34m31->96  [0m[1;34m32->97  [0m[1;34m33->98  [0m[1;34m34->99  [0m[1;34m35->100  [0m[1;34m36->101  [0m[1;34m37->102  [0m[1;34m38->103  [0m[1;34m39->104  [0m[1;34m40->105  [0m[1;34m41->106  [0m[1;34m42->107  [0m[1;34m43->108  [0m[1;34m44->109  [0m[1;34m45->110  [0m[1;34m46->111  [0m[1;34m47->112  [0m[1;34m48->113  [0m[1;34m49->114  [0m[1;34m50->115  [0m[1;34m51->116  [0m[1;34m52->117  [0m[1;34m53->118  [0m[1;34m54->119  [0m[1;34m55->120  [0m[1;34m56->121  [0m[1;34m57->122  [0m[1;34m58->123  [0m[1;34m59->124  [0m[1;34m60->125  [0m[1;34m61->126  [0m[1;34m62->127  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22748616222592 -> hwthread 65 - OK[0m[1;34m
[0m[1;34m	threadid 22748428494848 -> hwthread 66 - OK[0m[1;34m
[0m[1;34m	threadid 22748227168384 -> hwthread 67 - OK[0m[1;34m
[0m[1;34m	threadid 22748025841920 -> hwthread 68 - OK[0m[1;34m
[0m[1;34m	threadid 22747824515456 -> hwthread 69 - OK[0m[1;34m
[0m[1;34m	threadid 22747623188992 -> hwthread 70 - OK[0m[1;34m
[0m[1;34m	threadid 22747421862528 -> hwthread 71 - OK[0m[1;34m
[0m[1;34m	threadid 22747220536064 -> hwthread 72 - OK[0m[1;34m
[0m[1;34m	threadid 22747019209600 -> hwthread 73 - OK[0m[1;34m
[0m[1;34m	threadid 22746817883136 -> hwthread 74 - OK[0m[1;34m
[0m[1;34m	threadid 22746616556672 -> hwthread 75 - OK[0m[1;34m
[0m[1;34m	threadid 22746415230208 -> hwthread 76 - OK[0m[1;34m
[0m[1;34m	threadid 22746213903744 -> hwthread 77 - OK[0m[1;34m
[0m[1;34m	threadid 22746012577280 -> hwthread 78 - OK[0m[1;34m
[0m[1;34m	threadid 22745811250816 -> hwthread 79 - OK[0m[1;34m
[0m[1;34m	threadid 22745609924352 -> hwthread 80 - OK[0m[1;34m
[0m[1;34m	threadid 22745408597888 -> hwthread 81 - OK[0m[1;34m
[0m[1;34m	threadid 22745207271424 -> hwthread 82 - OK[0m[1;34m
[0m[1;34m	threadid 22745005944960 -> hwthread 83 - OK[0m[1;34m
[0m[1;34m	threadid 22744804618496 -> hwthread 84 - OK[0m[1;34m
[0m[1;34m	threadid 22744603292032 -> hwthread 85 - OK[0m[1;34m
[0m[1;34m	threadid 22744401965568 -> hwthread 86 - OK[0m[1;34m
[0m[1;34m	threadid 22744200639104 -> hwthread 87 - OK[0m[1;34m
[0m[1;34m	threadid 22743999312640 -> hwthread 88 - OK[0m[1;34m
[0m[1;34m	threadid 22743797986176 -> hwthread 89 - OK[0m[1;34m
[0m[1;34m	threadid 22743596659712 -> hwthread 90 - OK[0m[1;34m
[0m[1;34m	threadid 22743395333248 -> hwthread 91 - OK[0m[1;34m
[0m[1;34m	threadid 22743194006784 -> hwthread 92 - OK[0m[1;34m
[0m[1;34m	threadid 22742992680320 -> hwthread 93 - OK[0m[1;34m
[0m[1;34m	threadid 22742791353856 -> hwthread 94 - OK[0m[1;34m
[0m[1;34m	threadid 22742590027392 -> hwthread 95 - OK[0m[1;34m
[0m[1;34m	threadid 22742388700928 -> hwthread 96 - OK[0m[1;34m
[0m[1;34m	threadid 22742187370368 -> hwthread 97 - OK[0m[1;34m
[0m[1;34m	threadid 22741986043904 -> hwthread 98 - OK[0m[1;34m
[0m[1;34m	threadid 22741784717440 -> hwthread 99 - OK[0m[1;34m
[0m[1;34m	threadid 22741583390976 -> hwthread 100 - OK[0m[1;34m
[0m[1;34m	threadid 22741382064512 -> hwthread 101 - OK[0m[1;34m
[0m[1;34m	threadid 22741180738048 -> hwthread 102 - OK[0m[1;34m
[0m[1;34m	threadid 22740979411584 -> hwthread 103 - OK[0m[1;34m
[0m[1;34m	threadid 22740778085120 -> hwthread 104 - OK[0m[1;34m
[0m[1;34m	threadid 22740576758656 -> hwthread 105 - OK[0m[1;34m
[0m[1;34m	threadid 22740375432192 -> hwthread 106 - OK[0m[1;34m
[0m[1;34m	threadid 22740174105728 -> hwthread 107 - OK[0m[1;34m
[0m[1;34m	threadid 22739972779264 -> hwthread 108 - OK[0m[1;34m
[0m[1;34m	threadid 22739771452800 -> hwthread 109 - OK[0m[1;34m
[0m[1;34m	threadid 22739570126336 -> hwthread 110 - OK[0m[1;34m
[0m[1;34m	threadid 22739368799872 -> hwthread 111 - OK[0m[1;34m
[0m[1;34m	threadid 22739167473408 -> hwthread 112 - OK[0m[1;34m
[0m[1;34m	threadid 22738966146944 -> hwthread 113 - OK[0m[1;34m
[0m[1;34m	threadid 22738764820480 -> hwthread 114 - OK[0m[1;34m
[0m[1;34m	threadid 22738563494016 -> hwthread 115 - OK[0m[1;34m
[0m[1;34m	threadid 22738362167552 -> hwthread 116 - OK[0m[1;34m
[0m[1;34m	threadid 22738160841088 -> hwthread 117 - OK[0m[1;34m
[0m[1;34m	threadid 22737959514624 -> hwthread 118 - OK[0m[1;34m
[0m[1;34m	threadid 22737758188160 -> hwthread 119 - OK[0m[1;34m
[0m[1;34m	threadid 22737556861696 -> hwthread 120 - OK[0m[1;34m
[0m[1;34m	threadid 22737355535232 -> hwthread 121 - OK[0m[1;34m
[0m[1;34m	threadid 22737154208768 -> hwthread 122 - OK[0m[1;34m
[0m[1;34m	threadid 22736952882304 -> hwthread 123 - OK[0m[1;34m
[0m[1;34m	threadid 22736751555840 -> hwthread 124 - OK[0m[1;34m
[0m[1;34m	threadid 22736550229376 -> hwthread 125 - OK[0m[1;34m
[0m[1;34m	threadid 22736348902912 -> hwthread 126 - OK[0m[1;34m
[0m[1;34m	threadid 22736147576448 -> hwthread 127 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22748510562048 -> hwthread 64 - OK[0m[1;34m
[0m[1;34m	threadid 22748503971584 -> hwthread 65 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 111, m: 111)                                                               	 1.02331   	 700       	 8.73166   	 0         	 0.202885  	 43.0374   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5550, cols: 111, reductionFactor: 37, colBlockingSize: 12)                 	 0.717131  	 600       	 117.518   	 0         	 4.2059    	 27.9412   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5550, cols: 61, reductionFactor: 37, colBlockingSize: 12)                  	 0.287737  	 700       	 103.197   	 0         	 6.66135   	 15.4919   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 111, n: 50, r: 111, r2: 111)          	 0.265512  	 600       	 309.056   	 0         	 22.497    	 13.7376   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 111, r: 111, r2: 5550, leftOrthog: 0)      	 0.218654  	 600       	 375.287   	 0         	 41.1125   	 9.12829   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 111, Qr2: 61)      	 0.098466  	 700       	 0         	 0         	 61.3995   	 0         
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 5550, Xcols: 61, r: 61, streamingCols: 0)                   	 0.0978949 	 700       	 147.669   	 0         	 38.8394   	 3.80205   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 111, reductionFactor: 37, colBlockingSize: 12)                 	 0.0956797 	 100       	 66.1269   	 0         	 2.42326   	 27.2884   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 111)                                                                	 0.0548568 	 100       	 4.35072   	 0         	 0.199064  	 21.8559   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 61, m: 61)                                                                  	 0.0467225 	 800       	 5.18191   	 0         	 1.53745   	 3.37046   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 5550, m: 61)                                                                       	 0.046274  	 700       	 0         	 0         	 81.9416   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                 	 0.0394056 	 100       	 2.96066   	 0         	 0.153278  	 19.3157   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 61, k: 2500)   	 0.0377694 	 800       	 323.013   	 0         	 47.539    	 6.79469   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 61, reductionFactor: 37, colBlockingSize: 12)                  	 0.0356874 	 100       	 53.5422   	 0         	 3.50199   	 15.2891   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5550, cols: 50, reductionFactor: 37, colBlockingSize: 12)                  	 0.0299797 	 100       	 95.0645   	 0         	 7.47173   	 12.7232   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 2500, m: 61, k: 50)	 0.0274879 	 800       	 443.831   	 0         	 65.3203   	 6.79469   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 5550, m: 61)                                                              	 0.0255643 	 700       	 0         	 0         	 148.323   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 61, n: 50, r2: 61)                                                                                         	 0.0235685 	 700       	 0         	 0         	 88.413    	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 61, m: 3050, k: 61) 	 0.0218427 	 700       	 727.414   	 0         	 96.3526   	 7.5495    
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 3050, k: 61) 	 0.0209435 	 700       	 621.84    	 0         	 91.3391   	 6.80804   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 61, n: 50, r2: 61)                   	 0.0204137 	 700       	 0         	 0         	 185.746   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r: 111, r2: 111)           	 0.0197148 	 100       	 312.481   	 0         	 23.0211   	 13.5737   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 111, r: 111, r2: 2500, leftOrthog: 0)      	 0.0175097 	 100       	 351.833   	 0         	 39.1619   	 8.98407   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 5550, leftOrthog: 0)        	 0.0157658 	 100       	 176.014   	 0         	 42.497    	 4.14179   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 111, n: 50, r: 111, r2: 50)           	 0.0147606 	 100       	 417.36    	 0         	 48.7296   	 8.56481   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 111, reductionFactor: 37, colBlockingSize: 12)                   	 0.0101916 	 100       	 12.4161   	 0         	 1.4028    	 8.85093   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 61, r: 61, streamingCols: 0)                   	 0.00961549	 100       	 96.7449   	 0         	 25.5305   	 3.78938   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 50, Qr2: 61)       	 0.00571617	 100       	 0         	 0         	 77.6744   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 2500, m: 61)                                                                       	 0.00567891	 100       	 0         	 0         	 42.966    	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 61)                                                              	 0.00544675	 100       	 0         	 0         	 44.7973   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 0, n: 50, r2: 61)                    	 0.00483366	 100       	 0         	 0         	 50.4794   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 3050, k: 50) 	 0.00447493	 100       	 340.788   	 0         	 54.973    	 6.19919   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                  	 0.00436817	 100       	 3.81547   	 0         	 1.38273   	 2.75937   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 50, reductionFactor: 37, colBlockingSize: 12)                    	 0.00349657	 100       	 7.3431    	 0         	 1.14398   	 6.41892   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 111, r: 50, r2: 50, leftOrthog: 0)         	 0.00250201	 100       	 22.1822   	 0         	 6.92243   	 3.20439   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 61)                                                                                         	 0.00243526	 100       	 0         	 0         	 100.194   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 61, m: 61, fromLeft: 0)                	 0.00133971	 800       	 0         	 0         	 35.5517   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50, k: 50)     	 0.000868568	 100       	 28.783    	 0         	 6.90792   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 61, m: 50, k: 61)   	 0.000833672	 100       	 44.6339   	 0         	 9.42433   	 4.73602   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                   	 0.000830348	 100       	 0.602157  	 0         	 2.40863   	 0.25      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                          	 0.000829701	 200       	 0         	 0         	 9.64203   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 50, m: 50, k: 50)  	 0.000825401	 100       	 30.2883   	 0         	 7.26919   	 4.16667   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 50, r2: 50)              	 0.000815492	 100       	 30.6563   	 0         	 7.35752   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 61, n: 50, r2: 1)                                                                                          	 0.000790678	 200       	 0         	 0         	 12.3438   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 50, k: 61)   	 0.000783095	 100       	 38.948    	 0         	 8.78565   	 4.43314   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 1, r1low: 0, n: 50, r2: 50)                     	 0.000564336	 100       	 0         	 0         	 7.08798   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 61, n: 50, r2: 1)                    	 0.000539668	 100       	 0         	 0         	 16.4546   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                          	 0.000501735	 100       	 0         	 0         	 7.97234   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 1, Xr2: 50, Qr1: 1, Qr2: 0)          	 0.000439277	 100       	 0         	 0         	 9.10587   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 50)                                                                	 0.00043033	 100       	 0         	 0         	 9.29519   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                            	 0.000409777	 100       	 1.22018   	 0         	 14.6421   	 0.0833333 
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                 	 0.000404724	 100       	 0.617705  	 0         	 9.88328   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 61, n: 50, r2: 1)                                                                                 	 0.000363056	 100       	 0.840091  	 0         	 13.4415   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                 	 0.000353411	 100       	 0.707392  	 0         	 11.3183   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 0, m: 3050, k: 50)  	 7.33e-06  	 100       	 0         	 0         	 16643.9   	 0         
Timing statistics:
function                                                                                                                                                                                      	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                        	 4.18442   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_normalized(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                     	 4.18436   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::rightNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                            	 3.34268   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::rightNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                        	 3.34141   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double]	 2.97882   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                  	 1.1799    	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                               	 1.11757   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                            	 0.853585  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_leftOrthogonalize(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&) [with T = double]                                   	 0.841603  	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]           	 0.58266   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.327352  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                           	 0.300803  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                	 0.254431  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                    	 0.10751   	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                                       	 0.104621  	 900       
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                       	 0.0519529 	 800       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.0510907 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double]        	 0.0488852 	 1800      
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double]          	 0.038638  	 900       
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                              	 0.0314414 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double]       	 0.0283133 	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                	 0.0281259 	 1300      
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                        	 0.0263513 	 1000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                	 0.00501065	 1800      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                         	 0.00455592	 5200      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                              	 0.00370996	 6400      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                           	 0.00133971	 800       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                       	 0.00112119	 300       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                         	 0.000830348	 100       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                                                  	 0.000409777	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
orthoX: L, orthoY: L
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 64
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->65  [0m[1;34m1->66  [0m[1;34m2->67  [0m[1;34m3->68  [0m[1;34m4->69  [0m[1;34m5->70  [0m[1;34m6->71  [0m[1;34m7->72  [0m[1;34m8->73  [0m[1;34m9->74  [0m[1;34m10->75  [0m[1;34m11->76  [0m[1;34m12->77  [0m[1;34m13->78  [0m[1;34m14->79  [0m[1;34m15->80  [0m[1;34m16->81  [0m[1;34m17->82  [0m[1;34m18->83  [0m[1;34m19->84  [0m[1;34m20->85  [0m[1;34m21->86  [0m[1;34m22->87  [0m[1;34m23->88  [0m[1;34m24->89  [0m[1;34m25->90  [0m[1;34m26->91  [0m[1;34m27->92  [0m[1;34m28->93  [0m[1;34m29->94  [0m[1;34m30->95  [0m[1;34m31->96  [0m[1;34m32->97  [0m[1;34m33->98  [0m[1;34m34->99  [0m[1;34m35->100  [0m[1;34m36->101  [0m[1;34m37->102  [0m[1;34m38->103  [0m[1;34m39->104  [0m[1;34m40->105  [0m[1;34m41->106  [0m[1;34m42->107  [0m[1;34m43->108  [0m[1;34m44->109  [0m[1;34m45->110  [0m[1;34m46->111  [0m[1;34m47->112  [0m[1;34m48->113  [0m[1;34m49->114  [0m[1;34m50->115  [0m[1;34m51->116  [0m[1;34m52->117  [0m[1;34m53->118  [0m[1;34m54->119  [0m[1;34m55->120  [0m[1;34m56->121  [0m[1;34m57->122  [0m[1;34m58->123  [0m[1;34m59->124  [0m[1;34m60->125  [0m[1;34m61->126  [0m[1;34m62->127  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23276902328192 -> hwthread 65 - OK[0m[1;34m
[0m[1;34m	threadid 23276709472256 -> hwthread 66 - OK[0m[1;34m
[0m[1;34m	threadid 23276508145792 -> hwthread 67 - OK[0m[1;34m
[0m[1;34m	threadid 23276306819328 -> hwthread 68 - OK[0m[1;34m
[0m[1;34m	threadid 23276105492864 -> hwthread 69 - OK[0m[1;34m
[0m[1;34m	threadid 23275904166400 -> hwthread 70 - OK[0m[1;34m
[0m[1;34m	threadid 23275702839936 -> hwthread 71 - OK[0m[1;34m
[0m[1;34m	threadid 23275501513472 -> hwthread 72 - OK[0m[1;34m
[0m[1;34m	threadid 23275300187008 -> hwthread 73 - OK[0m[1;34m
[0m[1;34m	threadid 23275098860544 -> hwthread 74 - OK[0m[1;34m
[0m[1;34m	threadid 23274897534080 -> hwthread 75 - OK[0m[1;34m
[0m[1;34m	threadid 23274696207616 -> hwthread 76 - OK[0m[1;34m
[0m[1;34m	threadid 23274494881152 -> hwthread 77 - OK[0m[1;34m
[0m[1;34m	threadid 23274293554688 -> hwthread 78 - OK[0m[1;34m
[0m[1;34m	threadid 23274092228224 -> hwthread 79 - OK[0m[1;34m
[0m[1;34m	threadid 23273890901760 -> hwthread 80 - OK[0m[1;34m
[0m[1;34m	threadid 23273689575296 -> hwthread 81 - OK[0m[1;34m
[0m[1;34m	threadid 23273488248832 -> hwthread 82 - OK[0m[1;34m
[0m[1;34m	threadid 23273286922368 -> hwthread 83 - OK[0m[1;34m
[0m[1;34m	threadid 23273085595904 -> hwthread 84 - OK[0m[1;34m
[0m[1;34m	threadid 23272884269440 -> hwthread 85 - OK[0m[1;34m
[0m[1;34m	threadid 23272682942976 -> hwthread 86 - OK[0m[1;34m
[0m[1;34m	threadid 23272481616512 -> hwthread 87 - OK[0m[1;34m
[0m[1;34m	threadid 23272280290048 -> hwthread 88 - OK[0m[1;34m
[0m[1;34m	threadid 23272078963584 -> hwthread 89 - OK[0m[1;34m
[0m[1;34m	threadid 23271877637120 -> hwthread 90 - OK[0m[1;34m
[0m[1;34m	threadid 23271676310656 -> hwthread 91 - OK[0m[1;34m
[0m[1;34m	threadid 23271474984192 -> hwthread 92 - OK[0m[1;34m
[0m[1;34m	threadid 23271273657728 -> hwthread 93 - OK[0m[1;34m
[0m[1;34m	threadid 23271072331264 -> hwthread 94 - OK[0m[1;34m
[0m[1;34m	threadid 23270871004800 -> hwthread 95 - OK[0m[1;34m
[0m[1;34m	threadid 23270669678336 -> hwthread 96 - OK[0m[1;34m
[0m[1;34m	threadid 23270468347776 -> hwthread 97 - OK[0m[1;34m
[0m[1;34m	threadid 23270267021312 -> hwthread 98 - OK[0m[1;34m
[0m[1;34m	threadid 23270065694848 -> hwthread 99 - OK[0m[1;34m
[0m[1;34m	threadid 23269864368384 -> hwthread 100 - OK[0m[1;34m
[0m[1;34m	threadid 23269663041920 -> hwthread 101 - OK[0m[1;34m
[0m[1;34m	threadid 23269461715456 -> hwthread 102 - OK[0m[1;34m
[0m[1;34m	threadid 23269260388992 -> hwthread 103 - OK[0m[1;34m
[0m[1;34m	threadid 23269059062528 -> hwthread 104 - OK[0m[1;34m
[0m[1;34m	threadid 23268857736064 -> hwthread 105 - OK[0m[1;34m
[0m[1;34m	threadid 23268656409600 -> hwthread 106 - OK[0m[1;34m
[0m[1;34m	threadid 23268455083136 -> hwthread 107 - OK[0m[1;34m
[0m[1;34m	threadid 23268253756672 -> hwthread 108 - OK[0m[1;34m
[0m[1;34m	threadid 23268052430208 -> hwthread 109 - OK[0m[1;34m
[0m[1;34m	threadid 23267851103744 -> hwthread 110 - OK[0m[1;34m
[0m[1;34m	threadid 23267649777280 -> hwthread 111 - OK[0m[1;34m
[0m[1;34m	threadid 23267448450816 -> hwthread 112 - OK[0m[1;34m
[0m[1;34m	threadid 23267247124352 -> hwthread 113 - OK[0m[1;34m
[0m[1;34m	threadid 23267045797888 -> hwthread 114 - OK[0m[1;34m
[0m[1;34m	threadid 23266844471424 -> hwthread 115 - OK[0m[1;34m
[0m[1;34m	threadid 23266643144960 -> hwthread 116 - OK[0m[1;34m
[0m[1;34m	threadid 23266441818496 -> hwthread 117 - OK[0m[1;34m
[0m[1;34m	threadid 23266240492032 -> hwthread 118 - OK[0m[1;34m
[0m[1;34m	threadid 23266039165568 -> hwthread 119 - OK[0m[1;34m
[0m[1;34m	threadid 23265837839104 -> hwthread 120 - OK[0m[1;34m
[0m[1;34m	threadid 23265636512640 -> hwthread 121 - OK[0m[1;34m
[0m[1;34m	threadid 23265435186176 -> hwthread 122 - OK[0m[1;34m
[0m[1;34m	threadid 23265233859712 -> hwthread 123 - OK[0m[1;34m
[0m[1;34m	threadid 23265032533248 -> hwthread 124 - OK[0m[1;34m
[0m[1;34m	threadid 23264831206784 -> hwthread 125 - OK[0m[1;34m
[0m[1;34m	threadid 23264629880320 -> hwthread 126 - OK[0m[1;34m
[0m[1;34m	threadid 23264428553856 -> hwthread 127 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23276796667648 -> hwthread 64 - OK[0m[1;34m
[0m[1;34m	threadid 23276790077184 -> hwthread 65 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 112, m: 112)                                                               	 1.02731   	 700       	 8.93487   	 0         	 0.205748  	 43.4263   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5600, cols: 112, reductionFactor: 37, colBlockingSize: 12)                 	 0.72698   	 600       	 119.087   	 0         	 4.22401   	 28.1929   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5600, cols: 62, reductionFactor: 37, colBlockingSize: 12)                  	 0.296223  	 700       	 104.487   	 0         	 6.63638   	 15.7446   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 112, n: 50, r: 112, r2: 112)          	 0.2887    	 600       	 291.984   	 0         	 21.0645   	 13.8614   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 112, r: 112, r2: 5600, leftOrthog: 0)      	 0.239095  	 600       	 352.561   	 0         	 38.278    	 9.21053   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 5600, Xcols: 62, r: 62, streamingCols: 0)                   	 0.100744  	 700       	 149.572   	 0         	 38.7062   	 3.8643    
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 112, reductionFactor: 37, colBlockingSize: 12)                 	 0.0993932 	 100       	 64.8084   	 0         	 2.35464   	 27.5237   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 112, Qr2: 62)      	 0.0867305 	 700       	 0         	 0         	 70.9858   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 112)                                                                	 0.0548031 	 100       	 4.39148   	 0         	 0.200719  	 21.8788   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 62, m: 62)                                                                  	 0.0464253 	 800       	 5.47581   	 0         	 1.5983    	 3.42602   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                 	 0.0406436 	 100       	 2.87048   	 0         	 0.148609  	 19.3157   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 62, k: 2500)   	 0.038811  	 800       	 319.497   	 0         	 46.6836   	 6.84387   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 5600, m: 62)                                                                       	 0.0375427 	 700       	 0         	 0         	 103.579   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 62, reductionFactor: 37, colBlockingSize: 12)                  	 0.0343054 	 100       	 57.5404   	 0         	 3.70423   	 15.5337   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5600, cols: 50, reductionFactor: 37, colBlockingSize: 12)                  	 0.0300202 	 100       	 95.7915   	 0         	 7.52827   	 12.7242   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 2500, m: 62, k: 50)	 0.0273218 	 800       	 453.85    	 0         	 66.3149   	 6.84387   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 62, n: 50, r2: 62)                                                                                         	 0.0258081 	 700       	 0         	 0         	 83.4094   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 62, m: 3100, k: 62) 	 0.0241856 	 700       	 689.788   	 0         	 89.8949   	 7.67327   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 5600, m: 62)                                                              	 0.0237093 	 700       	 0         	 0         	 164.014   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 3100, k: 62) 	 0.0207104 	 700       	 649.625   	 0         	 94.7195   	 6.85841   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 62, n: 50, r2: 62)                   	 0.0200536 	 700       	 0         	 0         	 193.912   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r: 112, r2: 112)           	 0.0195517 	 100       	 320.79    	 0         	 23.4268   	 13.6933   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 5600, leftOrthog: 0)        	 0.0179687 	 100       	 155.827   	 0         	 37.621    	 4.14201   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 112, r: 112, r2: 2500, leftOrthog: 0)      	 0.01748   	 100       	 358.809   	 0         	 39.592    	 9.06266   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 112, n: 50, r: 112, r2: 50)           	 0.0156334 	 100       	 401.192   	 0         	 46.7102   	 8.58896   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 112, reductionFactor: 37, colBlockingSize: 12)                   	 0.0103059 	 100       	 12.5006   	 0         	 1.40843   	 8.87554   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 62, r: 62, streamingCols: 0)                   	 0.00972091	 100       	 98.859    	 0         	 25.6702   	 3.85112   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 50, Qr2: 62)       	 0.00566647	 100       	 0         	 0         	 79.0616   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 2500, m: 62)                                                                       	 0.00542542	 100       	 0         	 0         	 45.7108   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 0, n: 50, r2: 62)                    	 0.00488013	 100       	 0         	 0         	 50.8183   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                  	 0.00440419	 100       	 3.78426   	 0         	 1.37142   	 2.75937   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 62)                                                              	 0.00428431	 100       	 0         	 0         	 57.8857   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 3100, k: 50) 	 0.00424928	 100       	 364.768   	 0         	 58.8335   	 6.2       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 50, reductionFactor: 37, colBlockingSize: 12)                    	 0.00400087	 100       	 6.41752   	 0         	 0.999782  	 6.41892   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 112, r: 50, r2: 50, leftOrthog: 0)         	 0.00245809	 100       	 22.7819   	 0         	 7.09493   	 3.21101   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 62)                                                                                         	 0.00233653	 100       	 0         	 0         	 106.14    	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 62, m: 62, fromLeft: 0)                	 0.00117744	 800       	 0         	 0         	 41.7881   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50, k: 50)     	 0.000822666	 100       	 30.389    	 0         	 7.29336   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                          	 0.00081637	 200       	 0         	 0         	 9.79948   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 62, n: 50, r2: 1)                                                                                          	 0.000805457	 200       	 0         	 0         	 12.316    	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                   	 0.000805316	 100       	 0.620874  	 0         	 2.4835    	 0.25      
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 62, m: 50, k: 62)   	 0.0007964 	 100       	 48.2672   	 0         	 10.0894   	 4.78395   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 50, k: 62)   	 0.000780898	 100       	 39.6979   	 0         	 8.91282   	 4.45402   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 50, r2: 50)              	 0.000775592	 100       	 32.2334   	 0         	 7.73603   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 50, m: 50, k: 50)  	 0.000602778	 100       	 41.4746   	 0         	 9.95391   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 1, r1low: 0, n: 50, r2: 50)                     	 0.000539875	 100       	 0         	 0         	 7.40912   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 62, n: 50, r2: 1)                    	 0.000513242	 100       	 0         	 0         	 17.4577   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                          	 0.000509122	 100       	 0         	 0         	 7.85666   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 50)                                                                	 0.000445104	 100       	 0         	 0         	 8.98666   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 1, Xr2: 50, Qr1: 1, Qr2: 0)          	 0.000425992	 100       	 0         	 0         	 9.38985   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                            	 0.000414752	 100       	 1.20554   	 0         	 14.4665   	 0.0833333 
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 62, n: 50, r2: 1)                                                                                 	 0.000391552	 100       	 0.791721  	 0         	 12.6675   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                 	 0.000387043	 100       	 0.645923  	 0         	 10.3348   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                 	 0.000330544	 100       	 0.756329  	 0         	 12.1013   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 0, m: 3100, k: 50)  	 7.34e-06  	 100       	 0         	 0         	 16893.7   	 0         
Timing statistics:
function                                                                                                                                                                                      	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                        	 4.34043   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_normalized(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                     	 4.34037   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::rightNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                            	 3.51208   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::rightNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                        	 3.51085   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double]	 3.12804   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                  	 1.20123   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                               	 1.12275   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                            	 0.867306  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_leftOrthogonalize(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&) [with T = double]                                   	 0.82822   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]           	 0.580968  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.335006  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                           	 0.324661  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                	 0.277002  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                    	 0.110465  	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                                       	 0.092823  	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.0508295 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double]        	 0.05073   	 1800      
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                       	 0.0429681 	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double]          	 0.0396337 	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                	 0.0302756 	 1300      
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                              	 0.0284387 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double]       	 0.0279246 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                        	 0.0259869 	 1000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                	 0.00468886	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                              	 0.0038685 	 6400      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                         	 0.00156852	 5200      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                           	 0.00117744	 800       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                       	 0.00110914	 300       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                         	 0.000805316	 100       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                                                  	 0.000414752	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
orthoX: L, orthoY: L
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 64
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->65  [0m[1;34m1->66  [0m[1;34m2->67  [0m[1;34m3->68  [0m[1;34m4->69  [0m[1;34m5->70  [0m[1;34m6->71  [0m[1;34m7->72  [0m[1;34m8->73  [0m[1;34m9->74  [0m[1;34m10->75  [0m[1;34m11->76  [0m[1;34m12->77  [0m[1;34m13->78  [0m[1;34m14->79  [0m[1;34m15->80  [0m[1;34m16->81  [0m[1;34m17->82  [0m[1;34m18->83  [0m[1;34m19->84  [0m[1;34m20->85  [0m[1;34m21->86  [0m[1;34m22->87  [0m[1;34m23->88  [0m[1;34m24->89  [0m[1;34m25->90  [0m[1;34m26->91  [0m[1;34m27->92  [0m[1;34m28->93  [0m[1;34m29->94  [0m[1;34m30->95  [0m[1;34m31->96  [0m[1;34m32->97  [0m[1;34m33->98  [0m[1;34m34->99  [0m[1;34m35->100  [0m[1;34m36->101  [0m[1;34m37->102  [0m[1;34m38->103  [0m[1;34m39->104  [0m[1;34m40->105  [0m[1;34m41->106  [0m[1;34m42->107  [0m[1;34m43->108  [0m[1;34m44->109  [0m[1;34m45->110  [0m[1;34m46->111  [0m[1;34m47->112  [0m[1;34m48->113  [0m[1;34m49->114  [0m[1;34m50->115  [0m[1;34m51->116  [0m[1;34m52->117  [0m[1;34m53->118  [0m[1;34m54->119  [0m[1;34m55->120  [0m[1;34m56->121  [0m[1;34m57->122  [0m[1;34m58->123  [0m[1;34m59->124  [0m[1;34m60->125  [0m[1;34m61->126  [0m[1;34m62->127  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22875473454976 -> hwthread 65 - OK[0m[1;34m
[0m[1;34m	threadid 22875264247808 -> hwthread 66 - OK[0m[1;34m
[0m[1;34m	threadid 22875062921344 -> hwthread 67 - OK[0m[1;34m
[0m[1;34m	threadid 22874861594880 -> hwthread 68 - OK[0m[1;34m
[0m[1;34m	threadid 22874660268416 -> hwthread 69 - OK[0m[1;34m
[0m[1;34m	threadid 22874458941952 -> hwthread 70 - OK[0m[1;34m
[0m[1;34m	threadid 22874257615488 -> hwthread 71 - OK[0m[1;34m
[0m[1;34m	threadid 22874056289024 -> hwthread 72 - OK[0m[1;34m
[0m[1;34m	threadid 22873854962560 -> hwthread 73 - OK[0m[1;34m
[0m[1;34m	threadid 22873653636096 -> hwthread 74 - OK[0m[1;34m
[0m[1;34m	threadid 22873452309632 -> hwthread 75 - OK[0m[1;34m
[0m[1;34m	threadid 22873250983168 -> hwthread 76 - OK[0m[1;34m
[0m[1;34m	threadid 22873049656704 -> hwthread 77 - OK[0m[1;34m
[0m[1;34m	threadid 22872848330240 -> hwthread 78 - OK[0m[1;34m
[0m[1;34m	threadid 22872647003776 -> hwthread 79 - OK[0m[1;34m
[0m[1;34m	threadid 22872445677312 -> hwthread 80 - OK[0m[1;34m
[0m[1;34m	threadid 22872244350848 -> hwthread 81 - OK[0m[1;34m
[0m[1;34m	threadid 22872043024384 -> hwthread 82 - OK[0m[1;34m
[0m[1;34m	threadid 22871841697920 -> hwthread 83 - OK[0m[1;34m
[0m[1;34m	threadid 22871640371456 -> hwthread 84 - OK[0m[1;34m
[0m[1;34m	threadid 22871439044992 -> hwthread 85 - OK[0m[1;34m
[0m[1;34m	threadid 22871237718528 -> hwthread 86 - OK[0m[1;34m
[0m[1;34m	threadid 22871036392064 -> hwthread 87 - OK[0m[1;34m
[0m[1;34m	threadid 22870835065600 -> hwthread 88 - OK[0m[1;34m
[0m[1;34m	threadid 22870633739136 -> hwthread 89 - OK[0m[1;34m
[0m[1;34m	threadid 22870432412672 -> hwthread 90 - OK[0m[1;34m
[0m[1;34m	threadid 22870231086208 -> hwthread 91 - OK[0m[1;34m
[0m[1;34m	threadid 22870029759744 -> hwthread 92 - OK[0m[1;34m
[0m[1;34m	threadid 22869828433280 -> hwthread 93 - OK[0m[1;34m
[0m[1;34m	threadid 22869627106816 -> hwthread 94 - OK[0m[1;34m
[0m[1;34m	threadid 22869425780352 -> hwthread 95 - OK[0m[1;34m
[0m[1;34m	threadid 22869224453888 -> hwthread 96 - OK[0m[1;34m
[0m[1;34m	threadid 22869023123328 -> hwthread 97 - OK[0m[1;34m
[0m[1;34m	threadid 22868821796864 -> hwthread 98 - OK[0m[1;34m
[0m[1;34m	threadid 22868620470400 -> hwthread 99 - OK[0m[1;34m
[0m[1;34m	threadid 22868419143936 -> hwthread 100 - OK[0m[1;34m
[0m[1;34m	threadid 22868217817472 -> hwthread 101 - OK[0m[1;34m
[0m[1;34m	threadid 22868016491008 -> hwthread 102 - OK[0m[1;34m
[0m[1;34m	threadid 22867815164544 -> hwthread 103 - OK[0m[1;34m
[0m[1;34m	threadid 22867613838080 -> hwthread 104 - OK[0m[1;34m
[0m[1;34m	threadid 22867412511616 -> hwthread 105 - OK[0m[1;34m
[0m[1;34m	threadid 22867211185152 -> hwthread 106 - OK[0m[1;34m
[0m[1;34m	threadid 22867009858688 -> hwthread 107 - OK[0m[1;34m
[0m[1;34m	threadid 22866808532224 -> hwthread 108 - OK[0m[1;34m
[0m[1;34m	threadid 22866607205760 -> hwthread 109 - OK[0m[1;34m
[0m[1;34m	threadid 22866405879296 -> hwthread 110 - OK[0m[1;34m
[0m[1;34m	threadid 22866204552832 -> hwthread 111 - OK[0m[1;34m
[0m[1;34m	threadid 22866003226368 -> hwthread 112 - OK[0m[1;34m
[0m[1;34m	threadid 22865801899904 -> hwthread 113 - OK[0m[1;34m
[0m[1;34m	threadid 22865600573440 -> hwthread 114 - OK[0m[1;34m
[0m[1;34m	threadid 22865399246976 -> hwthread 115 - OK[0m[1;34m
[0m[1;34m	threadid 22865197920512 -> hwthread 116 - OK[0m[1;34m
[0m[1;34m	threadid 22864996594048 -> hwthread 117 - OK[0m[1;34m
[0m[1;34m	threadid 22864795267584 -> hwthread 118 - OK[0m[1;34m
[0m[1;34m	threadid 22864593941120 -> hwthread 119 - OK[0m[1;34m
[0m[1;34m	threadid 22864392614656 -> hwthread 120 - OK[0m[1;34m
[0m[1;34m	threadid 22864191288192 -> hwthread 121 - OK[0m[1;34m
[0m[1;34m	threadid 22863989961728 -> hwthread 122 - OK[0m[1;34m
[0m[1;34m	threadid 22863788635264 -> hwthread 123 - OK[0m[1;34m
[0m[1;34m	threadid 22863587308800 -> hwthread 124 - OK[0m[1;34m
[0m[1;34m	threadid 22863385982336 -> hwthread 125 - OK[0m[1;34m
[0m[1;34m	threadid 22863184655872 -> hwthread 126 - OK[0m[1;34m
[0m[1;34m	threadid 22862983329408 -> hwthread 127 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22875367794432 -> hwthread 64 - OK[0m[1;34m
[0m[1;34m	threadid 22875361203968 -> hwthread 65 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 113, m: 113)                                                               	 1.07469   	 700       	 8.77173   	 0         	 0.200198  	 43.8152   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5650, cols: 113, reductionFactor: 37, colBlockingSize: 12)                 	 0.737694  	 600       	 120.529   	 0         	 4.23733   	 28.4446   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5650, cols: 63, reductionFactor: 37, colBlockingSize: 12)                  	 0.296645  	 700       	 108.693   	 0         	 6.79446   	 15.9973   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 113, n: 50, r: 113, r2: 113)          	 0.296539  	 600       	 291.948   	 0         	 20.8756   	 13.9851   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 113, r: 113, r2: 5650, leftOrthog: 0)      	 0.224724  	 600       	 385.246   	 0         	 41.4565   	 9.29276   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 5650, Xcols: 63, r: 63, streamingCols: 0)                   	 0.100192  	 700       	 156.673   	 0         	 39.901    	 3.92655   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 113, reductionFactor: 37, colBlockingSize: 12)                 	 0.0973896 	 100       	 67.3281   	 0         	 2.42547   	 27.7588   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 113, Qr2: 63)      	 0.0881751 	 700       	 0         	 0         	 71.0931   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 113)                                                                	 0.0565432 	 100       	 4.29171   	 0         	 0.195956  	 21.9013   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 63, m: 63)                                                                  	 0.049286  	 800       	 5.41161   	 0         	 1.55436   	 3.48158   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 5650, m: 63)                                                                       	 0.0440631 	 700       	 0         	 0         	 90.4756   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                 	 0.0411417 	 100       	 2.83573   	 0         	 0.14681   	 19.3157   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 63, k: 2500)   	 0.0389231 	 800       	 323.715   	 0         	 46.9685   	 6.89218   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 63, reductionFactor: 37, colBlockingSize: 12)                  	 0.0355925 	 100       	 57.263    	 0         	 3.62928   	 15.7781   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 5650, m: 63)                                                              	 0.0315639 	 700       	 0         	 0         	 126.304   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5650, cols: 50, reductionFactor: 37, colBlockingSize: 12)                  	 0.0290703 	 100       	 99.8048   	 0         	 7.84306   	 12.7252   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 2500, m: 63, k: 50)	 0.0282289 	 800       	 446.352   	 0         	 64.7621   	 6.89218   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 63, n: 50, r2: 63)                                                                                         	 0.0256738 	 700       	 0         	 0         	 86.5723   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 63, m: 3150, k: 63) 	 0.023507  	 700       	 744.598   	 0         	 95.4976   	 7.79703   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 3150, k: 63) 	 0.0209319 	 700       	 663.651   	 0         	 96.0713   	 6.90789   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r: 113, r2: 113)           	 0.0206357 	 100       	 309.391   	 0         	 22.3988   	 13.8128   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 63, n: 50, r2: 63)                   	 0.0201786 	 700       	 0         	 0         	 197.567   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 113, r: 113, r2: 2500, leftOrthog: 0)      	 0.0178026 	 100       	 358.628   	 0         	 39.2319   	 9.14121   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 5650, leftOrthog: 0)        	 0.0162453 	 100       	 173.897   	 0         	 41.9814   	 4.14223   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 113, n: 50, r: 113, r2: 50)           	 0.0153077 	 100       	 417.078   	 0         	 48.4253   	 8.6128    
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 113, reductionFactor: 37, colBlockingSize: 12)                   	 0.0106922 	 100       	 12.2651   	 0         	 1.37812   	 8.89985   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 63, r: 63, streamingCols: 0)                   	 0.00986845	 100       	 100.548   	 0         	 25.6968   	 3.91285   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 2500, m: 63)                                                                       	 0.00597524	 100       	 0         	 0         	 42.174    	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 63)                                                              	 0.00576051	 100       	 0         	 0         	 43.7462   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 50, Qr2: 63)       	 0.00556557	 100       	 0         	 0         	 81.2136   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 0, n: 50, r2: 63)                    	 0.00483619	 100       	 0         	 0         	 52.1071   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 3150, k: 50) 	 0.00440592	 100       	 357.474   	 0         	 57.6497   	 6.20079   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                  	 0.0042968 	 100       	 3.87884   	 0         	 1.4057    	 2.75937   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 50, reductionFactor: 37, colBlockingSize: 12)                    	 0.00355239	 100       	 7.22771   	 0         	 1.126     	 6.41892   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 113, r: 50, r2: 50, leftOrthog: 0)         	 0.00265751	 100       	 21.2605   	 0         	 6.60768   	 3.21754   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 63)                                                                                         	 0.00222805	 100       	 0         	 0         	 113.103   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 63, m: 63, fromLeft: 0)                	 0.00146586	 800       	 0         	 0         	 34.6576   	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                   	 0.000936223	 100       	 0.534061  	 0         	 2.13624   	 0.25      
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50, k: 50)     	 0.000824324	 100       	 30.3279   	 0         	 7.27869   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 63, n: 50, r2: 1)                                                                                          	 0.00081676	 200       	 0         	 0         	 12.3414   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 63, m: 50, k: 63)   	 0.000810633	 100       	 48.9617   	 0         	 10.1343   	 4.83129   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 50, r2: 50)              	 0.000799403	 100       	 31.2733   	 0         	 7.5056    	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                          	 0.000781843	 200       	 0         	 0         	 10.2322   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 50, k: 63)   	 0.000767721	 100       	 41.0305   	 0         	 9.17      	 4.47443   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 50, m: 50, k: 50)  	 0.000609659	 100       	 41.0065   	 0         	 9.84157   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 63, n: 50, r2: 1)                    	 0.000531962	 100       	 0         	 0         	 16.9937   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                          	 0.000516558	 100       	 0         	 0         	 7.74356   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 1, r1low: 0, n: 50, r2: 50)                     	 0.000513799	 100       	 0         	 0         	 7.78515   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 50)                                                                	 0.000432675	 100       	 0         	 0         	 9.24481   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                 	 0.000429555	 100       	 0.581998  	 0         	 9.31196   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 1, Xr2: 50, Qr1: 1, Qr2: 0)          	 0.000416781	 100       	 0         	 0         	 9.59737   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                            	 0.000408191	 100       	 1.22492   	 0         	 14.699    	 0.0833333 
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 63, n: 50, r2: 1)                                                                                 	 0.000373253	 100       	 0.843932  	 0         	 13.5029   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                 	 0.00034323	 100       	 0.728375  	 0         	 11.654    	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 0, m: 3150, k: 50)  	 6.34e-06  	 100       	 0         	 0         	 19873.8   	 0         
Timing statistics:
function                                                                                                                                                                                      	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                        	 4.35758   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_normalized(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                     	 4.35753   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::rightNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                            	 3.5061    	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::rightNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                        	 3.50473   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double]	 3.11872   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                  	 1.21064   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                               	 1.17238   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                            	 0.875477  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_leftOrthogonalize(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&) [with T = double]                                   	 0.851367  	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]           	 0.601609  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.336313  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                           	 0.333281  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                	 0.261429  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                    	 0.11006   	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                                       	 0.0941574 	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.0535828 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double]        	 0.0504296 	 1800      
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                       	 0.0500384 	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double]          	 0.0397474 	 900       
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                              	 0.0377571 	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                	 0.030017  	 1300      
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double]       	 0.0288385 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                        	 0.0260606 	 1000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                	 0.00775774	 1800      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                         	 0.00456523	 5200      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                              	 0.00362931	 6400      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                           	 0.00146586	 800       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                       	 0.00114604	 300       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                         	 0.000936223	 100       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                                                  	 0.000408191	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
orthoX: L, orthoY: L
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 64
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->65  [0m[1;34m1->66  [0m[1;34m2->67  [0m[1;34m3->68  [0m[1;34m4->69  [0m[1;34m5->70  [0m[1;34m6->71  [0m[1;34m7->72  [0m[1;34m8->73  [0m[1;34m9->74  [0m[1;34m10->75  [0m[1;34m11->76  [0m[1;34m12->77  [0m[1;34m13->78  [0m[1;34m14->79  [0m[1;34m15->80  [0m[1;34m16->81  [0m[1;34m17->82  [0m[1;34m18->83  [0m[1;34m19->84  [0m[1;34m20->85  [0m[1;34m21->86  [0m[1;34m22->87  [0m[1;34m23->88  [0m[1;34m24->89  [0m[1;34m25->90  [0m[1;34m26->91  [0m[1;34m27->92  [0m[1;34m28->93  [0m[1;34m29->94  [0m[1;34m30->95  [0m[1;34m31->96  [0m[1;34m32->97  [0m[1;34m33->98  [0m[1;34m34->99  [0m[1;34m35->100  [0m[1;34m36->101  [0m[1;34m37->102  [0m[1;34m38->103  [0m[1;34m39->104  [0m[1;34m40->105  [0m[1;34m41->106  [0m[1;34m42->107  [0m[1;34m43->108  [0m[1;34m44->109  [0m[1;34m45->110  [0m[1;34m46->111  [0m[1;34m47->112  [0m[1;34m48->113  [0m[1;34m49->114  [0m[1;34m50->115  [0m[1;34m51->116  [0m[1;34m52->117  [0m[1;34m53->118  [0m[1;34m54->119  [0m[1;34m55->120  [0m[1;34m56->121  [0m[1;34m57->122  [0m[1;34m58->123  [0m[1;34m59->124  [0m[1;34m60->125  [0m[1;34m61->126  [0m[1;34m62->127  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22842485925760 -> hwthread 65 - OK[0m[1;34m
[0m[1;34m	threadid 22842313795584 -> hwthread 66 - OK[0m[1;34m
[0m[1;34m	threadid 22842112469120 -> hwthread 67 - OK[0m[1;34m
[0m[1;34m	threadid 22841911142656 -> hwthread 68 - OK[0m[1;34m
[0m[1;34m	threadid 22841709816192 -> hwthread 69 - OK[0m[1;34m
[0m[1;34m	threadid 22841508489728 -> hwthread 70 - OK[0m[1;34m
[0m[1;34m	threadid 22841307163264 -> hwthread 71 - OK[0m[1;34m
[0m[1;34m	threadid 22841105836800 -> hwthread 72 - OK[0m[1;34m
[0m[1;34m	threadid 22840904510336 -> hwthread 73 - OK[0m[1;34m
[0m[1;34m	threadid 22840703183872 -> hwthread 74 - OK[0m[1;34m
[0m[1;34m	threadid 22840501857408 -> hwthread 75 - OK[0m[1;34m
[0m[1;34m	threadid 22840300530944 -> hwthread 76 - OK[0m[1;34m
[0m[1;34m	threadid 22840099204480 -> hwthread 77 - OK[0m[1;34m
[0m[1;34m	threadid 22839897878016 -> hwthread 78 - OK[0m[1;34m
[0m[1;34m	threadid 22839696551552 -> hwthread 79 - OK[0m[1;34m
[0m[1;34m	threadid 22839495225088 -> hwthread 80 - OK[0m[1;34m
[0m[1;34m	threadid 22839293898624 -> hwthread 81 - OK[0m[1;34m
[0m[1;34m	threadid 22839092572160 -> hwthread 82 - OK[0m[1;34m
[0m[1;34m	threadid 22838891245696 -> hwthread 83 - OK[0m[1;34m
[0m[1;34m	threadid 22838689919232 -> hwthread 84 - OK[0m[1;34m
[0m[1;34m	threadid 22838488592768 -> hwthread 85 - OK[0m[1;34m
[0m[1;34m	threadid 22838287266304 -> hwthread 86 - OK[0m[1;34m
[0m[1;34m	threadid 22838085939840 -> hwthread 87 - OK[0m[1;34m
[0m[1;34m	threadid 22837884613376 -> hwthread 88 - OK[0m[1;34m
[0m[1;34m	threadid 22837683286912 -> hwthread 89 - OK[0m[1;34m
[0m[1;34m	threadid 22837481960448 -> hwthread 90 - OK[0m[1;34m
[0m[1;34m	threadid 22837280633984 -> hwthread 91 - OK[0m[1;34m
[0m[1;34m	threadid 22837079307520 -> hwthread 92 - OK[0m[1;34m
[0m[1;34m	threadid 22836877981056 -> hwthread 93 - OK[0m[1;34m
[0m[1;34m	threadid 22836676654592 -> hwthread 94 - OK[0m[1;34m
[0m[1;34m	threadid 22836475328128 -> hwthread 95 - OK[0m[1;34m
[0m[1;34m	threadid 22836274001664 -> hwthread 96 - OK[0m[1;34m
[0m[1;34m	threadid 22836072671104 -> hwthread 97 - OK[0m[1;34m
[0m[1;34m	threadid 22835871344640 -> hwthread 98 - OK[0m[1;34m
[0m[1;34m	threadid 22835670018176 -> hwthread 99 - OK[0m[1;34m
[0m[1;34m	threadid 22835468691712 -> hwthread 100 - OK[0m[1;34m
[0m[1;34m	threadid 22835267365248 -> hwthread 101 - OK[0m[1;34m
[0m[1;34m	threadid 22835066038784 -> hwthread 102 - OK[0m[1;34m
[0m[1;34m	threadid 22834864712320 -> hwthread 103 - OK[0m[1;34m
[0m[1;34m	threadid 22834663385856 -> hwthread 104 - OK[0m[1;34m
[0m[1;34m	threadid 22834462059392 -> hwthread 105 - OK[0m[1;34m
[0m[1;34m	threadid 22834260732928 -> hwthread 106 - OK[0m[1;34m
[0m[1;34m	threadid 22834059406464 -> hwthread 107 - OK[0m[1;34m
[0m[1;34m	threadid 22833858080000 -> hwthread 108 - OK[0m[1;34m
[0m[1;34m	threadid 22833656753536 -> hwthread 109 - OK[0m[1;34m
[0m[1;34m	threadid 22833455427072 -> hwthread 110 - OK[0m[1;34m
[0m[1;34m	threadid 22833254100608 -> hwthread 111 - OK[0m[1;34m
[0m[1;34m	threadid 22833052774144 -> hwthread 112 - OK[0m[1;34m
[0m[1;34m	threadid 22832851447680 -> hwthread 113 - OK[0m[1;34m
[0m[1;34m	threadid 22832650121216 -> hwthread 114 - OK[0m[1;34m
[0m[1;34m	threadid 22832448794752 -> hwthread 115 - OK[0m[1;34m
[0m[1;34m	threadid 22832247468288 -> hwthread 116 - OK[0m[1;34m
[0m[1;34m	threadid 22832046141824 -> hwthread 117 - OK[0m[1;34m
[0m[1;34m	threadid 22831844815360 -> hwthread 118 - OK[0m[1;34m
[0m[1;34m	threadid 22831643488896 -> hwthread 119 - OK[0m[1;34m
[0m[1;34m	threadid 22831442162432 -> hwthread 120 - OK[0m[1;34m
[0m[1;34m	threadid 22831240835968 -> hwthread 121 - OK[0m[1;34m
[0m[1;34m	threadid 22831039509504 -> hwthread 122 - OK[0m[1;34m
[0m[1;34m	threadid 22830838183040 -> hwthread 123 - OK[0m[1;34m
[0m[1;34m	threadid 22830636856576 -> hwthread 124 - OK[0m[1;34m
[0m[1;34m	threadid 22830435530112 -> hwthread 125 - OK[0m[1;34m
[0m[1;34m	threadid 22830234203648 -> hwthread 126 - OK[0m[1;34m
[0m[1;34m	threadid 22830032877184 -> hwthread 127 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22842208290560 -> hwthread 64 - OK[0m[1;34m
[0m[1;34m	threadid 22842201700096 -> hwthread 65 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 114, m: 114)                                                               	 1.09755   	 700       	 8.8191    	 0         	 0.199509  	 44.2041   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5700, cols: 114, reductionFactor: 37, colBlockingSize: 12)                 	 0.745237  	 600       	 122.505   	 0         	 4.269     	 28.6963   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5700, cols: 64, reductionFactor: 37, colBlockingSize: 12)                  	 0.305228  	 700       	 109.982   	 0         	 6.76812   	 16.25     
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 114, n: 50, r: 114, r2: 114)          	 0.290414  	 600       	 306.09    	 0         	 21.6948   	 14.1089   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 114, r: 114, r2: 5700, leftOrthog: 0)      	 0.229737  	 600       	 386.931   	 0         	 41.2727   	 9.375     
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 5700, Xcols: 64, r: 64, streamingCols: 0)                   	 0.101364  	 700       	 161.231   	 0         	 40.4208   	 3.9888    
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 114, reductionFactor: 37, colBlockingSize: 12)                 	 0.0999233 	 100       	 66.7874   	 0         	 2.3858    	 27.9938   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 114, Qr2: 64)      	 0.0960808 	 700       	 0         	 0         	 66.4207   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 114)                                                                	 0.0563261 	 100       	 4.34376   	 0         	 0.198132  	 21.9235   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 5700, m: 64)                                                                       	 0.054935  	 700       	 0         	 0         	 74.3744   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 64, m: 64)                                                                  	 0.0486797 	 800       	 5.74406   	 0         	 1.62394   	 3.53712   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                 	 0.0393511 	 100       	 2.96476   	 0         	 0.15349   	 19.3157   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 64, k: 2500)   	 0.0388423 	 800       	 329.538   	 0         	 47.4864   	 6.93963   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 64, reductionFactor: 37, colBlockingSize: 12)                  	 0.0353333 	 100       	 59.5289   	 0         	 3.71539   	 16.0223   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5700, cols: 50, reductionFactor: 37, colBlockingSize: 12)                  	 0.0294044 	 100       	 99.5438   	 0         	 7.82195   	 12.7262   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 2500, m: 64, k: 50)	 0.0289568 	 800       	 442.038   	 0         	 63.6977   	 6.93963   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 5700, m: 64)                                                              	 0.0278524 	 700       	 0         	 0         	 146.693   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 64, n: 50, r2: 64)                                                                                         	 0.0262209 	 700       	 0         	 0         	 87.4782   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 64, m: 3200, k: 64) 	 0.0236357 	 700       	 776.373   	 0         	 98.0171   	 7.92079   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 64, n: 50, r2: 64)                   	 0.0217614 	 700       	 0         	 0         	 187.753   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 3200, k: 64) 	 0.0215143 	 700       	 666.346   	 0         	 95.7873   	 6.95652   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r: 114, r2: 114)           	 0.0211956 	 100       	 306.573   	 0         	 22.0044   	 13.9323   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 114, r: 114, r2: 2500, leftOrthog: 0)      	 0.0179575 	 100       	 361.854   	 0         	 39.2478   	 9.21972   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 5700, leftOrthog: 0)        	 0.0168615 	 100       	 169.024   	 0         	 40.803    	 4.14244   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 114, n: 50, r: 114, r2: 50)           	 0.0159116 	 100       	 408.381   	 0         	 47.2863   	 8.63636   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 114, reductionFactor: 37, colBlockingSize: 12)                   	 0.0111199 	 100       	 12.003    	 0         	 1.34505   	 8.92386   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 64, r: 64, streamingCols: 0)                   	 0.0100986 	 100       	 101.4     	 0         	 25.5122   	 3.97456   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 50, Qr2: 64)       	 0.00685144	 100       	 0         	 0         	 66.5554   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 2500, m: 64)                                                                       	 0.00617673	 100       	 0         	 0         	 41.4459   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 0, n: 50, r2: 64)                    	 0.0049157 	 100       	 0         	 0         	 52.078    	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 64)                                                              	 0.0048308 	 100       	 0         	 0         	 52.9933   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 3200, k: 50) 	 0.00459752	 100       	 348.014   	 0         	 56.1173   	 6.20155   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                  	 0.0042704 	 100       	 3.90282   	 0         	 1.41439   	 2.75937   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 50, reductionFactor: 37, colBlockingSize: 12)                    	 0.00349935	 100       	 7.33726   	 0         	 1.14307   	 6.41892   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 114, r: 50, r2: 50, leftOrthog: 0)         	 0.00260177	 100       	 21.9082   	 0         	 6.79537   	 3.22398   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 64)                                                                                         	 0.00224646	 100       	 0         	 0         	 113.957   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 64, m: 64, fromLeft: 0)                	 0.00100206	 800       	 0         	 0         	 52.3208   	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                   	 0.000897425	 100       	 0.55715   	 0         	 2.2286    	 0.25      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 64, n: 50, r2: 1)                                                                                          	 0.000852576	 200       	 0         	 0         	 12.0107   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                          	 0.000834807	 200       	 0         	 0         	 9.58305   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 50, k: 64)   	 0.000821941	 100       	 38.9322   	 0         	 8.66242   	 4.49438   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50, k: 50)     	 0.000817861	 100       	 30.5675   	 0         	 7.33621   	 4.16667   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 50, r2: 50)              	 0.000811271	 100       	 30.8158   	 0         	 7.3958    	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 64, m: 50, k: 64)   	 0.000773272	 100       	 52.9697   	 0         	 10.8588   	 4.87805   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 50, m: 50, k: 50)  	 0.000668608	 100       	 37.3911   	 0         	 8.97387   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 1, r1low: 0, n: 50, r2: 50)                     	 0.000537271	 100       	 0         	 0         	 7.44503   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                          	 0.00052827	 100       	 0         	 0         	 7.57189   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 64, n: 50, r2: 1)                    	 0.000498541	 100       	 0         	 0         	 18.2934   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                            	 0.00042292	 100       	 1.18226   	 0         	 14.1871   	 0.0833333 
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 1, Xr2: 50, Qr1: 1, Qr2: 0)          	 0.000419257	 100       	 0         	 0         	 9.54069   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                 	 0.000395074	 100       	 0.632793  	 0         	 10.1247   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 50)                                                                	 0.000394436	 100       	 0         	 0         	 10.1411   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 64, n: 50, r2: 1)                                                                                 	 0.000364633	 100       	 0.877595  	 0         	 14.0415   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                 	 0.00032658	 100       	 0.765509  	 0         	 12.2481   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 0, m: 3200, k: 50)  	 6.052e-06 	 100       	 0         	 0         	 21150     	 0         
Timing statistics:
function                                                                                                                                                                                      	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                        	 4.41381   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_normalized(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                     	 4.41375   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::rightNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                            	 3.53247   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::rightNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                        	 3.53115   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double]	 3.14249   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                  	 1.22975   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                               	 1.19323   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                            	 0.886411  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_leftOrthogonalize(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&) [with T = double]                                   	 0.881208  	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]           	 0.617499  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.344554  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                           	 0.328332  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                	 0.267158  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                    	 0.111463  	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                                       	 0.103352  	 900       
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                       	 0.0611117 	 800       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.0529501 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double]        	 0.0513488 	 1800      
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double]          	 0.0396602 	 900       
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                              	 0.0330777 	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                	 0.0306831 	 1300      
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double]       	 0.0296254 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                        	 0.0277129 	 1000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                	 0.00666268	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                              	 0.00351117	 6400      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                         	 0.00188827	 5200      
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                       	 0.00108629	 300       
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                           	 0.00100206	 800       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                         	 0.000897425	 100       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                                                  	 0.00042292	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
orthoX: L, orthoY: L
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 64
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->65  [0m[1;34m1->66  [0m[1;34m2->67  [0m[1;34m3->68  [0m[1;34m4->69  [0m[1;34m5->70  [0m[1;34m6->71  [0m[1;34m7->72  [0m[1;34m8->73  [0m[1;34m9->74  [0m[1;34m10->75  [0m[1;34m11->76  [0m[1;34m12->77  [0m[1;34m13->78  [0m[1;34m14->79  [0m[1;34m15->80  [0m[1;34m16->81  [0m[1;34m17->82  [0m[1;34m18->83  [0m[1;34m19->84  [0m[1;34m20->85  [0m[1;34m21->86  [0m[1;34m22->87  [0m[1;34m23->88  [0m[1;34m24->89  [0m[1;34m25->90  [0m[1;34m26->91  [0m[1;34m27->92  [0m[1;34m28->93  [0m[1;34m29->94  [0m[1;34m30->95  [0m[1;34m31->96  [0m[1;34m32->97  [0m[1;34m33->98  [0m[1;34m34->99  [0m[1;34m35->100  [0m[1;34m36->101  [0m[1;34m37->102  [0m[1;34m38->103  [0m[1;34m39->104  [0m[1;34m40->105  [0m[1;34m41->106  [0m[1;34m42->107  [0m[1;34m43->108  [0m[1;34m44->109  [0m[1;34m45->110  [0m[1;34m46->111  [0m[1;34m47->112  [0m[1;34m48->113  [0m[1;34m49->114  [0m[1;34m50->115  [0m[1;34m51->116  [0m[1;34m52->117  [0m[1;34m53->118  [0m[1;34m54->119  [0m[1;34m55->120  [0m[1;34m56->121  [0m[1;34m57->122  [0m[1;34m58->123  [0m[1;34m59->124  [0m[1;34m60->125  [0m[1;34m61->126  [0m[1;34m62->127  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22356634040192 -> hwthread 65 - OK[0m[1;34m
[0m[1;34m	threadid 22356445620224 -> hwthread 66 - OK[0m[1;34m
[0m[1;34m	threadid 22356244293760 -> hwthread 67 - OK[0m[1;34m
[0m[1;34m	threadid 22356042967296 -> hwthread 68 - OK[0m[1;34m
[0m[1;34m	threadid 22355841640832 -> hwthread 69 - OK[0m[1;34m
[0m[1;34m	threadid 22355640314368 -> hwthread 70 - OK[0m[1;34m
[0m[1;34m	threadid 22355438987904 -> hwthread 71 - OK[0m[1;34m
[0m[1;34m	threadid 22355237661440 -> hwthread 72 - OK[0m[1;34m
[0m[1;34m	threadid 22355036334976 -> hwthread 73 - OK[0m[1;34m
[0m[1;34m	threadid 22354835008512 -> hwthread 74 - OK[0m[1;34m
[0m[1;34m	threadid 22354633682048 -> hwthread 75 - OK[0m[1;34m
[0m[1;34m	threadid 22354432355584 -> hwthread 76 - OK[0m[1;34m
[0m[1;34m	threadid 22354231029120 -> hwthread 77 - OK[0m[1;34m
[0m[1;34m	threadid 22354029702656 -> hwthread 78 - OK[0m[1;34m
[0m[1;34m	threadid 22353828376192 -> hwthread 79 - OK[0m[1;34m
[0m[1;34m	threadid 22353627049728 -> hwthread 80 - OK[0m[1;34m
[0m[1;34m	threadid 22353425723264 -> hwthread 81 - OK[0m[1;34m
[0m[1;34m	threadid 22353224396800 -> hwthread 82 - OK[0m[1;34m
[0m[1;34m	threadid 22353023070336 -> hwthread 83 - OK[0m[1;34m
[0m[1;34m	threadid 22352821743872 -> hwthread 84 - OK[0m[1;34m
[0m[1;34m	threadid 22352620417408 -> hwthread 85 - OK[0m[1;34m
[0m[1;34m	threadid 22352419090944 -> hwthread 86 - OK[0m[1;34m
[0m[1;34m	threadid 22352217764480 -> hwthread 87 - OK[0m[1;34m
[0m[1;34m	threadid 22352016438016 -> hwthread 88 - OK[0m[1;34m
[0m[1;34m	threadid 22351815111552 -> hwthread 89 - OK[0m[1;34m
[0m[1;34m	threadid 22351613785088 -> hwthread 90 - OK[0m[1;34m
[0m[1;34m	threadid 22351412458624 -> hwthread 91 - OK[0m[1;34m
[0m[1;34m	threadid 22351211132160 -> hwthread 92 - OK[0m[1;34m
[0m[1;34m	threadid 22351009805696 -> hwthread 93 - OK[0m[1;34m
[0m[1;34m	threadid 22350808479232 -> hwthread 94 - OK[0m[1;34m
[0m[1;34m	threadid 22350607152768 -> hwthread 95 - OK[0m[1;34m
[0m[1;34m	threadid 22350405826304 -> hwthread 96 - OK[0m[1;34m
[0m[1;34m	threadid 22350204495744 -> hwthread 97 - OK[0m[1;34m
[0m[1;34m	threadid 22350003169280 -> hwthread 98 - OK[0m[1;34m
[0m[1;34m	threadid 22349801842816 -> hwthread 99 - OK[0m[1;34m
[0m[1;34m	threadid 22349600516352 -> hwthread 100 - OK[0m[1;34m
[0m[1;34m	threadid 22349399189888 -> hwthread 101 - OK[0m[1;34m
[0m[1;34m	threadid 22349197863424 -> hwthread 102 - OK[0m[1;34m
[0m[1;34m	threadid 22348996536960 -> hwthread 103 - OK[0m[1;34m
[0m[1;34m	threadid 22348795210496 -> hwthread 104 - OK[0m[1;34m
[0m[1;34m	threadid 22348593884032 -> hwthread 105 - OK[0m[1;34m
[0m[1;34m	threadid 22348392557568 -> hwthread 106 - OK[0m[1;34m
[0m[1;34m	threadid 22348191231104 -> hwthread 107 - OK[0m[1;34m
[0m[1;34m	threadid 22347989904640 -> hwthread 108 - OK[0m[1;34m
[0m[1;34m	threadid 22347788578176 -> hwthread 109 - OK[0m[1;34m
[0m[1;34m	threadid 22347587251712 -> hwthread 110 - OK[0m[1;34m
[0m[1;34m	threadid 22347385925248 -> hwthread 111 - OK[0m[1;34m
[0m[1;34m	threadid 22347184598784 -> hwthread 112 - OK[0m[1;34m
[0m[1;34m	threadid 22346983272320 -> hwthread 113 - OK[0m[1;34m
[0m[1;34m	threadid 22346781945856 -> hwthread 114 - OK[0m[1;34m
[0m[1;34m	threadid 22346580619392 -> hwthread 115 - OK[0m[1;34m
[0m[1;34m	threadid 22346379292928 -> hwthread 116 - OK[0m[1;34m
[0m[1;34m	threadid 22346177966464 -> hwthread 117 - OK[0m[1;34m
[0m[1;34m	threadid 22345976640000 -> hwthread 118 - OK[0m[1;34m
[0m[1;34m	threadid 22345775313536 -> hwthread 119 - OK[0m[1;34m
[0m[1;34m	threadid 22345573987072 -> hwthread 120 - OK[0m[1;34m
[0m[1;34m	threadid 22345372660608 -> hwthread 121 - OK[0m[1;34m
[0m[1;34m	threadid 22345171334144 -> hwthread 122 - OK[0m[1;34m
[0m[1;34m	threadid 22344970007680 -> hwthread 123 - OK[0m[1;34m
[0m[1;34m	threadid 22344768681216 -> hwthread 124 - OK[0m[1;34m
[0m[1;34m	threadid 22344567354752 -> hwthread 125 - OK[0m[1;34m
[0m[1;34m	threadid 22344366028288 -> hwthread 126 - OK[0m[1;34m
[0m[1;34m	threadid 22344164701824 -> hwthread 127 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22356528379648 -> hwthread 64 - OK[0m[1;34m
[0m[1;34m	threadid 22356521789184 -> hwthread 65 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 115, m: 115)                                                               	 1.11956   	 700       	 8.87528   	 0         	 0.199029  	 44.593    
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5750, cols: 115, reductionFactor: 37, colBlockingSize: 12)                 	 0.764277  	 600       	 122.624   	 0         	 4.236     	 28.9481   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5750, cols: 65, reductionFactor: 37, colBlockingSize: 12)                  	 0.321088  	 700       	 108.788   	 0         	 6.59215   	 16.5026   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 115, n: 50, r: 115, r2: 115)          	 0.290586  	 600       	 314.029   	 0         	 22.0639   	 14.2327   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 115, r: 115, r2: 5750, leftOrthog: 0)      	 0.235769  	 600       	 387.042   	 0         	 40.9255   	 9.45724   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 5750, Xcols: 65, r: 65, streamingCols: 0)                   	 0.103132  	 700       	 164.893   	 0         	 40.7037   	 4.05105   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 115, reductionFactor: 37, colBlockingSize: 12)                 	 0.101755  	 100       	 66.7407   	 0         	 2.3643    	 28.2285   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 115, Qr2: 65)      	 0.0925303 	 700       	 0         	 0         	 70.204    	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 65, m: 3250, k: 65) 	 0.0637332 	 700       	 301.629   	 0         	 37.4948   	 8.04455   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 115)                                                                	 0.0566049 	 100       	 4.35769   	 0         	 0.198569  	 21.9454   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 65, m: 65)                                                                  	 0.052746  	 800       	 5.55364   	 0         	 1.54582   	 3.59268   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 5750, m: 65)                                                                       	 0.0474701 	 700       	 0         	 0         	 88.1818   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                 	 0.0395276 	 100       	 2.95153   	 0         	 0.152805  	 19.3157   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 65, k: 2500)   	 0.0389855 	 800       	 333.457   	 0         	 47.7306   	 6.98624   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 65, reductionFactor: 37, colBlockingSize: 12)                  	 0.038876  	 100       	 55.808    	 0         	 3.43091   	 16.2663   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5750, cols: 50, reductionFactor: 37, colBlockingSize: 12)                  	 0.0295618 	 100       	 99.8824   	 0         	 7.84797   	 12.7272   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 65, n: 50, r2: 65)                   	 0.0293193 	 700       	 0         	 0         	 142.773   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 2500, m: 65, k: 50)	 0.0289456 	 800       	 449.119   	 0         	 64.2862   	 6.98624   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 65, n: 50, r2: 65)                                                                                         	 0.0265869 	 700       	 0         	 0         	 88.9913   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 5750, m: 65)                                                              	 0.0232631 	 700       	 0         	 0         	 179.941   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 3250, k: 65) 	 0.0224675 	 700       	 658.174   	 0         	 93.967    	 7.00431   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r: 115, r2: 115)           	 0.0205922 	 100       	 321.117   	 0         	 22.8524   	 14.0518   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 115, r: 115, r2: 2500, leftOrthog: 0)      	 0.0184018 	 100       	 359.339   	 0         	 38.6462   	 9.29819   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 5750, leftOrthog: 0)        	 0.017033  	 100       	 168.79    	 0         	 40.7444   	 4.14265   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 115, n: 50, r: 115, r2: 50)           	 0.015663  	 100       	 422.172   	 0         	 48.7517   	 8.65964   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 115, reductionFactor: 37, colBlockingSize: 12)                   	 0.0110612 	 100       	 12.2793   	 0         	 1.37236   	 8.94758   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 65, r: 65, streamingCols: 0)                   	 0.0106619 	 100       	 99.0681   	 0         	 24.5445   	 4.03626   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 2500, m: 65)                                                                       	 0.00608461	 100       	 0         	 0         	 42.7308   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 50, Qr2: 65)       	 0.00597389	 100       	 0         	 0         	 77.0018   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 0, n: 50, r2: 65)                    	 0.00535712	 100       	 0         	 0         	 48.5335   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 65)                                                              	 0.00492122	 100       	 0         	 0         	 52.8324   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                  	 0.00439108	 100       	 3.79556   	 0         	 1.37552   	 2.75937   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 50, reductionFactor: 37, colBlockingSize: 12)                    	 0.00322861	 100       	 7.95256   	 0         	 1.23892   	 6.41892   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 3250, k: 50) 	 0.00311756	 100       	 521.24    	 0         	 84.04     	 6.20229   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 115, r: 50, r2: 50, leftOrthog: 0)         	 0.00255904	 100       	 22.4694   	 0         	 6.95574   	 3.23034   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 65)                                                                                         	 0.00227284	 100       	 0         	 0         	 114.394   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 65, m: 65, fromLeft: 0)                	 0.00155133	 800       	 0         	 0         	 34.8605   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 65, m: 50, k: 65)   	 0.000899394	 100       	 46.9761   	 0         	 9.53976   	 4.92424   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                   	 0.000885255	 100       	 0.564809  	 0         	 2.25924   	 0.25      
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 50, k: 65)   	 0.00083917	 100       	 38.7287   	 0         	 8.57991   	 4.51389   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 65, n: 50, r2: 1)                                                                                          	 0.000837178	 200       	 0         	 0         	 12.4227   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50, k: 50)     	 0.000806539	 100       	 30.9966   	 0         	 7.43919   	 4.16667   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 50, r2: 50)              	 0.000801216	 100       	 31.2026   	 0         	 7.48862   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                          	 0.000795386	 200       	 0         	 0         	 10.058    	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 50, m: 50, k: 50)  	 0.000602833	 100       	 41.4709   	 0         	 9.95301   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 1, r1low: 0, n: 50, r2: 50)                     	 0.000536046	 100       	 0         	 0         	 7.46205   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 65, n: 50, r2: 1)                    	 0.000508968	 100       	 0         	 0         	 18.0758   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                          	 0.000495536	 100       	 0         	 0         	 8.07207   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                            	 0.000428153	 100       	 1.16781   	 0         	 14.0137   	 0.0833333 
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 1, Xr2: 50, Qr1: 1, Qr2: 0)          	 0.000411454	 100       	 0         	 0         	 9.72162   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 50)                                                                	 0.000403596	 100       	 0         	 0         	 9.9109    	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                 	 0.000392264	 100       	 0.637326  	 0         	 10.1972   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 65, n: 50, r2: 1)                                                                                 	 0.000365031	 100       	 0.890335  	 0         	 14.2454   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                 	 0.000342143	 100       	 0.730689  	 0         	 11.691    	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 0, m: 3250, k: 50)  	 1.439e-05 	 100       	 0         	 0         	 9034.05   	 0         
Timing statistics:
function                                                                                                                                                                                      	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                        	 4.51666   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_normalized(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                     	 4.51661   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::rightNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                            	 3.58013   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::rightNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                        	 3.57881   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double]	 3.20083   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                  	 1.26985   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                               	 1.21569   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_leftOrthogonalize(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&) [with T = double]                                   	 0.936405  	 100       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                            	 0.907303  	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]           	 0.630964  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.363674  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                           	 0.327643  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                	 0.273763  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                    	 0.113793  	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                                       	 0.0989157 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double]        	 0.0910712 	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.0571371 	 900       
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                       	 0.0535547 	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double]          	 0.039792  	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                        	 0.0357214 	 1000      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                	 0.0309878 	 1300      
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double]       	 0.0295484 	 900       
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                              	 0.028588  	 900       
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                	 0.00523045	 1800      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                         	 0.00511758	 5200      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                              	 0.00343743	 6400      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                           	 0.00155133	 800       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                       	 0.00109944	 300       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                         	 0.000885255	 100       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                                                  	 0.000428153	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
orthoX: L, orthoY: L
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 64
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->65  [0m[1;34m1->66  [0m[1;34m2->67  [0m[1;34m3->68  [0m[1;34m4->69  [0m[1;34m5->70  [0m[1;34m6->71  [0m[1;34m7->72  [0m[1;34m8->73  [0m[1;34m9->74  [0m[1;34m10->75  [0m[1;34m11->76  [0m[1;34m12->77  [0m[1;34m13->78  [0m[1;34m14->79  [0m[1;34m15->80  [0m[1;34m16->81  [0m[1;34m17->82  [0m[1;34m18->83  [0m[1;34m19->84  [0m[1;34m20->85  [0m[1;34m21->86  [0m[1;34m22->87  [0m[1;34m23->88  [0m[1;34m24->89  [0m[1;34m25->90  [0m[1;34m26->91  [0m[1;34m27->92  [0m[1;34m28->93  [0m[1;34m29->94  [0m[1;34m30->95  [0m[1;34m31->96  [0m[1;34m32->97  [0m[1;34m33->98  [0m[1;34m34->99  [0m[1;34m35->100  [0m[1;34m36->101  [0m[1;34m37->102  [0m[1;34m38->103  [0m[1;34m39->104  [0m[1;34m40->105  [0m[1;34m41->106  [0m[1;34m42->107  [0m[1;34m43->108  [0m[1;34m44->109  [0m[1;34m45->110  [0m[1;34m46->111  [0m[1;34m47->112  [0m[1;34m48->113  [0m[1;34m49->114  [0m[1;34m50->115  [0m[1;34m51->116  [0m[1;34m52->117  [0m[1;34m53->118  [0m[1;34m54->119  [0m[1;34m55->120  [0m[1;34m56->121  [0m[1;34m57->122  [0m[1;34m58->123  [0m[1;34m59->124  [0m[1;34m60->125  [0m[1;34m61->126  [0m[1;34m62->127  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22432748730240 -> hwthread 65 - OK[0m[1;34m
[0m[1;34m	threadid 22432547072000 -> hwthread 66 - OK[0m[1;34m
[0m[1;34m	threadid 22432345745536 -> hwthread 67 - OK[0m[1;34m
[0m[1;34m	threadid 22432144419072 -> hwthread 68 - OK[0m[1;34m
[0m[1;34m	threadid 22431943092608 -> hwthread 69 - OK[0m[1;34m
[0m[1;34m	threadid 22431741766144 -> hwthread 70 - OK[0m[1;34m
[0m[1;34m	threadid 22431540439680 -> hwthread 71 - OK[0m[1;34m
[0m[1;34m	threadid 22431339113216 -> hwthread 72 - OK[0m[1;34m
[0m[1;34m	threadid 22431137786752 -> hwthread 73 - OK[0m[1;34m
[0m[1;34m	threadid 22430936460288 -> hwthread 74 - OK[0m[1;34m
[0m[1;34m	threadid 22430735133824 -> hwthread 75 - OK[0m[1;34m
[0m[1;34m	threadid 22430533807360 -> hwthread 76 - OK[0m[1;34m
[0m[1;34m	threadid 22430332480896 -> hwthread 77 - OK[0m[1;34m
[0m[1;34m	threadid 22430131154432 -> hwthread 78 - OK[0m[1;34m
[0m[1;34m	threadid 22429929827968 -> hwthread 79 - OK[0m[1;34m
[0m[1;34m	threadid 22429728501504 -> hwthread 80 - OK[0m[1;34m
[0m[1;34m	threadid 22429527175040 -> hwthread 81 - OK[0m[1;34m
[0m[1;34m	threadid 22429325848576 -> hwthread 82 - OK[0m[1;34m
[0m[1;34m	threadid 22429124522112 -> hwthread 83 - OK[0m[1;34m
[0m[1;34m	threadid 22428923195648 -> hwthread 84 - OK[0m[1;34m
[0m[1;34m	threadid 22428721869184 -> hwthread 85 - OK[0m[1;34m
[0m[1;34m	threadid 22428520542720 -> hwthread 86 - OK[0m[1;34m
[0m[1;34m	threadid 22428319216256 -> hwthread 87 - OK[0m[1;34m
[0m[1;34m	threadid 22428117889792 -> hwthread 88 - OK[0m[1;34m
[0m[1;34m	threadid 22427916563328 -> hwthread 89 - OK[0m[1;34m
[0m[1;34m	threadid 22427715236864 -> hwthread 90 - OK[0m[1;34m
[0m[1;34m	threadid 22427513910400 -> hwthread 91 - OK[0m[1;34m
[0m[1;34m	threadid 22427312583936 -> hwthread 92 - OK[0m[1;34m
[0m[1;34m	threadid 22427111257472 -> hwthread 93 - OK[0m[1;34m
[0m[1;34m	threadid 22426909931008 -> hwthread 94 - OK[0m[1;34m
[0m[1;34m	threadid 22426708604544 -> hwthread 95 - OK[0m[1;34m
[0m[1;34m	threadid 22426507278080 -> hwthread 96 - OK[0m[1;34m
[0m[1;34m	threadid 22426305947520 -> hwthread 97 - OK[0m[1;34m
[0m[1;34m	threadid 22426104621056 -> hwthread 98 - OK[0m[1;34m
[0m[1;34m	threadid 22425903294592 -> hwthread 99 - OK[0m[1;34m
[0m[1;34m	threadid 22425701968128 -> hwthread 100 - OK[0m[1;34m
[0m[1;34m	threadid 22425500641664 -> hwthread 101 - OK[0m[1;34m
[0m[1;34m	threadid 22425299315200 -> hwthread 102 - OK[0m[1;34m
[0m[1;34m	threadid 22425097988736 -> hwthread 103 - OK[0m[1;34m
[0m[1;34m	threadid 22424896662272 -> hwthread 104 - OK[0m[1;34m
[0m[1;34m	threadid 22424695335808 -> hwthread 105 - OK[0m[1;34m
[0m[1;34m	threadid 22424494009344 -> hwthread 106 - OK[0m[1;34m
[0m[1;34m	threadid 22424292682880 -> hwthread 107 - OK[0m[1;34m
[0m[1;34m	threadid 22424091356416 -> hwthread 108 - OK[0m[1;34m
[0m[1;34m	threadid 22423890029952 -> hwthread 109 - OK[0m[1;34m
[0m[1;34m	threadid 22423688703488 -> hwthread 110 - OK[0m[1;34m
[0m[1;34m	threadid 22423487377024 -> hwthread 111 - OK[0m[1;34m
[0m[1;34m	threadid 22423286050560 -> hwthread 112 - OK[0m[1;34m
[0m[1;34m	threadid 22423084724096 -> hwthread 113 - OK[0m[1;34m
[0m[1;34m	threadid 22422883397632 -> hwthread 114 - OK[0m[1;34m
[0m[1;34m	threadid 22422682071168 -> hwthread 115 - OK[0m[1;34m
[0m[1;34m	threadid 22422480744704 -> hwthread 116 - OK[0m[1;34m
[0m[1;34m	threadid 22422279418240 -> hwthread 117 - OK[0m[1;34m
[0m[1;34m	threadid 22422078091776 -> hwthread 118 - OK[0m[1;34m
[0m[1;34m	threadid 22421876765312 -> hwthread 119 - OK[0m[1;34m
[0m[1;34m	threadid 22421675438848 -> hwthread 120 - OK[0m[1;34m
[0m[1;34m	threadid 22421474112384 -> hwthread 121 - OK[0m[1;34m
[0m[1;34m	threadid 22421272785920 -> hwthread 122 - OK[0m[1;34m
[0m[1;34m	threadid 22421071459456 -> hwthread 123 - OK[0m[1;34m
[0m[1;34m	threadid 22420870132992 -> hwthread 124 - OK[0m[1;34m
[0m[1;34m	threadid 22420668806528 -> hwthread 125 - OK[0m[1;34m
[0m[1;34m	threadid 22420467480064 -> hwthread 126 - OK[0m[1;34m
[0m[1;34m	threadid 22420266153600 -> hwthread 127 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22432643069696 -> hwthread 64 - OK[0m[1;34m
[0m[1;34m	threadid 22432636479232 -> hwthread 65 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 116, m: 116)                                                               	 1.09852   	 700       	 9.28324   	 0         	 0.206377  	 44.9819   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5800, cols: 116, reductionFactor: 37, colBlockingSize: 12)                 	 0.766728  	 600       	 125.449   	 0         	 4.29622   	 29.1998   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5800, cols: 66, reductionFactor: 37, colBlockingSize: 12)                  	 0.320989  	 700       	 113.171   	 0         	 6.75436   	 16.7553   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 116, n: 50, r: 116, r2: 116)          	 0.29674   	 600       	 315.609   	 0         	 21.9838   	 14.3564   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 116, r: 116, r2: 5800, leftOrthog: 0)      	 0.236034  	 600       	 396.78    	 0         	 41.5935   	 9.53947   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 5800, Xcols: 66, r: 66, streamingCols: 0)                   	 0.107857  	 700       	 163.97    	 0         	 39.8634   	 4.1133    
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 116, reductionFactor: 37, colBlockingSize: 12)                 	 0.102411  	 100       	 67.4715   	 0         	 2.37049   	 28.4631   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 116, Qr2: 66)      	 0.0988025 	 700       	 0         	 0         	 66.9149   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 66, m: 3300, k: 66) 	 0.0646425 	 700       	 311.323   	 0         	 38.1135   	 8.16832   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 116)                                                                	 0.0563898 	 100       	 4.40978   	 0         	 0.200745  	 21.967    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 66, m: 66)                                                                  	 0.0528122 	 800       	 5.80666   	 0         	 1.59163   	 3.64824   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 5800, m: 66)                                                                       	 0.0450481 	 700       	 0         	 0         	 95.173    	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                 	 0.041059  	 100       	 2.84144   	 0         	 0.147105  	 19.3157   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 66, k: 2500)   	 0.0399949 	 800       	 330.042   	 0         	 46.9339   	 7.03205   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 66, reductionFactor: 37, colBlockingSize: 12)                  	 0.0377711 	 100       	 59.2217   	 0         	 3.587     	 16.5101   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 5800, m: 66)                                                              	 0.0339487 	 700       	 0         	 0         	 126.289   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 66, n: 50, r2: 66)                   	 0.0301048 	 700       	 0         	 0         	 142.414   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5800, cols: 50, reductionFactor: 37, colBlockingSize: 12)                  	 0.0297948 	 100       	 99.9631   	 0         	 7.85372   	 12.7281   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 2500, m: 66, k: 50)	 0.0288311 	 800       	 457.84    	 0         	 65.1076   	 7.03205   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 66, n: 50, r2: 66)                                                                                         	 0.0273088 	 700       	 0         	 0         	 89.3249   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 3300, k: 66) 	 0.0241893 	 700       	 630.279   	 0         	 89.3851   	 7.05128   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r: 116, r2: 116)           	 0.0198825 	 100       	 338.387   	 0         	 23.8785   	 14.1712   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 116, r: 116, r2: 2500, leftOrthog: 0)      	 0.018762  	 100       	 358.597   	 0         	 38.2438   	 9.37662   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 5800, leftOrthog: 0)        	 0.0161088 	 100       	 180.026   	 0         	 43.4546   	 4.14286   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 116, n: 50, r: 116, r2: 50)           	 0.0157661 	 100       	 426.738   	 0         	 49.1484   	 8.68263   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 116, reductionFactor: 37, colBlockingSize: 12)                   	 0.011263  	 100       	 12.27     	 0         	 1.36774   	 8.97102   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 66, r: 66, streamingCols: 0)                   	 0.0105148 	 100       	 103.569   	 0         	 25.2733   	 4.09795   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 2500, m: 66)                                                                       	 0.006163  	 100       	 0         	 0         	 42.8363   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 66)                                                              	 0.00613833	 100       	 0         	 0         	 43.0084   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 50, Qr2: 66)       	 0.00613069	 100       	 0         	 0         	 75.6848   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 0, n: 50, r2: 66)                    	 0.00539367	 100       	 0         	 0         	 48.9463   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 3300, k: 50) 	 0.00471986	 100       	 349.586   	 0         	 56.3576   	 6.20301   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                  	 0.00456728	 100       	 3.64913   	 0         	 1.32245   	 2.75937   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 50, reductionFactor: 37, colBlockingSize: 12)                    	 0.00337103	 100       	 7.61656   	 0         	 1.18658   	 6.41892   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 116, r: 50, r2: 50, leftOrthog: 0)         	 0.00254145	 100       	 22.8216   	 0         	 7.05108   	 3.23661   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 66)                                                                                         	 0.00228297	 100       	 0         	 0         	 115.639   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 66, m: 66, fromLeft: 0)                	 0.00131385	 800       	 0         	 0         	 42.4377   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 66, m: 50, k: 66)   	 0.000910621	 100       	 47.8355   	 0         	 9.62508   	 4.96988   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                   	 0.00089558	 100       	 0.558297  	 0         	 2.23319   	 0.25      
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50, k: 50)     	 0.000844297	 100       	 29.6104   	 0         	 7.1065    	 4.16667   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 50, r2: 50)              	 0.000825651	 100       	 30.2791   	 0         	 7.26699   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 50, k: 66)   	 0.000809014	 100       	 40.7904   	 0         	 8.99861   	 4.53297   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                          	 0.000804404	 200       	 0         	 0         	 9.94525   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 66, n: 50, r2: 1)                                                                                          	 0.00078579	 200       	 0         	 0         	 13.4387   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 1, r1low: 0, n: 50, r2: 50)                     	 0.000676495	 100       	 0         	 0         	 5.91283   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 50, m: 50, k: 50)  	 0.000614278	 100       	 40.6982   	 0         	 9.76756   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 66, n: 50, r2: 1)                    	 0.000514557	 100       	 0         	 0         	 18.0349   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                          	 0.000495749	 100       	 0         	 0         	 8.0686    	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                            	 0.000453116	 100       	 1.10347   	 0         	 13.2416   	 0.0833333 
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 1, Xr2: 50, Qr1: 1, Qr2: 0)          	 0.000437174	 100       	 0         	 0         	 9.14967   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                 	 0.000408427	 100       	 0.612104  	 0         	 9.79367   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 50)                                                                	 0.000407204	 100       	 0         	 0         	 9.82309   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 66, n: 50, r2: 1)                                                                                 	 0.000359273	 100       	 0.918522  	 0         	 14.6963   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                 	 0.000340847	 100       	 0.733467  	 0         	 11.7355   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 0, m: 3300, k: 50)  	 6.43e-06  	 100       	 0         	 0         	 20528.8   	 0         
Timing statistics:
function                                                                                                                                                                                      	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                        	 4.58091   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_normalized(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                     	 4.58086   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::rightNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                            	 3.61331   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::rightNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                        	 3.61198   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double]	 3.21286   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                  	 1.27233   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                               	 1.19597   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_leftOrthogonalize(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&) [with T = double]                                   	 0.967478  	 100       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                            	 0.910845  	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]           	 0.645791  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.36265   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                           	 0.333214  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                	 0.273446  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                    	 0.118372  	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                                       	 0.10537   	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double]        	 0.0952777 	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.0573794 	 900       
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                       	 0.0512111 	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double]          	 0.0408392 	 900       
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                              	 0.0404942 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                        	 0.0366895 	 1000      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                	 0.0316778 	 1300      
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double]       	 0.0294453 	 900       
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                	 0.00686408	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                              	 0.00356286	 6400      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                         	 0.00290465	 5200      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                           	 0.00131385	 800       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                       	 0.00110855	 300       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                         	 0.00089558	 100       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                                                  	 0.000453116	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
orthoX: L, orthoY: L
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 64
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->65  [0m[1;34m1->66  [0m[1;34m2->67  [0m[1;34m3->68  [0m[1;34m4->69  [0m[1;34m5->70  [0m[1;34m6->71  [0m[1;34m7->72  [0m[1;34m8->73  [0m[1;34m9->74  [0m[1;34m10->75  [0m[1;34m11->76  [0m[1;34m12->77  [0m[1;34m13->78  [0m[1;34m14->79  [0m[1;34m15->80  [0m[1;34m16->81  [0m[1;34m17->82  [0m[1;34m18->83  [0m[1;34m19->84  [0m[1;34m20->85  [0m[1;34m21->86  [0m[1;34m22->87  [0m[1;34m23->88  [0m[1;34m24->89  [0m[1;34m25->90  [0m[1;34m26->91  [0m[1;34m27->92  [0m[1;34m28->93  [0m[1;34m29->94  [0m[1;34m30->95  [0m[1;34m31->96  [0m[1;34m32->97  [0m[1;34m33->98  [0m[1;34m34->99  [0m[1;34m35->100  [0m[1;34m36->101  [0m[1;34m37->102  [0m[1;34m38->103  [0m[1;34m39->104  [0m[1;34m40->105  [0m[1;34m41->106  [0m[1;34m42->107  [0m[1;34m43->108  [0m[1;34m44->109  [0m[1;34m45->110  [0m[1;34m46->111  [0m[1;34m47->112  [0m[1;34m48->113  [0m[1;34m49->114  [0m[1;34m50->115  [0m[1;34m51->116  [0m[1;34m52->117  [0m[1;34m53->118  [0m[1;34m54->119  [0m[1;34m55->120  [0m[1;34m56->121  [0m[1;34m57->122  [0m[1;34m58->123  [0m[1;34m59->124  [0m[1;34m60->125  [0m[1;34m61->126  [0m[1;34m62->127  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22703712630656 -> hwthread 65 - OK[0m[1;34m
[0m[1;34m	threadid 22703532664832 -> hwthread 66 - OK[0m[1;34m
[0m[1;34m	threadid 22703331338368 -> hwthread 67 - OK[0m[1;34m
[0m[1;34m	threadid 22703130011904 -> hwthread 68 - OK[0m[1;34m
[0m[1;34m	threadid 22702928685440 -> hwthread 69 - OK[0m[1;34m
[0m[1;34m	threadid 22702727358976 -> hwthread 70 - OK[0m[1;34m
[0m[1;34m	threadid 22702526032512 -> hwthread 71 - OK[0m[1;34m
[0m[1;34m	threadid 22702324706048 -> hwthread 72 - OK[0m[1;34m
[0m[1;34m	threadid 22702123379584 -> hwthread 73 - OK[0m[1;34m
[0m[1;34m	threadid 22701922053120 -> hwthread 74 - OK[0m[1;34m
[0m[1;34m	threadid 22701720726656 -> hwthread 75 - OK[0m[1;34m
[0m[1;34m	threadid 22701519400192 -> hwthread 76 - OK[0m[1;34m
[0m[1;34m	threadid 22701318073728 -> hwthread 77 - OK[0m[1;34m
[0m[1;34m	threadid 22701116747264 -> hwthread 78 - OK[0m[1;34m
[0m[1;34m	threadid 22700915420800 -> hwthread 79 - OK[0m[1;34m
[0m[1;34m	threadid 22700714094336 -> hwthread 80 - OK[0m[1;34m
[0m[1;34m	threadid 22700512767872 -> hwthread 81 - OK[0m[1;34m
[0m[1;34m	threadid 22700311441408 -> hwthread 82 - OK[0m[1;34m
[0m[1;34m	threadid 22700110114944 -> hwthread 83 - OK[0m[1;34m
[0m[1;34m	threadid 22699908788480 -> hwthread 84 - OK[0m[1;34m
[0m[1;34m	threadid 22699707462016 -> hwthread 85 - OK[0m[1;34m
[0m[1;34m	threadid 22699506135552 -> hwthread 86 - OK[0m[1;34m
[0m[1;34m	threadid 22699304809088 -> hwthread 87 - OK[0m[1;34m
[0m[1;34m	threadid 22699103482624 -> hwthread 88 - OK[0m[1;34m
[0m[1;34m	threadid 22698902156160 -> hwthread 89 - OK[0m[1;34m
[0m[1;34m	threadid 22698700829696 -> hwthread 90 - OK[0m[1;34m
[0m[1;34m	threadid 22698499503232 -> hwthread 91 - OK[0m[1;34m
[0m[1;34m	threadid 22698298176768 -> hwthread 92 - OK[0m[1;34m
[0m[1;34m	threadid 22698096850304 -> hwthread 93 - OK[0m[1;34m
[0m[1;34m	threadid 22697895523840 -> hwthread 94 - OK[0m[1;34m
[0m[1;34m	threadid 22697694197376 -> hwthread 95 - OK[0m[1;34m
[0m[1;34m	threadid 22697492870912 -> hwthread 96 - OK[0m[1;34m
[0m[1;34m	threadid 22697291540352 -> hwthread 97 - OK[0m[1;34m
[0m[1;34m	threadid 22697090213888 -> hwthread 98 - OK[0m[1;34m
[0m[1;34m	threadid 22696888887424 -> hwthread 99 - OK[0m[1;34m
[0m[1;34m	threadid 22696687560960 -> hwthread 100 - OK[0m[1;34m
[0m[1;34m	threadid 22696486234496 -> hwthread 101 - OK[0m[1;34m
[0m[1;34m	threadid 22696284908032 -> hwthread 102 - OK[0m[1;34m
[0m[1;34m	threadid 22696083581568 -> hwthread 103 - OK[0m[1;34m
[0m[1;34m	threadid 22695882255104 -> hwthread 104 - OK[0m[1;34m
[0m[1;34m	threadid 22695680928640 -> hwthread 105 - OK[0m[1;34m
[0m[1;34m	threadid 22695479602176 -> hwthread 106 - OK[0m[1;34m
[0m[1;34m	threadid 22695278275712 -> hwthread 107 - OK[0m[1;34m
[0m[1;34m	threadid 22695076949248 -> hwthread 108 - OK[0m[1;34m
[0m[1;34m	threadid 22694875622784 -> hwthread 109 - OK[0m[1;34m
[0m[1;34m	threadid 22694674296320 -> hwthread 110 - OK[0m[1;34m
[0m[1;34m	threadid 22694472969856 -> hwthread 111 - OK[0m[1;34m
[0m[1;34m	threadid 22694271643392 -> hwthread 112 - OK[0m[1;34m
[0m[1;34m	threadid 22694070316928 -> hwthread 113 - OK[0m[1;34m
[0m[1;34m	threadid 22693868990464 -> hwthread 114 - OK[0m[1;34m
[0m[1;34m	threadid 22693667664000 -> hwthread 115 - OK[0m[1;34m
[0m[1;34m	threadid 22693466337536 -> hwthread 116 - OK[0m[1;34m
[0m[1;34m	threadid 22693265011072 -> hwthread 117 - OK[0m[1;34m
[0m[1;34m	threadid 22693063684608 -> hwthread 118 - OK[0m[1;34m
[0m[1;34m	threadid 22692862358144 -> hwthread 119 - OK[0m[1;34m
[0m[1;34m	threadid 22692661031680 -> hwthread 120 - OK[0m[1;34m
[0m[1;34m	threadid 22692459705216 -> hwthread 121 - OK[0m[1;34m
[0m[1;34m	threadid 22692258378752 -> hwthread 122 - OK[0m[1;34m
[0m[1;34m	threadid 22692057052288 -> hwthread 123 - OK[0m[1;34m
[0m[1;34m	threadid 22691855725824 -> hwthread 124 - OK[0m[1;34m
[0m[1;34m	threadid 22691654399360 -> hwthread 125 - OK[0m[1;34m
[0m[1;34m	threadid 22691453072896 -> hwthread 126 - OK[0m[1;34m
[0m[1;34m	threadid 22691251746432 -> hwthread 127 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22703606970112 -> hwthread 64 - OK[0m[1;34m
[0m[1;34m	threadid 22703427802880 -> hwthread 65 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 117, m: 117)                                                               	 1.15644   	 700       	 9.04833   	 0         	 0.199431  	 45.3707   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5850, cols: 117, reductionFactor: 37, colBlockingSize: 12)                 	 0.78901   	 600       	 125.086   	 0         	 4.24718   	 29.4515   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5850, cols: 67, reductionFactor: 37, colBlockingSize: 12)                  	 0.330744  	 700       	 114.163   	 0         	 6.71232   	 17.0079   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 117, n: 50, r: 117, r2: 117)          	 0.305744  	 600       	 314.304   	 0         	 21.7058   	 14.4802   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 117, r: 117, r2: 5850, leftOrthog: 0)      	 0.235713  	 600       	 407.685   	 0         	 42.3714   	 9.62171   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 5850, Xcols: 67, r: 67, streamingCols: 0)                   	 0.114837  	 700       	 160.075   	 0         	 38.3363   	 4.17554   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 117, Qr2: 67)      	 0.108061  	 700       	 0         	 0         	 62.2595   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 117, reductionFactor: 37, colBlockingSize: 12)                 	 0.104937  	 100       	 66.9874   	 0         	 2.33426   	 28.6975   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 67, m: 3350, k: 67) 	 0.0669221 	 700       	 314.596   	 0         	 37.9393   	 8.29208   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 117)                                                                	 0.0571485 	 100       	 4.38624   	 0         	 0.19948   	 21.9883   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 67, m: 67)                                                                  	 0.0559785 	 800       	 5.731     	 0         	 1.54734   	 3.70378   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 5850, m: 67)                                                                       	 0.0484802 	 700       	 0         	 0         	 90.5492   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                 	 0.0406631 	 100       	 2.8691    	 0         	 0.148538  	 19.3157   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 67, k: 2500)   	 0.0400434 	 800       	 334.637   	 0         	 47.2847   	 7.07707   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 67, reductionFactor: 37, colBlockingSize: 12)                  	 0.0385003 	 100       	 59.8738   	 0         	 3.57377   	 16.7537   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 67, n: 50, r2: 67)                   	 0.0312604 	 700       	 0         	 0         	 140.428   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 2500, m: 67, k: 50)	 0.0295698 	 800       	 453.165   	 0         	 64.033    	 7.07707   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5850, cols: 50, reductionFactor: 37, colBlockingSize: 12)                  	 0.0289844 	 100       	 103.644   	 0         	 8.1423    	 12.729    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 67, n: 50, r2: 67)                                                                                         	 0.0284429 	 700       	 0         	 0         	 88.3821   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 5850, m: 67)                                                              	 0.0267658 	 700       	 0         	 0         	 164.009   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 3350, k: 67) 	 0.0234579 	 700       	 669.773   	 0         	 94.368    	 7.09746   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r: 117, r2: 117)           	 0.0199664 	 100       	 342.801   	 0         	 23.9879   	 14.2906   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 117, r: 117, r2: 2500, leftOrthog: 0)      	 0.0191642 	 100       	 357.151   	 0         	 37.7737   	 9.455     
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 117, n: 50, r: 117, r2: 50)           	 0.0163769 	 100       	 417.936   	 0         	 48.0091   	 8.70536   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 5850, leftOrthog: 0)        	 0.0150234 	 100       	 194.696   	 0         	 46.9934   	 4.14306   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 117, reductionFactor: 37, colBlockingSize: 12)                   	 0.0111989 	 100       	 12.5539   	 0         	 1.39578   	 8.99417   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 67, r: 67, streamingCols: 0)                   	 0.0107498 	 100       	 104.397   	 0         	 25.0978   	 4.15963   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 2500, m: 67)                                                                       	 0.00689214	 100       	 0         	 0         	 38.8849   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 50, Qr2: 67)       	 0.00608934	 100       	 0         	 0         	 76.8556   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 0, n: 50, r2: 67)                    	 0.00607688	 100       	 0         	 0         	 44.1016   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 67)                                                              	 0.00580113	 100       	 0         	 0         	 46.1979   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 3350, k: 50) 	 0.00480979	 100       	 348.248   	 0         	 56.1355   	 6.2037    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                  	 0.00459657	 100       	 3.62588   	 0         	 1.31402   	 2.75937   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 50, reductionFactor: 37, colBlockingSize: 12)                    	 0.00384075	 100       	 6.68507   	 0         	 1.04146   	 6.41892   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 117, r: 50, r2: 50, leftOrthog: 0)         	 0.00260935	 100       	 22.4194   	 0         	 6.9136    	 3.24279   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 67)                                                                                         	 0.00237912	 100       	 0         	 0         	 112.647   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 67, m: 67, fromLeft: 0)                	 0.00158912	 800       	 0         	 0         	 36.1578   	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                   	 0.00106659	 100       	 0.468784  	 0         	 1.87513   	 0.25      
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50, k: 50)     	 0.00105917	 100       	 23.6034   	 0         	 5.66482   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 50, k: 67)   	 0.000982998	 100       	 34.0794   	 0         	 7.4873    	 4.55163   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 67, m: 50, k: 67)   	 0.000859799	 100       	 52.2099   	 0         	 10.4108   	 5.01497   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 67, n: 50, r2: 1)                                                                                          	 0.000823968	 200       	 0         	 0         	 13.0102   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                          	 0.000820042	 200       	 0         	 0         	 9.7556    	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 50, r2: 50)              	 0.00081083	 100       	 30.8326   	 0         	 7.39982   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 50, m: 50, k: 50)  	 0.000629276	 100       	 39.7282   	 0         	 9.53477   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 1, r1low: 0, n: 50, r2: 50)                     	 0.000562559	 100       	 0         	 0         	 7.11037   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                          	 0.000525611	 100       	 0         	 0         	 7.61019   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 67, n: 50, r2: 1)                    	 0.000516612	 100       	 0         	 0         	 18.118    	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 1, Xr2: 50, Qr1: 1, Qr2: 0)          	 0.000454327	 100       	 0         	 0         	 8.80423   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 50)                                                                	 0.000430386	 100       	 0         	 0         	 9.29398   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                            	 0.000420577	 100       	 1.18884   	 0         	 14.2661   	 0.0833333 
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                 	 0.000412636	 100       	 0.605861  	 0         	 9.69377   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 67, n: 50, r2: 1)                                                                                 	 0.000355289	 100       	 0.942894  	 0         	 15.0863   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                 	 0.000329813	 100       	 0.758005  	 0         	 12.1281   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 0, m: 3350, k: 50)  	 6.97e-06  	 100       	 0         	 0         	 19225.3   	 0         
Timing statistics:
function                                                                                                                                                                                      	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                        	 4.71454   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_normalized(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                     	 4.71447   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::rightNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                            	 3.71973   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::rightNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                        	 3.71825   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double]	 3.30532   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                  	 1.30722   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                               	 1.25425   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_leftOrthogonalize(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&) [with T = double]                                   	 0.994672  	 100       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                            	 0.934751  	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]           	 0.663757  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.373553  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                           	 0.342899  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                	 0.27251   	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                    	 0.125586  	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                                       	 0.114605  	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double]        	 0.0970396 	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.0605751 	 900       
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                       	 0.0553723 	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double]          	 0.0411026 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                        	 0.0384165 	 1000      
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                              	 0.0329973 	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                	 0.0329916 	 1300      
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double]       	 0.030199  	 900       
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                	 0.00551061	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                              	 0.00382868	 6400      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                         	 0.00205382	 5200      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                           	 0.00158912	 800       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                       	 0.00109774	 300       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                         	 0.00106659	 100       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                                                  	 0.000420577	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
orthoX: L, orthoY: L
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 64
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->65  [0m[1;34m1->66  [0m[1;34m2->67  [0m[1;34m3->68  [0m[1;34m4->69  [0m[1;34m5->70  [0m[1;34m6->71  [0m[1;34m7->72  [0m[1;34m8->73  [0m[1;34m9->74  [0m[1;34m10->75  [0m[1;34m11->76  [0m[1;34m12->77  [0m[1;34m13->78  [0m[1;34m14->79  [0m[1;34m15->80  [0m[1;34m16->81  [0m[1;34m17->82  [0m[1;34m18->83  [0m[1;34m19->84  [0m[1;34m20->85  [0m[1;34m21->86  [0m[1;34m22->87  [0m[1;34m23->88  [0m[1;34m24->89  [0m[1;34m25->90  [0m[1;34m26->91  [0m[1;34m27->92  [0m[1;34m28->93  [0m[1;34m29->94  [0m[1;34m30->95  [0m[1;34m31->96  [0m[1;34m32->97  [0m[1;34m33->98  [0m[1;34m34->99  [0m[1;34m35->100  [0m[1;34m36->101  [0m[1;34m37->102  [0m[1;34m38->103  [0m[1;34m39->104  [0m[1;34m40->105  [0m[1;34m41->106  [0m[1;34m42->107  [0m[1;34m43->108  [0m[1;34m44->109  [0m[1;34m45->110  [0m[1;34m46->111  [0m[1;34m47->112  [0m[1;34m48->113  [0m[1;34m49->114  [0m[1;34m50->115  [0m[1;34m51->116  [0m[1;34m52->117  [0m[1;34m53->118  [0m[1;34m54->119  [0m[1;34m55->120  [0m[1;34m56->121  [0m[1;34m57->122  [0m[1;34m58->123  [0m[1;34m59->124  [0m[1;34m60->125  [0m[1;34m61->126  [0m[1;34m62->127  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22435632031616 -> hwthread 65 - OK[0m[1;34m
[0m[1;34m	threadid 22435432753152 -> hwthread 66 - OK[0m[1;34m
[0m[1;34m	threadid 22435231426688 -> hwthread 67 - OK[0m[1;34m
[0m[1;34m	threadid 22435030100224 -> hwthread 68 - OK[0m[1;34m
[0m[1;34m	threadid 22434828773760 -> hwthread 69 - OK[0m[1;34m
[0m[1;34m	threadid 22434627447296 -> hwthread 70 - OK[0m[1;34m
[0m[1;34m	threadid 22434426120832 -> hwthread 71 - OK[0m[1;34m
[0m[1;34m	threadid 22434224794368 -> hwthread 72 - OK[0m[1;34m
[0m[1;34m	threadid 22434023467904 -> hwthread 73 - OK[0m[1;34m
[0m[1;34m	threadid 22433822141440 -> hwthread 74 - OK[0m[1;34m
[0m[1;34m	threadid 22433620814976 -> hwthread 75 - OK[0m[1;34m
[0m[1;34m	threadid 22433419488512 -> hwthread 76 - OK[0m[1;34m
[0m[1;34m	threadid 22433218162048 -> hwthread 77 - OK[0m[1;34m
[0m[1;34m	threadid 22433016835584 -> hwthread 78 - OK[0m[1;34m
[0m[1;34m	threadid 22432815509120 -> hwthread 79 - OK[0m[1;34m
[0m[1;34m	threadid 22432614182656 -> hwthread 80 - OK[0m[1;34m
[0m[1;34m	threadid 22432412856192 -> hwthread 81 - OK[0m[1;34m
[0m[1;34m	threadid 22432211529728 -> hwthread 82 - OK[0m[1;34m
[0m[1;34m	threadid 22432010203264 -> hwthread 83 - OK[0m[1;34m
[0m[1;34m	threadid 22431808876800 -> hwthread 84 - OK[0m[1;34m
[0m[1;34m	threadid 22431607550336 -> hwthread 85 - OK[0m[1;34m
[0m[1;34m	threadid 22431406223872 -> hwthread 86 - OK[0m[1;34m
[0m[1;34m	threadid 22431204897408 -> hwthread 87 - OK[0m[1;34m
[0m[1;34m	threadid 22431003570944 -> hwthread 88 - OK[0m[1;34m
[0m[1;34m	threadid 22430802244480 -> hwthread 89 - OK[0m[1;34m
[0m[1;34m	threadid 22430600918016 -> hwthread 90 - OK[0m[1;34m
[0m[1;34m	threadid 22430399591552 -> hwthread 91 - OK[0m[1;34m
[0m[1;34m	threadid 22430198265088 -> hwthread 92 - OK[0m[1;34m
[0m[1;34m	threadid 22429996938624 -> hwthread 93 - OK[0m[1;34m
[0m[1;34m	threadid 22429795612160 -> hwthread 94 - OK[0m[1;34m
[0m[1;34m	threadid 22429594285696 -> hwthread 95 - OK[0m[1;34m
[0m[1;34m	threadid 22429392959232 -> hwthread 96 - OK[0m[1;34m
[0m[1;34m	threadid 22429191628672 -> hwthread 97 - OK[0m[1;34m
[0m[1;34m	threadid 22428990302208 -> hwthread 98 - OK[0m[1;34m
[0m[1;34m	threadid 22428788975744 -> hwthread 99 - OK[0m[1;34m
[0m[1;34m	threadid 22428587649280 -> hwthread 100 - OK[0m[1;34m
[0m[1;34m	threadid 22428386322816 -> hwthread 101 - OK[0m[1;34m
[0m[1;34m	threadid 22428184996352 -> hwthread 102 - OK[0m[1;34m
[0m[1;34m	threadid 22427983669888 -> hwthread 103 - OK[0m[1;34m
[0m[1;34m	threadid 22427782343424 -> hwthread 104 - OK[0m[1;34m
[0m[1;34m	threadid 22427581016960 -> hwthread 105 - OK[0m[1;34m
[0m[1;34m	threadid 22427379690496 -> hwthread 106 - OK[0m[1;34m
[0m[1;34m	threadid 22427178364032 -> hwthread 107 - OK[0m[1;34m
[0m[1;34m	threadid 22426977037568 -> hwthread 108 - OK[0m[1;34m
[0m[1;34m	threadid 22426775711104 -> hwthread 109 - OK[0m[1;34m
[0m[1;34m	threadid 22426574384640 -> hwthread 110 - OK[0m[1;34m
[0m[1;34m	threadid 22426373058176 -> hwthread 111 - OK[0m[1;34m
[0m[1;34m	threadid 22426171731712 -> hwthread 112 - OK[0m[1;34m
[0m[1;34m	threadid 22425970405248 -> hwthread 113 - OK[0m[1;34m
[0m[1;34m	threadid 22425769078784 -> hwthread 114 - OK[0m[1;34m
[0m[1;34m	threadid 22425567752320 -> hwthread 115 - OK[0m[1;34m
[0m[1;34m	threadid 22425366425856 -> hwthread 116 - OK[0m[1;34m
[0m[1;34m	threadid 22425165099392 -> hwthread 117 - OK[0m[1;34m
[0m[1;34m	threadid 22424963772928 -> hwthread 118 - OK[0m[1;34m
[0m[1;34m	threadid 22424762446464 -> hwthread 119 - OK[0m[1;34m
[0m[1;34m	threadid 22424561120000 -> hwthread 120 - OK[0m[1;34m
[0m[1;34m	threadid 22424359793536 -> hwthread 121 - OK[0m[1;34m
[0m[1;34m	threadid 22424158467072 -> hwthread 122 - OK[0m[1;34m
[0m[1;34m	threadid 22423957140608 -> hwthread 123 - OK[0m[1;34m
[0m[1;34m	threadid 22423755814144 -> hwthread 124 - OK[0m[1;34m
[0m[1;34m	threadid 22423554487680 -> hwthread 125 - OK[0m[1;34m
[0m[1;34m	threadid 22423353161216 -> hwthread 126 - OK[0m[1;34m
[0m[1;34m	threadid 22423151834752 -> hwthread 127 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22435526371072 -> hwthread 64 - OK[0m[1;34m
[0m[1;34m	threadid 22435519780608 -> hwthread 65 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 118, m: 118)                                                               	 1.14478   	 700       	 9.37692   	 0         	 0.204917  	 45.7596   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5900, cols: 118, reductionFactor: 37, colBlockingSize: 12)                 	 0.795084  	 600       	 127.34    	 0         	 4.28709   	 29.7032   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5900, cols: 68, reductionFactor: 37, colBlockingSize: 12)                  	 0.333864  	 700       	 117.492   	 0         	 6.807     	 17.2605   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 118, n: 50, r: 118, r2: 118)          	 0.320112  	 600       	 307.961   	 0         	 21.0875   	 14.604    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 118, r: 118, r2: 5900, leftOrthog: 0)      	 0.236303  	 600       	 417.185   	 0         	 42.9913   	 9.70395   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 5900, Xcols: 68, r: 68, streamingCols: 0)                   	 0.115622  	 700       	 165.169   	 0         	 38.9752   	 4.23779   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 118, reductionFactor: 37, colBlockingSize: 12)                 	 0.104991  	 100       	 68.1025   	 0         	 2.3539    	 28.9317   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 118, Qr2: 68)      	 0.103843  	 700       	 0         	 0         	 65.9209   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 68, m: 3400, k: 68) 	 0.0664718 	 700       	 331.121   	 0         	 39.345    	 8.41584   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 118)                                                                	 0.0571572 	 100       	 4.42056   	 0         	 0.20085   	 22.0093   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 68, m: 68)                                                                  	 0.0565736 	 800       	 5.92845   	 0         	 1.57699   	 3.75934   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 5900, m: 68)                                                                       	 0.0520454 	 700       	 0         	 0         	 86.3369   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                 	 0.0409633 	 100       	 2.84808   	 0         	 0.147449  	 19.3157   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 68, k: 2500)   	 0.0394629 	 800       	 344.627   	 0         	 48.3938   	 7.12131   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 68, reductionFactor: 37, colBlockingSize: 12)                  	 0.0392968 	 100       	 60.4244   	 0         	 3.55498   	 16.9971   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 68, n: 50, r2: 68)                   	 0.0308985 	 700       	 0         	 0         	 145.426   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 5900, m: 68)                                                              	 0.0300348 	 700       	 0         	 0         	 149.608   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 2500, m: 68, k: 50)	 0.0296857 	 800       	 458.133   	 0         	 64.3327   	 7.12131   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 68, n: 50, r2: 68)                                                                                         	 0.0293259 	 700       	 0         	 0         	 88.2986   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5900, cols: 50, reductionFactor: 37, colBlockingSize: 12)                  	 0.0292857 	 100       	 103.454   	 0         	 8.12684   	 12.73     
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 3400, k: 68) 	 0.0239103 	 700       	 676.863   	 0         	 94.7608   	 7.14286   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r: 118, r2: 118)           	 0.0212208 	 100       	 328.075   	 0         	 22.7673   	 14.4099   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 118, r: 118, r2: 2500, leftOrthog: 0)      	 0.0193785 	 100       	 359.263   	 0         	 37.6849   	 9.53335   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 118, n: 50, r: 118, r2: 50)           	 0.0166787 	 100       	 417.417   	 0         	 47.8261   	 8.72781   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 5900, leftOrthog: 0)        	 0.0146859 	 100       	 200.873   	 0         	 48.482    	 4.14326   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 118, reductionFactor: 37, colBlockingSize: 12)                   	 0.0125432 	 100       	 11.4009   	 0         	 1.26437   	 9.01705   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 68, r: 68, streamingCols: 0)                   	 0.0109044 	 100       	 106.012   	 0         	 25.1137   	 4.2213    
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 2500, m: 68)                                                                       	 0.00629254	 100       	 0         	 0         	 43.2258   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 50, Qr2: 68)       	 0.00596351	 100       	 0         	 0         	 79.148    	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 0, n: 50, r2: 68)                    	 0.00592487	 100       	 0         	 0         	 45.9081   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 68)                                                              	 0.00531144	 100       	 0         	 0         	 51.2102   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 3400, k: 50) 	 0.00487314	 100       	 348.851   	 0         	 56.2266   	 6.20438   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                  	 0.00444329	 100       	 3.75096   	 0         	 1.35935   	 2.75937   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 50, reductionFactor: 37, colBlockingSize: 12)                    	 0.00343671	 100       	 7.471     	 0         	 1.1639    	 6.41892   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 118, r: 50, r2: 50, leftOrthog: 0)         	 0.00248197	 100       	 23.7714   	 0         	 7.31677   	 3.2489    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 68)                                                                                         	 0.00241951	 100       	 0         	 0         	 112.42    	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 68, m: 68, fromLeft: 0)                	 0.00104578	 800       	 0         	 0         	 56.5962   	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                   	 0.000900341	 100       	 0.555345  	 0         	 2.22138   	 0.25      
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 68, m: 50, k: 68)   	 0.000852605	 100       	 54.2338   	 0         	 10.7191   	 5.05952   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50, k: 50)     	 0.000844646	 100       	 29.5982   	 0         	 7.10357   	 4.16667   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 50, r2: 50)              	 0.000807792	 100       	 30.9486   	 0         	 7.42765   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                          	 0.000803328	 200       	 0         	 0         	 9.95857   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 68, n: 50, r2: 1)                                                                                          	 0.000797394	 200       	 0         	 0         	 13.6444   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 50, k: 68)   	 0.000794105	 100       	 42.8155   	 0         	 9.36904   	 4.56989   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 50, m: 50, k: 50)  	 0.000671038	 100       	 37.2557   	 0         	 8.94137   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 1, r1low: 0, n: 50, r2: 50)                     	 0.000542137	 100       	 0         	 0         	 7.37821   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 68, n: 50, r2: 1)                    	 0.000510189	 100       	 0         	 0         	 18.5029   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                          	 0.000493304	 100       	 0         	 0         	 8.10859   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 50)                                                                	 0.000477294	 100       	 0         	 0         	 8.38058   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                            	 0.000463476	 100       	 1.0788    	 0         	 12.9457   	 0.0833333 
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 68, n: 50, r2: 1)                                                                                 	 0.000421193	 100       	 0.807231  	 0         	 12.9157   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 1, Xr2: 50, Qr1: 1, Qr2: 0)          	 0.00041457	 100       	 0         	 0         	 9.64855   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                 	 0.000403262	 100       	 0.619944  	 0         	 9.91911   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                 	 0.000325631	 100       	 0.76774   	 0         	 12.2838   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 0, m: 3400, k: 50)  	 6.74e-06  	 100       	 0         	 0         	 20178     	 0         
Timing statistics:
function                                                                                                                                                                                      	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                        	 4.76881   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_normalized(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                     	 4.76876   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::rightNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                            	 3.76665   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::rightNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                        	 3.76513   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double]	 3.33508   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                  	 1.3185    	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                               	 1.2429    	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_leftOrthogonalize(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&) [with T = double]                                   	 1.00203   	 100       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                            	 0.942571  	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]           	 0.672838  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.377047  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                           	 0.358819  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                	 0.272849  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                    	 0.126526  	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                                       	 0.110221  	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double]        	 0.0969087 	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.0610169 	 900       
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                       	 0.0583379 	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double]          	 0.0403076 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                        	 0.0378757 	 1000      
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                              	 0.0358236 	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                	 0.0338395 	 1300      
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double]       	 0.0303567 	 900       
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                	 0.00913649	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                              	 0.00361692	 6400      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                         	 0.0033156 	 5200      
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                       	 0.00115009	 300       
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                           	 0.00104578	 800       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                         	 0.000900341	 100       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                                                  	 0.000463476	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
orthoX: L, orthoY: L
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 64
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->65  [0m[1;34m1->66  [0m[1;34m2->67  [0m[1;34m3->68  [0m[1;34m4->69  [0m[1;34m5->70  [0m[1;34m6->71  [0m[1;34m7->72  [0m[1;34m8->73  [0m[1;34m9->74  [0m[1;34m10->75  [0m[1;34m11->76  [0m[1;34m12->77  [0m[1;34m13->78  [0m[1;34m14->79  [0m[1;34m15->80  [0m[1;34m16->81  [0m[1;34m17->82  [0m[1;34m18->83  [0m[1;34m19->84  [0m[1;34m20->85  [0m[1;34m21->86  [0m[1;34m22->87  [0m[1;34m23->88  [0m[1;34m24->89  [0m[1;34m25->90  [0m[1;34m26->91  [0m[1;34m27->92  [0m[1;34m28->93  [0m[1;34m29->94  [0m[1;34m30->95  [0m[1;34m31->96  [0m[1;34m32->97  [0m[1;34m33->98  [0m[1;34m34->99  [0m[1;34m35->100  [0m[1;34m36->101  [0m[1;34m37->102  [0m[1;34m38->103  [0m[1;34m39->104  [0m[1;34m40->105  [0m[1;34m41->106  [0m[1;34m42->107  [0m[1;34m43->108  [0m[1;34m44->109  [0m[1;34m45->110  [0m[1;34m46->111  [0m[1;34m47->112  [0m[1;34m48->113  [0m[1;34m49->114  [0m[1;34m50->115  [0m[1;34m51->116  [0m[1;34m52->117  [0m[1;34m53->118  [0m[1;34m54->119  [0m[1;34m55->120  [0m[1;34m56->121  [0m[1;34m57->122  [0m[1;34m58->123  [0m[1;34m59->124  [0m[1;34m60->125  [0m[1;34m61->126  [0m[1;34m62->127  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23085288822656 -> hwthread 65 - OK[0m[1;34m
[0m[1;34m	threadid 23085113665536 -> hwthread 66 - OK[0m[1;34m
[0m[1;34m	threadid 23084912339072 -> hwthread 67 - OK[0m[1;34m
[0m[1;34m	threadid 23084711012608 -> hwthread 68 - OK[0m[1;34m
[0m[1;34m	threadid 23084509686144 -> hwthread 69 - OK[0m[1;34m
[0m[1;34m	threadid 23084308359680 -> hwthread 70 - OK[0m[1;34m
[0m[1;34m	threadid 23084107033216 -> hwthread 71 - OK[0m[1;34m
[0m[1;34m	threadid 23083905706752 -> hwthread 72 - OK[0m[1;34m
[0m[1;34m	threadid 23083704380288 -> hwthread 73 - OK[0m[1;34m
[0m[1;34m	threadid 23083503053824 -> hwthread 74 - OK[0m[1;34m
[0m[1;34m	threadid 23083301727360 -> hwthread 75 - OK[0m[1;34m
[0m[1;34m	threadid 23083100400896 -> hwthread 76 - OK[0m[1;34m
[0m[1;34m	threadid 23082899074432 -> hwthread 77 - OK[0m[1;34m
[0m[1;34m	threadid 23082697747968 -> hwthread 78 - OK[0m[1;34m
[0m[1;34m	threadid 23082496421504 -> hwthread 79 - OK[0m[1;34m
[0m[1;34m	threadid 23082295095040 -> hwthread 80 - OK[0m[1;34m
[0m[1;34m	threadid 23082093768576 -> hwthread 81 - OK[0m[1;34m
[0m[1;34m	threadid 23081892442112 -> hwthread 82 - OK[0m[1;34m
[0m[1;34m	threadid 23081691115648 -> hwthread 83 - OK[0m[1;34m
[0m[1;34m	threadid 23081489789184 -> hwthread 84 - OK[0m[1;34m
[0m[1;34m	threadid 23081288462720 -> hwthread 85 - OK[0m[1;34m
[0m[1;34m	threadid 23081087136256 -> hwthread 86 - OK[0m[1;34m
[0m[1;34m	threadid 23080885809792 -> hwthread 87 - OK[0m[1;34m
[0m[1;34m	threadid 23080684483328 -> hwthread 88 - OK[0m[1;34m
[0m[1;34m	threadid 23080483156864 -> hwthread 89 - OK[0m[1;34m
[0m[1;34m	threadid 23080281830400 -> hwthread 90 - OK[0m[1;34m
[0m[1;34m	threadid 23080080503936 -> hwthread 91 - OK[0m[1;34m
[0m[1;34m	threadid 23079879177472 -> hwthread 92 - OK[0m[1;34m
[0m[1;34m	threadid 23079677851008 -> hwthread 93 - OK[0m[1;34m
[0m[1;34m	threadid 23079476524544 -> hwthread 94 - OK[0m[1;34m
[0m[1;34m	threadid 23079275198080 -> hwthread 95 - OK[0m[1;34m
[0m[1;34m	threadid 23079073871616 -> hwthread 96 - OK[0m[1;34m
[0m[1;34m	threadid 23078872541056 -> hwthread 97 - OK[0m[1;34m
[0m[1;34m	threadid 23078671214592 -> hwthread 98 - OK[0m[1;34m
[0m[1;34m	threadid 23078469888128 -> hwthread 99 - OK[0m[1;34m
[0m[1;34m	threadid 23078268561664 -> hwthread 100 - OK[0m[1;34m
[0m[1;34m	threadid 23078067235200 -> hwthread 101 - OK[0m[1;34m
[0m[1;34m	threadid 23077865908736 -> hwthread 102 - OK[0m[1;34m
[0m[1;34m	threadid 23077664582272 -> hwthread 103 - OK[0m[1;34m
[0m[1;34m	threadid 23077463255808 -> hwthread 104 - OK[0m[1;34m
[0m[1;34m	threadid 23077261929344 -> hwthread 105 - OK[0m[1;34m
[0m[1;34m	threadid 23077060602880 -> hwthread 106 - OK[0m[1;34m
[0m[1;34m	threadid 23076859276416 -> hwthread 107 - OK[0m[1;34m
[0m[1;34m	threadid 23076657949952 -> hwthread 108 - OK[0m[1;34m
[0m[1;34m	threadid 23076456623488 -> hwthread 109 - OK[0m[1;34m
[0m[1;34m	threadid 23076255297024 -> hwthread 110 - OK[0m[1;34m
[0m[1;34m	threadid 23076053970560 -> hwthread 111 - OK[0m[1;34m
[0m[1;34m	threadid 23075852644096 -> hwthread 112 - OK[0m[1;34m
[0m[1;34m	threadid 23075651317632 -> hwthread 113 - OK[0m[1;34m
[0m[1;34m	threadid 23075449991168 -> hwthread 114 - OK[0m[1;34m
[0m[1;34m	threadid 23075248664704 -> hwthread 115 - OK[0m[1;34m
[0m[1;34m	threadid 23075047338240 -> hwthread 116 - OK[0m[1;34m
[0m[1;34m	threadid 23074846011776 -> hwthread 117 - OK[0m[1;34m
[0m[1;34m	threadid 23074644685312 -> hwthread 118 - OK[0m[1;34m
[0m[1;34m	threadid 23074443358848 -> hwthread 119 - OK[0m[1;34m
[0m[1;34m	threadid 23074242032384 -> hwthread 120 - OK[0m[1;34m
[0m[1;34m	threadid 23074040705920 -> hwthread 121 - OK[0m[1;34m
[0m[1;34m	threadid 23073839379456 -> hwthread 122 - OK[0m[1;34m
[0m[1;34m	threadid 23073638052992 -> hwthread 123 - OK[0m[1;34m
[0m[1;34m	threadid 23073436726528 -> hwthread 124 - OK[0m[1;34m
[0m[1;34m	threadid 23073235400064 -> hwthread 125 - OK[0m[1;34m
[0m[1;34m	threadid 23073034073600 -> hwthread 126 - OK[0m[1;34m
[0m[1;34m	threadid 23072832747136 -> hwthread 127 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23085183162112 -> hwthread 64 - OK[0m[1;34m
[0m[1;34m	threadid 23085004580608 -> hwthread 65 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 119, m: 119)                                                               	 1.19319   	 700       	 9.22714   	 0         	 0.199945  	 46.1485   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5950, cols: 119, reductionFactor: 37, colBlockingSize: 12)                 	 0.806086  	 600       	 128.823   	 0         	 4.30055   	 29.955    
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5950, cols: 69, reductionFactor: 37, colBlockingSize: 12)                  	 0.348068  	 700       	 117.02    	 0         	 6.68186   	 17.5131   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 119, n: 50, r: 119, r2: 119)          	 0.303594  	 600       	 333.042   	 0         	 22.6133   	 14.7277   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 119, r: 119, r2: 5950, leftOrthog: 0)      	 0.24546   	 600       	 411.918   	 0         	 42.0918   	 9.78618   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 5950, Xcols: 69, r: 69, streamingCols: 0)                   	 0.122175  	 700       	 162.304   	 0         	 37.7448   	 4.30003   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 119, reductionFactor: 37, colBlockingSize: 12)                 	 0.107536  	 100       	 67.6229   	 0         	 2.31857   	 29.1658   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 119, Qr2: 69)      	 0.0949323 	 700       	 0         	 0         	 73.3592   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 69, m: 3450, k: 69) 	 0.0689602 	 700       	 333.462   	 0         	 39.0489   	 8.5396    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 69, m: 69)                                                                  	 0.0623715 	 800       	 5.6181    	 0         	 1.47267   	 3.8149    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 119)                                                                	 0.0567835 	 100       	 4.48487   	 0         	 0.20358   	 22.03     
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 5950, m: 69)                                                                       	 0.0495176 	 700       	 0         	 0         	 92.8591   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 69, reductionFactor: 37, colBlockingSize: 12)                  	 0.0412366 	 100       	 59.288    	 0         	 3.4389    	 17.2404   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 69, k: 2500)   	 0.0401687 	 800       	 343.551   	 0         	 47.9498   	 7.16481   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                 	 0.0397732 	 100       	 2.9333    	 0         	 0.151861  	 19.3157   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 69, n: 50, r2: 69)                   	 0.0318531 	 700       	 0         	 0         	 144.355   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 2500, m: 69, k: 50)	 0.0302804 	 800       	 455.74    	 0         	 63.6081   	 7.16481   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 5950, m: 69)                                                              	 0.0296075 	 700       	 0         	 0         	 155.304   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5950, cols: 50, reductionFactor: 37, colBlockingSize: 12)                  	 0.0291072 	 100       	 104.971   	 0         	 8.24539   	 12.7309   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 69, n: 50, r2: 69)                                                                                         	 0.028863  	 700       	 0         	 0         	 92.373    	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 3450, k: 69) 	 0.0250765 	 700       	 664.507   	 0         	 92.4531   	 7.1875    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r: 119, r2: 119)           	 0.0217231 	 100       	 325.943   	 0         	 22.4337   	 14.5292   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 119, r: 119, r2: 2500, leftOrthog: 0)      	 0.0192421 	 100       	 367.97    	 0         	 38.2837   	 9.61166   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 5950, leftOrthog: 0)        	 0.0174285 	 100       	 170.697   	 0         	 41.1969   	 4.14345   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 119, n: 50, r: 119, r2: 50)           	 0.0160078 	 100       	 442.314   	 0         	 50.5502   	 8.75      
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 119, reductionFactor: 37, colBlockingSize: 12)                   	 0.0123622 	 100       	 11.7646   	 0         	 1.30145   	 9.03966   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 69, r: 69, streamingCols: 0)                   	 0.0112017 	 100       	 106.256   	 0         	 24.8091   	 4.28295   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 50, Qr2: 69)       	 0.00628975	 100       	 0         	 0         	 75.6787   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 2500, m: 69)                                                                       	 0.00611992	 100       	 0         	 0         	 45.0986   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 69)                                                              	 0.00475281	 100       	 0         	 0         	 58.0709   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 0, n: 50, r2: 69)                    	 0.00473135	 100       	 0         	 0         	 58.3343   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                  	 0.00445769	 100       	 3.73884   	 0         	 1.35496   	 2.75937   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 3450, k: 50) 	 0.00413979	 100       	 416.687   	 0         	 67.1531   	 6.20504   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 50, reductionFactor: 37, colBlockingSize: 12)                    	 0.0035569 	 100       	 7.21855   	 0         	 1.12457   	 6.41892   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 119, r: 50, r2: 50, leftOrthog: 0)         	 0.00283979	 100       	 20.9523   	 0         	 6.43711   	 3.25492   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 69)                                                                                         	 0.00221528	 100       	 0         	 0         	 124.589   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 69, m: 69, fromLeft: 0)                	 0.00161212	 800       	 0         	 0         	 37.8016   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 69, m: 50, k: 69)   	 0.000929434	 100       	 51.2247   	 0         	 10.0371   	 5.10355   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                   	 0.000863794	 100       	 0.578842  	 0         	 2.31537   	 0.25      
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50, k: 50)     	 0.00084784	 100       	 29.4867   	 0         	 7.07681   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 50, k: 69)   	 0.000830238	 100       	 41.5543   	 0         	 9.05764   	 4.58777   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 69, n: 50, r2: 1)                                                                                          	 0.000801562	 200       	 0         	 0         	 13.7731   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 50, r2: 50)              	 0.000797645	 100       	 31.3423   	 0         	 7.52214   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                          	 0.000782923	 200       	 0         	 0         	 10.2181   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 1, r1low: 0, n: 50, r2: 50)                     	 0.000727693	 100       	 0         	 0         	 5.49682   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 50, m: 50, k: 50)  	 0.000628105	 100       	 39.8023   	 0         	 9.55254   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 69, n: 50, r2: 1)                    	 0.000537884	 100       	 0         	 0         	 17.699    	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                          	 0.000529647	 100       	 0         	 0         	 7.5522    	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 1, Xr2: 50, Qr1: 1, Qr2: 0)          	 0.000491014	 100       	 0         	 0         	 8.14641   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 50)                                                                	 0.00043173	 100       	 0         	 0         	 9.26505   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                            	 0.00043089	 100       	 1.16039   	 0         	 13.9247   	 0.0833333 
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                 	 0.000389407	 100       	 0.642002  	 0         	 10.272    	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 69, n: 50, r2: 1)                                                                                 	 0.000356065	 100       	 0.968924  	 0         	 15.5028   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                 	 0.000347196	 100       	 0.720054  	 0         	 11.5209   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 0, m: 3450, k: 50)  	 6.31e-06  	 100       	 0         	 0         	 21870     	 0         
Timing statistics:
function                                                                                                                                                                                      	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                        	 4.81506   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_normalized(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                     	 4.815     	 100       
<PITTS::TensorTrain<double>> :: T PITTS::rightNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                            	 3.79342   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::rightNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                        	 3.79212   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double]	 3.39847   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                  	 1.34795   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                               	 1.28974   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_leftOrthogonalize(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&) [with T = double]                                   	 1.02151   	 100       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                            	 0.955724  	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]           	 0.699808  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.393322  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                           	 0.342123  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                	 0.284971  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                    	 0.133377  	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                                       	 0.101713  	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double]        	 0.0999425 	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.0668292 	 900       
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                       	 0.0556375 	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double]          	 0.0410166 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                        	 0.03785   	 1000      
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                              	 0.034792  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                	 0.0331924 	 1300      
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double]       	 0.0309085 	 900       
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                	 0.00598388	 1800      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                         	 0.00448488	 5200      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                              	 0.00355817	 6400      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                           	 0.00161212	 800       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                       	 0.00109267	 300       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                         	 0.000863794	 100       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                                                  	 0.00043089	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
orthoX: L, orthoY: L
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 64
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->65  [0m[1;34m1->66  [0m[1;34m2->67  [0m[1;34m3->68  [0m[1;34m4->69  [0m[1;34m5->70  [0m[1;34m6->71  [0m[1;34m7->72  [0m[1;34m8->73  [0m[1;34m9->74  [0m[1;34m10->75  [0m[1;34m11->76  [0m[1;34m12->77  [0m[1;34m13->78  [0m[1;34m14->79  [0m[1;34m15->80  [0m[1;34m16->81  [0m[1;34m17->82  [0m[1;34m18->83  [0m[1;34m19->84  [0m[1;34m20->85  [0m[1;34m21->86  [0m[1;34m22->87  [0m[1;34m23->88  [0m[1;34m24->89  [0m[1;34m25->90  [0m[1;34m26->91  [0m[1;34m27->92  [0m[1;34m28->93  [0m[1;34m29->94  [0m[1;34m30->95  [0m[1;34m31->96  [0m[1;34m32->97  [0m[1;34m33->98  [0m[1;34m34->99  [0m[1;34m35->100  [0m[1;34m36->101  [0m[1;34m37->102  [0m[1;34m38->103  [0m[1;34m39->104  [0m[1;34m40->105  [0m[1;34m41->106  [0m[1;34m42->107  [0m[1;34m43->108  [0m[1;34m44->109  [0m[1;34m45->110  [0m[1;34m46->111  [0m[1;34m47->112  [0m[1;34m48->113  [0m[1;34m49->114  [0m[1;34m50->115  [0m[1;34m51->116  [0m[1;34m52->117  [0m[1;34m53->118  [0m[1;34m54->119  [0m[1;34m55->120  [0m[1;34m56->121  [0m[1;34m57->122  [0m[1;34m58->123  [0m[1;34m59->124  [0m[1;34m60->125  [0m[1;34m61->126  [0m[1;34m62->127  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23295420397440 -> hwthread 65 - OK[0m[1;34m
[0m[1;34m	threadid 23295231518720 -> hwthread 66 - OK[0m[1;34m
[0m[1;34m	threadid 23295030192256 -> hwthread 67 - OK[0m[1;34m
[0m[1;34m	threadid 23294828865792 -> hwthread 68 - OK[0m[1;34m
[0m[1;34m	threadid 23294627539328 -> hwthread 69 - OK[0m[1;34m
[0m[1;34m	threadid 23294426212864 -> hwthread 70 - OK[0m[1;34m
[0m[1;34m	threadid 23294224886400 -> hwthread 71 - OK[0m[1;34m
[0m[1;34m	threadid 23294023559936 -> hwthread 72 - OK[0m[1;34m
[0m[1;34m	threadid 23293822233472 -> hwthread 73 - OK[0m[1;34m
[0m[1;34m	threadid 23293620907008 -> hwthread 74 - OK[0m[1;34m
[0m[1;34m	threadid 23293419580544 -> hwthread 75 - OK[0m[1;34m
[0m[1;34m	threadid 23293218254080 -> hwthread 76 - OK[0m[1;34m
[0m[1;34m	threadid 23293016927616 -> hwthread 77 - OK[0m[1;34m
[0m[1;34m	threadid 23292815601152 -> hwthread 78 - OK[0m[1;34m
[0m[1;34m	threadid 23292614274688 -> hwthread 79 - OK[0m[1;34m
[0m[1;34m	threadid 23292412948224 -> hwthread 80 - OK[0m[1;34m
[0m[1;34m	threadid 23292211621760 -> hwthread 81 - OK[0m[1;34m
[0m[1;34m	threadid 23292010295296 -> hwthread 82 - OK[0m[1;34m
[0m[1;34m	threadid 23291808968832 -> hwthread 83 - OK[0m[1;34m
[0m[1;34m	threadid 23291607642368 -> hwthread 84 - OK[0m[1;34m
[0m[1;34m	threadid 23291406315904 -> hwthread 85 - OK[0m[1;34m
[0m[1;34m	threadid 23291204989440 -> hwthread 86 - OK[0m[1;34m
[0m[1;34m	threadid 23291003662976 -> hwthread 87 - OK[0m[1;34m
[0m[1;34m	threadid 23290802336512 -> hwthread 88 - OK[0m[1;34m
[0m[1;34m	threadid 23290601010048 -> hwthread 89 - OK[0m[1;34m
[0m[1;34m	threadid 23290399683584 -> hwthread 90 - OK[0m[1;34m
[0m[1;34m	threadid 23290198357120 -> hwthread 91 - OK[0m[1;34m
[0m[1;34m	threadid 23289997030656 -> hwthread 92 - OK[0m[1;34m
[0m[1;34m	threadid 23289795704192 -> hwthread 93 - OK[0m[1;34m
[0m[1;34m	threadid 23289594377728 -> hwthread 94 - OK[0m[1;34m
[0m[1;34m	threadid 23289393051264 -> hwthread 95 - OK[0m[1;34m
[0m[1;34m	threadid 23289191724800 -> hwthread 96 - OK[0m[1;34m
[0m[1;34m	threadid 23288990394240 -> hwthread 97 - OK[0m[1;34m
[0m[1;34m	threadid 23288789067776 -> hwthread 98 - OK[0m[1;34m
[0m[1;34m	threadid 23288587741312 -> hwthread 99 - OK[0m[1;34m
[0m[1;34m	threadid 23288386414848 -> hwthread 100 - OK[0m[1;34m
[0m[1;34m	threadid 23288185088384 -> hwthread 101 - OK[0m[1;34m
[0m[1;34m	threadid 23287983761920 -> hwthread 102 - OK[0m[1;34m
[0m[1;34m	threadid 23287782435456 -> hwthread 103 - OK[0m[1;34m
[0m[1;34m	threadid 23287581108992 -> hwthread 104 - OK[0m[1;34m
[0m[1;34m	threadid 23287379782528 -> hwthread 105 - OK[0m[1;34m
[0m[1;34m	threadid 23287178456064 -> hwthread 106 - OK[0m[1;34m
[0m[1;34m	threadid 23286977129600 -> hwthread 107 - OK[0m[1;34m
[0m[1;34m	threadid 23286775803136 -> hwthread 108 - OK[0m[1;34m
[0m[1;34m	threadid 23286574476672 -> hwthread 109 - OK[0m[1;34m
[0m[1;34m	threadid 23286373150208 -> hwthread 110 - OK[0m[1;34m
[0m[1;34m	threadid 23286171823744 -> hwthread 111 - OK[0m[1;34m
[0m[1;34m	threadid 23285970497280 -> hwthread 112 - OK[0m[1;34m
[0m[1;34m	threadid 23285769170816 -> hwthread 113 - OK[0m[1;34m
[0m[1;34m	threadid 23285567844352 -> hwthread 114 - OK[0m[1;34m
[0m[1;34m	threadid 23285366517888 -> hwthread 115 - OK[0m[1;34m
[0m[1;34m	threadid 23285165191424 -> hwthread 116 - OK[0m[1;34m
[0m[1;34m	threadid 23284963864960 -> hwthread 117 - OK[0m[1;34m
[0m[1;34m	threadid 23284762538496 -> hwthread 118 - OK[0m[1;34m
[0m[1;34m	threadid 23284561212032 -> hwthread 119 - OK[0m[1;34m
[0m[1;34m	threadid 23284359885568 -> hwthread 120 - OK[0m[1;34m
[0m[1;34m	threadid 23284158559104 -> hwthread 121 - OK[0m[1;34m
[0m[1;34m	threadid 23283957232640 -> hwthread 122 - OK[0m[1;34m
[0m[1;34m	threadid 23283755906176 -> hwthread 123 - OK[0m[1;34m
[0m[1;34m	threadid 23283554579712 -> hwthread 124 - OK[0m[1;34m
[0m[1;34m	threadid 23283353253248 -> hwthread 125 - OK[0m[1;34m
[0m[1;34m	threadid 23283151926784 -> hwthread 126 - OK[0m[1;34m
[0m[1;34m	threadid 23282950600320 -> hwthread 127 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23295314736896 -> hwthread 64 - OK[0m[1;34m
[0m[1;34m	threadid 23295308146432 -> hwthread 65 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 120, m: 120)                                                               	 1.16596   	 700       	 9.68266   	 0         	 0.208062  	 46.5374   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6000, cols: 120, reductionFactor: 37, colBlockingSize: 12)                 	 0.826752  	 600       	 128.796   	 0         	 4.26382   	 30.2067   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6000, cols: 70, reductionFactor: 37, colBlockingSize: 12)                  	 0.348399  	 700       	 121.333   	 0         	 6.82963   	 17.7657   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 120, n: 50, r: 120, r2: 120)          	 0.33141   	 600       	 312.845   	 0         	 21.0649   	 14.8515   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 120, r: 120, r2: 6000, leftOrthog: 0)      	 0.244655  	 600       	 423.78    	 0         	 42.9431   	 9.86842   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 6000, Xcols: 70, r: 70, streamingCols: 0)                   	 0.12318   	 700       	 167.073   	 0         	 38.2994   	 4.36228   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 120, reductionFactor: 37, colBlockingSize: 12)                 	 0.112264  	 100       	 65.8681   	 0         	 2.24044   	 29.3996   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 120, Qr2: 70)      	 0.104262  	 700       	 0         	 0         	 67.9442   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 70, m: 3500, k: 70) 	 0.070526  	 700       	 340.442   	 0         	 39.2967   	 8.66337   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 70, m: 70)                                                                  	 0.0607487 	 800       	 6.02261   	 0         	 1.55605   	 3.87045   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 120)                                                                	 0.0577741 	 100       	 4.44259   	 0         	 0.201474  	 22.0504   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 6000, m: 70)                                                                       	 0.0488766 	 700       	 0         	 0         	 96.2423   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 70, reductionFactor: 37, colBlockingSize: 12)                  	 0.0409956 	 100       	 61.3778   	 0         	 3.51062   	 17.4834   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 70, k: 2500)   	 0.0409953 	 800       	 341.503   	 0         	 47.3811   	 7.20758   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                 	 0.0401406 	 100       	 2.90645   	 0         	 0.150471  	 19.3157   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 2500, m: 70, k: 50)	 0.0316582 	 800       	 442.223   	 0         	 61.3553   	 7.20758   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 70, n: 50, r2: 70)                                                                                         	 0.0302945 	 700       	 0         	 0         	 90.5775   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 70, n: 50, r2: 70)                   	 0.0300464 	 700       	 0         	 0         	 156.558   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6000, cols: 50, reductionFactor: 37, colBlockingSize: 12)                  	 0.0297312 	 100       	 103.631   	 0         	 8.13959   	 12.7317   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 6000, m: 70)                                                              	 0.0277209 	 700       	 0         	 0         	 169.692   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 3500, k: 70) 	 0.0251412 	 700       	 682.148   	 0         	 94.3314   	 7.2314    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r: 120, r2: 120)           	 0.0215316 	 100       	 334.392   	 0         	 22.8278   	 14.6484   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 120, r: 120, r2: 2500, leftOrthog: 0)      	 0.0197217 	 100       	 365.08    	 0         	 37.6763   	 9.68992   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 6000, leftOrthog: 0)        	 0.0172562 	 100       	 173.85    	 0         	 41.9559   	 4.14365   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 120, n: 50, r: 120, r2: 50)           	 0.0167143 	 100       	 430.768   	 0         	 49.1076   	 8.77193   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 120, reductionFactor: 37, colBlockingSize: 12)                   	 0.0119848 	 100       	 12.3399   	 0         	 1.36172   	 9.062     
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 70, r: 70, streamingCols: 0)                   	 0.0114923 	 100       	 106.593   	 0         	 24.5346   	 4.34459   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 2500, m: 70)                                                                       	 0.00605262	 100       	 0         	 0         	 46.2609   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 50, Qr2: 70)       	 0.00584156	 100       	 0         	 0         	 82.1699   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 70)                                                              	 0.00486999	 100       	 0         	 0         	 57.4949   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 0, n: 50, r2: 70)                    	 0.00469057	 100       	 0         	 0         	 59.6943   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                  	 0.00464155	 100       	 3.59074   	 0         	 1.30129   	 2.75937   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 3500, k: 50) 	 0.00376218	 100       	 465.156   	 0         	 74.9566   	 6.20567   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 50, reductionFactor: 37, colBlockingSize: 12)                    	 0.00289446	 100       	 8.87061   	 0         	 1.38195   	 6.41892   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 120, r: 50, r2: 50, leftOrthog: 0)         	 0.00274654	 100       	 21.8457   	 0         	 6.69934   	 3.26087   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 70)                                                                                         	 0.00250942	 100       	 0         	 0         	 111.58    	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 70, m: 70, fromLeft: 0)                	 0.00138007	 800       	 0         	 0         	 45.4471   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 70, m: 50, k: 70)   	 0.00116176	 100       	 42.1775   	 0         	 8.19448   	 5.14706   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 70, n: 50, r2: 1)                                                                                          	 0.00101267	 200       	 0         	 0         	 11.0599   	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                   	 0.000914011	 100       	 0.547039  	 0         	 2.18816   	 0.25      
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50, k: 50)     	 0.000827683	 100       	 30.2048   	 0         	 7.24915   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 50, k: 70)   	 0.000812681	 100       	 43.0673   	 0         	 9.35176   	 4.60526   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                          	 0.000803241	 200       	 0         	 0         	 9.95965   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 50, r2: 50)              	 0.000779105	 100       	 32.0881   	 0         	 7.70114   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 50, m: 50, k: 50)  	 0.000673018	 100       	 37.1461   	 0         	 8.91507   	 4.16667   
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 70, n: 50, r2: 1)                                                                                 	 0.000565458	 100       	 0.618967  	 0         	 9.90348   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 1, r1low: 0, n: 50, r2: 50)                     	 0.000552296	 100       	 0         	 0         	 7.24249   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 70, n: 50, r2: 1)                    	 0.000520679	 100       	 0         	 0         	 18.4375   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                          	 0.000512861	 100       	 0         	 0         	 7.79938   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                            	 0.00046654	 100       	 1.07172   	 0         	 12.8606   	 0.0833333 
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 1, Xr2: 50, Qr1: 1, Qr2: 0)          	 0.00044032	 100       	 0         	 0         	 9.0843    	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 50)                                                                	 0.000410302	 100       	 0         	 0         	 9.74892   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                 	 0.000394165	 100       	 0.634252  	 0         	 10.148    	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                 	 0.000338603	 100       	 0.738328  	 0         	 11.8132   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 0, m: 3500, k: 50)  	 6.2e-06   	 100       	 0         	 0         	 22580.6   	 0         
Timing statistics:
function                                                                                                                                                                                      	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                        	 4.89696   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_normalized(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                     	 4.89691   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::rightNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                            	 3.86628   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::rightNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                        	 3.86494   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double]	 3.43408   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                  	 1.37302   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                               	 1.26388   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_leftOrthogonalize(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&) [with T = double]                                   	 1.03055   	 100       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                            	 0.981296  	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]           	 0.698091  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.392757  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                           	 0.370435  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                	 0.284379  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                    	 0.134672  	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                                       	 0.110544  	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double]        	 0.10141   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.0653902 	 900       
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                       	 0.0549293 	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double]          	 0.041823  	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                        	 0.0358099 	 1000      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                	 0.0351327 	 1300      
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                              	 0.0330012 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double]       	 0.0323313 	 900       
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                	 0.00607063	 1800      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                         	 0.00559898	 5200      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                              	 0.00364302	 6400      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                           	 0.00138007	 800       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                       	 0.00129823	 300       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                         	 0.000914011	 100       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                                                  	 0.00046654	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
orthoX: L, orthoY: L
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 64
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->65  [0m[1;34m1->66  [0m[1;34m2->67  [0m[1;34m3->68  [0m[1;34m4->69  [0m[1;34m5->70  [0m[1;34m6->71  [0m[1;34m7->72  [0m[1;34m8->73  [0m[1;34m9->74  [0m[1;34m10->75  [0m[1;34m11->76  [0m[1;34m12->77  [0m[1;34m13->78  [0m[1;34m14->79  [0m[1;34m15->80  [0m[1;34m16->81  [0m[1;34m17->82  [0m[1;34m18->83  [0m[1;34m19->84  [0m[1;34m20->85  [0m[1;34m21->86  [0m[1;34m22->87  [0m[1;34m23->88  [0m[1;34m24->89  [0m[1;34m25->90  [0m[1;34m26->91  [0m[1;34m27->92  [0m[1;34m28->93  [0m[1;34m29->94  [0m[1;34m30->95  [0m[1;34m31->96  [0m[1;34m32->97  [0m[1;34m33->98  [0m[1;34m34->99  [0m[1;34m35->100  [0m[1;34m36->101  [0m[1;34m37->102  [0m[1;34m38->103  [0m[1;34m39->104  [0m[1;34m40->105  [0m[1;34m41->106  [0m[1;34m42->107  [0m[1;34m43->108  [0m[1;34m44->109  [0m[1;34m45->110  [0m[1;34m46->111  [0m[1;34m47->112  [0m[1;34m48->113  [0m[1;34m49->114  [0m[1;34m50->115  [0m[1;34m51->116  [0m[1;34m52->117  [0m[1;34m53->118  [0m[1;34m54->119  [0m[1;34m55->120  [0m[1;34m56->121  [0m[1;34m57->122  [0m[1;34m58->123  [0m[1;34m59->124  [0m[1;34m60->125  [0m[1;34m61->126  [0m[1;34m62->127  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22966257325952 -> hwthread 65 - OK[0m[1;34m
[0m[1;34m	threadid 22966062540800 -> hwthread 66 - OK[0m[1;34m
[0m[1;34m	threadid 22965861214336 -> hwthread 67 - OK[0m[1;34m
[0m[1;34m	threadid 22965659887872 -> hwthread 68 - OK[0m[1;34m
[0m[1;34m	threadid 22965458561408 -> hwthread 69 - OK[0m[1;34m
[0m[1;34m	threadid 22965257234944 -> hwthread 70 - OK[0m[1;34m
[0m[1;34m	threadid 22965055908480 -> hwthread 71 - OK[0m[1;34m
[0m[1;34m	threadid 22964854582016 -> hwthread 72 - OK[0m[1;34m
[0m[1;34m	threadid 22964653255552 -> hwthread 73 - OK[0m[1;34m
[0m[1;34m	threadid 22964451929088 -> hwthread 74 - OK[0m[1;34m
[0m[1;34m	threadid 22964250602624 -> hwthread 75 - OK[0m[1;34m
[0m[1;34m	threadid 22964049276160 -> hwthread 76 - OK[0m[1;34m
[0m[1;34m	threadid 22963847949696 -> hwthread 77 - OK[0m[1;34m
[0m[1;34m	threadid 22963646623232 -> hwthread 78 - OK[0m[1;34m
[0m[1;34m	threadid 22963445296768 -> hwthread 79 - OK[0m[1;34m
[0m[1;34m	threadid 22963243970304 -> hwthread 80 - OK[0m[1;34m
[0m[1;34m	threadid 22963042643840 -> hwthread 81 - OK[0m[1;34m
[0m[1;34m	threadid 22962841317376 -> hwthread 82 - OK[0m[1;34m
[0m[1;34m	threadid 22962639990912 -> hwthread 83 - OK[0m[1;34m
[0m[1;34m	threadid 22962438664448 -> hwthread 84 - OK[0m[1;34m
[0m[1;34m	threadid 22962237337984 -> hwthread 85 - OK[0m[1;34m
[0m[1;34m	threadid 22962036011520 -> hwthread 86 - OK[0m[1;34m
[0m[1;34m	threadid 22961834685056 -> hwthread 87 - OK[0m[1;34m
[0m[1;34m	threadid 22961633358592 -> hwthread 88 - OK[0m[1;34m
[0m[1;34m	threadid 22961432032128 -> hwthread 89 - OK[0m[1;34m
[0m[1;34m	threadid 22961230705664 -> hwthread 90 - OK[0m[1;34m
[0m[1;34m	threadid 22961029379200 -> hwthread 91 - OK[0m[1;34m
[0m[1;34m	threadid 22960828052736 -> hwthread 92 - OK[0m[1;34m
[0m[1;34m	threadid 22960626726272 -> hwthread 93 - OK[0m[1;34m
[0m[1;34m	threadid 22960425399808 -> hwthread 94 - OK[0m[1;34m
[0m[1;34m	threadid 22960224073344 -> hwthread 95 - OK[0m[1;34m
[0m[1;34m	threadid 22960022746880 -> hwthread 96 - OK[0m[1;34m
[0m[1;34m	threadid 22959821416320 -> hwthread 97 - OK[0m[1;34m
[0m[1;34m	threadid 22959620089856 -> hwthread 98 - OK[0m[1;34m
[0m[1;34m	threadid 22959418763392 -> hwthread 99 - OK[0m[1;34m
[0m[1;34m	threadid 22959217436928 -> hwthread 100 - OK[0m[1;34m
[0m[1;34m	threadid 22959016110464 -> hwthread 101 - OK[0m[1;34m
[0m[1;34m	threadid 22958814784000 -> hwthread 102 - OK[0m[1;34m
[0m[1;34m	threadid 22958613457536 -> hwthread 103 - OK[0m[1;34m
[0m[1;34m	threadid 22958412131072 -> hwthread 104 - OK[0m[1;34m
[0m[1;34m	threadid 22958210804608 -> hwthread 105 - OK[0m[1;34m
[0m[1;34m	threadid 22958009478144 -> hwthread 106 - OK[0m[1;34m
[0m[1;34m	threadid 22957808151680 -> hwthread 107 - OK[0m[1;34m
[0m[1;34m	threadid 22957606825216 -> hwthread 108 - OK[0m[1;34m
[0m[1;34m	threadid 22957405498752 -> hwthread 109 - OK[0m[1;34m
[0m[1;34m	threadid 22957204172288 -> hwthread 110 - OK[0m[1;34m
[0m[1;34m	threadid 22957002845824 -> hwthread 111 - OK[0m[1;34m
[0m[1;34m	threadid 22956801519360 -> hwthread 112 - OK[0m[1;34m
[0m[1;34m	threadid 22956600192896 -> hwthread 113 - OK[0m[1;34m
[0m[1;34m	threadid 22956398866432 -> hwthread 114 - OK[0m[1;34m
[0m[1;34m	threadid 22956197539968 -> hwthread 115 - OK[0m[1;34m
[0m[1;34m	threadid 22955996213504 -> hwthread 116 - OK[0m[1;34m
[0m[1;34m	threadid 22955794887040 -> hwthread 117 - OK[0m[1;34m
[0m[1;34m	threadid 22955593560576 -> hwthread 118 - OK[0m[1;34m
[0m[1;34m	threadid 22955392234112 -> hwthread 119 - OK[0m[1;34m
[0m[1;34m	threadid 22955190907648 -> hwthread 120 - OK[0m[1;34m
[0m[1;34m	threadid 22954989581184 -> hwthread 121 - OK[0m[1;34m
[0m[1;34m	threadid 22954788254720 -> hwthread 122 - OK[0m[1;34m
[0m[1;34m	threadid 22954586928256 -> hwthread 123 - OK[0m[1;34m
[0m[1;34m	threadid 22954385601792 -> hwthread 124 - OK[0m[1;34m
[0m[1;34m	threadid 22954184275328 -> hwthread 125 - OK[0m[1;34m
[0m[1;34m	threadid 22953982948864 -> hwthread 126 - OK[0m[1;34m
[0m[1;34m	threadid 22953781622400 -> hwthread 127 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22966151665408 -> hwthread 64 - OK[0m[1;34m
[0m[1;34m	threadid 22966145074944 -> hwthread 65 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 121, m: 121)                                                               	 1.22359   	 700       	 9.45924   	 0         	 0.201577  	 46.9263   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6050, cols: 121, reductionFactor: 37, colBlockingSize: 12)                 	 0.851991  	 600       	 128.131   	 0         	 4.20675   	 30.4584   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6050, cols: 71, reductionFactor: 37, colBlockingSize: 12)                  	 0.35681   	 700       	 122.898   	 0         	 6.82074   	 18.0183   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 121, n: 50, r: 121, r2: 121)          	 0.323199  	 600       	 328.88    	 0         	 21.9616   	 14.9752   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 121, r: 121, r2: 6050, leftOrthog: 0)      	 0.24918   	 600       	 426.574   	 0         	 42.8689   	 9.95066   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 6050, Xcols: 71, r: 71, streamingCols: 0)                   	 0.127097  	 700       	 167.972   	 0         	 37.9638   	 4.42452   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 121, reductionFactor: 37, colBlockingSize: 12)                 	 0.111076  	 100       	 67.6863   	 0         	 2.28413   	 29.6333   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 121, Qr2: 71)      	 0.10708   	 700       	 0         	 0         	 67.2857   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 71, m: 3550, k: 71) 	 0.0717775 	 700       	 349.048   	 0         	 39.7226   	 8.78713   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 71, m: 71)                                                                  	 0.0640372 	 800       	 5.96171   	 0         	 1.51852   	 3.92601   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 121)                                                                	 0.0570929 	 100       	 4.53063   	 0         	 0.205279  	 22.0705   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 6050, m: 71)                                                                       	 0.0523491 	 700       	 0         	 0         	 91.9015   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 71, reductionFactor: 37, colBlockingSize: 12)                  	 0.0423141 	 100       	 61.1764   	 0         	 3.45116   	 17.7263   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 71, k: 2500)   	 0.0420949 	 800       	 337.333   	 0         	 46.5311   	 7.24963   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                 	 0.0412249 	 100       	 2.83001   	 0         	 0.146513  	 19.3157   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 6050, m: 71)                                                              	 0.0390587 	 700       	 0         	 0         	 123.173   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 71, n: 50, r2: 71)                   	 0.0330612 	 700       	 0         	 0         	 145.517   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 2500, m: 71, k: 50)	 0.0322739 	 800       	 439.984   	 0         	 60.6906   	 7.24963   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 71, n: 50, r2: 71)                                                                                         	 0.0302218 	 700       	 0         	 0         	 93.4079   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6050, cols: 50, reductionFactor: 37, colBlockingSize: 12)                  	 0.0295441 	 100       	 105.156   	 0         	 8.25883   	 12.7326   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 3550, k: 71) 	 0.0255425 	 700       	 690.75    	 0         	 94.9537   	 7.27459   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r: 121, r2: 121)           	 0.0206949 	 100       	 353.735   	 0         	 23.9534   	 14.7676   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 121, r: 121, r2: 2500, leftOrthog: 0)      	 0.0203539 	 100       	 359.66    	 0         	 36.8197   	 9.76815   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 121, n: 50, r: 121, r2: 50)           	 0.0186557 	 100       	 392.399   	 0         	 44.6233   	 8.7936    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 6050, leftOrthog: 0)        	 0.0181429 	 100       	 166.732   	 0         	 40.2361   	 4.14384   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 121, reductionFactor: 37, colBlockingSize: 12)                   	 0.0120946 	 100       	 12.4326   	 0         	 1.36862   	 9.08408   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 71, r: 71, streamingCols: 0)                   	 0.0115831 	 100       	 108.801   	 0         	 24.6927   	 4.40622   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 71)                                                              	 0.00646718	 100       	 0         	 0         	 43.914    	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 2500, m: 71)                                                                       	 0.00617701	 100       	 0         	 0         	 45.9769   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 50, Qr2: 71)       	 0.00567678	 100       	 0         	 0         	 85.2597   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 0, n: 50, r2: 71)                    	 0.00542244	 100       	 0         	 0         	 52.3749   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                  	 0.00446007	 100       	 3.73685   	 0         	 1.35424   	 2.75937   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 3550, k: 50) 	 0.00365654	 100       	 485.432   	 0         	 78.216    	 6.20629   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 50, reductionFactor: 37, colBlockingSize: 12)                    	 0.00291122	 100       	 8.81957   	 0         	 1.374     	 6.41892   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 121, r: 50, r2: 50, leftOrthog: 0)         	 0.00256628	 100       	 23.575    	 0         	 7.21668   	 3.26674   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 71)                                                                                         	 0.0024039 	 100       	 0         	 0         	 118.141   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 71, m: 71, fromLeft: 0)                	 0.00171032	 800       	 0         	 0         	 37.7267   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 71, m: 50, k: 71)   	 0.000909439	 100       	 55.4298   	 0         	 10.68     	 5.19006   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                   	 0.000907718	 100       	 0.550832  	 0         	 2.20333   	 0.25      
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50, k: 50)     	 0.000841679	 100       	 29.7025   	 0         	 7.12861   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 71, n: 50, r2: 1)                                                                                          	 0.000832833	 200       	 0         	 0         	 13.6402   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                          	 0.000819208	 200       	 0         	 0         	 9.76553   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 50, k: 71)   	 0.000805268	 100       	 44.0847   	 0         	 9.5372    	 4.6224    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 50, r2: 50)              	 0.000792929	 100       	 31.5287   	 0         	 7.56688   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 50, m: 50, k: 50)  	 0.0006343 	 100       	 39.4135   	 0         	 9.45925   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 71, n: 50, r2: 1)                    	 0.000526699	 100       	 0         	 0         	 18.3786   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 1, r1low: 0, n: 50, r2: 50)                     	 0.000516084	 100       	 0         	 0         	 7.75068   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                          	 0.000499011	 100       	 0         	 0         	 8.01586   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                            	 0.000424039	 100       	 1.17914   	 0         	 14.1496   	 0.0833333 
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 50)                                                                	 0.000419165	 100       	 0         	 0         	 9.54278   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                 	 0.000414584	 100       	 0.603014  	 0         	 9.64823   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 1, Xr2: 50, Qr1: 1, Qr2: 0)          	 0.000409251	 100       	 0         	 0         	 9.77395   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 71, n: 50, r2: 1)                                                                                 	 0.000379132	 100       	 0.936349  	 0         	 14.9816   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                 	 0.000326047	 100       	 0.766761  	 0         	 12.2682   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 0, m: 3550, k: 50)  	 6.53e-06  	 100       	 0         	 0         	 21745.8   	 0         
Timing statistics:
function                                                                                                                                                                                      	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                        	 5.02121   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_normalized(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                     	 5.02116   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::rightNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                            	 3.93868   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::rightNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                        	 3.93735   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double]	 3.51571   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                  	 1.40674   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                               	 1.3219    	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_leftOrthogonalize(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&) [with T = double]                                   	 1.08241   	 100       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                            	 1.00537   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]           	 0.731387  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.402497  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                           	 0.363342  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                	 0.290243  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                    	 0.13868   	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                                       	 0.113166  	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double]        	 0.102698  	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.0684973 	 900       
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                       	 0.0585261 	 800       
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                              	 0.045945  	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double]          	 0.0429366 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                        	 0.0395264 	 1000      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                	 0.0347768 	 1300      
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double]       	 0.0329082 	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                         	 0.00834644	 5200      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                	 0.00580788	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                              	 0.00367552	 6400      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                           	 0.00171032	 800       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                       	 0.00111976	 300       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                         	 0.000907718	 100       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                                                  	 0.000424039	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
orthoX: L, orthoY: L
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 64
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->65  [0m[1;34m1->66  [0m[1;34m2->67  [0m[1;34m3->68  [0m[1;34m4->69  [0m[1;34m5->70  [0m[1;34m6->71  [0m[1;34m7->72  [0m[1;34m8->73  [0m[1;34m9->74  [0m[1;34m10->75  [0m[1;34m11->76  [0m[1;34m12->77  [0m[1;34m13->78  [0m[1;34m14->79  [0m[1;34m15->80  [0m[1;34m16->81  [0m[1;34m17->82  [0m[1;34m18->83  [0m[1;34m19->84  [0m[1;34m20->85  [0m[1;34m21->86  [0m[1;34m22->87  [0m[1;34m23->88  [0m[1;34m24->89  [0m[1;34m25->90  [0m[1;34m26->91  [0m[1;34m27->92  [0m[1;34m28->93  [0m[1;34m29->94  [0m[1;34m30->95  [0m[1;34m31->96  [0m[1;34m32->97  [0m[1;34m33->98  [0m[1;34m34->99  [0m[1;34m35->100  [0m[1;34m36->101  [0m[1;34m37->102  [0m[1;34m38->103  [0m[1;34m39->104  [0m[1;34m40->105  [0m[1;34m41->106  [0m[1;34m42->107  [0m[1;34m43->108  [0m[1;34m44->109  [0m[1;34m45->110  [0m[1;34m46->111  [0m[1;34m47->112  [0m[1;34m48->113  [0m[1;34m49->114  [0m[1;34m50->115  [0m[1;34m51->116  [0m[1;34m52->117  [0m[1;34m53->118  [0m[1;34m54->119  [0m[1;34m55->120  [0m[1;34m56->121  [0m[1;34m57->122  [0m[1;34m58->123  [0m[1;34m59->124  [0m[1;34m60->125  [0m[1;34m61->126  [0m[1;34m62->127  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23318559086464 -> hwthread 65 - OK[0m[1;34m
[0m[1;34m	threadid 23318384076800 -> hwthread 66 - OK[0m[1;34m
[0m[1;34m	threadid 23318182750336 -> hwthread 67 - OK[0m[1;34m
[0m[1;34m	threadid 23317981423872 -> hwthread 68 - OK[0m[1;34m
[0m[1;34m	threadid 23317780097408 -> hwthread 69 - OK[0m[1;34m
[0m[1;34m	threadid 23317578770944 -> hwthread 70 - OK[0m[1;34m
[0m[1;34m	threadid 23317377444480 -> hwthread 71 - OK[0m[1;34m
[0m[1;34m	threadid 23317176118016 -> hwthread 72 - OK[0m[1;34m
[0m[1;34m	threadid 23316974791552 -> hwthread 73 - OK[0m[1;34m
[0m[1;34m	threadid 23316773465088 -> hwthread 74 - OK[0m[1;34m
[0m[1;34m	threadid 23316572138624 -> hwthread 75 - OK[0m[1;34m
[0m[1;34m	threadid 23316370812160 -> hwthread 76 - OK[0m[1;34m
[0m[1;34m	threadid 23316169485696 -> hwthread 77 - OK[0m[1;34m
[0m[1;34m	threadid 23315968159232 -> hwthread 78 - OK[0m[1;34m
[0m[1;34m	threadid 23315766832768 -> hwthread 79 - OK[0m[1;34m
[0m[1;34m	threadid 23315565506304 -> hwthread 80 - OK[0m[1;34m
[0m[1;34m	threadid 23315364179840 -> hwthread 81 - OK[0m[1;34m
[0m[1;34m	threadid 23315162853376 -> hwthread 82 - OK[0m[1;34m
[0m[1;34m	threadid 23314961526912 -> hwthread 83 - OK[0m[1;34m
[0m[1;34m	threadid 23314760200448 -> hwthread 84 - OK[0m[1;34m
[0m[1;34m	threadid 23314558873984 -> hwthread 85 - OK[0m[1;34m
[0m[1;34m	threadid 23314357547520 -> hwthread 86 - OK[0m[1;34m
[0m[1;34m	threadid 23314156221056 -> hwthread 87 - OK[0m[1;34m
[0m[1;34m	threadid 23313954894592 -> hwthread 88 - OK[0m[1;34m
[0m[1;34m	threadid 23313753568128 -> hwthread 89 - OK[0m[1;34m
[0m[1;34m	threadid 23313552241664 -> hwthread 90 - OK[0m[1;34m
[0m[1;34m	threadid 23313350915200 -> hwthread 91 - OK[0m[1;34m
[0m[1;34m	threadid 23313149588736 -> hwthread 92 - OK[0m[1;34m
[0m[1;34m	threadid 23312948262272 -> hwthread 93 - OK[0m[1;34m
[0m[1;34m	threadid 23312746935808 -> hwthread 94 - OK[0m[1;34m
[0m[1;34m	threadid 23312545609344 -> hwthread 95 - OK[0m[1;34m
[0m[1;34m	threadid 23312344282880 -> hwthread 96 - OK[0m[1;34m
[0m[1;34m	threadid 23312142952320 -> hwthread 97 - OK[0m[1;34m
[0m[1;34m	threadid 23311941625856 -> hwthread 98 - OK[0m[1;34m
[0m[1;34m	threadid 23311740299392 -> hwthread 99 - OK[0m[1;34m
[0m[1;34m	threadid 23311538972928 -> hwthread 100 - OK[0m[1;34m
[0m[1;34m	threadid 23311337646464 -> hwthread 101 - OK[0m[1;34m
[0m[1;34m	threadid 23311136320000 -> hwthread 102 - OK[0m[1;34m
[0m[1;34m	threadid 23310934993536 -> hwthread 103 - OK[0m[1;34m
[0m[1;34m	threadid 23310733667072 -> hwthread 104 - OK[0m[1;34m
[0m[1;34m	threadid 23310532340608 -> hwthread 105 - OK[0m[1;34m
[0m[1;34m	threadid 23310331014144 -> hwthread 106 - OK[0m[1;34m
[0m[1;34m	threadid 23310129687680 -> hwthread 107 - OK[0m[1;34m
[0m[1;34m	threadid 23309928361216 -> hwthread 108 - OK[0m[1;34m
[0m[1;34m	threadid 23309727034752 -> hwthread 109 - OK[0m[1;34m
[0m[1;34m	threadid 23309525708288 -> hwthread 110 - OK[0m[1;34m
[0m[1;34m	threadid 23309324381824 -> hwthread 111 - OK[0m[1;34m
[0m[1;34m	threadid 23309123055360 -> hwthread 112 - OK[0m[1;34m
[0m[1;34m	threadid 23308921728896 -> hwthread 113 - OK[0m[1;34m
[0m[1;34m	threadid 23308720402432 -> hwthread 114 - OK[0m[1;34m
[0m[1;34m	threadid 23308519075968 -> hwthread 115 - OK[0m[1;34m
[0m[1;34m	threadid 23308317749504 -> hwthread 116 - OK[0m[1;34m
[0m[1;34m	threadid 23308116423040 -> hwthread 117 - OK[0m[1;34m
[0m[1;34m	threadid 23307915096576 -> hwthread 118 - OK[0m[1;34m
[0m[1;34m	threadid 23307713770112 -> hwthread 119 - OK[0m[1;34m
[0m[1;34m	threadid 23307512443648 -> hwthread 120 - OK[0m[1;34m
[0m[1;34m	threadid 23307311117184 -> hwthread 121 - OK[0m[1;34m
[0m[1;34m	threadid 23307109790720 -> hwthread 122 - OK[0m[1;34m
[0m[1;34m	threadid 23306908464256 -> hwthread 123 - OK[0m[1;34m
[0m[1;34m	threadid 23306707137792 -> hwthread 124 - OK[0m[1;34m
[0m[1;34m	threadid 23306505811328 -> hwthread 125 - OK[0m[1;34m
[0m[1;34m	threadid 23306304484864 -> hwthread 126 - OK[0m[1;34m
[0m[1;34m	threadid 23306103158400 -> hwthread 127 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23318453425920 -> hwthread 64 - OK[0m[1;34m
[0m[1;34m	threadid 23318274856704 -> hwthread 65 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 122, m: 122)                                                               	 1.20025   	 700       	 9.88424   	 0         	 0.208902  	 47.3152   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6100, cols: 122, reductionFactor: 37, colBlockingSize: 12)                 	 0.851554  	 600       	 131.402   	 0         	 4.27877   	 30.7101   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6100, cols: 72, reductionFactor: 37, colBlockingSize: 12)                  	 0.374594  	 700       	 121.379   	 0         	 6.64332   	 18.2708   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 122, n: 50, r: 122, r2: 122)          	 0.32876   	 600       	 331.399   	 0         	 21.9484   	 15.099    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 122, r: 122, r2: 6100, leftOrthog: 0)      	 0.261943  	 600       	 415.934   	 0         	 41.4571   	 10.0329   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 6100, Xcols: 72, r: 72, streamingCols: 0)                   	 0.134158  	 700       	 164.997   	 0         	 36.7742   	 4.48676   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 122, reductionFactor: 37, colBlockingSize: 12)                 	 0.112624  	 100       	 67.864    	 0         	 2.27222   	 29.8668   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 122, Qr2: 72)      	 0.104804  	 700       	 0         	 0         	 69.9121   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 72, m: 3600, k: 72) 	 0.0815474 	 700       	 320.395   	 0         	 35.9554   	 8.91089   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 72, m: 72)                                                                  	 0.0616884 	 800       	 6.45391   	 0         	 1.62095   	 3.98157   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 122)                                                                	 0.0584925 	 100       	 4.45641   	 0         	 0.201735  	 22.0904   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 6100, m: 72)                                                                       	 0.0576323 	 700       	 0         	 0         	 85.3521   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 72, reductionFactor: 37, colBlockingSize: 12)                  	 0.0440468 	 100       	 60.437    	 0         	 3.36341   	 17.969    
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 72, k: 2500)   	 0.0416933 	 800       	 345.379   	 0         	 47.3706   	 7.29099   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                 	 0.0397073 	 100       	 2.93817   	 0         	 0.152113  	 19.3157   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 72, n: 50, r2: 72)                   	 0.0337057 	 700       	 0         	 0         	 145.941   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 2500, m: 72, k: 50)	 0.0327082 	 800       	 440.256   	 0         	 60.3836   	 7.29099   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 72, n: 50, r2: 72)                                                                                         	 0.0312215 	 700       	 0         	 0         	 92.982    	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6100, cols: 50, reductionFactor: 37, colBlockingSize: 12)                  	 0.0290583 	 100       	 107.798   	 0         	 8.46575   	 12.7335   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 6100, m: 72)                                                              	 0.0286597 	 700       	 0         	 0         	 171.636   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 3600, k: 72) 	 0.025968  	 700       	 698.705   	 0         	 95.4897   	 7.31707   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r: 122, r2: 122)           	 0.0237046 	 100       	 313.948   	 0         	 21.089    	 14.8868   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 122, r: 122, r2: 2500, leftOrthog: 0)      	 0.0200832 	 100       	 370.558   	 0         	 37.6341   	 9.84633   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 122, n: 50, r: 122, r2: 50)           	 0.0176365 	 100       	 421.967   	 0         	 47.869    	 8.81503   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 6100, leftOrthog: 0)        	 0.0176134 	 100       	 173.164   	 0         	 41.7864   	 4.14402   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 122, reductionFactor: 37, colBlockingSize: 12)                   	 0.0134967 	 100       	 11.3259   	 0         	 1.2438    	 9.10591   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 72, r: 72, streamingCols: 0)                   	 0.0123681 	 100       	 104.786   	 0         	 23.4533   	 4.46783   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 2500, m: 72)                                                                       	 0.00655814	 100       	 0         	 0         	 43.9149   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 50, Qr2: 72)       	 0.00620436	 100       	 0         	 0         	 78.6543   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 0, n: 50, r2: 72)                    	 0.00593922	 100       	 0         	 0         	 48.4912   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 3600, k: 50) 	 0.00569727	 100       	 315.941   	 0         	 50.9016   	 6.2069    
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 72)                                                              	 0.00569026	 100       	 0         	 0         	 50.6128   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 72)                                                                                         	 0.00548799	 100       	 0         	 0         	 52.4782   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                  	 0.00425411	 100       	 3.91777   	 0         	 1.4198    	 2.75937   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 50, reductionFactor: 37, colBlockingSize: 12)                    	 0.00366084	 100       	 7.01361   	 0         	 1.09265   	 6.41892   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 122, r: 50, r2: 50, leftOrthog: 0)         	 0.00260093	 100       	 23.4531   	 0         	 7.16667   	 3.27253   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 72, m: 72, fromLeft: 0)                	 0.00113548	 800       	 0         	 0         	 58.4378   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 72, m: 50, k: 72)   	 0.000964247	 100       	 53.7622   	 0         	 10.2745   	 5.23256   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50, k: 50)     	 0.000908158	 100       	 27.5282   	 0         	 6.60678   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 72, n: 50, r2: 1)                                                                                          	 0.000848567	 200       	 0         	 0         	 13.5758   	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                   	 0.000836389	 100       	 0.597808  	 0         	 2.39123   	 0.25      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                          	 0.000821614	 200       	 0         	 0         	 9.73693   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 50, k: 72)   	 0.000818961	 100       	 43.9581   	 0         	 9.47542   	 4.63918   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 50, r2: 50)              	 0.00079924	 100       	 31.2797   	 0         	 7.50713   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 50, m: 50, k: 50)  	 0.000635009	 100       	 39.3695   	 0         	 9.44868   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 1, r1low: 0, n: 50, r2: 50)                     	 0.000572425	 100       	 0         	 0         	 6.98781   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                          	 0.000524207	 100       	 0         	 0         	 7.63057   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 72, n: 50, r2: 1)                    	 0.00051425	 100       	 0         	 0         	 18.9791   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                            	 0.000440634	 100       	 1.13473   	 0         	 13.6167   	 0.0833333 
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                 	 0.000438424	 100       	 0.570224  	 0         	 9.12359   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 50)                                                                	 0.000424876	 100       	 0         	 0         	 9.41451   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 1, Xr2: 50, Qr1: 1, Qr2: 0)          	 0.000418444	 100       	 0         	 0         	 9.55922   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 72, n: 50, r2: 1)                                                                                 	 0.000381911	 100       	 0.942628  	 0         	 15.082    	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                 	 0.000328975	 100       	 0.759936  	 0         	 12.159    	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 0, m: 3600, k: 50)  	 6.5e-06   	 100       	 0         	 0         	 22153.8   	 0         
Timing statistics:
function                                                                                                                                                                                      	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                        	 5.07899   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_normalized(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                     	 5.07892   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::rightNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                            	 3.96919   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::rightNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                        	 3.96794   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double]	 3.52349   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                  	 1.42903   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                               	 1.29845   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_leftOrthogonalize(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&) [with T = double]                                   	 1.10965   	 100       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                            	 1.00738   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]           	 0.749275  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.422755  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                           	 0.370901  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                	 0.30224   	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                    	 0.146526  	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double]        	 0.115002  	 1800      
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                                       	 0.111426  	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.0659425 	 900       
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                       	 0.0641904 	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double]          	 0.0426015 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                        	 0.0407316 	 1000      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                	 0.0389039 	 1300      
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                              	 0.0347748 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double]       	 0.0333432 	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                         	 0.00957765	 5200      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                	 0.00668143	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                              	 0.00380804	 6400      
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                       	 0.00114931	 300       
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                           	 0.00113548	 800       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                         	 0.000836389	 100       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                                                  	 0.000440634	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
orthoX: L, orthoY: L
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 64
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->65  [0m[1;34m1->66  [0m[1;34m2->67  [0m[1;34m3->68  [0m[1;34m4->69  [0m[1;34m5->70  [0m[1;34m6->71  [0m[1;34m7->72  [0m[1;34m8->73  [0m[1;34m9->74  [0m[1;34m10->75  [0m[1;34m11->76  [0m[1;34m12->77  [0m[1;34m13->78  [0m[1;34m14->79  [0m[1;34m15->80  [0m[1;34m16->81  [0m[1;34m17->82  [0m[1;34m18->83  [0m[1;34m19->84  [0m[1;34m20->85  [0m[1;34m21->86  [0m[1;34m22->87  [0m[1;34m23->88  [0m[1;34m24->89  [0m[1;34m25->90  [0m[1;34m26->91  [0m[1;34m27->92  [0m[1;34m28->93  [0m[1;34m29->94  [0m[1;34m30->95  [0m[1;34m31->96  [0m[1;34m32->97  [0m[1;34m33->98  [0m[1;34m34->99  [0m[1;34m35->100  [0m[1;34m36->101  [0m[1;34m37->102  [0m[1;34m38->103  [0m[1;34m39->104  [0m[1;34m40->105  [0m[1;34m41->106  [0m[1;34m42->107  [0m[1;34m43->108  [0m[1;34m44->109  [0m[1;34m45->110  [0m[1;34m46->111  [0m[1;34m47->112  [0m[1;34m48->113  [0m[1;34m49->114  [0m[1;34m50->115  [0m[1;34m51->116  [0m[1;34m52->117  [0m[1;34m53->118  [0m[1;34m54->119  [0m[1;34m55->120  [0m[1;34m56->121  [0m[1;34m57->122  [0m[1;34m58->123  [0m[1;34m59->124  [0m[1;34m60->125  [0m[1;34m61->126  [0m[1;34m62->127  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22486591313792 -> hwthread 65 - OK[0m[1;34m
[0m[1;34m	threadid 22486368380928 -> hwthread 66 - OK[0m[1;34m
[0m[1;34m	threadid 22486167054464 -> hwthread 67 - OK[0m[1;34m
[0m[1;34m	threadid 22485965728000 -> hwthread 68 - OK[0m[1;34m
[0m[1;34m	threadid 22485764401536 -> hwthread 69 - OK[0m[1;34m
[0m[1;34m	threadid 22485563075072 -> hwthread 70 - OK[0m[1;34m
[0m[1;34m	threadid 22485361748608 -> hwthread 71 - OK[0m[1;34m
[0m[1;34m	threadid 22485160422144 -> hwthread 72 - OK[0m[1;34m
[0m[1;34m	threadid 22484959095680 -> hwthread 73 - OK[0m[1;34m
[0m[1;34m	threadid 22484757769216 -> hwthread 74 - OK[0m[1;34m
[0m[1;34m	threadid 22484556442752 -> hwthread 75 - OK[0m[1;34m
[0m[1;34m	threadid 22484355116288 -> hwthread 76 - OK[0m[1;34m
[0m[1;34m	threadid 22484153789824 -> hwthread 77 - OK[0m[1;34m
[0m[1;34m	threadid 22483952463360 -> hwthread 78 - OK[0m[1;34m
[0m[1;34m	threadid 22483751136896 -> hwthread 79 - OK[0m[1;34m
[0m[1;34m	threadid 22483549810432 -> hwthread 80 - OK[0m[1;34m
[0m[1;34m	threadid 22483348483968 -> hwthread 81 - OK[0m[1;34m
[0m[1;34m	threadid 22483147157504 -> hwthread 82 - OK[0m[1;34m
[0m[1;34m	threadid 22482945831040 -> hwthread 83 - OK[0m[1;34m
[0m[1;34m	threadid 22482744504576 -> hwthread 84 - OK[0m[1;34m
[0m[1;34m	threadid 22482543178112 -> hwthread 85 - OK[0m[1;34m
[0m[1;34m	threadid 22482341851648 -> hwthread 86 - OK[0m[1;34m
[0m[1;34m	threadid 22482140525184 -> hwthread 87 - OK[0m[1;34m
[0m[1;34m	threadid 22481939198720 -> hwthread 88 - OK[0m[1;34m
[0m[1;34m	threadid 22481737872256 -> hwthread 89 - OK[0m[1;34m
[0m[1;34m	threadid 22481536545792 -> hwthread 90 - OK[0m[1;34m
[0m[1;34m	threadid 22481335219328 -> hwthread 91 - OK[0m[1;34m
[0m[1;34m	threadid 22481133892864 -> hwthread 92 - OK[0m[1;34m
[0m[1;34m	threadid 22480932566400 -> hwthread 93 - OK[0m[1;34m
[0m[1;34m	threadid 22480731239936 -> hwthread 94 - OK[0m[1;34m
[0m[1;34m	threadid 22480529913472 -> hwthread 95 - OK[0m[1;34m
[0m[1;34m	threadid 22480328587008 -> hwthread 96 - OK[0m[1;34m
[0m[1;34m	threadid 22480127256448 -> hwthread 97 - OK[0m[1;34m
[0m[1;34m	threadid 22479925929984 -> hwthread 98 - OK[0m[1;34m
[0m[1;34m	threadid 22479724603520 -> hwthread 99 - OK[0m[1;34m
[0m[1;34m	threadid 22479523277056 -> hwthread 100 - OK[0m[1;34m
[0m[1;34m	threadid 22479321950592 -> hwthread 101 - OK[0m[1;34m
[0m[1;34m	threadid 22479120624128 -> hwthread 102 - OK[0m[1;34m
[0m[1;34m	threadid 22478919297664 -> hwthread 103 - OK[0m[1;34m
[0m[1;34m	threadid 22478717971200 -> hwthread 104 - OK[0m[1;34m
[0m[1;34m	threadid 22478516644736 -> hwthread 105 - OK[0m[1;34m
[0m[1;34m	threadid 22478315318272 -> hwthread 106 - OK[0m[1;34m
[0m[1;34m	threadid 22478113991808 -> hwthread 107 - OK[0m[1;34m
[0m[1;34m	threadid 22477912665344 -> hwthread 108 - OK[0m[1;34m
[0m[1;34m	threadid 22477711338880 -> hwthread 109 - OK[0m[1;34m
[0m[1;34m	threadid 22477510012416 -> hwthread 110 - OK[0m[1;34m
[0m[1;34m	threadid 22477308685952 -> hwthread 111 - OK[0m[1;34m
[0m[1;34m	threadid 22477107359488 -> hwthread 112 - OK[0m[1;34m
[0m[1;34m	threadid 22476906033024 -> hwthread 113 - OK[0m[1;34m
[0m[1;34m	threadid 22476704706560 -> hwthread 114 - OK[0m[1;34m
[0m[1;34m	threadid 22476503380096 -> hwthread 115 - OK[0m[1;34m
[0m[1;34m	threadid 22476302053632 -> hwthread 116 - OK[0m[1;34m
[0m[1;34m	threadid 22476100727168 -> hwthread 117 - OK[0m[1;34m
[0m[1;34m	threadid 22475899400704 -> hwthread 118 - OK[0m[1;34m
[0m[1;34m	threadid 22475698074240 -> hwthread 119 - OK[0m[1;34m
[0m[1;34m	threadid 22475496747776 -> hwthread 120 - OK[0m[1;34m
[0m[1;34m	threadid 22475295421312 -> hwthread 121 - OK[0m[1;34m
[0m[1;34m	threadid 22475094094848 -> hwthread 122 - OK[0m[1;34m
[0m[1;34m	threadid 22474892768384 -> hwthread 123 - OK[0m[1;34m
[0m[1;34m	threadid 22474691441920 -> hwthread 124 - OK[0m[1;34m
[0m[1;34m	threadid 22474490115456 -> hwthread 125 - OK[0m[1;34m
[0m[1;34m	threadid 22474288788992 -> hwthread 126 - OK[0m[1;34m
[0m[1;34m	threadid 22474087462528 -> hwthread 127 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22486485653248 -> hwthread 64 - OK[0m[1;34m
[0m[1;34m	threadid 22486479062784 -> hwthread 65 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 123, m: 123)                                                               	 1.25341   	 700       	 9.69963   	 0         	 0.203329  	 47.7041   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6150, cols: 123, reductionFactor: 36, colBlockingSize: 12)                 	 0.847882  	 600       	 135.341   	 0         	 4.36803   	 30.9845   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6150, cols: 73, reductionFactor: 37, colBlockingSize: 12)                  	 0.388687  	 700       	 121.236   	 0         	 6.54502   	 18.5234   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 123, n: 50, r: 123, r2: 123)          	 0.331022  	 600       	 337.295   	 0         	 22.1573   	 15.2228   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 123, r: 123, r2: 6150, leftOrthog: 0)      	 0.253319  	 600       	 440.756   	 0         	 43.5739   	 10.1151   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 6150, Xcols: 73, r: 73, streamingCols: 0)                   	 0.133711  	 700       	 171.574   	 0         	 37.7169   	 4.549     
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 123, reductionFactor: 36, colBlockingSize: 12)                 	 0.111984  	 100       	 69.4265   	 0         	 2.30483   	 30.1222   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 123, Qr2: 73)      	 0.111903  	 700       	 0         	 0         	 66.5774   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 73, m: 3650, k: 73) 	 0.080142  	 700       	 339.787   	 0         	 37.6093   	 9.03465   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 73, m: 73)                                                                  	 0.0685001 	 800       	 6.05766   	 0         	 1.50049   	 4.03711   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 123)                                                                	 0.0582314 	 100       	 4.51074   	 0         	 0.204014  	 22.11     
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 6150, m: 73)                                                                       	 0.0570412 	 700       	 0         	 0         	 88.1511   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 73, reductionFactor: 37, colBlockingSize: 12)                  	 0.0454143 	 100       	 60.2566   	 0         	 3.30872   	 18.2115   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                 	 0.0423808 	 100       	 2.75282   	 0         	 0.142517  	 19.3157   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 73, k: 2500)   	 0.0409413 	 800       	 356.608   	 0         	 48.6393   	 7.33167   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 73, n: 50, r2: 73)                   	 0.0352617 	 700       	 0         	 0         	 142.598   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 73, n: 50, r2: 73)                                                                                         	 0.0325916 	 700       	 0         	 0         	 91.5648   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 2500, m: 73, k: 50)	 0.0322377 	 800       	 452.886   	 0         	 61.7712   	 7.33167   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6150, cols: 50, reductionFactor: 37, colBlockingSize: 12)                  	 0.0297345 	 100       	 106.21    	 0         	 8.34049   	 12.7343   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 6150, m: 73)                                                              	 0.0281745 	 700       	 0         	 0         	 178.468   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 3650, k: 73) 	 0.027184  	 700       	 686.121   	 0         	 93.2372   	 7.35887   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r: 123, r2: 123)           	 0.0229444 	 100       	 329.688   	 0         	 21.9707   	 15.0059   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 123, r: 123, r2: 2500, leftOrthog: 0)      	 0.0200657 	 100       	 376.986   	 0         	 37.9855   	 9.92448   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 6150, leftOrthog: 0)        	 0.0178526 	 100       	 172.243   	 0         	 41.5625   	 4.1442    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 123, n: 50, r: 123, r2: 50)           	 0.0171328 	 100       	 441.522   	 0         	 49.9674   	 8.83621   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 73, r: 73, streamingCols: 0)                   	 0.0119645 	 100       	 111.35    	 0         	 24.5837   	 4.52944   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 123, reductionFactor: 36, colBlockingSize: 12)                   	 0.0116271 	 100       	 13.3733   	 0         	 1.4641    	 9.13415   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 2500, m: 73)                                                                       	 0.00654685	 100       	 0         	 0         	 44.6016   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 50, Qr2: 73)       	 0.00629725	 100       	 0         	 0         	 78.1294   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 0, n: 50, r2: 73)                    	 0.00581153	 100       	 0         	 0         	 50.2449   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 73)                                                              	 0.00576012	 100       	 0         	 0         	 50.6934   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 3650, k: 50) 	 0.00545763	 100       	 334.394   	 0         	 53.8695   	 6.20748   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                  	 0.00439546	 100       	 3.79178   	 0         	 1.37415   	 2.75937   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 50, reductionFactor: 37, colBlockingSize: 12)                    	 0.00369691	 100       	 6.94517   	 0         	 1.08198   	 6.41892   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 123, r: 50, r2: 50, leftOrthog: 0)         	 0.00266559	 100       	 23.0718   	 0         	 7.03784   	 3.27825   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 73)                                                                                         	 0.00253291	 100       	 0         	 0         	 115.282   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 73, m: 73, fromLeft: 0)                	 0.00181766	 800       	 0         	 0         	 37.5269   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 73, m: 50, k: 73)   	 0.000985842	 100       	 54.0553   	 0         	 10.2483   	 5.27457   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                   	 0.000909146	 100       	 0.549967  	 0         	 2.19987   	 0.25      
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50, k: 50)     	 0.000869135	 100       	 28.7642   	 0         	 6.90342   	 4.16667   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 50, r2: 50)              	 0.000859546	 100       	 29.0851   	 0         	 6.98043   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                          	 0.000828158	 200       	 0         	 0         	 9.65999   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 73, n: 50, r2: 1)                                                                                          	 0.000819081	 200       	 0         	 0         	 14.2599   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 50, k: 73)   	 0.000807333	 100       	 45.2106   	 0         	 9.71099   	 4.65561   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 50, m: 50, k: 50)  	 0.00063298	 100       	 39.4957   	 0         	 9.47897   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 1, r1low: 0, n: 50, r2: 50)                     	 0.000540544	 100       	 0         	 0         	 7.39995   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 73, n: 50, r2: 1)                    	 0.000530693	 100       	 0         	 0         	 18.5418   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                          	 0.000519688	 100       	 0         	 0         	 7.69693   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                            	 0.000466005	 100       	 1.07295   	 0         	 12.8754   	 0.0833333 
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 1, Xr2: 50, Qr1: 1, Qr2: 0)          	 0.000436564	 100       	 0         	 0         	 9.16246   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 50)                                                                	 0.000432229	 100       	 0         	 0         	 9.25435   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                 	 0.00040955	 100       	 0.610426  	 0         	 9.76682   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 73, n: 50, r2: 1)                                                                                 	 0.000364937	 100       	 1.00017   	 0         	 16.0028   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                 	 0.000331592	 100       	 0.753939  	 0         	 12.063    	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 0, m: 3650, k: 50)  	 7.031e-06 	 100       	 0         	 0         	 20765.2   	 0         
Timing statistics:
function                                                                                                                                                                                      	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                        	 5.21424   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_normalized(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                     	 5.21416   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::rightNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                            	 4.07358   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::rightNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                        	 4.07224   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double]	 3.61235   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                  	 1.43903   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                               	 1.35403   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_leftOrthogonalize(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&) [with T = double]                                   	 1.1405    	 100       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                            	 1.00187   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]           	 0.772519  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.43838   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                           	 0.371958  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                	 0.293903  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                    	 0.145675  	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                                       	 0.118637  	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double]        	 0.114584  	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.0728955 	 900       
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                       	 0.063588  	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                        	 0.0421445 	 1000      
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double]          	 0.0418105 	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                	 0.0372914 	 1300      
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                              	 0.0343668 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double]       	 0.0328707 	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                         	 0.0101183 	 5200      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                	 0.00906315	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                              	 0.00376965	 6400      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                           	 0.00181766	 800       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                       	 0.00110608	 300       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                         	 0.000909146	 100       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                                                  	 0.000466005	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
orthoX: L, orthoY: L
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 64
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->65  [0m[1;34m1->66  [0m[1;34m2->67  [0m[1;34m3->68  [0m[1;34m4->69  [0m[1;34m5->70  [0m[1;34m6->71  [0m[1;34m7->72  [0m[1;34m8->73  [0m[1;34m9->74  [0m[1;34m10->75  [0m[1;34m11->76  [0m[1;34m12->77  [0m[1;34m13->78  [0m[1;34m14->79  [0m[1;34m15->80  [0m[1;34m16->81  [0m[1;34m17->82  [0m[1;34m18->83  [0m[1;34m19->84  [0m[1;34m20->85  [0m[1;34m21->86  [0m[1;34m22->87  [0m[1;34m23->88  [0m[1;34m24->89  [0m[1;34m25->90  [0m[1;34m26->91  [0m[1;34m27->92  [0m[1;34m28->93  [0m[1;34m29->94  [0m[1;34m30->95  [0m[1;34m31->96  [0m[1;34m32->97  [0m[1;34m33->98  [0m[1;34m34->99  [0m[1;34m35->100  [0m[1;34m36->101  [0m[1;34m37->102  [0m[1;34m38->103  [0m[1;34m39->104  [0m[1;34m40->105  [0m[1;34m41->106  [0m[1;34m42->107  [0m[1;34m43->108  [0m[1;34m44->109  [0m[1;34m45->110  [0m[1;34m46->111  [0m[1;34m47->112  [0m[1;34m48->113  [0m[1;34m49->114  [0m[1;34m50->115  [0m[1;34m51->116  [0m[1;34m52->117  [0m[1;34m53->118  [0m[1;34m54->119  [0m[1;34m55->120  [0m[1;34m56->121  [0m[1;34m57->122  [0m[1;34m58->123  [0m[1;34m59->124  [0m[1;34m60->125  [0m[1;34m61->126  [0m[1;34m62->127  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22704148875136 -> hwthread 65 - OK[0m[1;34m
[0m[1;34m	threadid 22703935318016 -> hwthread 66 - OK[0m[1;34m
[0m[1;34m	threadid 22703733991552 -> hwthread 67 - OK[0m[1;34m
[0m[1;34m	threadid 22703532665088 -> hwthread 68 - OK[0m[1;34m
[0m[1;34m	threadid 22703331338624 -> hwthread 69 - OK[0m[1;34m
[0m[1;34m	threadid 22703130012160 -> hwthread 70 - OK[0m[1;34m
[0m[1;34m	threadid 22702928685696 -> hwthread 71 - OK[0m[1;34m
[0m[1;34m	threadid 22702727359232 -> hwthread 72 - OK[0m[1;34m
[0m[1;34m	threadid 22702526032768 -> hwthread 73 - OK[0m[1;34m
[0m[1;34m	threadid 22702324706304 -> hwthread 74 - OK[0m[1;34m
[0m[1;34m	threadid 22702123379840 -> hwthread 75 - OK[0m[1;34m
[0m[1;34m	threadid 22701922053376 -> hwthread 76 - OK[0m[1;34m
[0m[1;34m	threadid 22701720726912 -> hwthread 77 - OK[0m[1;34m
[0m[1;34m	threadid 22701519400448 -> hwthread 78 - OK[0m[1;34m
[0m[1;34m	threadid 22701318073984 -> hwthread 79 - OK[0m[1;34m
[0m[1;34m	threadid 22701116747520 -> hwthread 80 - OK[0m[1;34m
[0m[1;34m	threadid 22700915421056 -> hwthread 81 - OK[0m[1;34m
[0m[1;34m	threadid 22700714094592 -> hwthread 82 - OK[0m[1;34m
[0m[1;34m	threadid 22700512768128 -> hwthread 83 - OK[0m[1;34m
[0m[1;34m	threadid 22700311441664 -> hwthread 84 - OK[0m[1;34m
[0m[1;34m	threadid 22700110115200 -> hwthread 85 - OK[0m[1;34m
[0m[1;34m	threadid 22699908788736 -> hwthread 86 - OK[0m[1;34m
[0m[1;34m	threadid 22699707462272 -> hwthread 87 - OK[0m[1;34m
[0m[1;34m	threadid 22699506135808 -> hwthread 88 - OK[0m[1;34m
[0m[1;34m	threadid 22699304809344 -> hwthread 89 - OK[0m[1;34m
[0m[1;34m	threadid 22699103482880 -> hwthread 90 - OK[0m[1;34m
[0m[1;34m	threadid 22698902156416 -> hwthread 91 - OK[0m[1;34m
[0m[1;34m	threadid 22698700829952 -> hwthread 92 - OK[0m[1;34m
[0m[1;34m	threadid 22698499503488 -> hwthread 93 - OK[0m[1;34m
[0m[1;34m	threadid 22698298177024 -> hwthread 94 - OK[0m[1;34m
[0m[1;34m	threadid 22698096850560 -> hwthread 95 - OK[0m[1;34m
[0m[1;34m	threadid 22697895524096 -> hwthread 96 - OK[0m[1;34m
[0m[1;34m	threadid 22697694193536 -> hwthread 97 - OK[0m[1;34m
[0m[1;34m	threadid 22697492867072 -> hwthread 98 - OK[0m[1;34m
[0m[1;34m	threadid 22697291540608 -> hwthread 99 - OK[0m[1;34m
[0m[1;34m	threadid 22697090214144 -> hwthread 100 - OK[0m[1;34m
[0m[1;34m	threadid 22696888887680 -> hwthread 101 - OK[0m[1;34m
[0m[1;34m	threadid 22696687561216 -> hwthread 102 - OK[0m[1;34m
[0m[1;34m	threadid 22696486234752 -> hwthread 103 - OK[0m[1;34m
[0m[1;34m	threadid 22696284908288 -> hwthread 104 - OK[0m[1;34m
[0m[1;34m	threadid 22696083581824 -> hwthread 105 - OK[0m[1;34m
[0m[1;34m	threadid 22695882255360 -> hwthread 106 - OK[0m[1;34m
[0m[1;34m	threadid 22695680928896 -> hwthread 107 - OK[0m[1;34m
[0m[1;34m	threadid 22695479602432 -> hwthread 108 - OK[0m[1;34m
[0m[1;34m	threadid 22695278275968 -> hwthread 109 - OK[0m[1;34m
[0m[1;34m	threadid 22695076949504 -> hwthread 110 - OK[0m[1;34m
[0m[1;34m	threadid 22694875623040 -> hwthread 111 - OK[0m[1;34m
[0m[1;34m	threadid 22694674296576 -> hwthread 112 - OK[0m[1;34m
[0m[1;34m	threadid 22694472970112 -> hwthread 113 - OK[0m[1;34m
[0m[1;34m	threadid 22694271643648 -> hwthread 114 - OK[0m[1;34m
[0m[1;34m	threadid 22694070317184 -> hwthread 115 - OK[0m[1;34m
[0m[1;34m	threadid 22693868990720 -> hwthread 116 - OK[0m[1;34m
[0m[1;34m	threadid 22693667664256 -> hwthread 117 - OK[0m[1;34m
[0m[1;34m	threadid 22693466337792 -> hwthread 118 - OK[0m[1;34m
[0m[1;34m	threadid 22693265011328 -> hwthread 119 - OK[0m[1;34m
[0m[1;34m	threadid 22693063684864 -> hwthread 120 - OK[0m[1;34m
[0m[1;34m	threadid 22692862358400 -> hwthread 121 - OK[0m[1;34m
[0m[1;34m	threadid 22692661031936 -> hwthread 122 - OK[0m[1;34m
[0m[1;34m	threadid 22692459705472 -> hwthread 123 - OK[0m[1;34m
[0m[1;34m	threadid 22692258379008 -> hwthread 124 - OK[0m[1;34m
[0m[1;34m	threadid 22692057052544 -> hwthread 125 - OK[0m[1;34m
[0m[1;34m	threadid 22691855726080 -> hwthread 126 - OK[0m[1;34m
[0m[1;34m	threadid 22691654399616 -> hwthread 127 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22704043214592 -> hwthread 64 - OK[0m[1;34m
[0m[1;34m	threadid 22704036624128 -> hwthread 65 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 124, m: 124)                                                               	 1.23266   	 700       	 10.1055   	 0         	 0.210124  	 48.0929   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6200, cols: 124, reductionFactor: 36, colBlockingSize: 12)                 	 0.85663   	 600       	 137.253   	 0         	 4.39401   	 31.2364   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6200, cols: 74, reductionFactor: 37, colBlockingSize: 12)                  	 0.399027  	 700       	 122.338   	 0         	 6.51572   	 18.7759   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 124, n: 50, r: 124, r2: 124)          	 0.347991  	 600       	 328.737   	 0         	 21.4209   	 15.3465   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 124, r: 124, r2: 6200, leftOrthog: 0)      	 0.257814  	 600       	 443.721   	 0         	 43.5133   	 10.1974   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 6200, Xcols: 74, r: 74, streamingCols: 0)                   	 0.137002  	 700       	 173.471   	 0         	 37.6192   	 4.61124   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 124, reductionFactor: 36, colBlockingSize: 12)                 	 0.114155  	 100       	 69.2179   	 0         	 2.28025   	 30.3555   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 124, Qr2: 74)      	 0.107395  	 700       	 0         	 0         	 70.5297   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 74, m: 3700, k: 74) 	 0.082476  	 700       	 343.926   	 0         	 37.553    	 9.15842   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 74, m: 74)                                                                  	 0.0676061 	 800       	 6.39348   	 0         	 1.56218   	 4.09267   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 124)                                                                	 0.0588748 	 100       	 4.49541   	 0         	 0.203143  	 22.1293   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 6200, m: 74)                                                                       	 0.055114  	 700       	 0         	 0         	 93.2351   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 74, reductionFactor: 37, colBlockingSize: 12)                  	 0.046679  	 100       	 60.2412   	 0         	 3.26444   	 18.4538   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 74, k: 2500)   	 0.0410017 	 800       	 360.96    	 0         	 48.9657   	 7.37169   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                 	 0.0406428 	 100       	 2.87054   	 0         	 0.148612  	 19.3157   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 74, n: 50, r2: 74)                   	 0.0348214 	 700       	 0         	 0         	 147.569   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 2500, m: 74, k: 50)	 0.0340563 	 800       	 434.574   	 0         	 58.9517   	 7.37169   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 74, n: 50, r2: 74)                                                                                         	 0.033012  	 700       	 0         	 0         	 92.8923   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6200, cols: 50, reductionFactor: 37, colBlockingSize: 12)                  	 0.0290125 	 100       	 109.738   	 0         	 8.61696   	 12.7351   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 3700, k: 74) 	 0.0284781 	 700       	 673.008   	 0         	 90.947    	 7.4       
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 6200, m: 74)                                                              	 0.0279742 	 700       	 0         	 0         	 183.689   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r: 124, r2: 124)           	 0.0212987 	 100       	 360.961   	 0         	 23.8654   	 15.1249   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 124, r: 124, r2: 2500, leftOrthog: 0)      	 0.0207112 	 100       	 371.2     	 0         	 37.1104   	 10.0026   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 6200, leftOrthog: 0)        	 0.0182831 	 100       	 169.556   	 0         	 40.9121   	 4.14439   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 124, n: 50, r: 124, r2: 50)           	 0.0175451 	 100       	 438.186   	 0         	 49.4726   	 8.85714   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 124, reductionFactor: 36, colBlockingSize: 12)                   	 0.0129937 	 100       	 12.1621   	 0         	 1.3284    	 9.15549   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 74, r: 74, streamingCols: 0)                   	 0.0121012 	 100       	 113.129   	 0         	 24.6414   	 4.59103   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 2500, m: 74)                                                                       	 0.00628325	 100       	 0         	 0         	 47.1094   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 50, Qr2: 74)       	 0.00603356	 100       	 0         	 0         	 82.2069   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 0, n: 50, r2: 74)                    	 0.0056112 	 100       	 0         	 0         	 52.7517   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 74)                                                              	 0.00524446	 100       	 0         	 0         	 56.4406   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                  	 0.0045565 	 100       	 3.65776   	 0         	 1.32558   	 2.75937   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 3700, k: 50) 	 0.00359159	 100       	 515.092   	 0         	 82.9715   	 6.20805   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 50, reductionFactor: 37, colBlockingSize: 12)                    	 0.00310655	 100       	 8.26501   	 0         	 1.2876    	 6.41892   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 74)                                                                                         	 0.00261469	 100       	 0         	 0         	 113.207   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 124, r: 50, r2: 50, leftOrthog: 0)         	 0.00261141	 100       	 23.742    	 0         	 7.22982   	 3.2839    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 74, m: 74, fromLeft: 0)                	 0.0015092 	 800       	 0         	 0         	 46.4438   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 74, m: 50, k: 74)   	 0.000958157	 100       	 57.1514   	 0         	 10.7506   	 5.31609   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50, k: 50)     	 0.000898959	 100       	 27.8099   	 0         	 6.67439   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 50, k: 74)   	 0.000862566	 100       	 42.8953   	 0         	 9.18191   	 4.67172   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                          	 0.00086208	 200       	 0         	 0         	 9.27988   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 74, n: 50, r2: 1)                                                                                          	 0.000849503	 200       	 0         	 0         	 13.9376   	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                   	 0.000839913	 100       	 0.5953    	 0         	 2.3812    	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 50, r2: 50)              	 0.000798382	 100       	 31.3133   	 0         	 7.5152    	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 50, m: 50, k: 50)  	 0.000633267	 100       	 39.4778   	 0         	 9.47468   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 74, n: 50, r2: 1)                    	 0.000552572	 100       	 0         	 0         	 17.9524   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 1, r1low: 0, n: 50, r2: 50)                     	 0.0005356 	 100       	 0         	 0         	 7.46826   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                          	 0.000511066	 100       	 0         	 0         	 7.82678   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                            	 0.000437052	 100       	 1.14403   	 0         	 13.7283   	 0.0833333 
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 1, Xr2: 50, Qr1: 1, Qr2: 0)          	 0.00043647	 100       	 0         	 0         	 9.16443   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 50)                                                                	 0.000427405	 100       	 0         	 0         	 9.3588    	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                 	 0.000401501	 100       	 0.622663  	 0         	 9.96262   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 74, n: 50, r2: 1)                                                                                 	 0.000367208	 100       	 1.0076    	 0         	 16.1217   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                 	 0.000332569	 100       	 0.751724  	 0         	 12.0276   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 0, m: 3700, k: 50)  	 6.301e-06 	 100       	 0         	 0         	 23488.3   	 0         
Timing statistics:
function                                                                                                                                                                                      	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                        	 5.21584   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_normalized(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                     	 5.21578   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::rightNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                            	 4.07459   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::rightNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                        	 4.07334   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double]	 3.60808   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                  	 1.4616    	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                               	 1.33217   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_leftOrthogonalize(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&) [with T = double]                                   	 1.14111   	 100       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                            	 1.01341   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]           	 0.781422  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.449272  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                           	 0.387633  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                	 0.29942   	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                    	 0.149103  	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double]        	 0.116373  	 1800      
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                                       	 0.113865  	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.0721626 	 900       
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                       	 0.0613973 	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double]          	 0.0419007 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                        	 0.0415208 	 1000      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                	 0.0378493 	 1300      
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double]       	 0.0346896 	 900       
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                              	 0.0336461 	 900       
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                	 0.0071973 	 1800      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                         	 0.00438208	 5200      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                              	 0.00356603	 6400      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                           	 0.0015092 	 800       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                       	 0.00110128	 300       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                         	 0.000839913	 100       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                                                  	 0.000437052	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
orthoX: L, orthoY: L
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 64
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->65  [0m[1;34m1->66  [0m[1;34m2->67  [0m[1;34m3->68  [0m[1;34m4->69  [0m[1;34m5->70  [0m[1;34m6->71  [0m[1;34m7->72  [0m[1;34m8->73  [0m[1;34m9->74  [0m[1;34m10->75  [0m[1;34m11->76  [0m[1;34m12->77  [0m[1;34m13->78  [0m[1;34m14->79  [0m[1;34m15->80  [0m[1;34m16->81  [0m[1;34m17->82  [0m[1;34m18->83  [0m[1;34m19->84  [0m[1;34m20->85  [0m[1;34m21->86  [0m[1;34m22->87  [0m[1;34m23->88  [0m[1;34m24->89  [0m[1;34m25->90  [0m[1;34m26->91  [0m[1;34m27->92  [0m[1;34m28->93  [0m[1;34m29->94  [0m[1;34m30->95  [0m[1;34m31->96  [0m[1;34m32->97  [0m[1;34m33->98  [0m[1;34m34->99  [0m[1;34m35->100  [0m[1;34m36->101  [0m[1;34m37->102  [0m[1;34m38->103  [0m[1;34m39->104  [0m[1;34m40->105  [0m[1;34m41->106  [0m[1;34m42->107  [0m[1;34m43->108  [0m[1;34m44->109  [0m[1;34m45->110  [0m[1;34m46->111  [0m[1;34m47->112  [0m[1;34m48->113  [0m[1;34m49->114  [0m[1;34m50->115  [0m[1;34m51->116  [0m[1;34m52->117  [0m[1;34m53->118  [0m[1;34m54->119  [0m[1;34m55->120  [0m[1;34m56->121  [0m[1;34m57->122  [0m[1;34m58->123  [0m[1;34m59->124  [0m[1;34m60->125  [0m[1;34m61->126  [0m[1;34m62->127  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22425553909632 -> hwthread 65 - OK[0m[1;34m
[0m[1;34m	threadid 22425366423552 -> hwthread 66 - OK[0m[1;34m
[0m[1;34m	threadid 22425165097088 -> hwthread 67 - OK[0m[1;34m
[0m[1;34m	threadid 22424963770624 -> hwthread 68 - OK[0m[1;34m
[0m[1;34m	threadid 22424762444160 -> hwthread 69 - OK[0m[1;34m
[0m[1;34m	threadid 22424561117696 -> hwthread 70 - OK[0m[1;34m
[0m[1;34m	threadid 22424359791232 -> hwthread 71 - OK[0m[1;34m
[0m[1;34m	threadid 22424158464768 -> hwthread 72 - OK[0m[1;34m
[0m[1;34m	threadid 22423957138304 -> hwthread 73 - OK[0m[1;34m
[0m[1;34m	threadid 22423755811840 -> hwthread 74 - OK[0m[1;34m
[0m[1;34m	threadid 22423554485376 -> hwthread 75 - OK[0m[1;34m
[0m[1;34m	threadid 22423353158912 -> hwthread 76 - OK[0m[1;34m
[0m[1;34m	threadid 22423151832448 -> hwthread 77 - OK[0m[1;34m
[0m[1;34m	threadid 22422950505984 -> hwthread 78 - OK[0m[1;34m
[0m[1;34m	threadid 22422749179520 -> hwthread 79 - OK[0m[1;34m
[0m[1;34m	threadid 22422547853056 -> hwthread 80 - OK[0m[1;34m
[0m[1;34m	threadid 22422346526592 -> hwthread 81 - OK[0m[1;34m
[0m[1;34m	threadid 22422145200128 -> hwthread 82 - OK[0m[1;34m
[0m[1;34m	threadid 22421943873664 -> hwthread 83 - OK[0m[1;34m
[0m[1;34m	threadid 22421742547200 -> hwthread 84 - OK[0m[1;34m
[0m[1;34m	threadid 22421541220736 -> hwthread 85 - OK[0m[1;34m
[0m[1;34m	threadid 22421339894272 -> hwthread 86 - OK[0m[1;34m
[0m[1;34m	threadid 22421138567808 -> hwthread 87 - OK[0m[1;34m
[0m[1;34m	threadid 22420937241344 -> hwthread 88 - OK[0m[1;34m
[0m[1;34m	threadid 22420735914880 -> hwthread 89 - OK[0m[1;34m
[0m[1;34m	threadid 22420534588416 -> hwthread 90 - OK[0m[1;34m
[0m[1;34m	threadid 22420333261952 -> hwthread 91 - OK[0m[1;34m
[0m[1;34m	threadid 22420131935488 -> hwthread 92 - OK[0m[1;34m
[0m[1;34m	threadid 22419930609024 -> hwthread 93 - OK[0m[1;34m
[0m[1;34m	threadid 22419729282560 -> hwthread 94 - OK[0m[1;34m
[0m[1;34m	threadid 22419527956096 -> hwthread 95 - OK[0m[1;34m
[0m[1;34m	threadid 22419326629632 -> hwthread 96 - OK[0m[1;34m
[0m[1;34m	threadid 22419125299072 -> hwthread 97 - OK[0m[1;34m
[0m[1;34m	threadid 22418923972608 -> hwthread 98 - OK[0m[1;34m
[0m[1;34m	threadid 22418722646144 -> hwthread 99 - OK[0m[1;34m
[0m[1;34m	threadid 22418521319680 -> hwthread 100 - OK[0m[1;34m
[0m[1;34m	threadid 22418319993216 -> hwthread 101 - OK[0m[1;34m
[0m[1;34m	threadid 22418118666752 -> hwthread 102 - OK[0m[1;34m
[0m[1;34m	threadid 22417917340288 -> hwthread 103 - OK[0m[1;34m
[0m[1;34m	threadid 22417716013824 -> hwthread 104 - OK[0m[1;34m
[0m[1;34m	threadid 22417514687360 -> hwthread 105 - OK[0m[1;34m
[0m[1;34m	threadid 22417313360896 -> hwthread 106 - OK[0m[1;34m
[0m[1;34m	threadid 22417112034432 -> hwthread 107 - OK[0m[1;34m
[0m[1;34m	threadid 22416910707968 -> hwthread 108 - OK[0m[1;34m
[0m[1;34m	threadid 22416709381504 -> hwthread 109 - OK[0m[1;34m
[0m[1;34m	threadid 22416508055040 -> hwthread 110 - OK[0m[1;34m
[0m[1;34m	threadid 22416306728576 -> hwthread 111 - OK[0m[1;34m
[0m[1;34m	threadid 22416105402112 -> hwthread 112 - OK[0m[1;34m
[0m[1;34m	threadid 22415904075648 -> hwthread 113 - OK[0m[1;34m
[0m[1;34m	threadid 22415702749184 -> hwthread 114 - OK[0m[1;34m
[0m[1;34m	threadid 22415501422720 -> hwthread 115 - OK[0m[1;34m
[0m[1;34m	threadid 22415300096256 -> hwthread 116 - OK[0m[1;34m
[0m[1;34m	threadid 22415098769792 -> hwthread 117 - OK[0m[1;34m
[0m[1;34m	threadid 22414897443328 -> hwthread 118 - OK[0m[1;34m
[0m[1;34m	threadid 22414696116864 -> hwthread 119 - OK[0m[1;34m
[0m[1;34m	threadid 22414494790400 -> hwthread 120 - OK[0m[1;34m
[0m[1;34m	threadid 22414293463936 -> hwthread 121 - OK[0m[1;34m
[0m[1;34m	threadid 22414092137472 -> hwthread 122 - OK[0m[1;34m
[0m[1;34m	threadid 22413890811008 -> hwthread 123 - OK[0m[1;34m
[0m[1;34m	threadid 22413689484544 -> hwthread 124 - OK[0m[1;34m
[0m[1;34m	threadid 22413488158080 -> hwthread 125 - OK[0m[1;34m
[0m[1;34m	threadid 22413286831616 -> hwthread 126 - OK[0m[1;34m
[0m[1;34m	threadid 22413085505152 -> hwthread 127 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22425448249088 -> hwthread 64 - OK[0m[1;34m
[0m[1;34m	threadid 22425441658624 -> hwthread 65 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 125, m: 125)                                                               	 1.27142   	 700       	 10.0364   	 0         	 0.207013  	 48.4818   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6250, cols: 125, reductionFactor: 36, colBlockingSize: 12)                 	 0.873894  	 600       	 137.823   	 0         	 4.37696   	 31.4883   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6250, cols: 75, reductionFactor: 37, colBlockingSize: 12)                  	 0.401427  	 700       	 125.923   	 0         	 6.61764   	 19.0284   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 125, n: 50, r: 125, r2: 125)          	 0.335039  	 600       	 349.773   	 0         	 22.6093   	 15.4703   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 125, r: 125, r2: 6250, leftOrthog: 0)      	 0.263276  	 600       	 445.112   	 0         	 43.3005   	 10.2796   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 6250, Xcols: 75, r: 75, streamingCols: 0)                   	 0.14258   	 700       	 172.6     	 0         	 36.9319   	 4.67348   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 125, reductionFactor: 36, colBlockingSize: 12)                 	 0.115671  	 100       	 69.4166   	 0         	 2.26936   	 30.5886   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 125, Qr2: 75)      	 0.114121  	 700       	 0         	 0         	 67.472    	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 75, m: 3750, k: 75) 	 0.0821984 	 700       	 359.268   	 0         	 38.7051   	 9.28218   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 75, m: 75)                                                                  	 0.0715281 	 800       	 6.29124   	 0         	 1.51661   	 4.14823   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 6250, m: 75)                                                                       	 0.0632218 	 700       	 0         	 0         	 83.041    	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 125)                                                                	 0.0600543 	 100       	 4.44042   	 0         	 0.200485  	 22.1484   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 75, reductionFactor: 37, colBlockingSize: 12)                  	 0.0474926 	 100       	 60.8202   	 0         	 3.25314   	 18.6959   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                 	 0.0412694 	 100       	 2.82695   	 0         	 0.146355  	 19.3157   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 75, k: 2500)   	 0.0411638 	 800       	 364.398   	 0         	 49.1694   	 7.41107   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 75, n: 50, r2: 75)                   	 0.038787  	 700       	 0         	 0         	 135.355   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 75, n: 50, r2: 75)                                                                                         	 0.0345211 	 700       	 0         	 0         	 91.2486   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 2500, m: 75, k: 50)	 0.0330517 	 800       	 453.835   	 0         	 61.2374   	 7.41107   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 6250, m: 75)                                                              	 0.0321211 	 700       	 0         	 0         	 163.444   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6250, cols: 50, reductionFactor: 37, colBlockingSize: 12)                  	 0.0295046 	 100       	 108.778   	 0         	 8.54103   	 12.736    
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 3750, k: 75) 	 0.0279243 	 700       	 705.032   	 0         	 94.7563   	 7.44048   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r: 125, r2: 125)           	 0.0227221 	 100       	 343.828   	 0         	 22.5551   	 15.2439   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 125, r: 125, r2: 2500, leftOrthog: 0)      	 0.0202295 	 100       	 386.194   	 0         	 38.3104   	 10.0806   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 125, n: 50, r: 125, r2: 50)           	 0.0180476 	 100       	 432.882   	 0         	 48.7598   	 8.87784   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 6250, leftOrthog: 0)        	 0.0172345 	 100       	 181.323   	 0         	 43.7496   	 4.14456   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 125, reductionFactor: 36, colBlockingSize: 12)                   	 0.0146888 	 100       	 10.9328   	 0         	 1.19138   	 9.17659   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 75, r: 75, streamingCols: 0)                   	 0.0123521 	 100       	 113.847   	 0         	 24.4695   	 4.65261   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 2500, m: 75)                                                                       	 0.0071326 	 100       	 0         	 0         	 42.0604   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 0, n: 50, r2: 75)                    	 0.00666303	 100       	 0         	 0         	 45.0246   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 75)                                                              	 0.00621416	 100       	 0         	 0         	 48.2768   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 50, Qr2: 75)       	 0.00613163	 100       	 0         	 0         	 81.5443   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 3750, k: 50) 	 0.00513976	 100       	 364.803   	 0         	 58.7576   	 6.20861   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                  	 0.00430373	 100       	 3.8726    	 0         	 1.40343   	 2.75937   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 50, reductionFactor: 37, colBlockingSize: 12)                    	 0.0036039 	 100       	 7.12441   	 0         	 1.10991   	 6.41892   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 125, r: 50, r2: 50, leftOrthog: 0)         	 0.00272054	 100       	 22.9734   	 0         	 6.98391   	 3.28947   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 75)                                                                                         	 0.0027143 	 100       	 0         	 0         	 110.526   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 75, m: 75, fromLeft: 0)                	 0.00179288	 800       	 0         	 0         	 40.1589   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 75, m: 50, k: 75)   	 0.00101417	 100       	 55.4641   	 0         	 10.3533   	 5.35714   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50, k: 50)     	 0.000901307	 100       	 27.7375   	 0         	 6.657     	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                   	 0.000895948	 100       	 0.558068  	 0         	 2.23227   	 0.25      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                          	 0.000864494	 200       	 0         	 0         	 9.25397   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 50, k: 75)   	 0.000838414	 100       	 44.7273   	 0         	 9.54183   	 4.6875    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 75, n: 50, r2: 1)                                                                                          	 0.000835728	 200       	 0         	 0         	 14.3587   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 50, r2: 50)              	 0.00082579	 100       	 30.274    	 0         	 7.26577   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 1, r1low: 0, n: 50, r2: 50)                     	 0.000703187	 100       	 0         	 0         	 5.68839   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 50, m: 50, k: 50)  	 0.000636174	 100       	 39.2974   	 0         	 9.43138   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 75, n: 50, r2: 1)                    	 0.000550288	 100       	 0         	 0         	 18.1723   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                          	 0.000490329	 100       	 0         	 0         	 8.15779   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 50)                                                                	 0.000417314	 100       	 0         	 0         	 9.58511   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                            	 0.000412985	 100       	 1.2107    	 0         	 14.5284   	 0.0833333 
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 1, Xr2: 50, Qr1: 1, Qr2: 0)          	 0.000405312	 100       	 0         	 0         	 9.86894   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                 	 0.000404301	 100       	 0.618351  	 0         	 9.89362   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 75, n: 50, r2: 1)                                                                                 	 0.000365023	 100       	 1.02733   	 0         	 16.4373   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                 	 0.000320762	 100       	 0.779394  	 0         	 12.4703   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 0, m: 3750, k: 50)  	 7.091e-06 	 100       	 0         	 0         	 21153.6   	 0         
Timing statistics:
function                                                                                                                                                                                      	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                        	 5.34888   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_normalized(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                     	 5.34883   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::rightNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                            	 4.16576   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::rightNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                        	 4.16445   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double]	 3.68159   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                  	 1.48628   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                               	 1.37274   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_leftOrthogonalize(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&) [with T = double]                                   	 1.18299   	 100       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                            	 1.03443   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]           	 0.811439  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.453003  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                           	 0.376635  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                	 0.303461  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                    	 0.154932  	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                                       	 0.120658  	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double]        	 0.117122  	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.0758318 	 900       
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                       	 0.0703544 	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                        	 0.0467035 	 1000      
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double]          	 0.0420651 	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                	 0.0394259 	 1300      
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                              	 0.0387526 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double]       	 0.0336879 	 900       
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                	 0.00822769	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                              	 0.00380074	 6400      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                         	 0.00379729	 5200      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                           	 0.00179288	 800       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                       	 0.00109009	 300       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                         	 0.000895948	 100       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                                                  	 0.000412985	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
orthoX: L, orthoY: L
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 64
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->65  [0m[1;34m1->66  [0m[1;34m2->67  [0m[1;34m3->68  [0m[1;34m4->69  [0m[1;34m5->70  [0m[1;34m6->71  [0m[1;34m7->72  [0m[1;34m8->73  [0m[1;34m9->74  [0m[1;34m10->75  [0m[1;34m11->76  [0m[1;34m12->77  [0m[1;34m13->78  [0m[1;34m14->79  [0m[1;34m15->80  [0m[1;34m16->81  [0m[1;34m17->82  [0m[1;34m18->83  [0m[1;34m19->84  [0m[1;34m20->85  [0m[1;34m21->86  [0m[1;34m22->87  [0m[1;34m23->88  [0m[1;34m24->89  [0m[1;34m25->90  [0m[1;34m26->91  [0m[1;34m27->92  [0m[1;34m28->93  [0m[1;34m29->94  [0m[1;34m30->95  [0m[1;34m31->96  [0m[1;34m32->97  [0m[1;34m33->98  [0m[1;34m34->99  [0m[1;34m35->100  [0m[1;34m36->101  [0m[1;34m37->102  [0m[1;34m38->103  [0m[1;34m39->104  [0m[1;34m40->105  [0m[1;34m41->106  [0m[1;34m42->107  [0m[1;34m43->108  [0m[1;34m44->109  [0m[1;34m45->110  [0m[1;34m46->111  [0m[1;34m47->112  [0m[1;34m48->113  [0m[1;34m49->114  [0m[1;34m50->115  [0m[1;34m51->116  [0m[1;34m52->117  [0m[1;34m53->118  [0m[1;34m54->119  [0m[1;34m55->120  [0m[1;34m56->121  [0m[1;34m57->122  [0m[1;34m58->123  [0m[1;34m59->124  [0m[1;34m60->125  [0m[1;34m61->126  [0m[1;34m62->127  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22871710095232 -> hwthread 65 - OK[0m[1;34m
[0m[1;34m	threadid 22871506151424 -> hwthread 66 - OK[0m[1;34m
[0m[1;34m	threadid 22871304824960 -> hwthread 67 - OK[0m[1;34m
[0m[1;34m	threadid 22871103498496 -> hwthread 68 - OK[0m[1;34m
[0m[1;34m	threadid 22870902172032 -> hwthread 69 - OK[0m[1;34m
[0m[1;34m	threadid 22870700845568 -> hwthread 70 - OK[0m[1;34m
[0m[1;34m	threadid 22870499519104 -> hwthread 71 - OK[0m[1;34m
[0m[1;34m	threadid 22870298192640 -> hwthread 72 - OK[0m[1;34m
[0m[1;34m	threadid 22870096866176 -> hwthread 73 - OK[0m[1;34m
[0m[1;34m	threadid 22869895539712 -> hwthread 74 - OK[0m[1;34m
[0m[1;34m	threadid 22869694213248 -> hwthread 75 - OK[0m[1;34m
[0m[1;34m	threadid 22869492886784 -> hwthread 76 - OK[0m[1;34m
[0m[1;34m	threadid 22869291560320 -> hwthread 77 - OK[0m[1;34m
[0m[1;34m	threadid 22869090233856 -> hwthread 78 - OK[0m[1;34m
[0m[1;34m	threadid 22868888907392 -> hwthread 79 - OK[0m[1;34m
[0m[1;34m	threadid 22868687580928 -> hwthread 80 - OK[0m[1;34m
[0m[1;34m	threadid 22868486254464 -> hwthread 81 - OK[0m[1;34m
[0m[1;34m	threadid 22868284928000 -> hwthread 82 - OK[0m[1;34m
[0m[1;34m	threadid 22868083601536 -> hwthread 83 - OK[0m[1;34m
[0m[1;34m	threadid 22867882275072 -> hwthread 84 - OK[0m[1;34m
[0m[1;34m	threadid 22867680948608 -> hwthread 85 - OK[0m[1;34m
[0m[1;34m	threadid 22867479622144 -> hwthread 86 - OK[0m[1;34m
[0m[1;34m	threadid 22867278295680 -> hwthread 87 - OK[0m[1;34m
[0m[1;34m	threadid 22867076969216 -> hwthread 88 - OK[0m[1;34m
[0m[1;34m	threadid 22866875642752 -> hwthread 89 - OK[0m[1;34m
[0m[1;34m	threadid 22866674316288 -> hwthread 90 - OK[0m[1;34m
[0m[1;34m	threadid 22866472989824 -> hwthread 91 - OK[0m[1;34m
[0m[1;34m	threadid 22866271663360 -> hwthread 92 - OK[0m[1;34m
[0m[1;34m	threadid 22866070336896 -> hwthread 93 - OK[0m[1;34m
[0m[1;34m	threadid 22865869010432 -> hwthread 94 - OK[0m[1;34m
[0m[1;34m	threadid 22865667683968 -> hwthread 95 - OK[0m[1;34m
[0m[1;34m	threadid 22865466357504 -> hwthread 96 - OK[0m[1;34m
[0m[1;34m	threadid 22865265026944 -> hwthread 97 - OK[0m[1;34m
[0m[1;34m	threadid 22865063700480 -> hwthread 98 - OK[0m[1;34m
[0m[1;34m	threadid 22864862374016 -> hwthread 99 - OK[0m[1;34m
[0m[1;34m	threadid 22864661047552 -> hwthread 100 - OK[0m[1;34m
[0m[1;34m	threadid 22864459721088 -> hwthread 101 - OK[0m[1;34m
[0m[1;34m	threadid 22864258394624 -> hwthread 102 - OK[0m[1;34m
[0m[1;34m	threadid 22864057068160 -> hwthread 103 - OK[0m[1;34m
[0m[1;34m	threadid 22863855741696 -> hwthread 104 - OK[0m[1;34m
[0m[1;34m	threadid 22863654415232 -> hwthread 105 - OK[0m[1;34m
[0m[1;34m	threadid 22863453088768 -> hwthread 106 - OK[0m[1;34m
[0m[1;34m	threadid 22863251762304 -> hwthread 107 - OK[0m[1;34m
[0m[1;34m	threadid 22863050435840 -> hwthread 108 - OK[0m[1;34m
[0m[1;34m	threadid 22862849109376 -> hwthread 109 - OK[0m[1;34m
[0m[1;34m	threadid 22862647782912 -> hwthread 110 - OK[0m[1;34m
[0m[1;34m	threadid 22862446456448 -> hwthread 111 - OK[0m[1;34m
[0m[1;34m	threadid 22862245129984 -> hwthread 112 - OK[0m[1;34m
[0m[1;34m	threadid 22862043803520 -> hwthread 113 - OK[0m[1;34m
[0m[1;34m	threadid 22861842477056 -> hwthread 114 - OK[0m[1;34m
[0m[1;34m	threadid 22861641150592 -> hwthread 115 - OK[0m[1;34m
[0m[1;34m	threadid 22861439824128 -> hwthread 116 - OK[0m[1;34m
[0m[1;34m	threadid 22861238497664 -> hwthread 117 - OK[0m[1;34m
[0m[1;34m	threadid 22861037171200 -> hwthread 118 - OK[0m[1;34m
[0m[1;34m	threadid 22860835844736 -> hwthread 119 - OK[0m[1;34m
[0m[1;34m	threadid 22860634518272 -> hwthread 120 - OK[0m[1;34m
[0m[1;34m	threadid 22860433191808 -> hwthread 121 - OK[0m[1;34m
[0m[1;34m	threadid 22860231865344 -> hwthread 122 - OK[0m[1;34m
[0m[1;34m	threadid 22860030538880 -> hwthread 123 - OK[0m[1;34m
[0m[1;34m	threadid 22859829212416 -> hwthread 124 - OK[0m[1;34m
[0m[1;34m	threadid 22859627885952 -> hwthread 125 - OK[0m[1;34m
[0m[1;34m	threadid 22859426559488 -> hwthread 126 - OK[0m[1;34m
[0m[1;34m	threadid 22859225233024 -> hwthread 127 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22871604434688 -> hwthread 64 - OK[0m[1;34m
[0m[1;34m	threadid 22871597844224 -> hwthread 65 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 126, m: 126)                                                               	 1.27348   	 700       	 10.2626   	 0         	 0.209994  	 48.8707   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6300, cols: 126, reductionFactor: 36, colBlockingSize: 12)                 	 0.888906  	 600       	 138.773   	 0         	 4.37217   	 31.7402   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6300, cols: 76, reductionFactor: 37, colBlockingSize: 12)                  	 0.411553  	 700       	 127.131   	 0         	 6.59363   	 19.2809   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 126, n: 50, r: 126, r2: 126)          	 0.348252  	 600       	 344.643   	 0         	 22.1009   	 15.5941   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 126, r: 126, r2: 6300, leftOrthog: 0)      	 0.26821   	 600       	 447.495   	 0         	 43.1868   	 10.3618   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 6300, Xcols: 76, r: 76, streamingCols: 0)                   	 0.148326  	 700       	 171.73    	 0         	 36.2628   	 4.73572   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 126, reductionFactor: 36, colBlockingSize: 12)                 	 0.116476  	 100       	 70.0443   	 0         	 2.27257   	 30.8216   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 126, Qr2: 76)      	 0.114874  	 700       	 0         	 0         	 68.1316   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 76, m: 3800, k: 76) 	 0.0856593 	 700       	 358.727   	 0         	 38.1384   	 9.40594   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 76, m: 76)                                                                  	 0.0713968 	 800       	 6.55828   	 0         	 1.56009   	 4.20377   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 126)                                                                	 0.0595858 	 100       	 4.50891   	 0         	 0.203404  	 22.1672   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 6300, m: 76)                                                                       	 0.0578623 	 700       	 0         	 0         	 92.6779   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 76, reductionFactor: 37, colBlockingSize: 12)                  	 0.0482228 	 100       	 61.5073   	 0         	 3.24786   	 18.9378   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 76, k: 2500)   	 0.0426487 	 800       	 356.4     	 0         	 47.8401   	 7.44981   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                 	 0.0414499 	 100       	 2.81465   	 0         	 0.145718  	 19.3157   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 76, n: 50, r2: 76)                   	 0.0348948 	 700       	 0         	 0         	 153.678   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 76, n: 50, r2: 76)                                                                                         	 0.0348534 	 700       	 0         	 0         	 92.8046   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 2500, m: 76, k: 50)	 0.0340895 	 800       	 445.885   	 0         	 59.8519   	 7.44981   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 6300, m: 76)                                                              	 0.0311606 	 700       	 0         	 0         	 172.094   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6300, cols: 50, reductionFactor: 37, colBlockingSize: 12)                  	 0.0289369 	 100       	 111.8     	 0         	 8.77773   	 12.7368   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 3800, k: 76) 	 0.0286071 	 700       	 706.678   	 0         	 94.4717   	 7.48031   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r: 126, r2: 126)           	 0.0225051 	 100       	 352.72    	 0         	 22.9593   	 15.3629   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 126, r: 126, r2: 2500, leftOrthog: 0)      	 0.0203735 	 100       	 389.623   	 0         	 38.3538   	 10.1587   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 126, n: 50, r: 126, r2: 50)           	 0.018556  	 100       	 427.787   	 0         	 48.0751   	 8.89831   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 6300, leftOrthog: 0)        	 0.0183114 	 100       	 172.024   	 0         	 41.5041   	 4.14474   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 126, reductionFactor: 36, colBlockingSize: 12)                   	 0.0141325 	 100       	 11.5457   	 0         	 1.25532   	 9.19744   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 76, r: 76, streamingCols: 0)                   	 0.0129094 	 100       	 111.857   	 0         	 23.7278   	 4.71417   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 2500, m: 76)                                                                       	 0.00712384	 100       	 0         	 0         	 42.6736   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 3800, k: 50) 	 0.00662513	 100       	 286.787   	 0         	 46.1878   	 6.20915   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 0, n: 50, r2: 76)                    	 0.00643148	 100       	 0         	 0         	 47.2675   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 50, Qr2: 76)       	 0.00609729	 100       	 0         	 0         	 82.6597   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 76)                                                              	 0.00596866	 100       	 0         	 0         	 50.9327   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                  	 0.00447068	 100       	 3.72798   	 0         	 1.35103   	 2.75937   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 50, reductionFactor: 37, colBlockingSize: 12)                    	 0.00381863	 100       	 6.7238    	 0         	 1.0475    	 6.41892   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 76)                                                                                         	 0.00263042	 100       	 0         	 0         	 115.571   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 126, r: 50, r2: 50, leftOrthog: 0)         	 0.00261633	 100       	 24.0795   	 0         	 7.30794   	 3.29498   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 76, m: 76, fromLeft: 0)                	 0.00123814	 800       	 0         	 0         	 59.7128   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 50, r2: 50)              	 0.00105541	 100       	 23.6874   	 0         	 5.68498   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 76, m: 50, k: 76)   	 0.000906097	 100       	 63.7459   	 0         	 11.8098   	 5.39773   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50, k: 50)     	 0.000900461	 100       	 27.7636   	 0         	 6.66325   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 50, k: 76)   	 0.000864734	 100       	 43.9441   	 0         	 9.34391   	 4.70297   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 76, n: 50, r2: 1)                                                                                          	 0.000864576	 200       	 0         	 0         	 14.0647   	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                   	 0.000841598	 100       	 0.594108  	 0         	 2.37643   	 0.25      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                          	 0.000791425	 200       	 0         	 0         	 10.1083   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 50, m: 50, k: 50)  	 0.000657465	 100       	 38.0248   	 0         	 9.12596   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 76, n: 50, r2: 1)                    	 0.000560894	 100       	 0         	 0         	 17.9713   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 1, r1low: 0, n: 50, r2: 50)                     	 0.000538054	 100       	 0         	 0         	 7.4342    	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                          	 0.000520182	 100       	 0         	 0         	 7.68962   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 1, Xr2: 50, Qr1: 1, Qr2: 0)          	 0.000468042	 100       	 0         	 0         	 8.54624   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 50)                                                                	 0.000462645	 100       	 0         	 0         	 8.64594   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                            	 0.000423722	 100       	 1.18002   	 0         	 14.1602   	 0.0833333 
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                 	 0.000390736	 100       	 0.639818  	 0         	 10.2371   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 76, n: 50, r2: 1)                                                                                 	 0.000355824	 100       	 1.06794   	 0         	 17.0871   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                 	 0.000328951	 100       	 0.759992  	 0         	 12.1599   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 0, m: 3800, k: 50)  	 6.31e-06  	 100       	 0         	 0         	 24088.7   	 0         
Timing statistics:
function                                                                                                                                                                                      	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                        	 5.40084   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_normalized(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                     	 5.40078   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::rightNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                            	 4.19644   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::rightNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                        	 4.19517   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double]	 3.71706   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                  	 1.51205   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                               	 1.37451   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_leftOrthogonalize(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&) [with T = double]                                   	 1.20424   	 100       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                            	 1.04904   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]           	 0.824017  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.464079  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                           	 0.390368  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                	 0.309511  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                    	 0.161236  	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double]        	 0.122669  	 1800      
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                                       	 0.12144   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.0758674 	 900       
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                       	 0.0649862 	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double]          	 0.0435492 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                        	 0.0424252 	 1000      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                	 0.03966   	 1300      
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                              	 0.0375919 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double]       	 0.0347469 	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                         	 0.00943817	 5200      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                	 0.0074125 	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                              	 0.00383794	 6400      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                           	 0.00123814	 800       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                       	 0.00107551	 300       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                         	 0.000841598	 100       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                                                  	 0.000423722	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
orthoX: L, orthoY: L
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 64
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->65  [0m[1;34m1->66  [0m[1;34m2->67  [0m[1;34m3->68  [0m[1;34m4->69  [0m[1;34m5->70  [0m[1;34m6->71  [0m[1;34m7->72  [0m[1;34m8->73  [0m[1;34m9->74  [0m[1;34m10->75  [0m[1;34m11->76  [0m[1;34m12->77  [0m[1;34m13->78  [0m[1;34m14->79  [0m[1;34m15->80  [0m[1;34m16->81  [0m[1;34m17->82  [0m[1;34m18->83  [0m[1;34m19->84  [0m[1;34m20->85  [0m[1;34m21->86  [0m[1;34m22->87  [0m[1;34m23->88  [0m[1;34m24->89  [0m[1;34m25->90  [0m[1;34m26->91  [0m[1;34m27->92  [0m[1;34m28->93  [0m[1;34m29->94  [0m[1;34m30->95  [0m[1;34m31->96  [0m[1;34m32->97  [0m[1;34m33->98  [0m[1;34m34->99  [0m[1;34m35->100  [0m[1;34m36->101  [0m[1;34m37->102  [0m[1;34m38->103  [0m[1;34m39->104  [0m[1;34m40->105  [0m[1;34m41->106  [0m[1;34m42->107  [0m[1;34m43->108  [0m[1;34m44->109  [0m[1;34m45->110  [0m[1;34m46->111  [0m[1;34m47->112  [0m[1;34m48->113  [0m[1;34m49->114  [0m[1;34m50->115  [0m[1;34m51->116  [0m[1;34m52->117  [0m[1;34m53->118  [0m[1;34m54->119  [0m[1;34m55->120  [0m[1;34m56->121  [0m[1;34m57->122  [0m[1;34m58->123  [0m[1;34m59->124  [0m[1;34m60->125  [0m[1;34m61->126  [0m[1;34m62->127  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22923975026560 -> hwthread 65 - OK[0m[1;34m
[0m[1;34m	threadid 22923783956480 -> hwthread 66 - OK[0m[1;34m
[0m[1;34m	threadid 22923582630016 -> hwthread 67 - OK[0m[1;34m
[0m[1;34m	threadid 22923381303552 -> hwthread 68 - OK[0m[1;34m
[0m[1;34m	threadid 22923179977088 -> hwthread 69 - OK[0m[1;34m
[0m[1;34m	threadid 22922978650624 -> hwthread 70 - OK[0m[1;34m
[0m[1;34m	threadid 22922777324160 -> hwthread 71 - OK[0m[1;34m
[0m[1;34m	threadid 22922575997696 -> hwthread 72 - OK[0m[1;34m
[0m[1;34m	threadid 22922374671232 -> hwthread 73 - OK[0m[1;34m
[0m[1;34m	threadid 22922173344768 -> hwthread 74 - OK[0m[1;34m
[0m[1;34m	threadid 22921972018304 -> hwthread 75 - OK[0m[1;34m
[0m[1;34m	threadid 22921770691840 -> hwthread 76 - OK[0m[1;34m
[0m[1;34m	threadid 22921569365376 -> hwthread 77 - OK[0m[1;34m
[0m[1;34m	threadid 22921368038912 -> hwthread 78 - OK[0m[1;34m
[0m[1;34m	threadid 22921166712448 -> hwthread 79 - OK[0m[1;34m
[0m[1;34m	threadid 22920965385984 -> hwthread 80 - OK[0m[1;34m
[0m[1;34m	threadid 22920764059520 -> hwthread 81 - OK[0m[1;34m
[0m[1;34m	threadid 22920562733056 -> hwthread 82 - OK[0m[1;34m
[0m[1;34m	threadid 22920361406592 -> hwthread 83 - OK[0m[1;34m
[0m[1;34m	threadid 22920160080128 -> hwthread 84 - OK[0m[1;34m
[0m[1;34m	threadid 22919958753664 -> hwthread 85 - OK[0m[1;34m
[0m[1;34m	threadid 22919757427200 -> hwthread 86 - OK[0m[1;34m
[0m[1;34m	threadid 22919556100736 -> hwthread 87 - OK[0m[1;34m
[0m[1;34m	threadid 22919354774272 -> hwthread 88 - OK[0m[1;34m
[0m[1;34m	threadid 22919153447808 -> hwthread 89 - OK[0m[1;34m
[0m[1;34m	threadid 22918952121344 -> hwthread 90 - OK[0m[1;34m
[0m[1;34m	threadid 22918750794880 -> hwthread 91 - OK[0m[1;34m
[0m[1;34m	threadid 22918549468416 -> hwthread 92 - OK[0m[1;34m
[0m[1;34m	threadid 22918348141952 -> hwthread 93 - OK[0m[1;34m
[0m[1;34m	threadid 22918146815488 -> hwthread 94 - OK[0m[1;34m
[0m[1;34m	threadid 22917945489024 -> hwthread 95 - OK[0m[1;34m
[0m[1;34m	threadid 22917744162560 -> hwthread 96 - OK[0m[1;34m
[0m[1;34m	threadid 22917542832000 -> hwthread 97 - OK[0m[1;34m
[0m[1;34m	threadid 22917341505536 -> hwthread 98 - OK[0m[1;34m
[0m[1;34m	threadid 22917140179072 -> hwthread 99 - OK[0m[1;34m
[0m[1;34m	threadid 22916938852608 -> hwthread 100 - OK[0m[1;34m
[0m[1;34m	threadid 22916737526144 -> hwthread 101 - OK[0m[1;34m
[0m[1;34m	threadid 22916536199680 -> hwthread 102 - OK[0m[1;34m
[0m[1;34m	threadid 22916334873216 -> hwthread 103 - OK[0m[1;34m
[0m[1;34m	threadid 22916133546752 -> hwthread 104 - OK[0m[1;34m
[0m[1;34m	threadid 22915932220288 -> hwthread 105 - OK[0m[1;34m
[0m[1;34m	threadid 22915730893824 -> hwthread 106 - OK[0m[1;34m
[0m[1;34m	threadid 22915529567360 -> hwthread 107 - OK[0m[1;34m
[0m[1;34m	threadid 22915328240896 -> hwthread 108 - OK[0m[1;34m
[0m[1;34m	threadid 22915126914432 -> hwthread 109 - OK[0m[1;34m
[0m[1;34m	threadid 22914925587968 -> hwthread 110 - OK[0m[1;34m
[0m[1;34m	threadid 22914724261504 -> hwthread 111 - OK[0m[1;34m
[0m[1;34m	threadid 22914522935040 -> hwthread 112 - OK[0m[1;34m
[0m[1;34m	threadid 22914321608576 -> hwthread 113 - OK[0m[1;34m
[0m[1;34m	threadid 22914120282112 -> hwthread 114 - OK[0m[1;34m
[0m[1;34m	threadid 22913918955648 -> hwthread 115 - OK[0m[1;34m
[0m[1;34m	threadid 22913717629184 -> hwthread 116 - OK[0m[1;34m
[0m[1;34m	threadid 22913516302720 -> hwthread 117 - OK[0m[1;34m
[0m[1;34m	threadid 22913314976256 -> hwthread 118 - OK[0m[1;34m
[0m[1;34m	threadid 22913113649792 -> hwthread 119 - OK[0m[1;34m
[0m[1;34m	threadid 22912912323328 -> hwthread 120 - OK[0m[1;34m
[0m[1;34m	threadid 22912710996864 -> hwthread 121 - OK[0m[1;34m
[0m[1;34m	threadid 22912509670400 -> hwthread 122 - OK[0m[1;34m
[0m[1;34m	threadid 22912308343936 -> hwthread 123 - OK[0m[1;34m
[0m[1;34m	threadid 22912107017472 -> hwthread 124 - OK[0m[1;34m
[0m[1;34m	threadid 22911905691008 -> hwthread 125 - OK[0m[1;34m
[0m[1;34m	threadid 22911704364544 -> hwthread 126 - OK[0m[1;34m
[0m[1;34m	threadid 22911503038080 -> hwthread 127 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22923869366016 -> hwthread 64 - OK[0m[1;34m
[0m[1;34m	threadid 22923862775552 -> hwthread 65 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 127, m: 127)                                                               	 1.35257   	 700       	 9.89431   	 0         	 0.20086   	 49.2596   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6350, cols: 127, reductionFactor: 35, colBlockingSize: 12)                 	 0.898763  	 600       	 140.654   	 0         	 4.39312   	 32.0168   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6350, cols: 77, reductionFactor: 37, colBlockingSize: 12)                  	 0.416222  	 700       	 130.059   	 0         	 6.65829   	 19.5334   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 127, n: 50, r: 127, r2: 127)          	 0.360846  	 600       	 340.597   	 0         	 21.6695   	 15.7178   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 127, r: 127, r2: 6350, leftOrthog: 0)      	 0.269648  	 600       	 455.79    	 0         	 43.641    	 10.4441   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 6350, Xcols: 77, r: 77, streamingCols: 0)                   	 0.151607  	 700       	 173.834   	 0         	 36.2309   	 4.79796   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 127, reductionFactor: 35, colBlockingSize: 12)                 	 0.116181  	 100       	 71.3966   	 0         	 2.29731   	 31.0784   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 127, Qr2: 77)      	 0.115305  	 700       	 0         	 0         	 68.9843   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 77, m: 3850, k: 77) 	 0.0903177 	 700       	 353.832   	 0         	 37.1294   	 9.5297    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 77, m: 77)                                                                  	 0.0780231 	 800       	 6.24133   	 0         	 1.46533   	 4.25933   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 127)                                                                	 0.059764  	 100       	 4.52893   	 0         	 0.204136  	 22.1858   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 6350, m: 77)                                                                       	 0.0577922 	 700       	 0         	 0         	 94.7575   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 77, reductionFactor: 37, colBlockingSize: 12)                  	 0.0497809 	 100       	 61.1605   	 0         	 3.18884   	 19.1795   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 77, k: 2500)   	 0.0444981 	 800       	 346.082   	 0         	 46.2186   	 7.48794   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                 	 0.040502  	 100       	 2.88051   	 0         	 0.149128  	 19.3157   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 77, n: 50, r2: 77)                   	 0.0356619 	 700       	 0         	 0         	 153.56    	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 77, n: 50, r2: 77)                                                                                         	 0.0346225 	 700       	 0         	 0         	 95.8983   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 2500, m: 77, k: 50)	 0.0335193 	 800       	 459.437   	 0         	 61.357    	 7.48794   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 6350, m: 77)                                                              	 0.0313633 	 700       	 0         	 0         	 174.607   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 3850, k: 77) 	 0.0297963 	 700       	 696.445   	 0         	 92.6181   	 7.51953   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6350, cols: 50, reductionFactor: 37, colBlockingSize: 12)                  	 0.0296812 	 100       	 109.861   	 0         	 8.62498   	 12.7375   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r: 127, r2: 127)           	 0.0248321 	 100       	 324.761   	 0         	 20.977    	 15.4818   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 127, r: 127, r2: 2500, leftOrthog: 0)      	 0.0223384 	 100       	 361.015   	 0         	 35.2669   	 10.2367   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 6350, leftOrthog: 0)        	 0.0188594 	 100       	 168.351   	 0         	 40.6163   	 4.14491   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 127, n: 50, r: 127, r2: 50)           	 0.0181378 	 100       	 444.623   	 0         	 49.8538   	 8.91854   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 77, r: 77, streamingCols: 0)                   	 0.0127298 	 100       	 116.439   	 0         	 24.3815   	 4.77573   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 127, reductionFactor: 35, colBlockingSize: 12)                   	 0.0121763 	 100       	 13.6247   	 0         	 1.4769    	 9.22518   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 2500, m: 77)                                                                       	 0.00742143	 100       	 0         	 0         	 41.5015   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 0, n: 50, r2: 77)                    	 0.00671703	 100       	 0         	 0         	 45.8536   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 77)                                                              	 0.00639132	 100       	 0         	 0         	 48.1904   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 50, Qr2: 77)       	 0.00634944	 100       	 0         	 0         	 80.0071   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                  	 0.00445398	 100       	 3.74196   	 0         	 1.35609   	 2.75937   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 3850, k: 50) 	 0.0042342 	 100       	 454.632   	 0         	 73.2134   	 6.20968   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 50, reductionFactor: 37, colBlockingSize: 12)                    	 0.00352164	 100       	 7.29084   	 0         	 1.13584   	 6.41892   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 77)                                                                                         	 0.00273701	 100       	 0         	 0         	 112.532   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 127, r: 50, r2: 50, leftOrthog: 0)         	 0.00268346	 100       	 23.6635   	 0         	 7.16985   	 3.30042   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 77, m: 77, fromLeft: 0)                	 0.00185236	 800       	 0         	 0         	 40.97     	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 77, m: 50, k: 77)   	 0.000973535	 100       	 60.9018   	 0         	 11.1996   	 5.43785   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50, k: 50)     	 0.000881718	 100       	 28.3537   	 0         	 6.8049    	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                   	 0.000876794	 100       	 0.570259  	 0         	 2.28104   	 0.25      
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 50, k: 77)   	 0.00086377	 100       	 44.5721   	 0         	 9.44696   	 4.71814   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 50, m: 50, k: 50)  	 0.000823278	 100       	 30.3664   	 0         	 7.28794   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 77, n: 50, r2: 1)                                                                                          	 0.000821391	 200       	 0         	 0         	 14.9989   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 50, r2: 50)              	 0.000814908	 100       	 30.6783   	 0         	 7.36279   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                          	 0.000812887	 200       	 0         	 0         	 9.84147   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 1, r1low: 0, n: 50, r2: 50)                     	 0.000564274	 100       	 0         	 0         	 7.08875   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 77, n: 50, r2: 1)                    	 0.000545716	 100       	 0         	 0         	 18.6177   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                          	 0.000514252	 100       	 0         	 0         	 7.77829   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                            	 0.000452493	 100       	 1.10499   	 0         	 13.2599   	 0.0833333 
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 1, Xr2: 50, Qr1: 1, Qr2: 0)          	 0.000450667	 100       	 0         	 0         	 8.87573   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 50)                                                                	 0.000441613	 100       	 0         	 0         	 9.0577    	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                 	 0.000392405	 100       	 0.637097  	 0         	 10.1936   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 77, n: 50, r2: 1)                                                                                 	 0.000366382	 100       	 1.05082   	 0         	 16.8131   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                 	 0.000353017	 100       	 0.708181  	 0         	 11.3309   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 0, m: 3850, k: 50)  	 6.66e-06  	 100       	 0         	 0         	 23123.1   	 0         
Timing statistics:
function                                                                                                                                                                                      	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                        	 5.56729   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_normalized(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                     	 5.56722   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::rightNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                            	 4.34312   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::rightNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                        	 4.34181   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double]	 3.8538    	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                  	 1.52633   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                               	 1.45284   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_leftOrthogonalize(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&) [with T = double]                                   	 1.22402   	 100       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                            	 1.05745   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]           	 0.838801  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.469999  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                           	 0.404631  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                	 0.31353   	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                    	 0.164337  	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double]        	 0.126192  	 1800      
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                                       	 0.122105  	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.0824771 	 900       
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                       	 0.0652136 	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double]          	 0.0453798 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                        	 0.043489  	 1000      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                	 0.039508  	 1300      
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                              	 0.0381962 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double]       	 0.0343425 	 900       
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                	 0.00737838	 1800      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                         	 0.00493041	 5200      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                              	 0.00378411	 6400      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                           	 0.00185236	 800       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                       	 0.0011118 	 300       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                         	 0.000876794	 100       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                                                  	 0.000452493	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
orthoX: L, orthoY: L
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 64
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->65  [0m[1;34m1->66  [0m[1;34m2->67  [0m[1;34m3->68  [0m[1;34m4->69  [0m[1;34m5->70  [0m[1;34m6->71  [0m[1;34m7->72  [0m[1;34m8->73  [0m[1;34m9->74  [0m[1;34m10->75  [0m[1;34m11->76  [0m[1;34m12->77  [0m[1;34m13->78  [0m[1;34m14->79  [0m[1;34m15->80  [0m[1;34m16->81  [0m[1;34m17->82  [0m[1;34m18->83  [0m[1;34m19->84  [0m[1;34m20->85  [0m[1;34m21->86  [0m[1;34m22->87  [0m[1;34m23->88  [0m[1;34m24->89  [0m[1;34m25->90  [0m[1;34m26->91  [0m[1;34m27->92  [0m[1;34m28->93  [0m[1;34m29->94  [0m[1;34m30->95  [0m[1;34m31->96  [0m[1;34m32->97  [0m[1;34m33->98  [0m[1;34m34->99  [0m[1;34m35->100  [0m[1;34m36->101  [0m[1;34m37->102  [0m[1;34m38->103  [0m[1;34m39->104  [0m[1;34m40->105  [0m[1;34m41->106  [0m[1;34m42->107  [0m[1;34m43->108  [0m[1;34m44->109  [0m[1;34m45->110  [0m[1;34m46->111  [0m[1;34m47->112  [0m[1;34m48->113  [0m[1;34m49->114  [0m[1;34m50->115  [0m[1;34m51->116  [0m[1;34m52->117  [0m[1;34m53->118  [0m[1;34m54->119  [0m[1;34m55->120  [0m[1;34m56->121  [0m[1;34m57->122  [0m[1;34m58->123  [0m[1;34m59->124  [0m[1;34m60->125  [0m[1;34m61->126  [0m[1;34m62->127  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22937530263424 -> hwthread 65 - OK[0m[1;34m
[0m[1;34m	threadid 22937339947008 -> hwthread 66 - OK[0m[1;34m
[0m[1;34m	threadid 22937138620544 -> hwthread 67 - OK[0m[1;34m
[0m[1;34m	threadid 22936937294080 -> hwthread 68 - OK[0m[1;34m
[0m[1;34m	threadid 22936735967616 -> hwthread 69 - OK[0m[1;34m
[0m[1;34m	threadid 22936534641152 -> hwthread 70 - OK[0m[1;34m
[0m[1;34m	threadid 22936333314688 -> hwthread 71 - OK[0m[1;34m
[0m[1;34m	threadid 22936131988224 -> hwthread 72 - OK[0m[1;34m
[0m[1;34m	threadid 22935930661760 -> hwthread 73 - OK[0m[1;34m
[0m[1;34m	threadid 22935729335296 -> hwthread 74 - OK[0m[1;34m
[0m[1;34m	threadid 22935528008832 -> hwthread 75 - OK[0m[1;34m
[0m[1;34m	threadid 22935326682368 -> hwthread 76 - OK[0m[1;34m
[0m[1;34m	threadid 22935125355904 -> hwthread 77 - OK[0m[1;34m
[0m[1;34m	threadid 22934924029440 -> hwthread 78 - OK[0m[1;34m
[0m[1;34m	threadid 22934722702976 -> hwthread 79 - OK[0m[1;34m
[0m[1;34m	threadid 22934521376512 -> hwthread 80 - OK[0m[1;34m
[0m[1;34m	threadid 22934320050048 -> hwthread 81 - OK[0m[1;34m
[0m[1;34m	threadid 22934118723584 -> hwthread 82 - OK[0m[1;34m
[0m[1;34m	threadid 22933917397120 -> hwthread 83 - OK[0m[1;34m
[0m[1;34m	threadid 22933716070656 -> hwthread 84 - OK[0m[1;34m
[0m[1;34m	threadid 22933514744192 -> hwthread 85 - OK[0m[1;34m
[0m[1;34m	threadid 22933313417728 -> hwthread 86 - OK[0m[1;34m
[0m[1;34m	threadid 22933112091264 -> hwthread 87 - OK[0m[1;34m
[0m[1;34m	threadid 22932910764800 -> hwthread 88 - OK[0m[1;34m
[0m[1;34m	threadid 22932709438336 -> hwthread 89 - OK[0m[1;34m
[0m[1;34m	threadid 22932508111872 -> hwthread 90 - OK[0m[1;34m
[0m[1;34m	threadid 22932306785408 -> hwthread 91 - OK[0m[1;34m
[0m[1;34m	threadid 22932105458944 -> hwthread 92 - OK[0m[1;34m
[0m[1;34m	threadid 22931904132480 -> hwthread 93 - OK[0m[1;34m
[0m[1;34m	threadid 22931702806016 -> hwthread 94 - OK[0m[1;34m
[0m[1;34m	threadid 22931501479552 -> hwthread 95 - OK[0m[1;34m
[0m[1;34m	threadid 22931300153088 -> hwthread 96 - OK[0m[1;34m
[0m[1;34m	threadid 22931098822528 -> hwthread 97 - OK[0m[1;34m
[0m[1;34m	threadid 22930897496064 -> hwthread 98 - OK[0m[1;34m
[0m[1;34m	threadid 22930696169600 -> hwthread 99 - OK[0m[1;34m
[0m[1;34m	threadid 22930494843136 -> hwthread 100 - OK[0m[1;34m
[0m[1;34m	threadid 22930293516672 -> hwthread 101 - OK[0m[1;34m
[0m[1;34m	threadid 22930092190208 -> hwthread 102 - OK[0m[1;34m
[0m[1;34m	threadid 22929890863744 -> hwthread 103 - OK[0m[1;34m
[0m[1;34m	threadid 22929689537280 -> hwthread 104 - OK[0m[1;34m
[0m[1;34m	threadid 22929488210816 -> hwthread 105 - OK[0m[1;34m
[0m[1;34m	threadid 22929286884352 -> hwthread 106 - OK[0m[1;34m
[0m[1;34m	threadid 22929085557888 -> hwthread 107 - OK[0m[1;34m
[0m[1;34m	threadid 22928884231424 -> hwthread 108 - OK[0m[1;34m
[0m[1;34m	threadid 22928682904960 -> hwthread 109 - OK[0m[1;34m
[0m[1;34m	threadid 22928481578496 -> hwthread 110 - OK[0m[1;34m
[0m[1;34m	threadid 22928280252032 -> hwthread 111 - OK[0m[1;34m
[0m[1;34m	threadid 22928078925568 -> hwthread 112 - OK[0m[1;34m
[0m[1;34m	threadid 22927877599104 -> hwthread 113 - OK[0m[1;34m
[0m[1;34m	threadid 22927676272640 -> hwthread 114 - OK[0m[1;34m
[0m[1;34m	threadid 22927474946176 -> hwthread 115 - OK[0m[1;34m
[0m[1;34m	threadid 22927273619712 -> hwthread 116 - OK[0m[1;34m
[0m[1;34m	threadid 22927072293248 -> hwthread 117 - OK[0m[1;34m
[0m[1;34m	threadid 22926870966784 -> hwthread 118 - OK[0m[1;34m
[0m[1;34m	threadid 22926669640320 -> hwthread 119 - OK[0m[1;34m
[0m[1;34m	threadid 22926468313856 -> hwthread 120 - OK[0m[1;34m
[0m[1;34m	threadid 22926266987392 -> hwthread 121 - OK[0m[1;34m
[0m[1;34m	threadid 22926065660928 -> hwthread 122 - OK[0m[1;34m
[0m[1;34m	threadid 22925864334464 -> hwthread 123 - OK[0m[1;34m
[0m[1;34m	threadid 22925663008000 -> hwthread 124 - OK[0m[1;34m
[0m[1;34m	threadid 22925461681536 -> hwthread 125 - OK[0m[1;34m
[0m[1;34m	threadid 22925260355072 -> hwthread 126 - OK[0m[1;34m
[0m[1;34m	threadid 22925059028608 -> hwthread 127 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22937424602880 -> hwthread 64 - OK[0m[1;34m
[0m[1;34m	threadid 22937418012416 -> hwthread 65 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 128, m: 128)                                                               	 1.38987   	 700       	 9.85806   	 0         	 0.198557  	 49.6485   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6400, cols: 128, reductionFactor: 35, colBlockingSize: 12)                 	 0.90474   	 600       	 143.051   	 0         	 4.4331    	 32.2689   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6400, cols: 78, reductionFactor: 37, colBlockingSize: 12)                  	 0.429693  	 700       	 130.293   	 0         	 6.58515   	 19.7859   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 128, n: 50, r: 128, r2: 128)          	 0.393121  	 600       	 320.077   	 0         	 20.2049   	 15.8416   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 128, r: 128, r2: 6400, leftOrthog: 0)      	 0.270672  	 600       	 464.877   	 0         	 44.1633   	 10.5263   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 6400, Xcols: 78, r: 78, streamingCols: 0)                   	 0.15475   	 700       	 176.131   	 0         	 36.2395   	 4.86019   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 128, reductionFactor: 35, colBlockingSize: 12)                 	 0.118313  	 100       	 71.2185   	 0         	 2.27454   	 31.3112   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 128, Qr2: 78)      	 0.110971  	 700       	 0         	 0         	 72.8395   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 78, m: 3900, k: 78) 	 0.0898416 	 700       	 369.747   	 0         	 38.302    	 9.65347   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 78, m: 78)                                                                  	 0.0760474 	 800       	 6.65623   	 0         	 1.54262   	 4.31489   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 128)                                                                	 0.0632847 	 100       	 4.30857   	 0         	 0.194044  	 22.2041   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 6400, m: 78)                                                                       	 0.055962  	 700       	 0         	 0         	 99.9078   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 78, reductionFactor: 37, colBlockingSize: 12)                  	 0.0513426 	 100       	 60.8503   	 0         	 3.13321   	 19.4211   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 78, k: 2500)   	 0.0436283 	 800       	 357.566   	 0         	 47.5141   	 7.52547   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                 	 0.0411278 	 100       	 2.83668   	 0         	 0.146859  	 19.3157   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 78, n: 50, r2: 78)                   	 0.0365907 	 700       	 0         	 0         	 152.8     	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 78, n: 50, r2: 78)                                                                                         	 0.0353157 	 700       	 0         	 0         	 96.4738   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 2500, m: 78, k: 50)	 0.0351996 	 800       	 443.187   	 0         	 58.8917   	 7.52547   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 6400, m: 78)                                                              	 0.0305893 	 700       	 0         	 0         	 182.778   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 3900, k: 78) 	 0.029995  	 700       	 709.919   	 0         	 93.9277   	 7.55814   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6400, cols: 50, reductionFactor: 37, colBlockingSize: 12)                  	 0.0298506 	 100       	 110.098   	 0         	 8.64304   	 12.7383   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r: 128, r2: 128)           	 0.0223747 	 100       	 366.128   	 0         	 23.4688   	 15.6006   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 128, r: 128, r2: 2500, leftOrthog: 0)      	 0.0217762 	 100       	 376.191   	 0         	 36.4717   	 10.3146   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 128, n: 50, r: 128, r2: 50)           	 0.0203652 	 100       	 402.255   	 0         	 45.0023   	 8.93855   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 6400, leftOrthog: 0)        	 0.0193082 	 100       	 165.733   	 0         	 39.9831   	 4.14508   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 128, reductionFactor: 35, colBlockingSize: 12)                   	 0.0133741 	 100       	 12.6005   	 0         	 1.36287   	 9.24559   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 78, r: 78, streamingCols: 0)                   	 0.0129417 	 100       	 117.527   	 0         	 24.2962   	 4.83727   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 2500, m: 78)                                                                       	 0.00716995	 100       	 0         	 0         	 43.515    	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 0, n: 50, r2: 78)                    	 0.00644554	 100       	 0         	 0         	 48.4056   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 78)                                                              	 0.00640952	 100       	 0         	 0         	 48.6776   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 50, Qr2: 78)       	 0.00613787	 100       	 0         	 0         	 83.4165   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 50, reductionFactor: 37, colBlockingSize: 12)                    	 0.00596112	 100       	 4.30719   	 0         	 0.671014  	 6.41892   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 3900, k: 50) 	 0.0048568 	 100       	 401.499   	 0         	 64.6516   	 6.21019   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                  	 0.00439651	 100       	 3.79087   	 0         	 1.37382   	 2.75937   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 128, r: 50, r2: 50, leftOrthog: 0)         	 0.00266538	 100       	 24.0116   	 0         	 7.2635    	 3.30579   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 78)                                                                                         	 0.00256952	 100       	 0         	 0         	 121.424   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 78, m: 78, fromLeft: 0)                	 0.00161222	 800       	 0         	 0         	 48.303    	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 78, m: 50, k: 78)   	 0.000965519	 100       	 63.0127   	 0         	 11.5039   	 5.47753   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 50, k: 78)   	 0.0008753 	 100       	 44.5562   	 0         	 9.41392   	 4.73301   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50, k: 50)     	 0.000873799	 100       	 28.6107   	 0         	 6.86657   	 4.16667   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 50, r2: 50)              	 0.000845932	 100       	 29.5532   	 0         	 7.09277   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                          	 0.000825634	 200       	 0         	 0         	 9.68952   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 78, n: 50, r2: 1)                                                                                          	 0.000823475	 200       	 0         	 0         	 15.1553   	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                   	 0.000812188	 100       	 0.615621  	 0         	 2.46248   	 0.25      
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 50, m: 50, k: 50)  	 0.000648981	 100       	 38.5219   	 0         	 9.24526   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 78, n: 50, r2: 1)                    	 0.000551155	 100       	 0         	 0         	 18.5792   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 1, r1low: 0, n: 50, r2: 50)                     	 0.000550567	 100       	 0         	 0         	 7.26524   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                          	 0.00053803	 100       	 0         	 0         	 7.43453   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                            	 0.000438688	 100       	 1.13976   	 0         	 13.6771   	 0.0833333 
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 50)                                                                	 0.000425994	 100       	 0         	 0         	 9.3898    	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 1, Xr2: 50, Qr1: 1, Qr2: 0)          	 0.000420312	 100       	 0         	 0         	 9.51674   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                 	 0.000394445	 100       	 0.633802  	 0         	 10.1408   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                 	 0.000376517	 100       	 0.663981  	 0         	 10.6237   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 78, n: 50, r2: 1)                                                                                 	 0.000362862	 100       	 1.07479   	 0         	 17.1966   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 0, m: 3900, k: 50)  	 6.96e-06  	 100       	 0         	 0         	 22413.8   	 0         
Timing statistics:
function                                                                                                                                                                                      	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                        	 6.16422   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_normalized(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                     	 6.16416   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::rightNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                            	 4.93027   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::rightNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                        	 4.92896   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double]	 4.42997   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                  	 1.55327   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                               	 1.49428   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_leftOrthogonalize(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&) [with T = double]                                   	 1.23379   	 100       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                            	 1.0669    	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]           	 0.854569  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.487484  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                           	 0.436707  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                	 0.314422  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                    	 0.167692  	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double]        	 0.126541  	 1800      
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                                       	 0.117529  	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.0804439 	 900       
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                       	 0.0631319 	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double]          	 0.0445021 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                        	 0.0441379 	 1000      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                	 0.0400723 	 1300      
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                              	 0.0374248 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double]       	 0.0358485 	 900       
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                	 0.00609576	 1800      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                         	 0.00426813	 5200      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                              	 0.00364826	 6400      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                           	 0.00161222	 800       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                       	 0.00113382	 300       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                         	 0.000812188	 100       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                                                  	 0.000438688	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
orthoX: L, orthoY: L
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 64
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->65  [0m[1;34m1->66  [0m[1;34m2->67  [0m[1;34m3->68  [0m[1;34m4->69  [0m[1;34m5->70  [0m[1;34m6->71  [0m[1;34m7->72  [0m[1;34m8->73  [0m[1;34m9->74  [0m[1;34m10->75  [0m[1;34m11->76  [0m[1;34m12->77  [0m[1;34m13->78  [0m[1;34m14->79  [0m[1;34m15->80  [0m[1;34m16->81  [0m[1;34m17->82  [0m[1;34m18->83  [0m[1;34m19->84  [0m[1;34m20->85  [0m[1;34m21->86  [0m[1;34m22->87  [0m[1;34m23->88  [0m[1;34m24->89  [0m[1;34m25->90  [0m[1;34m26->91  [0m[1;34m27->92  [0m[1;34m28->93  [0m[1;34m29->94  [0m[1;34m30->95  [0m[1;34m31->96  [0m[1;34m32->97  [0m[1;34m33->98  [0m[1;34m34->99  [0m[1;34m35->100  [0m[1;34m36->101  [0m[1;34m37->102  [0m[1;34m38->103  [0m[1;34m39->104  [0m[1;34m40->105  [0m[1;34m41->106  [0m[1;34m42->107  [0m[1;34m43->108  [0m[1;34m44->109  [0m[1;34m45->110  [0m[1;34m46->111  [0m[1;34m47->112  [0m[1;34m48->113  [0m[1;34m49->114  [0m[1;34m50->115  [0m[1;34m51->116  [0m[1;34m52->117  [0m[1;34m53->118  [0m[1;34m54->119  [0m[1;34m55->120  [0m[1;34m56->121  [0m[1;34m57->122  [0m[1;34m58->123  [0m[1;34m59->124  [0m[1;34m60->125  [0m[1;34m61->126  [0m[1;34m62->127  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22790652352384 -> hwthread 65 - OK[0m[1;34m
[0m[1;34m	threadid 22790438643712 -> hwthread 66 - OK[0m[1;34m
[0m[1;34m	threadid 22790237317248 -> hwthread 67 - OK[0m[1;34m
[0m[1;34m	threadid 22790035990784 -> hwthread 68 - OK[0m[1;34m
[0m[1;34m	threadid 22789834664320 -> hwthread 69 - OK[0m[1;34m
[0m[1;34m	threadid 22789633337856 -> hwthread 70 - OK[0m[1;34m
[0m[1;34m	threadid 22789432011392 -> hwthread 71 - OK[0m[1;34m
[0m[1;34m	threadid 22789230684928 -> hwthread 72 - OK[0m[1;34m
[0m[1;34m	threadid 22789029358464 -> hwthread 73 - OK[0m[1;34m
[0m[1;34m	threadid 22788828032000 -> hwthread 74 - OK[0m[1;34m
[0m[1;34m	threadid 22788626705536 -> hwthread 75 - OK[0m[1;34m
[0m[1;34m	threadid 22788425379072 -> hwthread 76 - OK[0m[1;34m
[0m[1;34m	threadid 22788224052608 -> hwthread 77 - OK[0m[1;34m
[0m[1;34m	threadid 22788022726144 -> hwthread 78 - OK[0m[1;34m
[0m[1;34m	threadid 22787821399680 -> hwthread 79 - OK[0m[1;34m
[0m[1;34m	threadid 22787620073216 -> hwthread 80 - OK[0m[1;34m
[0m[1;34m	threadid 22787418746752 -> hwthread 81 - OK[0m[1;34m
[0m[1;34m	threadid 22787217420288 -> hwthread 82 - OK[0m[1;34m
[0m[1;34m	threadid 22787016093824 -> hwthread 83 - OK[0m[1;34m
[0m[1;34m	threadid 22786814767360 -> hwthread 84 - OK[0m[1;34m
[0m[1;34m	threadid 22786613440896 -> hwthread 85 - OK[0m[1;34m
[0m[1;34m	threadid 22786412114432 -> hwthread 86 - OK[0m[1;34m
[0m[1;34m	threadid 22786210787968 -> hwthread 87 - OK[0m[1;34m
[0m[1;34m	threadid 22786009461504 -> hwthread 88 - OK[0m[1;34m
[0m[1;34m	threadid 22785808135040 -> hwthread 89 - OK[0m[1;34m
[0m[1;34m	threadid 22785606808576 -> hwthread 90 - OK[0m[1;34m
[0m[1;34m	threadid 22785405482112 -> hwthread 91 - OK[0m[1;34m
[0m[1;34m	threadid 22785204155648 -> hwthread 92 - OK[0m[1;34m
[0m[1;34m	threadid 22785002829184 -> hwthread 93 - OK[0m[1;34m
[0m[1;34m	threadid 22784801502720 -> hwthread 94 - OK[0m[1;34m
[0m[1;34m	threadid 22784600176256 -> hwthread 95 - OK[0m[1;34m
[0m[1;34m	threadid 22784398849792 -> hwthread 96 - OK[0m[1;34m
[0m[1;34m	threadid 22784197519232 -> hwthread 97 - OK[0m[1;34m
[0m[1;34m	threadid 22783996192768 -> hwthread 98 - OK[0m[1;34m
[0m[1;34m	threadid 22783794866304 -> hwthread 99 - OK[0m[1;34m
[0m[1;34m	threadid 22783593539840 -> hwthread 100 - OK[0m[1;34m
[0m[1;34m	threadid 22783392213376 -> hwthread 101 - OK[0m[1;34m
[0m[1;34m	threadid 22783190886912 -> hwthread 102 - OK[0m[1;34m
[0m[1;34m	threadid 22782989560448 -> hwthread 103 - OK[0m[1;34m
[0m[1;34m	threadid 22782788233984 -> hwthread 104 - OK[0m[1;34m
[0m[1;34m	threadid 22782586907520 -> hwthread 105 - OK[0m[1;34m
[0m[1;34m	threadid 22782385581056 -> hwthread 106 - OK[0m[1;34m
[0m[1;34m	threadid 22782184254592 -> hwthread 107 - OK[0m[1;34m
[0m[1;34m	threadid 22781982928128 -> hwthread 108 - OK[0m[1;34m
[0m[1;34m	threadid 22781781601664 -> hwthread 109 - OK[0m[1;34m
[0m[1;34m	threadid 22781580275200 -> hwthread 110 - OK[0m[1;34m
[0m[1;34m	threadid 22781378948736 -> hwthread 111 - OK[0m[1;34m
[0m[1;34m	threadid 22781177622272 -> hwthread 112 - OK[0m[1;34m
[0m[1;34m	threadid 22780976295808 -> hwthread 113 - OK[0m[1;34m
[0m[1;34m	threadid 22780774969344 -> hwthread 114 - OK[0m[1;34m
[0m[1;34m	threadid 22780573642880 -> hwthread 115 - OK[0m[1;34m
[0m[1;34m	threadid 22780372316416 -> hwthread 116 - OK[0m[1;34m
[0m[1;34m	threadid 22780170989952 -> hwthread 117 - OK[0m[1;34m
[0m[1;34m	threadid 22779969663488 -> hwthread 118 - OK[0m[1;34m
[0m[1;34m	threadid 22779768337024 -> hwthread 119 - OK[0m[1;34m
[0m[1;34m	threadid 22779567010560 -> hwthread 120 - OK[0m[1;34m
[0m[1;34m	threadid 22779365684096 -> hwthread 121 - OK[0m[1;34m
[0m[1;34m	threadid 22779164357632 -> hwthread 122 - OK[0m[1;34m
[0m[1;34m	threadid 22778963031168 -> hwthread 123 - OK[0m[1;34m
[0m[1;34m	threadid 22778761704704 -> hwthread 124 - OK[0m[1;34m
[0m[1;34m	threadid 22778560378240 -> hwthread 125 - OK[0m[1;34m
[0m[1;34m	threadid 22778359051776 -> hwthread 126 - OK[0m[1;34m
[0m[1;34m	threadid 22778157725312 -> hwthread 127 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22790546691840 -> hwthread 64 - OK[0m[1;34m
[0m[1;34m	threadid 22790540101376 -> hwthread 65 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 129, m: 129)                                                               	 1.40886   	 700       	 9.95488   	 0         	 0.198949  	 50.0374   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6450, cols: 129, reductionFactor: 35, colBlockingSize: 12)                 	 0.90569   	 600       	 146.277   	 0         	 4.49792   	 32.521    
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6450, cols: 79, reductionFactor: 37, colBlockingSize: 12)                  	 0.434915  	 700       	 133.082   	 0         	 6.64137   	 20.0384   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 129, n: 50, r: 129, r2: 129)          	 0.360947  	 600       	 356.843   	 0         	 22.3511   	 15.9653   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 129, r: 129, r2: 6450, leftOrthog: 0)      	 0.276098  	 600       	 466.506   	 0         	 43.9745   	 10.6086   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 6450, Xcols: 79, r: 79, streamingCols: 0)                   	 0.154939  	 700       	 181.865   	 0         	 36.9463   	 4.92243   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 129, reductionFactor: 35, colBlockingSize: 12)                 	 0.120248  	 100       	 71.1718   	 0         	 2.25629   	 31.5438   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 129, Qr2: 79)      	 0.120058  	 700       	 0         	 0         	 68.4081   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 79, m: 3950, k: 79) 	 0.0921256 	 700       	 374.627   	 0         	 38.3163   	 9.77723   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 79, m: 79)                                                                  	 0.0809105 	 800       	 6.49986   	 0         	 1.48723   	 4.37044   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 6450, m: 79)                                                                       	 0.0638458 	 700       	 0         	 0         	 89.3867   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 129)                                                                	 0.0631716 	 100       	 4.34795   	 0         	 0.195658  	 22.2222   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 79, reductionFactor: 37, colBlockingSize: 12)                  	 0.0519806 	 100       	 61.6546   	 0         	 3.13565   	 19.6625   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 79, k: 2500)   	 0.0427791 	 800       	 369.34    	 0         	 48.8388   	 7.56241   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                 	 0.0415515 	 100       	 2.80776   	 0         	 0.145362  	 19.3157   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 79, n: 50, r2: 79)                   	 0.0404801 	 700       	 0         	 0         	 140.982   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 79, n: 50, r2: 79)                                                                                         	 0.0363871 	 700       	 0         	 0         	 96.0495   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 2500, m: 79, k: 50)	 0.03477   	 800       	 454.414   	 0         	 60.0885   	 7.56241   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 6450, m: 79)                                                              	 0.0315086 	 700       	 0         	 0         	 181.124   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 3950, k: 79) 	 0.0309322 	 700       	 706.172   	 0         	 92.9645   	 7.59615   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6450, cols: 50, reductionFactor: 37, colBlockingSize: 12)                  	 0.0298373 	 100       	 111.007   	 0         	 8.71392   	 12.7391   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r: 129, r2: 129)           	 0.0243185 	 100       	 342.147   	 0         	 21.7658   	 15.7194   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 129, r: 129, r2: 2500, leftOrthog: 0)      	 0.0214711 	 100       	 387.521   	 0         	 37.2885   	 10.3925   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 129, n: 50, r: 129, r2: 50)           	 0.0190169 	 100       	 437.531   	 0         	 48.8407   	 8.95833   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 6450, leftOrthog: 0)        	 0.0189192 	 100       	 170.462   	 0         	 41.1222   	 4.14524   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 79, r: 79, streamingCols: 0)                   	 0.01342   	 100       	 116.263   	 0         	 23.7329   	 4.8988    
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 129, reductionFactor: 35, colBlockingSize: 12)                   	 0.0133166 	 100       	 12.8535   	 0         	 1.3872    	 9.26576   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 50, Qr2: 79)       	 0.0076366 	 100       	 0         	 0         	 67.5693   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 2500, m: 79)                                                                       	 0.00725697	 100       	 0         	 0         	 43.5444   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 0, n: 50, r2: 79)                    	 0.00656018	 100       	 0         	 0         	 48.1694   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 3950, k: 50) 	 0.00607277	 100       	 325.222   	 0         	 52.3649   	 6.21069   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 79)                                                              	 0.0059857 	 100       	 0         	 0         	 52.7925   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 50, reductionFactor: 37, colBlockingSize: 12)                    	 0.00502214	 100       	 5.1125    	 0         	 0.796474  	 6.41892   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                  	 0.00441692	 100       	 3.77336   	 0         	 1.36747   	 2.75937   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 129, r: 50, r2: 50, leftOrthog: 0)         	 0.00293792	 100       	 21.9543   	 0         	 6.63053   	 3.31109   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 79)                                                                                         	 0.0025947 	 100       	 0         	 0         	 121.787   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 79, m: 79, fromLeft: 0)                	 0.00197115	 800       	 0         	 0         	 40.5269   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 79, m: 50, k: 79)   	 0.00097921	 100       	 63.7351   	 0         	 11.553    	 5.51676   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50, k: 50)     	 0.000892719	 100       	 28.0043   	 0         	 6.72104   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 50, k: 79)   	 0.000876674	 100       	 45.0567   	 0         	 9.49041   	 4.7476    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 79, n: 50, r2: 1)                                                                                          	 0.000854961	 200       	 0         	 0         	 14.7843   	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                   	 0.000842066	 100       	 0.593778  	 0         	 2.37511   	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 50, r2: 50)              	 0.000835366	 100       	 29.927    	 0         	 7.18248   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                          	 0.000801912	 200       	 0         	 0         	 9.97616   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 50, m: 50, k: 50)  	 0.00059842	 100       	 41.7767   	 0         	 10.0264   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 1, r1low: 0, n: 50, r2: 50)                     	 0.000550127	 100       	 0         	 0         	 7.27105   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 79, n: 50, r2: 1)                    	 0.000526507	 100       	 0         	 0         	 19.6009   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                          	 0.000509547	 100       	 0         	 0         	 7.85011   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 1, Xr2: 50, Qr1: 1, Qr2: 0)          	 0.000439725	 100       	 0         	 0         	 9.09659   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 50)                                                                	 0.000424502	 100       	 0         	 0         	 9.42281   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                            	 0.00042345	 100       	 1.18078   	 0         	 14.1693   	 0.0833333 
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                 	 0.000382658	 100       	 0.653325  	 0         	 10.4532   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 79, n: 50, r2: 1)                                                                                 	 0.000362994	 100       	 1.08817   	 0         	 17.4108   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                 	 0.000354048	 100       	 0.706119  	 0         	 11.2979   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 0, m: 3950, k: 50)  	 6.89e-06  	 100       	 0         	 0         	 22931.8   	 0         
Timing statistics:
function                                                                                                                                                                                      	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                        	 5.74258   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_normalized(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                     	 5.74251   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::rightNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                            	 4.46183   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::rightNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                        	 4.46054   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double]	 3.96786   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                  	 1.56101   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                               	 1.51358   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_leftOrthogonalize(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&) [with T = double]                                   	 1.2806    	 100       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                            	 1.06974   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]           	 0.873676  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.492429  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                           	 0.405118  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                	 0.319426  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                    	 0.168359  	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double]        	 0.130993  	 1800      
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                                       	 0.128135  	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.0853274 	 900       
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                       	 0.0711027 	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                        	 0.0481169 	 1000      
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double]          	 0.0436718 	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                	 0.0411482 	 1300      
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                              	 0.0379188 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double]       	 0.0353685 	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                         	 0.0163347 	 5200      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                	 0.00902995	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                              	 0.00368812	 6400      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                           	 0.00197115	 800       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                       	 0.0010997 	 300       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                         	 0.000842066	 100       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                                                  	 0.00042345	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
orthoX: L, orthoY: L
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 64
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->65  [0m[1;34m1->66  [0m[1;34m2->67  [0m[1;34m3->68  [0m[1;34m4->69  [0m[1;34m5->70  [0m[1;34m6->71  [0m[1;34m7->72  [0m[1;34m8->73  [0m[1;34m9->74  [0m[1;34m10->75  [0m[1;34m11->76  [0m[1;34m12->77  [0m[1;34m13->78  [0m[1;34m14->79  [0m[1;34m15->80  [0m[1;34m16->81  [0m[1;34m17->82  [0m[1;34m18->83  [0m[1;34m19->84  [0m[1;34m20->85  [0m[1;34m21->86  [0m[1;34m22->87  [0m[1;34m23->88  [0m[1;34m24->89  [0m[1;34m25->90  [0m[1;34m26->91  [0m[1;34m27->92  [0m[1;34m28->93  [0m[1;34m29->94  [0m[1;34m30->95  [0m[1;34m31->96  [0m[1;34m32->97  [0m[1;34m33->98  [0m[1;34m34->99  [0m[1;34m35->100  [0m[1;34m36->101  [0m[1;34m37->102  [0m[1;34m38->103  [0m[1;34m39->104  [0m[1;34m40->105  [0m[1;34m41->106  [0m[1;34m42->107  [0m[1;34m43->108  [0m[1;34m44->109  [0m[1;34m45->110  [0m[1;34m46->111  [0m[1;34m47->112  [0m[1;34m48->113  [0m[1;34m49->114  [0m[1;34m50->115  [0m[1;34m51->116  [0m[1;34m52->117  [0m[1;34m53->118  [0m[1;34m54->119  [0m[1;34m55->120  [0m[1;34m56->121  [0m[1;34m57->122  [0m[1;34m58->123  [0m[1;34m59->124  [0m[1;34m60->125  [0m[1;34m61->126  [0m[1;34m62->127  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23301207254912 -> hwthread 65 - OK[0m[1;34m
[0m[1;34m	threadid 23301002881024 -> hwthread 66 - OK[0m[1;34m
[0m[1;34m	threadid 23300801554560 -> hwthread 67 - OK[0m[1;34m
[0m[1;34m	threadid 23300600228096 -> hwthread 68 - OK[0m[1;34m
[0m[1;34m	threadid 23300398901632 -> hwthread 69 - OK[0m[1;34m
[0m[1;34m	threadid 23300197575168 -> hwthread 70 - OK[0m[1;34m
[0m[1;34m	threadid 23299996248704 -> hwthread 71 - OK[0m[1;34m
[0m[1;34m	threadid 23299794922240 -> hwthread 72 - OK[0m[1;34m
[0m[1;34m	threadid 23299593595776 -> hwthread 73 - OK[0m[1;34m
[0m[1;34m	threadid 23299392269312 -> hwthread 74 - OK[0m[1;34m
[0m[1;34m	threadid 23299190942848 -> hwthread 75 - OK[0m[1;34m
[0m[1;34m	threadid 23298989616384 -> hwthread 76 - OK[0m[1;34m
[0m[1;34m	threadid 23298788289920 -> hwthread 77 - OK[0m[1;34m
[0m[1;34m	threadid 23298586963456 -> hwthread 78 - OK[0m[1;34m
[0m[1;34m	threadid 23298385636992 -> hwthread 79 - OK[0m[1;34m
[0m[1;34m	threadid 23298184310528 -> hwthread 80 - OK[0m[1;34m
[0m[1;34m	threadid 23297982984064 -> hwthread 81 - OK[0m[1;34m
[0m[1;34m	threadid 23297781657600 -> hwthread 82 - OK[0m[1;34m
[0m[1;34m	threadid 23297580331136 -> hwthread 83 - OK[0m[1;34m
[0m[1;34m	threadid 23297379004672 -> hwthread 84 - OK[0m[1;34m
[0m[1;34m	threadid 23297177678208 -> hwthread 85 - OK[0m[1;34m
[0m[1;34m	threadid 23296976351744 -> hwthread 86 - OK[0m[1;34m
[0m[1;34m	threadid 23296775025280 -> hwthread 87 - OK[0m[1;34m
[0m[1;34m	threadid 23296573698816 -> hwthread 88 - OK[0m[1;34m
[0m[1;34m	threadid 23296372372352 -> hwthread 89 - OK[0m[1;34m
[0m[1;34m	threadid 23296171045888 -> hwthread 90 - OK[0m[1;34m
[0m[1;34m	threadid 23295969719424 -> hwthread 91 - OK[0m[1;34m
[0m[1;34m	threadid 23295768392960 -> hwthread 92 - OK[0m[1;34m
[0m[1;34m	threadid 23295567066496 -> hwthread 93 - OK[0m[1;34m
[0m[1;34m	threadid 23295365740032 -> hwthread 94 - OK[0m[1;34m
[0m[1;34m	threadid 23295164413568 -> hwthread 95 - OK[0m[1;34m
[0m[1;34m	threadid 23294963087104 -> hwthread 96 - OK[0m[1;34m
[0m[1;34m	threadid 23294761756544 -> hwthread 97 - OK[0m[1;34m
[0m[1;34m	threadid 23294560430080 -> hwthread 98 - OK[0m[1;34m
[0m[1;34m	threadid 23294359103616 -> hwthread 99 - OK[0m[1;34m
[0m[1;34m	threadid 23294157777152 -> hwthread 100 - OK[0m[1;34m
[0m[1;34m	threadid 23293956450688 -> hwthread 101 - OK[0m[1;34m
[0m[1;34m	threadid 23293755124224 -> hwthread 102 - OK[0m[1;34m
[0m[1;34m	threadid 23293553797760 -> hwthread 103 - OK[0m[1;34m
[0m[1;34m	threadid 23293352471296 -> hwthread 104 - OK[0m[1;34m
[0m[1;34m	threadid 23293151144832 -> hwthread 105 - OK[0m[1;34m
[0m[1;34m	threadid 23292949818368 -> hwthread 106 - OK[0m[1;34m
[0m[1;34m	threadid 23292748491904 -> hwthread 107 - OK[0m[1;34m
[0m[1;34m	threadid 23292547165440 -> hwthread 108 - OK[0m[1;34m
[0m[1;34m	threadid 23292345838976 -> hwthread 109 - OK[0m[1;34m
[0m[1;34m	threadid 23292144512512 -> hwthread 110 - OK[0m[1;34m
[0m[1;34m	threadid 23291943186048 -> hwthread 111 - OK[0m[1;34m
[0m[1;34m	threadid 23291741859584 -> hwthread 112 - OK[0m[1;34m
[0m[1;34m	threadid 23291540533120 -> hwthread 113 - OK[0m[1;34m
[0m[1;34m	threadid 23291339206656 -> hwthread 114 - OK[0m[1;34m
[0m[1;34m	threadid 23291137880192 -> hwthread 115 - OK[0m[1;34m
[0m[1;34m	threadid 23290936553728 -> hwthread 116 - OK[0m[1;34m
[0m[1;34m	threadid 23290735227264 -> hwthread 117 - OK[0m[1;34m
[0m[1;34m	threadid 23290533900800 -> hwthread 118 - OK[0m[1;34m
[0m[1;34m	threadid 23290332574336 -> hwthread 119 - OK[0m[1;34m
[0m[1;34m	threadid 23290131247872 -> hwthread 120 - OK[0m[1;34m
[0m[1;34m	threadid 23289929921408 -> hwthread 121 - OK[0m[1;34m
[0m[1;34m	threadid 23289728594944 -> hwthread 122 - OK[0m[1;34m
[0m[1;34m	threadid 23289527268480 -> hwthread 123 - OK[0m[1;34m
[0m[1;34m	threadid 23289325942016 -> hwthread 124 - OK[0m[1;34m
[0m[1;34m	threadid 23289124615552 -> hwthread 125 - OK[0m[1;34m
[0m[1;34m	threadid 23288923289088 -> hwthread 126 - OK[0m[1;34m
[0m[1;34m	threadid 23288721962624 -> hwthread 127 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23301101594368 -> hwthread 64 - OK[0m[1;34m
[0m[1;34m	threadid 23301095003904 -> hwthread 65 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 130, m: 130)                                                               	 1.43561   	 700       	 9.99834   	 0         	 0.198277  	 50.4263   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6500, cols: 130, reductionFactor: 34, colBlockingSize: 12)                 	 0.905669  	 600       	 149.831   	 0         	 4.56803   	 32.7999   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6500, cols: 80, reductionFactor: 37, colBlockingSize: 12)                  	 0.441097  	 700       	 135.603   	 0         	 6.68298   	 20.2908   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 130, n: 50, r: 130, r2: 130)          	 0.386406  	 600       	 341.144   	 0         	 21.2034   	 16.0891   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 130, r: 130, r2: 6500, leftOrthog: 0)      	 0.280561  	 600       	 469.845   	 0         	 43.9486   	 10.6908   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 6500, Xcols: 80, r: 80, streamingCols: 0)                   	 0.161003  	 700       	 180.866   	 0         	 36.2845   	 4.98466   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 130, reductionFactor: 34, colBlockingSize: 12)                 	 0.119482  	 100       	 72.8023   	 0         	 2.28922   	 31.8022   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 130, Qr2: 80)      	 0.115687  	 700       	 0         	 0         	 72.1256   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 80, m: 4000, k: 80) 	 0.0926585 	 700       	 386.797   	 0         	 39.0665   	 9.90099   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 80, m: 80)                                                                  	 0.0769194 	 800       	 7.10006   	 0         	 1.60417   	 4.426     
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 130)                                                                	 0.0625774 	 100       	 4.42119   	 0         	 0.198794  	 22.2401   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 6500, m: 80)                                                                       	 0.0582661 	 700       	 0         	 0         	 99.9552   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 80, reductionFactor: 37, colBlockingSize: 12)                  	 0.0525116 	 100       	 62.5859   	 0         	 3.14445   	 19.9036   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 80, k: 2500)   	 0.0430519 	 800       	 371.645   	 0         	 48.9084   	 7.59878   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                 	 0.0420709 	 100       	 2.7731    	 0         	 0.143567  	 19.3157   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 80, n: 50, r2: 80)                                                                                         	 0.0382494 	 700       	 0         	 0         	 93.7007   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 80, n: 50, r2: 80)                   	 0.0375391 	 700       	 0         	 0         	 155.145   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 2500, m: 80, k: 50)	 0.0341127 	 800       	 469.034   	 0         	 61.7249   	 7.59878   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 4000, k: 80) 	 0.0320102 	 700       	 699.778   	 0         	 91.6709   	 7.63359   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 6500, m: 80)                                                              	 0.0312973 	 700       	 0         	 0         	 186.086   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6500, cols: 50, reductionFactor: 37, colBlockingSize: 12)                  	 0.0296    	 100       	 112.765   	 0         	 8.85135   	 12.7398   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r: 130, r2: 130)           	 0.0233753 	 100       	 361.492   	 0         	 22.8241   	 15.8382   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 130, r: 130, r2: 2500, leftOrthog: 0)      	 0.0220606 	 100       	 383.036   	 0         	 36.5829   	 10.4704   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 130, n: 50, r: 130, r2: 50)           	 0.0199336 	 100       	 423.908   	 0         	 47.2168   	 8.9779    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 6500, leftOrthog: 0)        	 0.0198612 	 100       	 163.636   	 0         	 39.474    	 4.14541   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 130, reductionFactor: 34, colBlockingSize: 12)                   	 0.0149592 	 100       	 11.6297   	 0         	 1.25141   	 9.2933    
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 80, r: 80, streamingCols: 0)                   	 0.0133034 	 100       	 120.27    	 0         	 24.2464   	 4.96032   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 2500, m: 80)                                                                       	 0.00747729	 100       	 0         	 0         	 42.7963   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 50, Qr2: 80)       	 0.00724941	 100       	 0         	 0         	 71.73     	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 80)                                                              	 0.00607914	 100       	 0         	 0         	 52.639    	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 0, n: 50, r2: 80)                    	 0.00606072	 100       	 0         	 0         	 52.799    	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 4000, k: 50) 	 0.00480955	 100       	 415.839   	 0         	 66.9501   	 6.21118   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                  	 0.00440999	 100       	 3.77928   	 0         	 1.36962   	 2.75937   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 50, reductionFactor: 37, colBlockingSize: 12)                    	 0.00363608	 100       	 7.06136   	 0         	 1.10009   	 6.41892   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 130, r: 50, r2: 50, leftOrthog: 0)         	 0.00275495	 100       	 23.5939   	 0         	 7.11447   	 3.31633   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 80)                                                                                         	 0.00274439	 100       	 0         	 0         	 116.602   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 80, m: 80, fromLeft: 0)                	 0.00133781	 800       	 0         	 0         	 61.2342   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                          	 0.00100374	 200       	 0         	 0         	 7.97016   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 50, k: 80)   	 0.000883676	 100       	 45.2655   	 0         	 9.50575   	 4.7619    
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 80, m: 50, k: 80)   	 0.00088313	 100       	 72.4695   	 0         	 13.0445   	 5.55556   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50, k: 50)     	 0.00087007	 100       	 28.7333   	 0         	 6.896     	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                   	 0.00086182	 100       	 0.580168  	 0         	 2.32067   	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 50, r2: 50)              	 0.000841837	 100       	 29.697    	 0         	 7.12727   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 80, n: 50, r2: 1)                                                                                          	 0.000833876	 200       	 0         	 0         	 15.35     	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 50, m: 50, k: 50)  	 0.000624274	 100       	 40.0465   	 0         	 9.61116   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 1, r1low: 0, n: 50, r2: 50)                     	 0.000570401	 100       	 0         	 0         	 7.01261   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 80, n: 50, r2: 1)                    	 0.000561093	 100       	 0         	 0         	 18.5353   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                          	 0.000496849	 100       	 0         	 0         	 8.05074   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                            	 0.000463538	 100       	 1.07866   	 0         	 12.9439   	 0.0833333 
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 1, Xr2: 50, Qr1: 1, Qr2: 0)          	 0.000435206	 100       	 0         	 0         	 9.19105   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 50)                                                                	 0.000426282	 100       	 0         	 0         	 9.38346   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                 	 0.000382845	 100       	 0.653006  	 0         	 10.4481   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 80, n: 50, r2: 1)                                                                                 	 0.00036885	 100       	 1.08445   	 0         	 17.3512   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                 	 0.00035818	 100       	 0.697973  	 0         	 11.1676   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 0, m: 4000, k: 50)  	 6.83e-06  	 100       	 0         	 0         	 23426.1   	 0         
Timing statistics:
function                                                                                                                                                                                      	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                        	 5.79309   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_normalized(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                     	 5.79303   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::rightNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                            	 4.52364   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::rightNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                        	 4.52234   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double]	 4.00618   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                  	 1.56695   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                               	 1.54026   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_leftOrthogonalize(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&) [with T = double]                                   	 1.26931   	 100       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                            	 1.07029   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]           	 0.878526  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.497778  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                           	 0.430557  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                	 0.325237  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                    	 0.174307  	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double]        	 0.131252  	 1800      
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                                       	 0.123372  	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.0813294 	 900       
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                       	 0.0657434 	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                        	 0.0447313 	 1000      
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double]          	 0.0439219 	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                	 0.0433283 	 1300      
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                              	 0.0378027 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double]       	 0.0347369 	 900       
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                	 0.00950602	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                              	 0.00398322	 6400      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                         	 0.00184494	 5200      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                           	 0.00133781	 800       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                       	 0.00110987	 300       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                         	 0.00086182	 100       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                                                  	 0.000463538	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
orthoX: L, orthoY: L
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 64
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->65  [0m[1;34m1->66  [0m[1;34m2->67  [0m[1;34m3->68  [0m[1;34m4->69  [0m[1;34m5->70  [0m[1;34m6->71  [0m[1;34m7->72  [0m[1;34m8->73  [0m[1;34m9->74  [0m[1;34m10->75  [0m[1;34m11->76  [0m[1;34m12->77  [0m[1;34m13->78  [0m[1;34m14->79  [0m[1;34m15->80  [0m[1;34m16->81  [0m[1;34m17->82  [0m[1;34m18->83  [0m[1;34m19->84  [0m[1;34m20->85  [0m[1;34m21->86  [0m[1;34m22->87  [0m[1;34m23->88  [0m[1;34m24->89  [0m[1;34m25->90  [0m[1;34m26->91  [0m[1;34m27->92  [0m[1;34m28->93  [0m[1;34m29->94  [0m[1;34m30->95  [0m[1;34m31->96  [0m[1;34m32->97  [0m[1;34m33->98  [0m[1;34m34->99  [0m[1;34m35->100  [0m[1;34m36->101  [0m[1;34m37->102  [0m[1;34m38->103  [0m[1;34m39->104  [0m[1;34m40->105  [0m[1;34m41->106  [0m[1;34m42->107  [0m[1;34m43->108  [0m[1;34m44->109  [0m[1;34m45->110  [0m[1;34m46->111  [0m[1;34m47->112  [0m[1;34m48->113  [0m[1;34m49->114  [0m[1;34m50->115  [0m[1;34m51->116  [0m[1;34m52->117  [0m[1;34m53->118  [0m[1;34m54->119  [0m[1;34m55->120  [0m[1;34m56->121  [0m[1;34m57->122  [0m[1;34m58->123  [0m[1;34m59->124  [0m[1;34m60->125  [0m[1;34m61->126  [0m[1;34m62->127  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23291920750464 -> hwthread 65 - OK[0m[1;34m
[0m[1;34m	threadid 23291741857792 -> hwthread 66 - OK[0m[1;34m
[0m[1;34m	threadid 23291540531328 -> hwthread 67 - OK[0m[1;34m
[0m[1;34m	threadid 23291339204864 -> hwthread 68 - OK[0m[1;34m
[0m[1;34m	threadid 23291137878400 -> hwthread 69 - OK[0m[1;34m
[0m[1;34m	threadid 23290936551936 -> hwthread 70 - OK[0m[1;34m
[0m[1;34m	threadid 23290735225472 -> hwthread 71 - OK[0m[1;34m
[0m[1;34m	threadid 23290533899008 -> hwthread 72 - OK[0m[1;34m
[0m[1;34m	threadid 23290332572544 -> hwthread 73 - OK[0m[1;34m
[0m[1;34m	threadid 23290131246080 -> hwthread 74 - OK[0m[1;34m
[0m[1;34m	threadid 23289929919616 -> hwthread 75 - OK[0m[1;34m
[0m[1;34m	threadid 23289728593152 -> hwthread 76 - OK[0m[1;34m
[0m[1;34m	threadid 23289527266688 -> hwthread 77 - OK[0m[1;34m
[0m[1;34m	threadid 23289325940224 -> hwthread 78 - OK[0m[1;34m
[0m[1;34m	threadid 23289124613760 -> hwthread 79 - OK[0m[1;34m
[0m[1;34m	threadid 23288923287296 -> hwthread 80 - OK[0m[1;34m
[0m[1;34m	threadid 23288721960832 -> hwthread 81 - OK[0m[1;34m
[0m[1;34m	threadid 23288520634368 -> hwthread 82 - OK[0m[1;34m
[0m[1;34m	threadid 23288319307904 -> hwthread 83 - OK[0m[1;34m
[0m[1;34m	threadid 23288117981440 -> hwthread 84 - OK[0m[1;34m
[0m[1;34m	threadid 23287916654976 -> hwthread 85 - OK[0m[1;34m
[0m[1;34m	threadid 23287715328512 -> hwthread 86 - OK[0m[1;34m
[0m[1;34m	threadid 23287514002048 -> hwthread 87 - OK[0m[1;34m
[0m[1;34m	threadid 23287312675584 -> hwthread 88 - OK[0m[1;34m
[0m[1;34m	threadid 23287111349120 -> hwthread 89 - OK[0m[1;34m
[0m[1;34m	threadid 23286910022656 -> hwthread 90 - OK[0m[1;34m
[0m[1;34m	threadid 23286708696192 -> hwthread 91 - OK[0m[1;34m
[0m[1;34m	threadid 23286507369728 -> hwthread 92 - OK[0m[1;34m
[0m[1;34m	threadid 23286306043264 -> hwthread 93 - OK[0m[1;34m
[0m[1;34m	threadid 23286104716800 -> hwthread 94 - OK[0m[1;34m
[0m[1;34m	threadid 23285903390336 -> hwthread 95 - OK[0m[1;34m
[0m[1;34m	threadid 23285702063872 -> hwthread 96 - OK[0m[1;34m
[0m[1;34m	threadid 23285500733312 -> hwthread 97 - OK[0m[1;34m
[0m[1;34m	threadid 23285299406848 -> hwthread 98 - OK[0m[1;34m
[0m[1;34m	threadid 23285098080384 -> hwthread 99 - OK[0m[1;34m
[0m[1;34m	threadid 23284896753920 -> hwthread 100 - OK[0m[1;34m
[0m[1;34m	threadid 23284695427456 -> hwthread 101 - OK[0m[1;34m
[0m[1;34m	threadid 23284494100992 -> hwthread 102 - OK[0m[1;34m
[0m[1;34m	threadid 23284292774528 -> hwthread 103 - OK[0m[1;34m
[0m[1;34m	threadid 23284091448064 -> hwthread 104 - OK[0m[1;34m
[0m[1;34m	threadid 23283890121600 -> hwthread 105 - OK[0m[1;34m
[0m[1;34m	threadid 23283688795136 -> hwthread 106 - OK[0m[1;34m
[0m[1;34m	threadid 23283487468672 -> hwthread 107 - OK[0m[1;34m
[0m[1;34m	threadid 23283286142208 -> hwthread 108 - OK[0m[1;34m
[0m[1;34m	threadid 23283084815744 -> hwthread 109 - OK[0m[1;34m
[0m[1;34m	threadid 23282883489280 -> hwthread 110 - OK[0m[1;34m
[0m[1;34m	threadid 23282682162816 -> hwthread 111 - OK[0m[1;34m
[0m[1;34m	threadid 23282480836352 -> hwthread 112 - OK[0m[1;34m
[0m[1;34m	threadid 23282279509888 -> hwthread 113 - OK[0m[1;34m
[0m[1;34m	threadid 23282078183424 -> hwthread 114 - OK[0m[1;34m
[0m[1;34m	threadid 23281876856960 -> hwthread 115 - OK[0m[1;34m
[0m[1;34m	threadid 23281675530496 -> hwthread 116 - OK[0m[1;34m
[0m[1;34m	threadid 23281474204032 -> hwthread 117 - OK[0m[1;34m
[0m[1;34m	threadid 23281272877568 -> hwthread 118 - OK[0m[1;34m
[0m[1;34m	threadid 23281071551104 -> hwthread 119 - OK[0m[1;34m
[0m[1;34m	threadid 23280870224640 -> hwthread 120 - OK[0m[1;34m
[0m[1;34m	threadid 23280668898176 -> hwthread 121 - OK[0m[1;34m
[0m[1;34m	threadid 23280467571712 -> hwthread 122 - OK[0m[1;34m
[0m[1;34m	threadid 23280266245248 -> hwthread 123 - OK[0m[1;34m
[0m[1;34m	threadid 23280064918784 -> hwthread 124 - OK[0m[1;34m
[0m[1;34m	threadid 23279863592320 -> hwthread 125 - OK[0m[1;34m
[0m[1;34m	threadid 23279662265856 -> hwthread 126 - OK[0m[1;34m
[0m[1;34m	threadid 23279460939392 -> hwthread 127 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23291815089920 -> hwthread 64 - OK[0m[1;34m
[0m[1;34m	threadid 23291636459264 -> hwthread 65 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 131, m: 131)                                                               	 1.47579   	 700       	 9.95232   	 0         	 0.195853  	 50.8151   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6550, cols: 131, reductionFactor: 34, colBlockingSize: 12)                 	 0.930852  	 600       	 149.167   	 0         	 4.51308   	 33.0522   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6550, cols: 81, reductionFactor: 37, colBlockingSize: 12)                  	 0.469653  	 700       	 131.566   	 0         	 6.40435   	 20.5433   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 131, n: 50, r: 131, r2: 131)          	 0.365852  	 600       	 368.689   	 0         	 22.7405   	 16.2129   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 131, r: 131, r2: 6550, leftOrthog: 0)      	 0.302041  	 600       	 446.58    	 0         	 41.4535   	 10.773    
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 6550, Xcols: 81, r: 81, streamingCols: 0)                   	 0.161059  	 700       	 186.777   	 0         	 37.0083   	 5.0469    
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 131, reductionFactor: 34, colBlockingSize: 12)                 	 0.121294  	 100       	 72.8222   	 0         	 2.27323   	 32.0346   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 131, Qr2: 81)      	 0.114427  	 700       	 0         	 0         	 74.075    	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 81, m: 4050, k: 81) 	 0.0922167 	 700       	 403.407   	 0         	 40.2411   	 10.0248   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 81, m: 81)                                                                  	 0.0868746 	 800       	 6.52516   	 0         	 1.456     	 4.48156   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 131)                                                                	 0.0624078 	 100       	 4.46525   	 0         	 0.200616  	 22.2577   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 6550, m: 81)                                                                       	 0.0610539 	 700       	 0         	 0         	 97.3265   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 81, reductionFactor: 37, colBlockingSize: 12)                  	 0.0568272 	 100       	 59.2879   	 0         	 2.94311   	 20.1446   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 81, k: 2500)   	 0.0457223 	 800       	 354.313   	 0         	 46.4088   	 7.6346    
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 6550, m: 81)                                                              	 0.0456878 	 700       	 0         	 0         	 130.06    	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                 	 0.0429864 	 100       	 2.71404   	 0         	 0.14051   	 19.3157   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 81, n: 50, r2: 81)                                                                                         	 0.0416569 	 700       	 0         	 0         	 88.2004   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 2500, m: 81, k: 50)	 0.0359916 	 800       	 450.105   	 0         	 58.956    	 7.6346    
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 81, n: 50, r2: 81)                   	 0.0349321 	 700       	 0         	 0         	 170.106   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 4050, k: 81) 	 0.0345869 	 700       	 663.936   	 0         	 86.5576   	 7.67045   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6550, cols: 50, reductionFactor: 37, colBlockingSize: 12)                  	 0.0299271 	 100       	 112.39    	 0         	 8.82143   	 12.7406   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r: 131, r2: 131)           	 0.0227649 	 100       	 376.919   	 0         	 23.621    	 15.9569   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 131, r: 131, r2: 2500, leftOrthog: 0)      	 0.0221946 	 100       	 386.604   	 0         	 36.6512   	 10.5482   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 131, n: 50, r: 131, r2: 50)           	 0.0191522 	 100       	 448.015   	 0         	 49.7947   	 8.99725   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 6550, leftOrthog: 0)        	 0.0172862 	 100       	 189.457   	 0         	 45.7012   	 4.14557   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 131, reductionFactor: 34, colBlockingSize: 12)                   	 0.0155397 	 100       	 11.3681   	 0         	 1.22067   	 9.31305   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 81, r: 81, streamingCols: 0)                   	 0.0135005 	 100       	 121.496   	 0         	 24.1935   	 5.02182   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 4050, k: 50) 	 0.00831024	 100       	 243.675   	 0         	 39.2287   	 6.21166   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 50, Qr2: 81)       	 0.00655463	 100       	 0         	 0         	 79.9435   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 2500, m: 81)                                                                       	 0.00631468	 100       	 0         	 0         	 51.309    	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 81)                                                              	 0.0056829 	 100       	 0         	 0         	 57.0131   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 0, n: 50, r2: 81)                    	 0.00494395	 100       	 0         	 0         	 65.5347   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                  	 0.00444158	 100       	 3.75241   	 0         	 1.35988   	 2.75937   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 50, reductionFactor: 37, colBlockingSize: 12)                    	 0.00374248	 100       	 6.8606    	 0         	 1.06881   	 6.41892   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 81)                                                                                         	 0.00282935	 100       	 0         	 0         	 114.514   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 131, r: 50, r2: 50, leftOrthog: 0)         	 0.00280298	 100       	 23.368    	 0         	 7.03536   	 3.3215    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 81, m: 81, fromLeft: 0)                	 0.0020165 	 800       	 0         	 0         	 41.6468   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 81, m: 50, k: 81)   	 0.00103802	 100       	 63.2068   	 0         	 11.2992   	 5.59392   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 50, k: 81)   	 0.0008961 	 100       	 45.1958   	 0         	 9.46323   	 4.77594   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50, k: 50)     	 0.000869338	 100       	 28.7575   	 0         	 6.9018    	 4.16667   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 50, r2: 50)              	 0.000847028	 100       	 29.515    	 0         	 7.08359   	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                   	 0.000840472	 100       	 0.594904  	 0         	 2.37962   	 0.25      
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 50, m: 50, k: 50)  	 0.000831278	 100       	 30.0742   	 0         	 7.2178    	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                          	 0.000826011	 200       	 0         	 0         	 9.6851    	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 81, n: 50, r2: 1)                                                                                          	 0.000822893	 200       	 0         	 0         	 15.7493   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 1, r1low: 0, n: 50, r2: 50)                     	 0.000577583	 100       	 0         	 0         	 6.92541   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 81, n: 50, r2: 1)                    	 0.000572292	 100       	 0         	 0         	 18.3123   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                 	 0.000553565	 100       	 0.451618  	 0         	 7.22589   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                          	 0.000535634	 100       	 0         	 0         	 7.46779   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                            	 0.000495104	 100       	 1.00989   	 0         	 12.1187   	 0.0833333 
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 1, Xr2: 50, Qr1: 1, Qr2: 0)          	 0.000430562	 100       	 0         	 0         	 9.29018   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 50)                                                                	 0.000415275	 100       	 0         	 0         	 9.63217   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                 	 0.000405805	 100       	 0.616059  	 0         	 9.85695   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 81, n: 50, r2: 1)                                                                                 	 0.000371634	 100       	 1.08978   	 0         	 17.4365   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 0, m: 4050, k: 50)  	 5.83e-06  	 100       	 0         	 0         	 27787.3   	 0         
Timing statistics:
function                                                                                                                                                                                      	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                        	 5.91434   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_normalized(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                     	 5.91429   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::rightNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                            	 4.57917   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::rightNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                        	 4.57769   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double]	 4.07532   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                  	 1.62784   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                               	 1.58118   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_leftOrthogonalize(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&) [with T = double]                                   	 1.33503   	 100       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                            	 1.09833   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]           	 0.940155  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.530673  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                           	 0.408616  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                	 0.344325  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                    	 0.17456   	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double]        	 0.137054  	 1800      
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                                       	 0.121412  	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.0913162 	 900       
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                       	 0.0673685 	 800       
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                              	 0.0517859 	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                	 0.0466708 	 1300      
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double]          	 0.0465917 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                        	 0.041026  	 1000      
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double]       	 0.0368229 	 900       
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                	 0.00574735	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                              	 0.00405852	 6400      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                         	 0.00339046	 5200      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                           	 0.0020165 	 800       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                       	 0.001331  	 300       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                         	 0.000840472	 100       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                                                  	 0.000495104	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
orthoX: L, orthoY: L
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 64
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->65  [0m[1;34m1->66  [0m[1;34m2->67  [0m[1;34m3->68  [0m[1;34m4->69  [0m[1;34m5->70  [0m[1;34m6->71  [0m[1;34m7->72  [0m[1;34m8->73  [0m[1;34m9->74  [0m[1;34m10->75  [0m[1;34m11->76  [0m[1;34m12->77  [0m[1;34m13->78  [0m[1;34m14->79  [0m[1;34m15->80  [0m[1;34m16->81  [0m[1;34m17->82  [0m[1;34m18->83  [0m[1;34m19->84  [0m[1;34m20->85  [0m[1;34m21->86  [0m[1;34m22->87  [0m[1;34m23->88  [0m[1;34m24->89  [0m[1;34m25->90  [0m[1;34m26->91  [0m[1;34m27->92  [0m[1;34m28->93  [0m[1;34m29->94  [0m[1;34m30->95  [0m[1;34m31->96  [0m[1;34m32->97  [0m[1;34m33->98  [0m[1;34m34->99  [0m[1;34m35->100  [0m[1;34m36->101  [0m[1;34m37->102  [0m[1;34m38->103  [0m[1;34m39->104  [0m[1;34m40->105  [0m[1;34m41->106  [0m[1;34m42->107  [0m[1;34m43->108  [0m[1;34m44->109  [0m[1;34m45->110  [0m[1;34m46->111  [0m[1;34m47->112  [0m[1;34m48->113  [0m[1;34m49->114  [0m[1;34m50->115  [0m[1;34m51->116  [0m[1;34m52->117  [0m[1;34m53->118  [0m[1;34m54->119  [0m[1;34m55->120  [0m[1;34m56->121  [0m[1;34m57->122  [0m[1;34m58->123  [0m[1;34m59->124  [0m[1;34m60->125  [0m[1;34m61->126  [0m[1;34m62->127  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23358654728064 -> hwthread 65 - OK[0m[1;34m
[0m[1;34m	threadid 23358448068608 -> hwthread 66 - OK[0m[1;34m
[0m[1;34m	threadid 23358246742144 -> hwthread 67 - OK[0m[1;34m
[0m[1;34m	threadid 23358045415680 -> hwthread 68 - OK[0m[1;34m
[0m[1;34m	threadid 23357844089216 -> hwthread 69 - OK[0m[1;34m
[0m[1;34m	threadid 23357642762752 -> hwthread 70 - OK[0m[1;34m
[0m[1;34m	threadid 23357441436288 -> hwthread 71 - OK[0m[1;34m
[0m[1;34m	threadid 23357240109824 -> hwthread 72 - OK[0m[1;34m
[0m[1;34m	threadid 23357038783360 -> hwthread 73 - OK[0m[1;34m
[0m[1;34m	threadid 23356837456896 -> hwthread 74 - OK[0m[1;34m
[0m[1;34m	threadid 23356636130432 -> hwthread 75 - OK[0m[1;34m
[0m[1;34m	threadid 23356434803968 -> hwthread 76 - OK[0m[1;34m
[0m[1;34m	threadid 23356233477504 -> hwthread 77 - OK[0m[1;34m
[0m[1;34m	threadid 23356032151040 -> hwthread 78 - OK[0m[1;34m
[0m[1;34m	threadid 23355830824576 -> hwthread 79 - OK[0m[1;34m
[0m[1;34m	threadid 23355629498112 -> hwthread 80 - OK[0m[1;34m
[0m[1;34m	threadid 23355428171648 -> hwthread 81 - OK[0m[1;34m
[0m[1;34m	threadid 23355226845184 -> hwthread 82 - OK[0m[1;34m
[0m[1;34m	threadid 23355025518720 -> hwthread 83 - OK[0m[1;34m
[0m[1;34m	threadid 23354824192256 -> hwthread 84 - OK[0m[1;34m
[0m[1;34m	threadid 23354622865792 -> hwthread 85 - OK[0m[1;34m
[0m[1;34m	threadid 23354421539328 -> hwthread 86 - OK[0m[1;34m
[0m[1;34m	threadid 23354220212864 -> hwthread 87 - OK[0m[1;34m
[0m[1;34m	threadid 23354018886400 -> hwthread 88 - OK[0m[1;34m
[0m[1;34m	threadid 23353817559936 -> hwthread 89 - OK[0m[1;34m
[0m[1;34m	threadid 23353616233472 -> hwthread 90 - OK[0m[1;34m
[0m[1;34m	threadid 23353414907008 -> hwthread 91 - OK[0m[1;34m
[0m[1;34m	threadid 23353213580544 -> hwthread 92 - OK[0m[1;34m
[0m[1;34m	threadid 23353012254080 -> hwthread 93 - OK[0m[1;34m
[0m[1;34m	threadid 23352810927616 -> hwthread 94 - OK[0m[1;34m
[0m[1;34m	threadid 23352609601152 -> hwthread 95 - OK[0m[1;34m
[0m[1;34m	threadid 23352408274688 -> hwthread 96 - OK[0m[1;34m
[0m[1;34m	threadid 23352206944128 -> hwthread 97 - OK[0m[1;34m
[0m[1;34m	threadid 23352005617664 -> hwthread 98 - OK[0m[1;34m
[0m[1;34m	threadid 23351804291200 -> hwthread 99 - OK[0m[1;34m
[0m[1;34m	threadid 23351602964736 -> hwthread 100 - OK[0m[1;34m
[0m[1;34m	threadid 23351401638272 -> hwthread 101 - OK[0m[1;34m
[0m[1;34m	threadid 23351200311808 -> hwthread 102 - OK[0m[1;34m
[0m[1;34m	threadid 23350998985344 -> hwthread 103 - OK[0m[1;34m
[0m[1;34m	threadid 23350797658880 -> hwthread 104 - OK[0m[1;34m
[0m[1;34m	threadid 23350596332416 -> hwthread 105 - OK[0m[1;34m
[0m[1;34m	threadid 23350395005952 -> hwthread 106 - OK[0m[1;34m
[0m[1;34m	threadid 23350193679488 -> hwthread 107 - OK[0m[1;34m
[0m[1;34m	threadid 23349992353024 -> hwthread 108 - OK[0m[1;34m
[0m[1;34m	threadid 23349791026560 -> hwthread 109 - OK[0m[1;34m
[0m[1;34m	threadid 23349589700096 -> hwthread 110 - OK[0m[1;34m
[0m[1;34m	threadid 23349388373632 -> hwthread 111 - OK[0m[1;34m
[0m[1;34m	threadid 23349187047168 -> hwthread 112 - OK[0m[1;34m
[0m[1;34m	threadid 23348985720704 -> hwthread 113 - OK[0m[1;34m
[0m[1;34m	threadid 23348784394240 -> hwthread 114 - OK[0m[1;34m
[0m[1;34m	threadid 23348583067776 -> hwthread 115 - OK[0m[1;34m
[0m[1;34m	threadid 23348381741312 -> hwthread 116 - OK[0m[1;34m
[0m[1;34m	threadid 23348180414848 -> hwthread 117 - OK[0m[1;34m
[0m[1;34m	threadid 23347979088384 -> hwthread 118 - OK[0m[1;34m
[0m[1;34m	threadid 23347777761920 -> hwthread 119 - OK[0m[1;34m
[0m[1;34m	threadid 23347576435456 -> hwthread 120 - OK[0m[1;34m
[0m[1;34m	threadid 23347375108992 -> hwthread 121 - OK[0m[1;34m
[0m[1;34m	threadid 23347173782528 -> hwthread 122 - OK[0m[1;34m
[0m[1;34m	threadid 23346972456064 -> hwthread 123 - OK[0m[1;34m
[0m[1;34m	threadid 23346771129600 -> hwthread 124 - OK[0m[1;34m
[0m[1;34m	threadid 23346569803136 -> hwthread 125 - OK[0m[1;34m
[0m[1;34m	threadid 23346368476672 -> hwthread 126 - OK[0m[1;34m
[0m[1;34m	threadid 23346167150208 -> hwthread 127 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23358549067520 -> hwthread 64 - OK[0m[1;34m
[0m[1;34m	threadid 23358542477056 -> hwthread 65 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 132, m: 132)                                                               	 1.44202   	 700       	 10.4204   	 0         	 0.203508  	 51.204    
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6600, cols: 132, reductionFactor: 34, colBlockingSize: 12)                 	 0.953303  	 600       	 149.015   	 0         	 4.47433   	 33.3045   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6600, cols: 82, reductionFactor: 37, colBlockingSize: 12)                  	 0.466068  	 700       	 136.909   	 0         	 6.58353   	 20.7957   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 132, n: 50, r: 132, r2: 132)          	 0.394106  	 600       	 350.155   	 0         	 21.4337   	 16.3366   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 132, r: 132, r2: 6600, leftOrthog: 0)      	 0.288145  	 600       	 478.92    	 0         	 44.1187   	 10.8553   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 6600, Xcols: 82, r: 82, streamingCols: 0)                   	 0.16475   	 700       	 188.558   	 0         	 36.906    	 5.10913   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 132, reductionFactor: 34, colBlockingSize: 12)                 	 0.125032  	 100       	 71.7275   	 0         	 2.22294   	 32.2669   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 132, Qr2: 82)      	 0.116897  	 700       	 0         	 0         	 73.6501   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 82, m: 4100, k: 82) 	 0.0922287 	 700       	 418.479   	 0         	 41.2355   	 10.1485   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 82, m: 82)                                                                  	 0.0868995 	 800       	 6.76788   	 0         	 1.49167   	 4.5371    
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 6600, m: 82)                                                                       	 0.06433   	 700       	 0         	 0         	 94.2242   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 132)                                                                	 0.0629024 	 100       	 4.46194   	 0         	 0.20031   	 22.2751   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 82, reductionFactor: 37, colBlockingSize: 12)                  	 0.054775  	 100       	 63.0373   	 0         	 3.09227   	 20.3854   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 82, k: 2500)   	 0.0444064 	 800       	 369.316   	 0         	 48.1517   	 7.66986   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 82, n: 50, r2: 82)                                                                                         	 0.04423   	 700       	 0         	 0         	 85.1331   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                 	 0.0410436 	 100       	 2.8425    	 0         	 0.14716   	 19.3157   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 82, n: 50, r2: 82)                   	 0.0371085 	 700       	 0         	 0         	 163.344   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 2500, m: 82, k: 50)	 0.0357001 	 800       	 459.382   	 0         	 59.8945   	 7.66986   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 4100, k: 82) 	 0.0330411 	 700       	 712.265   	 0         	 92.4207   	 7.70677   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 6600, m: 82)                                                              	 0.0325231 	 700       	 0         	 0         	 186.373   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6600, cols: 50, reductionFactor: 37, colBlockingSize: 12)                  	 0.0292059 	 100       	 116.045   	 0         	 9.10776   	 12.7413   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r: 132, r2: 132)           	 0.0270155 	 100       	 322.482   	 0         	 20.0603   	 16.0756   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 132, n: 50, r: 132, r2: 50)           	 0.0230635 	 100       	 377.74    	 0         	 41.8948   	 9.01639   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 132, r: 132, r2: 2500, leftOrthog: 0)      	 0.0223013 	 100       	 390.649   	 0         	 36.7637   	 10.626    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 6600, leftOrthog: 0)        	 0.0173101 	 100       	 190.64    	 0         	 45.9846   	 4.14573   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 132, reductionFactor: 34, colBlockingSize: 12)                   	 0.0163246 	 100       	 10.9874   	 0         	 1.17732   	 9.33258   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 82, r: 82, streamingCols: 0)                   	 0.0138717 	 100       	 121.182   	 0         	 23.8391   	 5.08332   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 50, Qr2: 82)       	 0.00726364	 100       	 0         	 0         	 72.6908   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 2500, m: 82)                                                                       	 0.00648553	 100       	 0         	 0         	 50.5741   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 82)                                                              	 0.00498478	 100       	 0         	 0         	 65.8002   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 4100, k: 50) 	 0.00490669	 100       	 417.797   	 0         	 67.2551   	 6.21212   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 0, n: 50, r2: 82)                    	 0.00477757	 100       	 0         	 0         	 68.6542   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                  	 0.00447873	 100       	 3.72128   	 0         	 1.3486    	 2.75937   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 50, reductionFactor: 37, colBlockingSize: 12)                    	 0.00365317	 100       	 7.02834   	 0         	 1.09494   	 6.41892   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 132, r: 50, r2: 50, leftOrthog: 0)         	 0.00288418	 100       	 22.8835   	 0         	 6.87891   	 3.32661   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 82)                                                                                         	 0.00268298	 100       	 0         	 0         	 122.252   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 82, m: 82, fromLeft: 0)                	 0.00176258	 800       	 0         	 0         	 48.8302   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 82, m: 50, k: 82)   	 0.00106187	 100       	 63.3223   	 0         	 11.2436   	 5.63187   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 50, k: 82)   	 0.000910274	 100       	 45.0414   	 0         	 9.40376   	 4.78972   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50, k: 50)     	 0.000897466	 100       	 27.8562   	 0         	 6.68549   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 82, n: 50, r2: 1)                                                                                          	 0.00086025	 200       	 0         	 0         	 15.2514   	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                   	 0.000831019	 100       	 0.601671  	 0         	 2.40668   	 0.25      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                          	 0.000802078	 200       	 0         	 0         	 9.97409   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 50, r2: 50)              	 0.000796826	 100       	 31.3745   	 0         	 7.52987   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 50, m: 50, k: 50)  	 0.000655473	 100       	 38.1404   	 0         	 9.1537    	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 82, n: 50, r2: 1)                    	 0.000575793	 100       	 0         	 0         	 18.3399   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 1, r1low: 0, n: 50, r2: 50)                     	 0.000541655	 100       	 0         	 0         	 7.38477   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                          	 0.000532769	 100       	 0         	 0         	 7.50794   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                            	 0.000455595	 100       	 1.09747   	 0         	 13.1696   	 0.0833333 
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 1, Xr2: 50, Qr1: 1, Qr2: 0)          	 0.000416155	 100       	 0         	 0         	 9.6118    	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 50)                                                                	 0.000408391	 100       	 0         	 0         	 9.79454   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                 	 0.000382084	 100       	 0.654306  	 0         	 10.4689   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 82, n: 50, r2: 1)                                                                                 	 0.000379673	 100       	 1.07988   	 0         	 17.278    	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                 	 0.000324419	 100       	 0.770608  	 0         	 12.3297   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 0, m: 4100, k: 50)  	 7.07e-06  	 100       	 0         	 0         	 23196.6   	 0         
Timing statistics:
function                                                                                                                                                                                      	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                        	 5.93076   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_normalized(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                     	 5.93069   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::rightNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                            	 4.60691   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::rightNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                        	 4.60567   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double]	 4.08094   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                  	 1.64836   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                               	 1.54597   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_leftOrthogonalize(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&) [with T = double]                                   	 1.3237    	 100       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                            	 1.12449   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]           	 0.931886  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.524974  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                           	 0.444982  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                	 0.33064   	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                    	 0.178622  	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double]        	 0.132156  	 1800      
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                                       	 0.124576  	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.0913782 	 900       
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                       	 0.0708155 	 800       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                	 0.0491081 	 1300      
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double]          	 0.0453038 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                        	 0.0430035 	 1000      
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                              	 0.0379163 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double]       	 0.0363556 	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                         	 0.0125364 	 5200      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                	 0.00508233	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                              	 0.00397226	 6400      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                           	 0.00176258	 800       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                       	 0.00108618	 300       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                         	 0.000831019	 100       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                                                  	 0.000455595	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
orthoX: L, orthoY: L
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 64
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->65  [0m[1;34m1->66  [0m[1;34m2->67  [0m[1;34m3->68  [0m[1;34m4->69  [0m[1;34m5->70  [0m[1;34m6->71  [0m[1;34m7->72  [0m[1;34m8->73  [0m[1;34m9->74  [0m[1;34m10->75  [0m[1;34m11->76  [0m[1;34m12->77  [0m[1;34m13->78  [0m[1;34m14->79  [0m[1;34m15->80  [0m[1;34m16->81  [0m[1;34m17->82  [0m[1;34m18->83  [0m[1;34m19->84  [0m[1;34m20->85  [0m[1;34m21->86  [0m[1;34m22->87  [0m[1;34m23->88  [0m[1;34m24->89  [0m[1;34m25->90  [0m[1;34m26->91  [0m[1;34m27->92  [0m[1;34m28->93  [0m[1;34m29->94  [0m[1;34m30->95  [0m[1;34m31->96  [0m[1;34m32->97  [0m[1;34m33->98  [0m[1;34m34->99  [0m[1;34m35->100  [0m[1;34m36->101  [0m[1;34m37->102  [0m[1;34m38->103  [0m[1;34m39->104  [0m[1;34m40->105  [0m[1;34m41->106  [0m[1;34m42->107  [0m[1;34m43->108  [0m[1;34m44->109  [0m[1;34m45->110  [0m[1;34m46->111  [0m[1;34m47->112  [0m[1;34m48->113  [0m[1;34m49->114  [0m[1;34m50->115  [0m[1;34m51->116  [0m[1;34m52->117  [0m[1;34m53->118  [0m[1;34m54->119  [0m[1;34m55->120  [0m[1;34m56->121  [0m[1;34m57->122  [0m[1;34m58->123  [0m[1;34m59->124  [0m[1;34m60->125  [0m[1;34m61->126  [0m[1;34m62->127  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23117313062784 -> hwthread 65 - OK[0m[1;34m
[0m[1;34m	threadid 23117124593664 -> hwthread 66 - OK[0m[1;34m
[0m[1;34m	threadid 23116923267200 -> hwthread 67 - OK[0m[1;34m
[0m[1;34m	threadid 23116721940736 -> hwthread 68 - OK[0m[1;34m
[0m[1;34m	threadid 23116520614272 -> hwthread 69 - OK[0m[1;34m
[0m[1;34m	threadid 23116319287808 -> hwthread 70 - OK[0m[1;34m
[0m[1;34m	threadid 23116117961344 -> hwthread 71 - OK[0m[1;34m
[0m[1;34m	threadid 23115916634880 -> hwthread 72 - OK[0m[1;34m
[0m[1;34m	threadid 23115715308416 -> hwthread 73 - OK[0m[1;34m
[0m[1;34m	threadid 23115513981952 -> hwthread 74 - OK[0m[1;34m
[0m[1;34m	threadid 23115312655488 -> hwthread 75 - OK[0m[1;34m
[0m[1;34m	threadid 23115111329024 -> hwthread 76 - OK[0m[1;34m
[0m[1;34m	threadid 23114910002560 -> hwthread 77 - OK[0m[1;34m
[0m[1;34m	threadid 23114708676096 -> hwthread 78 - OK[0m[1;34m
[0m[1;34m	threadid 23114507349632 -> hwthread 79 - OK[0m[1;34m
[0m[1;34m	threadid 23114306023168 -> hwthread 80 - OK[0m[1;34m
[0m[1;34m	threadid 23114104696704 -> hwthread 81 - OK[0m[1;34m
[0m[1;34m	threadid 23113903370240 -> hwthread 82 - OK[0m[1;34m
[0m[1;34m	threadid 23113702043776 -> hwthread 83 - OK[0m[1;34m
[0m[1;34m	threadid 23113500717312 -> hwthread 84 - OK[0m[1;34m
[0m[1;34m	threadid 23113299390848 -> hwthread 85 - OK[0m[1;34m
[0m[1;34m	threadid 23113098064384 -> hwthread 86 - OK[0m[1;34m
[0m[1;34m	threadid 23112896737920 -> hwthread 87 - OK[0m[1;34m
[0m[1;34m	threadid 23112695411456 -> hwthread 88 - OK[0m[1;34m
[0m[1;34m	threadid 23112494084992 -> hwthread 89 - OK[0m[1;34m
[0m[1;34m	threadid 23112292758528 -> hwthread 90 - OK[0m[1;34m
[0m[1;34m	threadid 23112091432064 -> hwthread 91 - OK[0m[1;34m
[0m[1;34m	threadid 23111890105600 -> hwthread 92 - OK[0m[1;34m
[0m[1;34m	threadid 23111688779136 -> hwthread 93 - OK[0m[1;34m
[0m[1;34m	threadid 23111487452672 -> hwthread 94 - OK[0m[1;34m
[0m[1;34m	threadid 23111286126208 -> hwthread 95 - OK[0m[1;34m
[0m[1;34m	threadid 23111084799744 -> hwthread 96 - OK[0m[1;34m
[0m[1;34m	threadid 23110883469184 -> hwthread 97 - OK[0m[1;34m
[0m[1;34m	threadid 23110682142720 -> hwthread 98 - OK[0m[1;34m
[0m[1;34m	threadid 23110480816256 -> hwthread 99 - OK[0m[1;34m
[0m[1;34m	threadid 23110279489792 -> hwthread 100 - OK[0m[1;34m
[0m[1;34m	threadid 23110078163328 -> hwthread 101 - OK[0m[1;34m
[0m[1;34m	threadid 23109876836864 -> hwthread 102 - OK[0m[1;34m
[0m[1;34m	threadid 23109675510400 -> hwthread 103 - OK[0m[1;34m
[0m[1;34m	threadid 23109474183936 -> hwthread 104 - OK[0m[1;34m
[0m[1;34m	threadid 23109272857472 -> hwthread 105 - OK[0m[1;34m
[0m[1;34m	threadid 23109071531008 -> hwthread 106 - OK[0m[1;34m
[0m[1;34m	threadid 23108870204544 -> hwthread 107 - OK[0m[1;34m
[0m[1;34m	threadid 23108668878080 -> hwthread 108 - OK[0m[1;34m
[0m[1;34m	threadid 23108467551616 -> hwthread 109 - OK[0m[1;34m
[0m[1;34m	threadid 23108266225152 -> hwthread 110 - OK[0m[1;34m
[0m[1;34m	threadid 23108064898688 -> hwthread 111 - OK[0m[1;34m
[0m[1;34m	threadid 23107863572224 -> hwthread 112 - OK[0m[1;34m
[0m[1;34m	threadid 23107662245760 -> hwthread 113 - OK[0m[1;34m
[0m[1;34m	threadid 23107460919296 -> hwthread 114 - OK[0m[1;34m
[0m[1;34m	threadid 23107259592832 -> hwthread 115 - OK[0m[1;34m
[0m[1;34m	threadid 23107058266368 -> hwthread 116 - OK[0m[1;34m
[0m[1;34m	threadid 23106856939904 -> hwthread 117 - OK[0m[1;34m
[0m[1;34m	threadid 23106655613440 -> hwthread 118 - OK[0m[1;34m
[0m[1;34m	threadid 23106454286976 -> hwthread 119 - OK[0m[1;34m
[0m[1;34m	threadid 23106252960512 -> hwthread 120 - OK[0m[1;34m
[0m[1;34m	threadid 23106051634048 -> hwthread 121 - OK[0m[1;34m
[0m[1;34m	threadid 23105850307584 -> hwthread 122 - OK[0m[1;34m
[0m[1;34m	threadid 23105648981120 -> hwthread 123 - OK[0m[1;34m
[0m[1;34m	threadid 23105447654656 -> hwthread 124 - OK[0m[1;34m
[0m[1;34m	threadid 23105246328192 -> hwthread 125 - OK[0m[1;34m
[0m[1;34m	threadid 23105045001728 -> hwthread 126 - OK[0m[1;34m
[0m[1;34m	threadid 23104843675264 -> hwthread 127 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23117207402240 -> hwthread 64 - OK[0m[1;34m
[0m[1;34m	threadid 23117200811776 -> hwthread 65 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 133, m: 133)                                                               	 1.51099   	 700       	 10.1725   	 0         	 0.197168  	 51.5929   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6650, cols: 133, reductionFactor: 34, colBlockingSize: 12)                 	 0.975584  	 600       	 148.947   	 0         	 4.43864   	 33.5568   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6650, cols: 83, reductionFactor: 37, colBlockingSize: 12)                  	 0.473941  	 700       	 138.983   	 0         	 6.60313   	 21.0481   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 133, n: 50, r: 133, r2: 133)          	 0.389059  	 600       	 362.819   	 0         	 22.042    	 16.4604   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 133, r: 133, r2: 6650, leftOrthog: 0)      	 0.298875  	 600       	 472.299   	 0         	 43.1816   	 10.9375   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 6650, Xcols: 83, r: 83, streamingCols: 0)                   	 0.168207  	 700       	 190.648   	 0         	 36.866    	 5.17136   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 133, reductionFactor: 34, colBlockingSize: 12)                 	 0.125277  	 100       	 72.6762   	 0         	 2.23626   	 32.499    
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 133, Qr2: 83)      	 0.121647  	 700       	 0         	 0         	 71.8789   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 83, m: 4150, k: 83) 	 0.0994762 	 700       	 402.358   	 0         	 39.1693   	 10.2723   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 83, m: 83)                                                                  	 0.0899886 	 800       	 6.77759   	 0         	 1.47574   	 4.59266   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 6650, m: 83)                                                                       	 0.0646806 	 700       	 0         	 0         	 95.5748   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 133)                                                                	 0.0639086 	 100       	 4.42298   	 0         	 0.198408  	 22.2923   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 83, reductionFactor: 37, colBlockingSize: 12)                  	 0.0570741 	 100       	 61.9825   	 0         	 3.00506   	 20.626    
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 83, k: 2500)   	 0.0453221 	 800       	 366.267   	 0         	 47.5388   	 7.70459   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 83, n: 50, r2: 83)                                                                                         	 0.0433087 	 700       	 0         	 0         	 89.0777   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                 	 0.0416165 	 100       	 2.80338   	 0         	 0.145135  	 19.3157   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 83, n: 50, r2: 83)                   	 0.0379207 	 700       	 0         	 0         	 163.02    	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 2500, m: 83, k: 50)	 0.0366545 	 800       	 452.878   	 0         	 58.7803   	 7.70459   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 4150, k: 83) 	 0.0336301 	 700       	 716.961   	 0         	 92.6003   	 7.74254   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 6650, m: 83)                                                              	 0.0335715 	 700       	 0         	 0         	 184.14    	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6650, cols: 50, reductionFactor: 37, colBlockingSize: 12)                  	 0.0292292 	 100       	 116.831   	 0         	 9.16891   	 12.742    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r: 133, r2: 133)           	 0.0248766 	 100       	 355.536   	 0         	 21.9545   	 16.1942   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 133, r: 133, r2: 2500, leftOrthog: 0)      	 0.022507  	 100       	 392.966   	 0         	 36.7131   	 10.7037   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 133, n: 50, r: 133, r2: 50)           	 0.0206427 	 100       	 428.456   	 0         	 47.4201   	 9.03533   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 6650, leftOrthog: 0)        	 0.0169191 	 100       	 196.524   	 0         	 47.4021   	 4.14589   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 133, reductionFactor: 34, colBlockingSize: 12)                   	 0.0150854 	 100       	 12.0708   	 0         	 1.29073   	 9.3519    
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 83, r: 83, streamingCols: 0)                   	 0.0142917 	 100       	 120.507   	 0         	 23.423    	 5.1448    
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 50, Qr2: 83)       	 0.00639431	 100       	 0         	 0         	 83.199    	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 2500, m: 83)                                                                       	 0.00582292	 100       	 0         	 0         	 57.0161   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 4150, k: 50) 	 0.00501837	 100       	 413.481   	 0         	 66.5554   	 6.21257   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                  	 0.00438298	 100       	 3.80257   	 0         	 1.37806   	 2.75937   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 50, reductionFactor: 37, colBlockingSize: 12)                    	 0.00360488	 100       	 7.12248   	 0         	 1.10961   	 6.41892   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 83)                                                              	 0.00359742	 100       	 0         	 0         	 92.2885   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 0, n: 50, r2: 83)                    	 0.00343259	 100       	 0         	 0         	 96.7198   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 133, r: 50, r2: 50, leftOrthog: 0)         	 0.00293817	 100       	 22.6332   	 0         	 6.79335   	 3.33166   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 83)                                                                                         	 0.00274496	 100       	 0         	 0         	 120.949   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 83, m: 83, fromLeft: 0)                	 0.00207386	 800       	 0         	 0         	 42.5194   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 83, m: 50, k: 83)   	 0.00106408	 100       	 64.7414   	 0         	 11.4195   	 5.6694    
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                   	 0.000933885	 100       	 0.535398  	 0         	 2.14159   	 0.25      
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50, k: 50)     	 0.000905813	 100       	 27.5995   	 0         	 6.62388   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 50, k: 83)   	 0.000904084	 100       	 45.9028   	 0         	 9.55663   	 4.80324   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 83, n: 50, r2: 1)                                                                                          	 0.000874027	 200       	 0         	 0         	 15.194    	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 50, r2: 50)              	 0.000807957	 100       	 30.9422   	 0         	 7.42614   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                          	 0.000779687	 200       	 0         	 0         	 10.2605   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 50, m: 50, k: 50)  	 0.000665033	 100       	 37.5921   	 0         	 9.02211   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 83, n: 50, r2: 1)                    	 0.000538657	 100       	 0         	 0         	 19.7528   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 1, r1low: 0, n: 50, r2: 50)                     	 0.000514431	 100       	 0         	 0         	 7.77558   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                          	 0.000502334	 100       	 0         	 0         	 7.96283   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                            	 0.000463449	 100       	 1.07887   	 0         	 12.9464   	 0.0833333 
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 50)                                                                	 0.000418701	 100       	 0         	 0         	 9.55336   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 1, Xr2: 50, Qr1: 1, Qr2: 0)          	 0.000410244	 100       	 0         	 0         	 9.75029   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                 	 0.000395599	 100       	 0.631953  	 0         	 10.1112   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 83, n: 50, r2: 1)                                                                                 	 0.000384247	 100       	 1.08003   	 0         	 17.2806   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                 	 0.000325476	 100       	 0.768106  	 0         	 12.2897   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 0, m: 4150, k: 50)  	 6.531e-06 	 100       	 0         	 0         	 25417.2   	 0         
Timing statistics:
function                                                                                                                                                                                      	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                        	 6.09191   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_normalized(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                     	 6.09186   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::rightNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                            	 4.74381   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::rightNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                        	 4.74246   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double]	 4.21317   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                  	 1.6798    	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                               	 1.61652   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_leftOrthogonalize(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&) [with T = double]                                   	 1.34797   	 100       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                            	 1.14578   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]           	 0.940529  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.535088  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                           	 0.435386  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                	 0.341239  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                    	 0.182499  	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double]        	 0.140099  	 1800      
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                                       	 0.128451  	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.0943716 	 900       
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                       	 0.0705036 	 800       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                	 0.0482097 	 1300      
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double]          	 0.0462279 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                        	 0.0424064 	 1000      
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                              	 0.0375876 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double]       	 0.0373195 	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                         	 0.00672644	 5200      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                	 0.00562095	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                              	 0.00407299	 6400      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                           	 0.00207386	 800       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                       	 0.00110532	 300       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                         	 0.000933885	 100       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                                                  	 0.000463449	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
orthoX: L, orthoY: L
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 64
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->65  [0m[1;34m1->66  [0m[1;34m2->67  [0m[1;34m3->68  [0m[1;34m4->69  [0m[1;34m5->70  [0m[1;34m6->71  [0m[1;34m7->72  [0m[1;34m8->73  [0m[1;34m9->74  [0m[1;34m10->75  [0m[1;34m11->76  [0m[1;34m12->77  [0m[1;34m13->78  [0m[1;34m14->79  [0m[1;34m15->80  [0m[1;34m16->81  [0m[1;34m17->82  [0m[1;34m18->83  [0m[1;34m19->84  [0m[1;34m20->85  [0m[1;34m21->86  [0m[1;34m22->87  [0m[1;34m23->88  [0m[1;34m24->89  [0m[1;34m25->90  [0m[1;34m26->91  [0m[1;34m27->92  [0m[1;34m28->93  [0m[1;34m29->94  [0m[1;34m30->95  [0m[1;34m31->96  [0m[1;34m32->97  [0m[1;34m33->98  [0m[1;34m34->99  [0m[1;34m35->100  [0m[1;34m36->101  [0m[1;34m37->102  [0m[1;34m38->103  [0m[1;34m39->104  [0m[1;34m40->105  [0m[1;34m41->106  [0m[1;34m42->107  [0m[1;34m43->108  [0m[1;34m44->109  [0m[1;34m45->110  [0m[1;34m46->111  [0m[1;34m47->112  [0m[1;34m48->113  [0m[1;34m49->114  [0m[1;34m50->115  [0m[1;34m51->116  [0m[1;34m52->117  [0m[1;34m53->118  [0m[1;34m54->119  [0m[1;34m55->120  [0m[1;34m56->121  [0m[1;34m57->122  [0m[1;34m58->123  [0m[1;34m59->124  [0m[1;34m60->125  [0m[1;34m61->126  [0m[1;34m62->127  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23282892740480 -> hwthread 65 - OK[0m[1;34m
[0m[1;34m	threadid 23282682161152 -> hwthread 66 - OK[0m[1;34m
[0m[1;34m	threadid 23282480834688 -> hwthread 67 - OK[0m[1;34m
[0m[1;34m	threadid 23282279508224 -> hwthread 68 - OK[0m[1;34m
[0m[1;34m	threadid 23282078181760 -> hwthread 69 - OK[0m[1;34m
[0m[1;34m	threadid 23281876855296 -> hwthread 70 - OK[0m[1;34m
[0m[1;34m	threadid 23281675528832 -> hwthread 71 - OK[0m[1;34m
[0m[1;34m	threadid 23281474202368 -> hwthread 72 - OK[0m[1;34m
[0m[1;34m	threadid 23281272875904 -> hwthread 73 - OK[0m[1;34m
[0m[1;34m	threadid 23281071549440 -> hwthread 74 - OK[0m[1;34m
[0m[1;34m	threadid 23280870222976 -> hwthread 75 - OK[0m[1;34m
[0m[1;34m	threadid 23280668896512 -> hwthread 76 - OK[0m[1;34m
[0m[1;34m	threadid 23280467570048 -> hwthread 77 - OK[0m[1;34m
[0m[1;34m	threadid 23280266243584 -> hwthread 78 - OK[0m[1;34m
[0m[1;34m	threadid 23280064917120 -> hwthread 79 - OK[0m[1;34m
[0m[1;34m	threadid 23279863590656 -> hwthread 80 - OK[0m[1;34m
[0m[1;34m	threadid 23279662264192 -> hwthread 81 - OK[0m[1;34m
[0m[1;34m	threadid 23279460937728 -> hwthread 82 - OK[0m[1;34m
[0m[1;34m	threadid 23279259611264 -> hwthread 83 - OK[0m[1;34m
[0m[1;34m	threadid 23279058284800 -> hwthread 84 - OK[0m[1;34m
[0m[1;34m	threadid 23278856958336 -> hwthread 85 - OK[0m[1;34m
[0m[1;34m	threadid 23278655631872 -> hwthread 86 - OK[0m[1;34m
[0m[1;34m	threadid 23278454305408 -> hwthread 87 - OK[0m[1;34m
[0m[1;34m	threadid 23278252978944 -> hwthread 88 - OK[0m[1;34m
[0m[1;34m	threadid 23278051652480 -> hwthread 89 - OK[0m[1;34m
[0m[1;34m	threadid 23277850326016 -> hwthread 90 - OK[0m[1;34m
[0m[1;34m	threadid 23277648999552 -> hwthread 91 - OK[0m[1;34m
[0m[1;34m	threadid 23277447673088 -> hwthread 92 - OK[0m[1;34m
[0m[1;34m	threadid 23277246346624 -> hwthread 93 - OK[0m[1;34m
[0m[1;34m	threadid 23277045020160 -> hwthread 94 - OK[0m[1;34m
[0m[1;34m	threadid 23276843693696 -> hwthread 95 - OK[0m[1;34m
[0m[1;34m	threadid 23276642367232 -> hwthread 96 - OK[0m[1;34m
[0m[1;34m	threadid 23276441036672 -> hwthread 97 - OK[0m[1;34m
[0m[1;34m	threadid 23276239710208 -> hwthread 98 - OK[0m[1;34m
[0m[1;34m	threadid 23276038383744 -> hwthread 99 - OK[0m[1;34m
[0m[1;34m	threadid 23275837057280 -> hwthread 100 - OK[0m[1;34m
[0m[1;34m	threadid 23275635730816 -> hwthread 101 - OK[0m[1;34m
[0m[1;34m	threadid 23275434404352 -> hwthread 102 - OK[0m[1;34m
[0m[1;34m	threadid 23275233077888 -> hwthread 103 - OK[0m[1;34m
[0m[1;34m	threadid 23275031751424 -> hwthread 104 - OK[0m[1;34m
[0m[1;34m	threadid 23274830424960 -> hwthread 105 - OK[0m[1;34m
[0m[1;34m	threadid 23274629098496 -> hwthread 106 - OK[0m[1;34m
[0m[1;34m	threadid 23274427772032 -> hwthread 107 - OK[0m[1;34m
[0m[1;34m	threadid 23274226445568 -> hwthread 108 - OK[0m[1;34m
[0m[1;34m	threadid 23274025119104 -> hwthread 109 - OK[0m[1;34m
[0m[1;34m	threadid 23273823792640 -> hwthread 110 - OK[0m[1;34m
[0m[1;34m	threadid 23273622466176 -> hwthread 111 - OK[0m[1;34m
[0m[1;34m	threadid 23273421139712 -> hwthread 112 - OK[0m[1;34m
[0m[1;34m	threadid 23273219813248 -> hwthread 113 - OK[0m[1;34m
[0m[1;34m	threadid 23273018486784 -> hwthread 114 - OK[0m[1;34m
[0m[1;34m	threadid 23272817160320 -> hwthread 115 - OK[0m[1;34m
[0m[1;34m	threadid 23272615833856 -> hwthread 116 - OK[0m[1;34m
[0m[1;34m	threadid 23272414507392 -> hwthread 117 - OK[0m[1;34m
[0m[1;34m	threadid 23272213180928 -> hwthread 118 - OK[0m[1;34m
[0m[1;34m	threadid 23272011854464 -> hwthread 119 - OK[0m[1;34m
[0m[1;34m	threadid 23271810528000 -> hwthread 120 - OK[0m[1;34m
[0m[1;34m	threadid 23271609201536 -> hwthread 121 - OK[0m[1;34m
[0m[1;34m	threadid 23271407875072 -> hwthread 122 - OK[0m[1;34m
[0m[1;34m	threadid 23271206548608 -> hwthread 123 - OK[0m[1;34m
[0m[1;34m	threadid 23271005222144 -> hwthread 124 - OK[0m[1;34m
[0m[1;34m	threadid 23270803895680 -> hwthread 125 - OK[0m[1;34m
[0m[1;34m	threadid 23270602569216 -> hwthread 126 - OK[0m[1;34m
[0m[1;34m	threadid 23270401242752 -> hwthread 127 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23282787079936 -> hwthread 64 - OK[0m[1;34m
[0m[1;34m	threadid 23282780489472 -> hwthread 65 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 134, m: 134)                                                               	 1.50818   	 700       	 10.4231   	 0         	 0.200514  	 51.9818   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6700, cols: 134, reductionFactor: 33, colBlockingSize: 12)                 	 0.957532  	 600       	 155.338   	 0         	 4.59058   	 33.8384   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6700, cols: 84, reductionFactor: 37, colBlockingSize: 12)                  	 0.495919  	 700       	 137.067   	 0         	 6.43491   	 21.3005   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 134, n: 50, r: 134, r2: 134)          	 0.398636  	 600       	 362.151   	 0         	 21.8372   	 16.5842   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 134, r: 134, r2: 6700, leftOrthog: 0)      	 0.301527  	 600       	 478.784   	 0         	 43.4479   	 11.0197   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 6700, Xcols: 84, r: 84, streamingCols: 0)                   	 0.172607  	 700       	 191.723   	 0         	 36.633    	 5.2336    
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 134, reductionFactor: 33, colBlockingSize: 12)                 	 0.124295  	 100       	 74.42     	 0         	 2.27172   	 32.7593   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 134, Qr2: 84)      	 0.109174  	 700       	 0         	 0         	 81.3323   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 84, m: 4200, k: 84) 	 0.0974581 	 700       	 425.714   	 0         	 40.9496   	 10.396    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 84, m: 84)                                                                  	 0.0872549 	 800       	 7.24564   	 0         	 1.5588    	 4.64822   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 134)                                                                	 0.0637947 	 100       	 4.46223   	 0         	 0.200017  	 22.3093   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 84, reductionFactor: 37, colBlockingSize: 12)                  	 0.0593938 	 100       	 61.0055   	 0         	 2.92362   	 20.8665   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 6700, m: 84)                                                                       	 0.0564358 	 700       	 0         	 0         	 111.691   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 84, n: 50, r2: 84)                                                                                         	 0.0447875 	 700       	 0         	 0         	 88.2247   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 84, k: 2500)   	 0.0443951 	 800       	 378.42    	 0         	 48.8991   	 7.7388    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                 	 0.0428617 	 100       	 2.72193   	 0         	 0.140918  	 19.3157   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 84, n: 50, r2: 84)                   	 0.0384107 	 700       	 0         	 0         	 164.104   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 2500, m: 84, k: 50)	 0.0363608 	 800       	 462.037   	 0         	 59.7039   	 7.7388    
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 4200, k: 84) 	 0.0342017 	 700       	 722.07    	 0         	 92.8376   	 7.77778   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 6700, m: 84)                                                              	 0.0333246 	 700       	 0         	 0         	 189.15    	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6700, cols: 50, reductionFactor: 37, colBlockingSize: 12)                  	 0.0300196 	 100       	 114.61    	 0         	 8.99412   	 12.7427   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r: 134, r2: 134)           	 0.0261817 	 100       	 342.911   	 0         	 21.021    	 16.3128   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 134, r: 134, r2: 2500, leftOrthog: 0)      	 0.0222529 	 100       	 403.452   	 0         	 37.4211   	 10.7814   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 134, n: 50, r: 134, r2: 50)           	 0.0210544 	 100       	 426.419   	 0         	 47.097    	 9.05405   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 6700, leftOrthog: 0)        	 0.0165218 	 100       	 202.763   	 0         	 48.9052   	 4.14604   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 134, reductionFactor: 33, colBlockingSize: 12)                   	 0.0157191 	 100       	 11.7692   	 0         	 1.25483   	 9.37912   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 84, r: 84, streamingCols: 0)                   	 0.014282  	 100       	 123.512   	 0         	 23.7237   	 5.20627   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 50, Qr2: 84)       	 0.00682394	 100       	 0         	 0         	 78.547    	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 2500, m: 84)                                                                       	 0.0059748 	 100       	 0         	 0         	 56.2362   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 0, n: 50, r2: 84)                    	 0.005487  	 100       	 0         	 0         	 61.2356   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 4200, k: 50) 	 0.00540345	 100       	 388.641   	 0         	 62.5527   	 6.21302   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 84)                                                              	 0.00525375	 100       	 0         	 0         	 63.9543   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                  	 0.00441432	 100       	 3.77558   	 0         	 1.36827   	 2.75937   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 50, reductionFactor: 37, colBlockingSize: 12)                    	 0.00386458	 100       	 6.64384   	 0         	 1.03504   	 6.41892   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 84)                                                                                         	 0.00284814	 100       	 0         	 0         	 117.972   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 134, r: 50, r2: 50, leftOrthog: 0)         	 0.00275216	 100       	 24.3445   	 0         	 7.29608   	 3.33665   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 84, m: 84, fromLeft: 0)                	 0.00143152	 800       	 0         	 0         	 63.0914   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 84, m: 50, k: 84)   	 0.000996221	 100       	 70.8277   	 0         	 12.4117   	 5.70652   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 50, k: 84)   	 0.000923872	 100       	 45.4608   	 0         	 9.43854   	 4.81651   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50, k: 50)     	 0.000904835	 100       	 27.6293   	 0         	 6.63104   	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                   	 0.000904655	 100       	 0.552697  	 0         	 2.21079   	 0.25      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 84, n: 50, r2: 1)                                                                                          	 0.000858611	 200       	 0         	 0         	 15.6532   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 50, r2: 50)              	 0.000810469	 100       	 30.8463   	 0         	 7.40312   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                          	 0.000803231	 200       	 0         	 0         	 9.95977   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 50, m: 50, k: 50)  	 0.000650396	 100       	 38.4381   	 0         	 9.22515   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 84, n: 50, r2: 1)                    	 0.000548805	 100       	 0         	 0         	 19.5333   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 1, r1low: 0, n: 50, r2: 50)                     	 0.00053418	 100       	 0         	 0         	 7.48811   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                          	 0.000502911	 100       	 0         	 0         	 7.95369   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                            	 0.000463976	 100       	 1.07764   	 0         	 12.9317   	 0.0833333 
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 50)                                                                	 0.000404966	 100       	 0         	 0         	 9.87737   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 1, Xr2: 50, Qr1: 1, Qr2: 0)          	 0.000400089	 100       	 0         	 0         	 9.99778   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                 	 0.000391837	 100       	 0.63802   	 0         	 10.2083   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 84, n: 50, r2: 1)                                                                                 	 0.000387816	 100       	 1.08299   	 0         	 17.3278   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                 	 0.000346043	 100       	 0.722454  	 0         	 11.5593   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 0, m: 4200, k: 50)  	 7.64e-06  	 100       	 0         	 0         	 21989.5   	 0         
Timing statistics:
function                                                                                                                                                                                      	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                        	 6.02486   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_normalized(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                     	 6.0248    	 100       
<PITTS::TensorTrain<double>> :: T PITTS::rightNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                            	 4.67188   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::rightNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                        	 4.67054   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double]	 4.19106   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                  	 1.68674   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                               	 1.61484   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_leftOrthogonalize(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&) [with T = double]                                   	 1.35284   	 100       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                            	 1.12826   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]           	 0.963419  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.559681  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                           	 0.446682  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                	 0.343053  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                    	 0.186889  	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double]        	 0.138991  	 1800      
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                                       	 0.116398  	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.0916692 	 900       
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                       	 0.0624106 	 800       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                	 0.0498003 	 1300      
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double]          	 0.0452999 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                        	 0.0449807 	 1000      
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                              	 0.0389833 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double]       	 0.0370112 	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                              	 0.00395952	 6400      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                	 0.00322431	 1800      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                         	 0.00147662	 5200      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                           	 0.00143152	 800       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                       	 0.0011257 	 300       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                         	 0.000904655	 100       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                                                  	 0.000463976	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
orthoX: L, orthoY: L
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 64
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->65  [0m[1;34m1->66  [0m[1;34m2->67  [0m[1;34m3->68  [0m[1;34m4->69  [0m[1;34m5->70  [0m[1;34m6->71  [0m[1;34m7->72  [0m[1;34m8->73  [0m[1;34m9->74  [0m[1;34m10->75  [0m[1;34m11->76  [0m[1;34m12->77  [0m[1;34m13->78  [0m[1;34m14->79  [0m[1;34m15->80  [0m[1;34m16->81  [0m[1;34m17->82  [0m[1;34m18->83  [0m[1;34m19->84  [0m[1;34m20->85  [0m[1;34m21->86  [0m[1;34m22->87  [0m[1;34m23->88  [0m[1;34m24->89  [0m[1;34m25->90  [0m[1;34m26->91  [0m[1;34m27->92  [0m[1;34m28->93  [0m[1;34m29->94  [0m[1;34m30->95  [0m[1;34m31->96  [0m[1;34m32->97  [0m[1;34m33->98  [0m[1;34m34->99  [0m[1;34m35->100  [0m[1;34m36->101  [0m[1;34m37->102  [0m[1;34m38->103  [0m[1;34m39->104  [0m[1;34m40->105  [0m[1;34m41->106  [0m[1;34m42->107  [0m[1;34m43->108  [0m[1;34m44->109  [0m[1;34m45->110  [0m[1;34m46->111  [0m[1;34m47->112  [0m[1;34m48->113  [0m[1;34m49->114  [0m[1;34m50->115  [0m[1;34m51->116  [0m[1;34m52->117  [0m[1;34m53->118  [0m[1;34m54->119  [0m[1;34m55->120  [0m[1;34m56->121  [0m[1;34m57->122  [0m[1;34m58->123  [0m[1;34m59->124  [0m[1;34m60->125  [0m[1;34m61->126  [0m[1;34m62->127  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22439644383104 -> hwthread 65 - OK[0m[1;34m
[0m[1;34m	threadid 22439459284992 -> hwthread 66 - OK[0m[1;34m
[0m[1;34m	threadid 22439257958528 -> hwthread 67 - OK[0m[1;34m
[0m[1;34m	threadid 22439056632064 -> hwthread 68 - OK[0m[1;34m
[0m[1;34m	threadid 22438855305600 -> hwthread 69 - OK[0m[1;34m
[0m[1;34m	threadid 22438653979136 -> hwthread 70 - OK[0m[1;34m
[0m[1;34m	threadid 22438452652672 -> hwthread 71 - OK[0m[1;34m
[0m[1;34m	threadid 22438251326208 -> hwthread 72 - OK[0m[1;34m
[0m[1;34m	threadid 22438049999744 -> hwthread 73 - OK[0m[1;34m
[0m[1;34m	threadid 22437848673280 -> hwthread 74 - OK[0m[1;34m
[0m[1;34m	threadid 22437647346816 -> hwthread 75 - OK[0m[1;34m
[0m[1;34m	threadid 22437446020352 -> hwthread 76 - OK[0m[1;34m
[0m[1;34m	threadid 22437244693888 -> hwthread 77 - OK[0m[1;34m
[0m[1;34m	threadid 22437043367424 -> hwthread 78 - OK[0m[1;34m
[0m[1;34m	threadid 22436842040960 -> hwthread 79 - OK[0m[1;34m
[0m[1;34m	threadid 22436640714496 -> hwthread 80 - OK[0m[1;34m
[0m[1;34m	threadid 22436439388032 -> hwthread 81 - OK[0m[1;34m
[0m[1;34m	threadid 22436238061568 -> hwthread 82 - OK[0m[1;34m
[0m[1;34m	threadid 22436036735104 -> hwthread 83 - OK[0m[1;34m
[0m[1;34m	threadid 22435835408640 -> hwthread 84 - OK[0m[1;34m
[0m[1;34m	threadid 22435634082176 -> hwthread 85 - OK[0m[1;34m
[0m[1;34m	threadid 22435432755712 -> hwthread 86 - OK[0m[1;34m
[0m[1;34m	threadid 22435231429248 -> hwthread 87 - OK[0m[1;34m
[0m[1;34m	threadid 22435030102784 -> hwthread 88 - OK[0m[1;34m
[0m[1;34m	threadid 22434828776320 -> hwthread 89 - OK[0m[1;34m
[0m[1;34m	threadid 22434627449856 -> hwthread 90 - OK[0m[1;34m
[0m[1;34m	threadid 22434426123392 -> hwthread 91 - OK[0m[1;34m
[0m[1;34m	threadid 22434224796928 -> hwthread 92 - OK[0m[1;34m
[0m[1;34m	threadid 22434023470464 -> hwthread 93 - OK[0m[1;34m
[0m[1;34m	threadid 22433822144000 -> hwthread 94 - OK[0m[1;34m
[0m[1;34m	threadid 22433620817536 -> hwthread 95 - OK[0m[1;34m
[0m[1;34m	threadid 22433419491072 -> hwthread 96 - OK[0m[1;34m
[0m[1;34m	threadid 22433218160512 -> hwthread 97 - OK[0m[1;34m
[0m[1;34m	threadid 22433016834048 -> hwthread 98 - OK[0m[1;34m
[0m[1;34m	threadid 22432815507584 -> hwthread 99 - OK[0m[1;34m
[0m[1;34m	threadid 22432614181120 -> hwthread 100 - OK[0m[1;34m
[0m[1;34m	threadid 22432412854656 -> hwthread 101 - OK[0m[1;34m
[0m[1;34m	threadid 22432211528192 -> hwthread 102 - OK[0m[1;34m
[0m[1;34m	threadid 22432010201728 -> hwthread 103 - OK[0m[1;34m
[0m[1;34m	threadid 22431808875264 -> hwthread 104 - OK[0m[1;34m
[0m[1;34m	threadid 22431607548800 -> hwthread 105 - OK[0m[1;34m
[0m[1;34m	threadid 22431406222336 -> hwthread 106 - OK[0m[1;34m
[0m[1;34m	threadid 22431204895872 -> hwthread 107 - OK[0m[1;34m
[0m[1;34m	threadid 22431003569408 -> hwthread 108 - OK[0m[1;34m
[0m[1;34m	threadid 22430802242944 -> hwthread 109 - OK[0m[1;34m
[0m[1;34m	threadid 22430600916480 -> hwthread 110 - OK[0m[1;34m
[0m[1;34m	threadid 22430399590016 -> hwthread 111 - OK[0m[1;34m
[0m[1;34m	threadid 22430198263552 -> hwthread 112 - OK[0m[1;34m
[0m[1;34m	threadid 22429996937088 -> hwthread 113 - OK[0m[1;34m
[0m[1;34m	threadid 22429795610624 -> hwthread 114 - OK[0m[1;34m
[0m[1;34m	threadid 22429594284160 -> hwthread 115 - OK[0m[1;34m
[0m[1;34m	threadid 22429392957696 -> hwthread 116 - OK[0m[1;34m
[0m[1;34m	threadid 22429191631232 -> hwthread 117 - OK[0m[1;34m
[0m[1;34m	threadid 22428990304768 -> hwthread 118 - OK[0m[1;34m
[0m[1;34m	threadid 22428788978304 -> hwthread 119 - OK[0m[1;34m
[0m[1;34m	threadid 22428587651840 -> hwthread 120 - OK[0m[1;34m
[0m[1;34m	threadid 22428386325376 -> hwthread 121 - OK[0m[1;34m
[0m[1;34m	threadid 22428184998912 -> hwthread 122 - OK[0m[1;34m
[0m[1;34m	threadid 22427983672448 -> hwthread 123 - OK[0m[1;34m
[0m[1;34m	threadid 22427782345984 -> hwthread 124 - OK[0m[1;34m
[0m[1;34m	threadid 22427581019520 -> hwthread 125 - OK[0m[1;34m
[0m[1;34m	threadid 22427379693056 -> hwthread 126 - OK[0m[1;34m
[0m[1;34m	threadid 22427178366592 -> hwthread 127 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22439538722560 -> hwthread 64 - OK[0m[1;34m
[0m[1;34m	threadid 22439532132096 -> hwthread 65 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 135, m: 135)                                                               	 1.50568   	 700       	 10.6759   	 0         	 0.203853  	 52.3707   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6750, cols: 135, reductionFactor: 33, colBlockingSize: 12)                 	 0.984202  	 600       	 154.537   	 0         	 4.53309   	 34.0909   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6750, cols: 85, reductionFactor: 37, colBlockingSize: 12)                  	 0.515416  	 700       	 136.048   	 0         	 6.3123    	 21.5529   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 135, n: 50, r: 135, r2: 135)          	 0.400889  	 600       	 368.238   	 0         	 22.0397   	 16.7079   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 135, r: 135, r2: 6750, leftOrthog: 0)      	 0.309939  	 600       	 476.295   	 0         	 42.9019   	 11.102    
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 6750, Xcols: 85, r: 85, streamingCols: 0)                   	 0.175594  	 700       	 194.415   	 0         	 36.7109   	 5.29583   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 135, reductionFactor: 33, colBlockingSize: 12)                 	 0.126931  	 100       	 73.9665   	 0         	 2.24201   	 32.9912   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 135, Qr2: 85)      	 0.113338  	 700       	 0         	 0         	 79.5497   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 85, m: 4250, k: 85) 	 0.101432  	 700       	 423.82    	 0         	 40.2878   	 10.5198   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 85, m: 85)                                                                  	 0.0937227 	 800       	 6.9894    	 0         	 1.48592   	 4.70377   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 135)                                                                	 0.0643659 	 100       	 4.45371   	 0         	 0.199485  	 22.3261   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 85, reductionFactor: 37, colBlockingSize: 12)                  	 0.0604504 	 100       	 61.3749   	 0         	 2.90784   	 21.1067   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 6750, m: 85)                                                                       	 0.058899  	 700       	 0         	 0         	 109.102   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 85, n: 50, r2: 85)                                                                                         	 0.0471126 	 700       	 0         	 0         	 85.8793   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 85, k: 2500)   	 0.046217  	 800       	 367.83    	 0         	 47.3245   	 7.77249   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                 	 0.0424413 	 100       	 2.7489    	 0         	 0.142314  	 19.3157   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 2500, m: 85, k: 50)	 0.0374694 	 800       	 453.703   	 0         	 58.3729   	 7.77249   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 85, n: 50, r2: 85)                   	 0.0373749 	 700       	 0         	 0         	 171.933   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 4250, k: 85) 	 0.0349707 	 700       	 723.105   	 0         	 92.5574   	 7.8125    
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 6750, m: 85)                                                              	 0.0344058 	 700       	 0         	 0         	 186.771   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6750, cols: 50, reductionFactor: 37, colBlockingSize: 12)                  	 0.0303456 	 100       	 114.225   	 0         	 8.96341   	 12.7434   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r: 135, r2: 135)           	 0.0275011 	 100       	 331.351   	 0         	 20.1657   	 16.4314   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 135, r: 135, r2: 2500, leftOrthog: 0)      	 0.0233146 	 100       	 390.849   	 0         	 35.9928   	 10.8591   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 135, n: 50, r: 135, r2: 50)           	 0.0209311 	 100       	 435.357   	 0         	 47.986    	 9.07258   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 6750, leftOrthog: 0)        	 0.0185139 	 100       	 182.295   	 0         	 43.967    	 4.14619   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 135, reductionFactor: 33, colBlockingSize: 12)                   	 0.0163026 	 100       	 11.518    	 0         	 1.22557   	 9.39803   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 85, r: 85, streamingCols: 0)                   	 0.0147616 	 100       	 122.361   	 0         	 23.2285   	 5.26772   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 50, Qr2: 85)       	 0.00628772	 100       	 0         	 0         	 85.8817   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 2500, m: 85)                                                                       	 0.00550418	 100       	 0         	 0         	 61.7712   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 4250, k: 50) 	 0.00530509	 100       	 400.559   	 0         	 64.4664   	 6.21345   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 0, n: 50, r2: 85)                    	 0.00503332	 100       	 0         	 0         	 67.5499   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                  	 0.00436919	 100       	 3.81458   	 0         	 1.38241   	 2.75937   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 85)                                                              	 0.00433661	 100       	 0         	 0         	 78.4022   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 50, reductionFactor: 37, colBlockingSize: 12)                    	 0.00321421	 100       	 7.98817   	 0         	 1.24447   	 6.41892   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 135, r: 50, r2: 50, leftOrthog: 0)         	 0.00278652	 100       	 24.2237   	 0         	 7.24918   	 3.34158   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 85)                                                                                         	 0.00274384	 100       	 0         	 0         	 123.914   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 85, m: 85, fromLeft: 0)                	 0.00218598	 800       	 0         	 0         	 42.3059   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 85, m: 50, k: 85)   	 0.0010835 	 100       	 66.6819   	 0         	 11.6105   	 5.74324   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 50, k: 85)   	 0.000967903	 100       	 43.9094   	 0         	 9.09182   	 4.82955   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50, k: 50)     	 0.000904636	 100       	 27.6354   	 0         	 6.6325    	 4.16667   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 50, r2: 50)              	 0.000855092	 100       	 29.2366   	 0         	 7.01679   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                          	 0.000837732	 200       	 0         	 0         	 9.54959   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 85, n: 50, r2: 1)                                                                                          	 0.000820911	 200       	 0         	 0         	 16.567    	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                   	 0.000815513	 100       	 0.613111  	 0         	 2.45244   	 0.25      
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 50, m: 50, k: 50)  	 0.000649937	 100       	 38.4653   	 0         	 9.23166   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 85, n: 50, r2: 1)                    	 0.000564645	 100       	 0         	 0         	 19.1271   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                          	 0.000541332	 100       	 0         	 0         	 7.38918   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 1, r1low: 0, n: 50, r2: 50)                     	 0.000538051	 100       	 0         	 0         	 7.43424   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 50)                                                                	 0.000427439	 100       	 0         	 0         	 9.35806   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                            	 0.000417444	 100       	 1.19777   	 0         	 14.3732   	 0.0833333 
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 1, Xr2: 50, Qr1: 1, Qr2: 0)          	 0.000414229	 100       	 0         	 0         	 9.65649   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 85, n: 50, r2: 1)                                                                                 	 0.000387715	 100       	 1.09617   	 0         	 17.5387   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                 	 0.00038359	 100       	 0.651738  	 0         	 10.4278   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                 	 0.00033331	 100       	 0.750053  	 0         	 12.0008   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 0, m: 4250, k: 50)  	 6.35e-06  	 100       	 0         	 0         	 26771.7   	 0         
Timing statistics:
function                                                                                                                                                                                      	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                        	 6.23757   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_normalized(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                     	 6.2375    	 100       
<PITTS::TensorTrain<double>> :: T PITTS::rightNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                            	 4.82899   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::rightNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                        	 4.82774   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double]	 4.30592   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                  	 1.73686   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                               	 1.61248   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_leftOrthogonalize(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&) [with T = double]                                   	 1.40842   	 100       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                            	 1.15842   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]           	 0.996127  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.579549  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                           	 0.450176  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                	 0.354554  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                    	 0.190356  	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double]        	 0.143765  	 1800      
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                                       	 0.12004   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.0980919 	 900       
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                       	 0.0644032 	 800       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                	 0.0520564 	 1300      
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double]          	 0.0471217 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                        	 0.0435109 	 1000      
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                              	 0.0391698 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double]       	 0.0381194 	 900       
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                	 0.0109622 	 1800      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                         	 0.0080059 	 5200      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                              	 0.00443142	 6400      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                           	 0.00218598	 800       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                       	 0.00110462	 300       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                         	 0.000815513	 100       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                                                  	 0.000417444	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
orthoX: L, orthoY: L
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 64
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->65  [0m[1;34m1->66  [0m[1;34m2->67  [0m[1;34m3->68  [0m[1;34m4->69  [0m[1;34m5->70  [0m[1;34m6->71  [0m[1;34m7->72  [0m[1;34m8->73  [0m[1;34m9->74  [0m[1;34m10->75  [0m[1;34m11->76  [0m[1;34m12->77  [0m[1;34m13->78  [0m[1;34m14->79  [0m[1;34m15->80  [0m[1;34m16->81  [0m[1;34m17->82  [0m[1;34m18->83  [0m[1;34m19->84  [0m[1;34m20->85  [0m[1;34m21->86  [0m[1;34m22->87  [0m[1;34m23->88  [0m[1;34m24->89  [0m[1;34m25->90  [0m[1;34m26->91  [0m[1;34m27->92  [0m[1;34m28->93  [0m[1;34m29->94  [0m[1;34m30->95  [0m[1;34m31->96  [0m[1;34m32->97  [0m[1;34m33->98  [0m[1;34m34->99  [0m[1;34m35->100  [0m[1;34m36->101  [0m[1;34m37->102  [0m[1;34m38->103  [0m[1;34m39->104  [0m[1;34m40->105  [0m[1;34m41->106  [0m[1;34m42->107  [0m[1;34m43->108  [0m[1;34m44->109  [0m[1;34m45->110  [0m[1;34m46->111  [0m[1;34m47->112  [0m[1;34m48->113  [0m[1;34m49->114  [0m[1;34m50->115  [0m[1;34m51->116  [0m[1;34m52->117  [0m[1;34m53->118  [0m[1;34m54->119  [0m[1;34m55->120  [0m[1;34m56->121  [0m[1;34m57->122  [0m[1;34m58->123  [0m[1;34m59->124  [0m[1;34m60->125  [0m[1;34m61->126  [0m[1;34m62->127  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23440051971968 -> hwthread 65 - OK[0m[1;34m
[0m[1;34m	threadid 23439851120640 -> hwthread 66 - OK[0m[1;34m
[0m[1;34m	threadid 23439649794176 -> hwthread 67 - OK[0m[1;34m
[0m[1;34m	threadid 23439448467712 -> hwthread 68 - OK[0m[1;34m
[0m[1;34m	threadid 23439247141248 -> hwthread 69 - OK[0m[1;34m
[0m[1;34m	threadid 23439045814784 -> hwthread 70 - OK[0m[1;34m
[0m[1;34m	threadid 23438844488320 -> hwthread 71 - OK[0m[1;34m
[0m[1;34m	threadid 23438643161856 -> hwthread 72 - OK[0m[1;34m
[0m[1;34m	threadid 23438441835392 -> hwthread 73 - OK[0m[1;34m
[0m[1;34m	threadid 23438240508928 -> hwthread 74 - OK[0m[1;34m
[0m[1;34m	threadid 23438039182464 -> hwthread 75 - OK[0m[1;34m
[0m[1;34m	threadid 23437837856000 -> hwthread 76 - OK[0m[1;34m
[0m[1;34m	threadid 23437636529536 -> hwthread 77 - OK[0m[1;34m
[0m[1;34m	threadid 23437435203072 -> hwthread 78 - OK[0m[1;34m
[0m[1;34m	threadid 23437233876608 -> hwthread 79 - OK[0m[1;34m
[0m[1;34m	threadid 23437032550144 -> hwthread 80 - OK[0m[1;34m
[0m[1;34m	threadid 23436831223680 -> hwthread 81 - OK[0m[1;34m
[0m[1;34m	threadid 23436629897216 -> hwthread 82 - OK[0m[1;34m
[0m[1;34m	threadid 23436428570752 -> hwthread 83 - OK[0m[1;34m
[0m[1;34m	threadid 23436227244288 -> hwthread 84 - OK[0m[1;34m
[0m[1;34m	threadid 23436025917824 -> hwthread 85 - OK[0m[1;34m
[0m[1;34m	threadid 23435824591360 -> hwthread 86 - OK[0m[1;34m
[0m[1;34m	threadid 23435623264896 -> hwthread 87 - OK[0m[1;34m
[0m[1;34m	threadid 23435421938432 -> hwthread 88 - OK[0m[1;34m
[0m[1;34m	threadid 23435220611968 -> hwthread 89 - OK[0m[1;34m
[0m[1;34m	threadid 23435019285504 -> hwthread 90 - OK[0m[1;34m
[0m[1;34m	threadid 23434817959040 -> hwthread 91 - OK[0m[1;34m
[0m[1;34m	threadid 23434616632576 -> hwthread 92 - OK[0m[1;34m
[0m[1;34m	threadid 23434415306112 -> hwthread 93 - OK[0m[1;34m
[0m[1;34m	threadid 23434213979648 -> hwthread 94 - OK[0m[1;34m
[0m[1;34m	threadid 23434012653184 -> hwthread 95 - OK[0m[1;34m
[0m[1;34m	threadid 23433811326720 -> hwthread 96 - OK[0m[1;34m
[0m[1;34m	threadid 23433609996160 -> hwthread 97 - OK[0m[1;34m
[0m[1;34m	threadid 23433408669696 -> hwthread 98 - OK[0m[1;34m
[0m[1;34m	threadid 23433207343232 -> hwthread 99 - OK[0m[1;34m
[0m[1;34m	threadid 23433006016768 -> hwthread 100 - OK[0m[1;34m
[0m[1;34m	threadid 23432804690304 -> hwthread 101 - OK[0m[1;34m
[0m[1;34m	threadid 23432603363840 -> hwthread 102 - OK[0m[1;34m
[0m[1;34m	threadid 23432402037376 -> hwthread 103 - OK[0m[1;34m
[0m[1;34m	threadid 23432200710912 -> hwthread 104 - OK[0m[1;34m
[0m[1;34m	threadid 23431999384448 -> hwthread 105 - OK[0m[1;34m
[0m[1;34m	threadid 23431798057984 -> hwthread 106 - OK[0m[1;34m
[0m[1;34m	threadid 23431596731520 -> hwthread 107 - OK[0m[1;34m
[0m[1;34m	threadid 23431395405056 -> hwthread 108 - OK[0m[1;34m
[0m[1;34m	threadid 23431194078592 -> hwthread 109 - OK[0m[1;34m
[0m[1;34m	threadid 23430992752128 -> hwthread 110 - OK[0m[1;34m
[0m[1;34m	threadid 23430791425664 -> hwthread 111 - OK[0m[1;34m
[0m[1;34m	threadid 23430590099200 -> hwthread 112 - OK[0m[1;34m
[0m[1;34m	threadid 23430388772736 -> hwthread 113 - OK[0m[1;34m
[0m[1;34m	threadid 23430187446272 -> hwthread 114 - OK[0m[1;34m
[0m[1;34m	threadid 23429986119808 -> hwthread 115 - OK[0m[1;34m
[0m[1;34m	threadid 23429784793344 -> hwthread 116 - OK[0m[1;34m
[0m[1;34m	threadid 23429583466880 -> hwthread 117 - OK[0m[1;34m
[0m[1;34m	threadid 23429382140416 -> hwthread 118 - OK[0m[1;34m
[0m[1;34m	threadid 23429180813952 -> hwthread 119 - OK[0m[1;34m
[0m[1;34m	threadid 23428979487488 -> hwthread 120 - OK[0m[1;34m
[0m[1;34m	threadid 23428778161024 -> hwthread 121 - OK[0m[1;34m
[0m[1;34m	threadid 23428576834560 -> hwthread 122 - OK[0m[1;34m
[0m[1;34m	threadid 23428375508096 -> hwthread 123 - OK[0m[1;34m
[0m[1;34m	threadid 23428174181632 -> hwthread 124 - OK[0m[1;34m
[0m[1;34m	threadid 23427972855168 -> hwthread 125 - OK[0m[1;34m
[0m[1;34m	threadid 23427771528704 -> hwthread 126 - OK[0m[1;34m
[0m[1;34m	threadid 23427570202240 -> hwthread 127 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23439946311424 -> hwthread 64 - OK[0m[1;34m
[0m[1;34m	threadid 23439939720960 -> hwthread 65 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 136, m: 136)                                                               	 1.51477   	 700       	 10.8494   	 0         	 0.205638  	 52.7596   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6800, cols: 136, reductionFactor: 33, colBlockingSize: 12)                 	 0.994863  	 600       	 156.304   	 0         	 4.5512    	 34.3434   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6800, cols: 86, reductionFactor: 37, colBlockingSize: 12)                  	 0.521137  	 700       	 138.76    	 0         	 6.36358   	 21.8053   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 136, n: 50, r: 136, r2: 136)          	 0.412128  	 600       	 366.215   	 0         	 21.7575   	 16.8317   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 136, r: 136, r2: 6800, leftOrthog: 0)      	 0.320026  	 600       	 471.61    	 0         	 42.1675   	 11.1842   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 6800, Xcols: 86, r: 86, streamingCols: 0)                   	 0.183685  	 700       	 191.659   	 0         	 35.7703   	 5.35806   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 136, reductionFactor: 33, colBlockingSize: 12)                 	 0.13389   	 100       	 71.1649   	 0         	 2.14204   	 33.223    
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 136, Qr2: 86)      	 0.114029  	 700       	 0         	 0         	 80.2758   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 86, m: 4300, k: 86) 	 0.104741  	 700       	 425.086   	 0         	 39.9383   	 10.6436   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 86, m: 86)                                                                  	 0.0985254 	 800       	 6.88614   	 0         	 1.44687   	 4.75933   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 136)                                                                	 0.0663777 	 100       	 4.34885   	 0         	 0.194644  	 22.3426   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 86, reductionFactor: 37, colBlockingSize: 12)                  	 0.0657244 	 100       	 57.7859   	 0         	 2.70701   	 21.3468   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 86, n: 50, r2: 86)                                                                                         	 0.0478566 	 700       	 0         	 0         	 86.5453   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 86, k: 2500)   	 0.044599  	 800       	 385.659   	 0         	 49.4074   	 7.80569   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                 	 0.0429938 	 100       	 2.71357   	 0         	 0.140485  	 19.3157   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 6800, m: 86)                                                                       	 0.040761  	 700       	 0         	 0         	 160.687   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 4300, k: 86) 	 0.0389267 	 700       	 664.994   	 0         	 84.7481   	 7.84672   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 2500, m: 86, k: 50)	 0.03779   	 800       	 455.146   	 0         	 58.3096   	 7.80569   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 86, n: 50, r2: 86)                   	 0.0335684 	 700       	 0         	 0         	 195.117   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6800, cols: 50, reductionFactor: 37, colBlockingSize: 12)                  	 0.0299261 	 100       	 116.684   	 0         	 9.15587   	 12.7441   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 136, r: 136, r2: 2500, leftOrthog: 0)      	 0.0241323 	 100       	 383.221   	 0         	 35.0399   	 10.9367   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 136, n: 50, r: 136, r2: 50)           	 0.0234156 	 100       	 394.951   	 0         	 43.4446   	 9.09091   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r: 136, r2: 136)           	 0.0234079 	 100       	 395.081   	 0         	 23.8722   	 16.5498   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 6800, leftOrthog: 0)        	 0.0171494 	 100       	 198.258   	 0         	 47.815    	 4.14634   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 136, reductionFactor: 33, colBlockingSize: 12)                   	 0.0153024 	 100       	 12.4533   	 0         	 1.32246   	 9.41675   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 86, r: 86, streamingCols: 0)                   	 0.0150168 	 100       	 123.129   	 0         	 23.1047   	 5.32917   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 6800, m: 86)                                                              	 0.0125725 	 700       	 0         	 0         	 520.961   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 50, Qr2: 86)       	 0.00664699	 100       	 0         	 0         	 81.8416   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 0, n: 50, r2: 86)                    	 0.00533412	 100       	 0         	 0         	 64.4905   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 4300, k: 50) 	 0.00532815	 100       	 403.517   	 0         	 64.9381   	 6.21387   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 2500, m: 86)                                                                       	 0.00519242	 100       	 0         	 0         	 66.2504   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                  	 0.00437133	 100       	 3.81271   	 0         	 1.38173   	 2.75937   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 86)                                                              	 0.00431789	 100       	 0         	 0         	 79.6685   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 50, reductionFactor: 37, colBlockingSize: 12)                    	 0.00365322	 100       	 7.02824   	 0         	 1.09493   	 6.41892   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 86)                                                                                         	 0.00288284	 100       	 0         	 0         	 119.327   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 136, r: 50, r2: 50, leftOrthog: 0)         	 0.00280472	 100       	 24.2449   	 0         	 7.24494   	 3.34646   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 86, m: 86, fromLeft: 0)                	 0.00188503	 800       	 0         	 0         	 50.2213   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 86, m: 50, k: 86)   	 0.00105428	 100       	 70.1519   	 0         	 12.1379   	 5.77957   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                          	 0.00104553	 200       	 0         	 0         	 7.6516    	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 50, k: 86)   	 0.000944579	 100       	 45.5229   	 0         	 9.40101   	 4.84234   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50, k: 50)     	 0.000921741	 100       	 27.1226   	 0         	 6.50942   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 86, n: 50, r2: 1)                                                                                          	 0.000880066	 200       	 0         	 0         	 15.6352   	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                   	 0.000826067	 100       	 0.605278  	 0         	 2.42111   	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 50, r2: 50)              	 0.000825552	 100       	 30.2828   	 0         	 7.26786   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 50, m: 50, k: 50)  	 0.000818249	 100       	 30.553    	 0         	 7.33273   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 1, r1low: 0, n: 50, r2: 50)                     	 0.000574421	 100       	 0         	 0         	 6.96353   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 86, n: 50, r2: 1)                    	 0.000561867	 100       	 0         	 0         	 19.364    	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                          	 0.000516074	 100       	 0         	 0         	 7.75083   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                            	 0.000452817	 100       	 1.1042    	 0         	 13.2504   	 0.0833333 
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 50)                                                                	 0.000435258	 100       	 0         	 0         	 9.18995   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 1, Xr2: 50, Qr1: 1, Qr2: 0)          	 0.000433326	 100       	 0         	 0         	 9.23093   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                 	 0.000389336	 100       	 0.642119  	 0         	 10.2739   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 86, n: 50, r2: 1)                                                                                 	 0.000374391	 100       	 1.14853   	 0         	 18.3765   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                 	 0.000330491	 100       	 0.75645   	 0         	 12.1032   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 0, m: 4300, k: 50)  	 7.471e-06 	 100       	 0         	 0         	 23022.4   	 0         
Timing statistics:
function                                                                                                                                                                                      	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                        	 6.29257   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_normalized(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                     	 6.29251   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::rightNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                            	 4.92039   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::rightNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                        	 4.91914   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double]	 4.37637   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                  	 1.7645    	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                               	 1.62414   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_leftOrthogonalize(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&) [with T = double]                                   	 1.37203   	 100       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                            	 1.17463   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]           	 0.968953  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.591007  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                           	 0.459777  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                	 0.364112  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                    	 0.198702  	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double]        	 0.151002  	 1800      
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                                       	 0.121109  	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.102897  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                	 0.0531811 	 1300      
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                       	 0.0459534 	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double]          	 0.0455208 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                        	 0.0400388 	 1000      
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double]       	 0.0386083 	 900       
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                              	 0.0173256 	 900       
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                	 0.00809243	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                              	 0.00452918	 6400      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                           	 0.00188503	 800       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                         	 0.00150735	 5200      
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                       	 0.00109422	 300       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                         	 0.000826067	 100       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                                                  	 0.000452817	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
orthoX: L, orthoY: L
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 64
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->65  [0m[1;34m1->66  [0m[1;34m2->67  [0m[1;34m3->68  [0m[1;34m4->69  [0m[1;34m5->70  [0m[1;34m6->71  [0m[1;34m7->72  [0m[1;34m8->73  [0m[1;34m9->74  [0m[1;34m10->75  [0m[1;34m11->76  [0m[1;34m12->77  [0m[1;34m13->78  [0m[1;34m14->79  [0m[1;34m15->80  [0m[1;34m16->81  [0m[1;34m17->82  [0m[1;34m18->83  [0m[1;34m19->84  [0m[1;34m20->85  [0m[1;34m21->86  [0m[1;34m22->87  [0m[1;34m23->88  [0m[1;34m24->89  [0m[1;34m25->90  [0m[1;34m26->91  [0m[1;34m27->92  [0m[1;34m28->93  [0m[1;34m29->94  [0m[1;34m30->95  [0m[1;34m31->96  [0m[1;34m32->97  [0m[1;34m33->98  [0m[1;34m34->99  [0m[1;34m35->100  [0m[1;34m36->101  [0m[1;34m37->102  [0m[1;34m38->103  [0m[1;34m39->104  [0m[1;34m40->105  [0m[1;34m41->106  [0m[1;34m42->107  [0m[1;34m43->108  [0m[1;34m44->109  [0m[1;34m45->110  [0m[1;34m46->111  [0m[1;34m47->112  [0m[1;34m48->113  [0m[1;34m49->114  [0m[1;34m50->115  [0m[1;34m51->116  [0m[1;34m52->117  [0m[1;34m53->118  [0m[1;34m54->119  [0m[1;34m55->120  [0m[1;34m56->121  [0m[1;34m57->122  [0m[1;34m58->123  [0m[1;34m59->124  [0m[1;34m60->125  [0m[1;34m61->126  [0m[1;34m62->127  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22756392880000 -> hwthread 65 - OK[0m[1;34m
[0m[1;34m	threadid 22756213123072 -> hwthread 66 - OK[0m[1;34m
[0m[1;34m	threadid 22756011796608 -> hwthread 67 - OK[0m[1;34m
[0m[1;34m	threadid 22755810470144 -> hwthread 68 - OK[0m[1;34m
[0m[1;34m	threadid 22755609143680 -> hwthread 69 - OK[0m[1;34m
[0m[1;34m	threadid 22755407817216 -> hwthread 70 - OK[0m[1;34m
[0m[1;34m	threadid 22755206490752 -> hwthread 71 - OK[0m[1;34m
[0m[1;34m	threadid 22755005164288 -> hwthread 72 - OK[0m[1;34m
[0m[1;34m	threadid 22754803837824 -> hwthread 73 - OK[0m[1;34m
[0m[1;34m	threadid 22754602511360 -> hwthread 74 - OK[0m[1;34m
[0m[1;34m	threadid 22754401184896 -> hwthread 75 - OK[0m[1;34m
[0m[1;34m	threadid 22754199858432 -> hwthread 76 - OK[0m[1;34m
[0m[1;34m	threadid 22753998531968 -> hwthread 77 - OK[0m[1;34m
[0m[1;34m	threadid 22753797205504 -> hwthread 78 - OK[0m[1;34m
[0m[1;34m	threadid 22753595879040 -> hwthread 79 - OK[0m[1;34m
[0m[1;34m	threadid 22753394552576 -> hwthread 80 - OK[0m[1;34m
[0m[1;34m	threadid 22753193226112 -> hwthread 81 - OK[0m[1;34m
[0m[1;34m	threadid 22752991899648 -> hwthread 82 - OK[0m[1;34m
[0m[1;34m	threadid 22752790573184 -> hwthread 83 - OK[0m[1;34m
[0m[1;34m	threadid 22752589246720 -> hwthread 84 - OK[0m[1;34m
[0m[1;34m	threadid 22752387920256 -> hwthread 85 - OK[0m[1;34m
[0m[1;34m	threadid 22752186593792 -> hwthread 86 - OK[0m[1;34m
[0m[1;34m	threadid 22751985267328 -> hwthread 87 - OK[0m[1;34m
[0m[1;34m	threadid 22751783940864 -> hwthread 88 - OK[0m[1;34m
[0m[1;34m	threadid 22751582614400 -> hwthread 89 - OK[0m[1;34m
[0m[1;34m	threadid 22751381287936 -> hwthread 90 - OK[0m[1;34m
[0m[1;34m	threadid 22751179961472 -> hwthread 91 - OK[0m[1;34m
[0m[1;34m	threadid 22750978635008 -> hwthread 92 - OK[0m[1;34m
[0m[1;34m	threadid 22750777308544 -> hwthread 93 - OK[0m[1;34m
[0m[1;34m	threadid 22750575982080 -> hwthread 94 - OK[0m[1;34m
[0m[1;34m	threadid 22750374655616 -> hwthread 95 - OK[0m[1;34m
[0m[1;34m	threadid 22750173329152 -> hwthread 96 - OK[0m[1;34m
[0m[1;34m	threadid 22749971998592 -> hwthread 97 - OK[0m[1;34m
[0m[1;34m	threadid 22749770672128 -> hwthread 98 - OK[0m[1;34m
[0m[1;34m	threadid 22749569345664 -> hwthread 99 - OK[0m[1;34m
[0m[1;34m	threadid 22749368019200 -> hwthread 100 - OK[0m[1;34m
[0m[1;34m	threadid 22749166692736 -> hwthread 101 - OK[0m[1;34m
[0m[1;34m	threadid 22748965366272 -> hwthread 102 - OK[0m[1;34m
[0m[1;34m	threadid 22748764039808 -> hwthread 103 - OK[0m[1;34m
[0m[1;34m	threadid 22748562713344 -> hwthread 104 - OK[0m[1;34m
[0m[1;34m	threadid 22748361386880 -> hwthread 105 - OK[0m[1;34m
[0m[1;34m	threadid 22748160060416 -> hwthread 106 - OK[0m[1;34m
[0m[1;34m	threadid 22747958733952 -> hwthread 107 - OK[0m[1;34m
[0m[1;34m	threadid 22747757407488 -> hwthread 108 - OK[0m[1;34m
[0m[1;34m	threadid 22747556081024 -> hwthread 109 - OK[0m[1;34m
[0m[1;34m	threadid 22747354754560 -> hwthread 110 - OK[0m[1;34m
[0m[1;34m	threadid 22747153428096 -> hwthread 111 - OK[0m[1;34m
[0m[1;34m	threadid 22746952101632 -> hwthread 112 - OK[0m[1;34m
[0m[1;34m	threadid 22746750775168 -> hwthread 113 - OK[0m[1;34m
[0m[1;34m	threadid 22746549448704 -> hwthread 114 - OK[0m[1;34m
[0m[1;34m	threadid 22746348122240 -> hwthread 115 - OK[0m[1;34m
[0m[1;34m	threadid 22746146795776 -> hwthread 116 - OK[0m[1;34m
[0m[1;34m	threadid 22745945469312 -> hwthread 117 - OK[0m[1;34m
[0m[1;34m	threadid 22745744142848 -> hwthread 118 - OK[0m[1;34m
[0m[1;34m	threadid 22745542816384 -> hwthread 119 - OK[0m[1;34m
[0m[1;34m	threadid 22745341489920 -> hwthread 120 - OK[0m[1;34m
[0m[1;34m	threadid 22745140163456 -> hwthread 121 - OK[0m[1;34m
[0m[1;34m	threadid 22744938836992 -> hwthread 122 - OK[0m[1;34m
[0m[1;34m	threadid 22744737510528 -> hwthread 123 - OK[0m[1;34m
[0m[1;34m	threadid 22744536184064 -> hwthread 124 - OK[0m[1;34m
[0m[1;34m	threadid 22744334857600 -> hwthread 125 - OK[0m[1;34m
[0m[1;34m	threadid 22744133531136 -> hwthread 126 - OK[0m[1;34m
[0m[1;34m	threadid 22743932204672 -> hwthread 127 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22756287219456 -> hwthread 64 - OK[0m[1;34m
[0m[1;34m	threadid 22756108261120 -> hwthread 65 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 137, m: 137)                                                               	 1.61252   	 700       	 10.4182   	 0         	 0.196021  	 53.1485   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6850, cols: 137, reductionFactor: 33, colBlockingSize: 12)                 	 1.01505   	 600       	 156.6     	 0         	 4.52655   	 34.596    
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6850, cols: 87, reductionFactor: 37, colBlockingSize: 12)                  	 0.529465  	 700       	 140.8     	 0         	 6.38325   	 22.0577   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 137, n: 50, r: 137, r2: 137)          	 0.415399  	 600       	 371.405   	 0         	 21.9048   	 16.9554   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 137, r: 137, r2: 6850, leftOrthog: 0)      	 0.311068  	 600       	 495.972   	 0         	 44.022    	 11.2664   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 6850, Xcols: 87, r: 87, streamingCols: 0)                   	 0.186123  	 700       	 194.997   	 0         	 35.9754   	 5.42029   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 137, reductionFactor: 33, colBlockingSize: 12)                 	 0.132918  	 100       	 72.7434   	 0         	 2.17439   	 33.4546   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 137, Qr2: 87)      	 0.125991  	 700       	 0         	 0         	 73.7562   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 87, m: 4350, k: 87) 	 0.106177  	 700       	 434.135   	 0         	 40.3196   	 10.7673   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 87, m: 87)                                                                  	 0.100847  	 800       	 6.96501   	 0         	 1.44656   	 4.81489   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 6850, m: 87)                                                                       	 0.0702873 	 700       	 0         	 0         	 94.9623   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 137)                                                                	 0.0662736 	 100       	 4.38586   	 0         	 0.196157  	 22.359    
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 87, reductionFactor: 37, colBlockingSize: 12)                  	 0.0634839 	 100       	 61.2247   	 0         	 2.83624   	 21.5866   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 87, n: 50, r2: 87)                                                                                         	 0.0497059 	 700       	 0         	 0         	 85.2744   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 87, k: 2500)   	 0.0458436 	 800       	 379.551   	 0         	 48.422    	 7.8384    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                 	 0.0417844 	 100       	 2.79211   	 0         	 0.144552  	 19.3157   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 87, n: 50, r2: 87)                   	 0.0414469 	 700       	 0         	 0         	 161.041   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 6850, m: 87)                                                              	 0.0394362 	 700       	 0         	 0         	 169.251   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 2500, m: 87, k: 50)	 0.0376573 	 800       	 462.062   	 0         	 58.9485   	 7.8384    
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 4350, k: 87) 	 0.0369873 	 700       	 716.232   	 0         	 90.8873   	 7.88043   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6850, cols: 50, reductionFactor: 37, colBlockingSize: 12)                  	 0.0313933 	 100       	 112.048   	 0         	 8.79167   	 12.7448   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r: 137, r2: 137)           	 0.026762  	 100       	 350.665   	 0         	 21.0378   	 16.6683   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 137, r: 137, r2: 2500, leftOrthog: 0)      	 0.023669  	 100       	 396.49    	 0         	 35.9978   	 11.0143   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 137, n: 50, r: 137, r2: 50)           	 0.02277   	 100       	 412.143   	 0         	 45.2455   	 9.10904   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 6850, leftOrthog: 0)        	 0.017739  	 100       	 193.077   	 0         	 46.564    	 4.14649   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 87, r: 87, streamingCols: 0)                   	 0.0148199 	 100       	 127.683   	 0         	 23.6863   	 5.3906    
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 137, reductionFactor: 33, colBlockingSize: 12)                   	 0.0147608 	 100       	 13.1008   	 0         	 1.38849   	 9.43526   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 2500, m: 87)                                                                       	 0.00748742	 100       	 0         	 0         	 46.478    	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 50, Qr2: 87)       	 0.00664429	 100       	 0         	 0         	 82.4768   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 4350, k: 50) 	 0.00632581	 100       	 343.829   	 0         	 55.3289   	 6.21429   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 87)                                                              	 0.0062593 	 100       	 0         	 0         	 55.5973   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 0, n: 50, r2: 87)                    	 0.00552265	 100       	 0         	 0         	 63.0132   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                  	 0.00442456	 100       	 3.76684   	 0         	 1.36511   	 2.75937   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 50, reductionFactor: 37, colBlockingSize: 12)                    	 0.00378306	 100       	 6.78701   	 0         	 1.05735   	 6.41892   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 137, r: 50, r2: 50, leftOrthog: 0)         	 0.00283688	 100       	 24.1463   	 0         	 7.20511   	 3.35127   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 87)                                                                                         	 0.00278691	 100       	 0         	 0         	 124.869   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 87, m: 87, fromLeft: 0)                	 0.00223164	 800       	 0         	 0         	 43.4135   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 50, k: 87)   	 0.00111755	 100       	 38.9243   	 0         	 8.0175    	 4.85491   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 87, m: 50, k: 87)   	 0.00109805	 100       	 68.9312   	 0         	 11.853    	 5.81551   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50, k: 50)     	 0.000939679	 100       	 26.6048   	 0         	 6.38516   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 87, n: 50, r2: 1)                                                                                          	 0.000863706	 200       	 0         	 0         	 16.1166   	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                   	 0.000830052	 100       	 0.602372  	 0         	 2.40949   	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 50, r2: 50)              	 0.000819521	 100       	 30.5056   	 0         	 7.32135   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                          	 0.000811991	 200       	 0         	 0         	 9.85233   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 50, m: 50, k: 50)  	 0.000617455	 100       	 40.4888   	 0         	 9.71731   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 87, n: 50, r2: 1)                    	 0.000583222	 100       	 0         	 0         	 18.7922   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 1, r1low: 0, n: 50, r2: 50)                     	 0.000572075	 100       	 0         	 0         	 6.99209   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                          	 0.000560294	 100       	 0         	 0         	 7.13911   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 50)                                                                	 0.000459121	 100       	 0         	 0         	 8.7123    	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                            	 0.000438334	 100       	 1.14068   	 0         	 13.6882   	 0.0833333 
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 1, Xr2: 50, Qr1: 1, Qr2: 0)          	 0.000418579	 100       	 0         	 0         	 9.55614   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                 	 0.000390778	 100       	 0.639749  	 0         	 10.236    	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 87, n: 50, r2: 1)                                                                                 	 0.000367885	 100       	 1.18243   	 0         	 18.919    	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                 	 0.000333012	 100       	 0.750724  	 0         	 12.0116   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 0, m: 4350, k: 50)  	 2.194e-05 	 100       	 0         	 0         	 7930.72   	 0         
Timing statistics:
function                                                                                                                                                                                      	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                        	 6.47298   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_normalized(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                     	 6.47293   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::rightNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                            	 4.99269   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::rightNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                        	 4.99144   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double]	 4.43205   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                  	 1.79085   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                               	 1.72057   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_leftOrthogonalize(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&) [with T = double]                                   	 1.48016   	 100       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                            	 1.19471   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]           	 1.05356   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.597192  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                           	 0.46575   	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                	 0.355313  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                    	 0.200942  	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double]        	 0.151728  	 1800      
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                                       	 0.133054  	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.105272  	 900       
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                       	 0.0777747 	 800       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                	 0.0547288 	 1300      
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                        	 0.0481249 	 1000      
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double]          	 0.0467833 	 900       
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                              	 0.0461547 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double]       	 0.0382748 	 900       
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                	 0.00619372	 1800      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                         	 0.00508602	 5200      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                              	 0.00430714	 6400      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                           	 0.00223164	 800       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                       	 0.00109167	 300       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                         	 0.000830052	 100       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                                                  	 0.000438334	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
orthoX: L, orthoY: L
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 64
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->65  [0m[1;34m1->66  [0m[1;34m2->67  [0m[1;34m3->68  [0m[1;34m4->69  [0m[1;34m5->70  [0m[1;34m6->71  [0m[1;34m7->72  [0m[1;34m8->73  [0m[1;34m9->74  [0m[1;34m10->75  [0m[1;34m11->76  [0m[1;34m12->77  [0m[1;34m13->78  [0m[1;34m14->79  [0m[1;34m15->80  [0m[1;34m16->81  [0m[1;34m17->82  [0m[1;34m18->83  [0m[1;34m19->84  [0m[1;34m20->85  [0m[1;34m21->86  [0m[1;34m22->87  [0m[1;34m23->88  [0m[1;34m24->89  [0m[1;34m25->90  [0m[1;34m26->91  [0m[1;34m27->92  [0m[1;34m28->93  [0m[1;34m29->94  [0m[1;34m30->95  [0m[1;34m31->96  [0m[1;34m32->97  [0m[1;34m33->98  [0m[1;34m34->99  [0m[1;34m35->100  [0m[1;34m36->101  [0m[1;34m37->102  [0m[1;34m38->103  [0m[1;34m39->104  [0m[1;34m40->105  [0m[1;34m41->106  [0m[1;34m42->107  [0m[1;34m43->108  [0m[1;34m44->109  [0m[1;34m45->110  [0m[1;34m46->111  [0m[1;34m47->112  [0m[1;34m48->113  [0m[1;34m49->114  [0m[1;34m50->115  [0m[1;34m51->116  [0m[1;34m52->117  [0m[1;34m53->118  [0m[1;34m54->119  [0m[1;34m55->120  [0m[1;34m56->121  [0m[1;34m57->122  [0m[1;34m58->123  [0m[1;34m59->124  [0m[1;34m60->125  [0m[1;34m61->126  [0m[1;34m62->127  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23254251145088 -> hwthread 65 - OK[0m[1;34m
[0m[1;34m	threadid 23254026676224 -> hwthread 66 - OK[0m[1;34m
[0m[1;34m	threadid 23253825349760 -> hwthread 67 - OK[0m[1;34m
[0m[1;34m	threadid 23253624023296 -> hwthread 68 - OK[0m[1;34m
[0m[1;34m	threadid 23253422696832 -> hwthread 69 - OK[0m[1;34m
[0m[1;34m	threadid 23253221370368 -> hwthread 70 - OK[0m[1;34m
[0m[1;34m	threadid 23253020043904 -> hwthread 71 - OK[0m[1;34m
[0m[1;34m	threadid 23252818717440 -> hwthread 72 - OK[0m[1;34m
[0m[1;34m	threadid 23252617390976 -> hwthread 73 - OK[0m[1;34m
[0m[1;34m	threadid 23252416064512 -> hwthread 74 - OK[0m[1;34m
[0m[1;34m	threadid 23252214738048 -> hwthread 75 - OK[0m[1;34m
[0m[1;34m	threadid 23252013411584 -> hwthread 76 - OK[0m[1;34m
[0m[1;34m	threadid 23251812085120 -> hwthread 77 - OK[0m[1;34m
[0m[1;34m	threadid 23251610758656 -> hwthread 78 - OK[0m[1;34m
[0m[1;34m	threadid 23251409432192 -> hwthread 79 - OK[0m[1;34m
[0m[1;34m	threadid 23251208105728 -> hwthread 80 - OK[0m[1;34m
[0m[1;34m	threadid 23251006779264 -> hwthread 81 - OK[0m[1;34m
[0m[1;34m	threadid 23250805452800 -> hwthread 82 - OK[0m[1;34m
[0m[1;34m	threadid 23250604126336 -> hwthread 83 - OK[0m[1;34m
[0m[1;34m	threadid 23250402799872 -> hwthread 84 - OK[0m[1;34m
[0m[1;34m	threadid 23250201473408 -> hwthread 85 - OK[0m[1;34m
[0m[1;34m	threadid 23250000146944 -> hwthread 86 - OK[0m[1;34m
[0m[1;34m	threadid 23249798820480 -> hwthread 87 - OK[0m[1;34m
[0m[1;34m	threadid 23249597494016 -> hwthread 88 - OK[0m[1;34m
[0m[1;34m	threadid 23249396167552 -> hwthread 89 - OK[0m[1;34m
[0m[1;34m	threadid 23249194841088 -> hwthread 90 - OK[0m[1;34m
[0m[1;34m	threadid 23248993514624 -> hwthread 91 - OK[0m[1;34m
[0m[1;34m	threadid 23248792188160 -> hwthread 92 - OK[0m[1;34m
[0m[1;34m	threadid 23248590861696 -> hwthread 93 - OK[0m[1;34m
[0m[1;34m	threadid 23248389535232 -> hwthread 94 - OK[0m[1;34m
[0m[1;34m	threadid 23248188208768 -> hwthread 95 - OK[0m[1;34m
[0m[1;34m	threadid 23247986882304 -> hwthread 96 - OK[0m[1;34m
[0m[1;34m	threadid 23247785551744 -> hwthread 97 - OK[0m[1;34m
[0m[1;34m	threadid 23247584225280 -> hwthread 98 - OK[0m[1;34m
[0m[1;34m	threadid 23247382898816 -> hwthread 99 - OK[0m[1;34m
[0m[1;34m	threadid 23247181572352 -> hwthread 100 - OK[0m[1;34m
[0m[1;34m	threadid 23246980245888 -> hwthread 101 - OK[0m[1;34m
[0m[1;34m	threadid 23246778919424 -> hwthread 102 - OK[0m[1;34m
[0m[1;34m	threadid 23246577592960 -> hwthread 103 - OK[0m[1;34m
[0m[1;34m	threadid 23246376266496 -> hwthread 104 - OK[0m[1;34m
[0m[1;34m	threadid 23246174940032 -> hwthread 105 - OK[0m[1;34m
[0m[1;34m	threadid 23245973613568 -> hwthread 106 - OK[0m[1;34m
[0m[1;34m	threadid 23245772287104 -> hwthread 107 - OK[0m[1;34m
[0m[1;34m	threadid 23245570960640 -> hwthread 108 - OK[0m[1;34m
[0m[1;34m	threadid 23245369634176 -> hwthread 109 - OK[0m[1;34m
[0m[1;34m	threadid 23245168307712 -> hwthread 110 - OK[0m[1;34m
[0m[1;34m	threadid 23244966981248 -> hwthread 111 - OK[0m[1;34m
[0m[1;34m	threadid 23244765654784 -> hwthread 112 - OK[0m[1;34m
[0m[1;34m	threadid 23244564328320 -> hwthread 113 - OK[0m[1;34m
[0m[1;34m	threadid 23244363001856 -> hwthread 114 - OK[0m[1;34m
[0m[1;34m	threadid 23244161675392 -> hwthread 115 - OK[0m[1;34m
[0m[1;34m	threadid 23243960348928 -> hwthread 116 - OK[0m[1;34m
[0m[1;34m	threadid 23243759022464 -> hwthread 117 - OK[0m[1;34m
[0m[1;34m	threadid 23243557696000 -> hwthread 118 - OK[0m[1;34m
[0m[1;34m	threadid 23243356369536 -> hwthread 119 - OK[0m[1;34m
[0m[1;34m	threadid 23243155043072 -> hwthread 120 - OK[0m[1;34m
[0m[1;34m	threadid 23242953716608 -> hwthread 121 - OK[0m[1;34m
[0m[1;34m	threadid 23242752390144 -> hwthread 122 - OK[0m[1;34m
[0m[1;34m	threadid 23242551063680 -> hwthread 123 - OK[0m[1;34m
[0m[1;34m	threadid 23242349737216 -> hwthread 124 - OK[0m[1;34m
[0m[1;34m	threadid 23242148410752 -> hwthread 125 - OK[0m[1;34m
[0m[1;34m	threadid 23241947084288 -> hwthread 126 - OK[0m[1;34m
[0m[1;34m	threadid 23241745757824 -> hwthread 127 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23254145484544 -> hwthread 64 - OK[0m[1;34m
[0m[1;34m	threadid 23254138894080 -> hwthread 65 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 138, m: 138)                                                               	 1.59209   	 700       	 10.7846   	 0         	 0.201441  	 53.5373   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6900, cols: 138, reductionFactor: 32, colBlockingSize: 12)                 	 1.02529   	 600       	 158.601   	 0         	 4.54698   	 34.8805   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6900, cols: 88, reductionFactor: 37, colBlockingSize: 12)                  	 0.539316  	 700       	 142.456   	 0         	 6.38529   	 22.3101   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 138, n: 50, r: 138, r2: 138)          	 0.432435  	 600       	 364.643   	 0         	 21.3501   	 17.0792   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 138, r: 138, r2: 6900, leftOrthog: 0)      	 0.337523  	 600       	 467.181   	 0         	 41.1661   	 11.3487   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 6900, Xcols: 88, r: 88, streamingCols: 0)                   	 0.194153  	 700       	 192.65    	 0         	 35.1389   	 5.48252   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 138, reductionFactor: 32, colBlockingSize: 12)                 	 0.12861   	 100       	 76.3513   	 0         	 2.26448   	 33.7169   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 138, Qr2: 88)      	 0.113679  	 700       	 0         	 0         	 82.9758   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 88, m: 4400, k: 88) 	 0.104937  	 700       	 454.587   	 0         	 41.7394   	 10.8911   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 88, m: 88)                                                                  	 0.0978071 	 800       	 7.432     	 0         	 1.52594   	 4.87043   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 138)                                                                	 0.0656591 	 100       	 4.45736   	 0         	 0.199211  	 22.3751   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 88, reductionFactor: 37, colBlockingSize: 12)                  	 0.064869  	 100       	 61.3027   	 0         	 2.80866   	 21.8263   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 6900, m: 88)                                                                       	 0.0560044 	 700       	 0         	 0         	 121.431   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 88, n: 50, r2: 88)                                                                                         	 0.0473078 	 700       	 0         	 0         	 91.6686   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 88, k: 2500)   	 0.0462028 	 800       	 380.929   	 0         	 48.3988   	 7.87064   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                 	 0.0419562 	 100       	 2.78068   	 0         	 0.14396   	 19.3157   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 2500, m: 88, k: 50)	 0.0388066 	 800       	 453.531   	 0         	 57.6232   	 7.87064   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 4400, k: 88) 	 0.037827  	 700       	 716.526   	 0         	 90.5428   	 7.91367   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 88, n: 50, r2: 88)                   	 0.0370873 	 700       	 0         	 0         	 183.368   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6900, cols: 50, reductionFactor: 37, colBlockingSize: 12)                  	 0.0315749 	 100       	 112.217   	 0         	 8.80445   	 12.7455   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 6900, m: 88)                                                              	 0.0304195 	 700       	 0         	 0         	 223.562   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r: 138, r2: 138)           	 0.0243733 	 100       	 390.674   	 0         	 23.2728   	 16.7867   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 138, r: 138, r2: 2500, leftOrthog: 0)      	 0.0242639 	 100       	 392.435   	 0         	 35.3806   	 11.0918   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 138, n: 50, r: 138, r2: 50)           	 0.0227169 	 100       	 419.16    	 0         	 45.9253   	 9.12698   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 6900, leftOrthog: 0)        	 0.0169674 	 100       	 203.332   	 0         	 49.0353   	 4.14663   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 88, r: 88, streamingCols: 0)                   	 0.0150956 	 100       	 128.25    	 0         	 23.5233   	 5.45202   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 138, reductionFactor: 32, colBlockingSize: 12)                   	 0.0148173 	 100       	 13.2542   	 0         	 1.40074   	 9.46227   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 50, Qr2: 88)       	 0.00668579	 100       	 0         	 0         	 82.5631   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 2500, m: 88)                                                                       	 0.0063448 	 100       	 0         	 0         	 55.4785   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 50, reductionFactor: 37, colBlockingSize: 12)                    	 0.00576379	 100       	 4.45465   	 0         	 0.693987  	 6.41892   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 4400, k: 50) 	 0.00498151	 100       	 441.633   	 0         	 71.0628   	 6.21469   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 88)                                                              	 0.00494073	 100       	 0         	 0         	 71.2446   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                  	 0.0046071 	 100       	 3.61759   	 0         	 1.31102   	 2.75937   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 0, n: 50, r2: 88)                    	 0.00442892	 100       	 0         	 0         	 79.4777   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 138, r: 50, r2: 50, leftOrthog: 0)         	 0.00288059	 100       	 23.9534   	 0         	 7.13742   	 3.35603   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 88)                                                                                         	 0.00280234	 100       	 0         	 0         	 125.609   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 88, m: 88, fromLeft: 0)                	 0.00157886	 800       	 0         	 0         	 62.7816   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                          	 0.00104252	 200       	 0         	 0         	 7.67371   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 88, m: 50, k: 88)   	 0.00103857	 100       	 74.5641   	 0         	 12.7437   	 5.85106   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50, k: 50)     	 0.000923587	 100       	 27.0684   	 0         	 6.49641   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 50, k: 88)   	 0.00091376	 100       	 48.1527   	 0         	 9.89319   	 4.86726   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 88, n: 50, r2: 1)                                                                                          	 0.000878257	 200       	 0         	 0         	 16.0318   	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                   	 0.000843001	 100       	 0.593119  	 0         	 2.37248   	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 50, r2: 50)              	 0.000840589	 100       	 29.7411   	 0         	 7.13785   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 50, m: 50, k: 50)  	 0.000648695	 100       	 38.5389   	 0         	 9.24934   	 4.16667   
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 88, n: 50, r2: 1)                                                                                 	 0.000592162	 100       	 0.74304   	 0         	 11.8886   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 1, r1low: 0, n: 50, r2: 50)                     	 0.000558584	 100       	 0         	 0         	 7.16096   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 88, n: 50, r2: 1)                    	 0.000547007	 100       	 0         	 0         	 20.1826   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                          	 0.000512584	 100       	 0         	 0         	 7.8036    	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 1, Xr2: 50, Qr1: 1, Qr2: 0)          	 0.000443283	 100       	 0         	 0         	 9.02358   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                            	 0.000433439	 100       	 1.15356   	 0         	 13.8428   	 0.0833333 
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 50)                                                                	 0.000422439	 100       	 0         	 0         	 9.46882   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                 	 0.000394844	 100       	 0.633161  	 0         	 10.1306   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                 	 0.000330692	 100       	 0.75599   	 0         	 12.0958   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 0, m: 4400, k: 50)  	 6.48e-06  	 100       	 0         	 0         	 27160.5   	 0         
Timing statistics:
function                                                                                                                                                                                      	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                        	 6.50427   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_normalized(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                     	 6.50421   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::rightNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                            	 5.0486    	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::rightNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                        	 5.04732   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double]	 4.49347   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                  	 1.81024   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                               	 1.69971   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_leftOrthogonalize(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&) [with T = double]                                   	 1.45552   	 100       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                            	 1.20099   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]           	 1.04235   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.610428  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                           	 0.480365  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                	 0.381635  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                    	 0.209249  	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double]        	 0.149704  	 1800      
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                                       	 0.120808  	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.102414  	 900       
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                       	 0.0623492 	 800       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                	 0.0525435 	 1300      
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double]          	 0.0471264 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                        	 0.0426218 	 1000      
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double]       	 0.0394553 	 900       
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                              	 0.0357826 	 900       
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                	 0.00523948	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                              	 0.00443686	 6400      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                         	 0.00175692	 5200      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                           	 0.00157886	 800       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                       	 0.0013177 	 300       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                         	 0.000843001	 100       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                                                  	 0.000433439	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
orthoX: L, orthoY: L
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 64
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->65  [0m[1;34m1->66  [0m[1;34m2->67  [0m[1;34m3->68  [0m[1;34m4->69  [0m[1;34m5->70  [0m[1;34m6->71  [0m[1;34m7->72  [0m[1;34m8->73  [0m[1;34m9->74  [0m[1;34m10->75  [0m[1;34m11->76  [0m[1;34m12->77  [0m[1;34m13->78  [0m[1;34m14->79  [0m[1;34m15->80  [0m[1;34m16->81  [0m[1;34m17->82  [0m[1;34m18->83  [0m[1;34m19->84  [0m[1;34m20->85  [0m[1;34m21->86  [0m[1;34m22->87  [0m[1;34m23->88  [0m[1;34m24->89  [0m[1;34m25->90  [0m[1;34m26->91  [0m[1;34m27->92  [0m[1;34m28->93  [0m[1;34m29->94  [0m[1;34m30->95  [0m[1;34m31->96  [0m[1;34m32->97  [0m[1;34m33->98  [0m[1;34m34->99  [0m[1;34m35->100  [0m[1;34m36->101  [0m[1;34m37->102  [0m[1;34m38->103  [0m[1;34m39->104  [0m[1;34m40->105  [0m[1;34m41->106  [0m[1;34m42->107  [0m[1;34m43->108  [0m[1;34m44->109  [0m[1;34m45->110  [0m[1;34m46->111  [0m[1;34m47->112  [0m[1;34m48->113  [0m[1;34m49->114  [0m[1;34m50->115  [0m[1;34m51->116  [0m[1;34m52->117  [0m[1;34m53->118  [0m[1;34m54->119  [0m[1;34m55->120  [0m[1;34m56->121  [0m[1;34m57->122  [0m[1;34m58->123  [0m[1;34m59->124  [0m[1;34m60->125  [0m[1;34m61->126  [0m[1;34m62->127  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22387897747328 -> hwthread 65 - OK[0m[1;34m
[0m[1;34m	threadid 22387718350848 -> hwthread 66 - OK[0m[1;34m
[0m[1;34m	threadid 22387517024384 -> hwthread 67 - OK[0m[1;34m
[0m[1;34m	threadid 22387315697920 -> hwthread 68 - OK[0m[1;34m
[0m[1;34m	threadid 22387114371456 -> hwthread 69 - OK[0m[1;34m
[0m[1;34m	threadid 22386913044992 -> hwthread 70 - OK[0m[1;34m
[0m[1;34m	threadid 22386711718528 -> hwthread 71 - OK[0m[1;34m
[0m[1;34m	threadid 22386510392064 -> hwthread 72 - OK[0m[1;34m
[0m[1;34m	threadid 22386309065600 -> hwthread 73 - OK[0m[1;34m
[0m[1;34m	threadid 22386107739136 -> hwthread 74 - OK[0m[1;34m
[0m[1;34m	threadid 22385906412672 -> hwthread 75 - OK[0m[1;34m
[0m[1;34m	threadid 22385705086208 -> hwthread 76 - OK[0m[1;34m
[0m[1;34m	threadid 22385503759744 -> hwthread 77 - OK[0m[1;34m
[0m[1;34m	threadid 22385302433280 -> hwthread 78 - OK[0m[1;34m
[0m[1;34m	threadid 22385101106816 -> hwthread 79 - OK[0m[1;34m
[0m[1;34m	threadid 22384899780352 -> hwthread 80 - OK[0m[1;34m
[0m[1;34m	threadid 22384698453888 -> hwthread 81 - OK[0m[1;34m
[0m[1;34m	threadid 22384497127424 -> hwthread 82 - OK[0m[1;34m
[0m[1;34m	threadid 22384295800960 -> hwthread 83 - OK[0m[1;34m
[0m[1;34m	threadid 22384094474496 -> hwthread 84 - OK[0m[1;34m
[0m[1;34m	threadid 22383893148032 -> hwthread 85 - OK[0m[1;34m
[0m[1;34m	threadid 22383691821568 -> hwthread 86 - OK[0m[1;34m
[0m[1;34m	threadid 22383490495104 -> hwthread 87 - OK[0m[1;34m
[0m[1;34m	threadid 22383289168640 -> hwthread 88 - OK[0m[1;34m
[0m[1;34m	threadid 22383087842176 -> hwthread 89 - OK[0m[1;34m
[0m[1;34m	threadid 22382886515712 -> hwthread 90 - OK[0m[1;34m
[0m[1;34m	threadid 22382685189248 -> hwthread 91 - OK[0m[1;34m
[0m[1;34m	threadid 22382483862784 -> hwthread 92 - OK[0m[1;34m
[0m[1;34m	threadid 22382282536320 -> hwthread 93 - OK[0m[1;34m
[0m[1;34m	threadid 22382081209856 -> hwthread 94 - OK[0m[1;34m
[0m[1;34m	threadid 22381879883392 -> hwthread 95 - OK[0m[1;34m
[0m[1;34m	threadid 22381678556928 -> hwthread 96 - OK[0m[1;34m
[0m[1;34m	threadid 22381477226368 -> hwthread 97 - OK[0m[1;34m
[0m[1;34m	threadid 22381275899904 -> hwthread 98 - OK[0m[1;34m
[0m[1;34m	threadid 22381074573440 -> hwthread 99 - OK[0m[1;34m
[0m[1;34m	threadid 22380873246976 -> hwthread 100 - OK[0m[1;34m
[0m[1;34m	threadid 22380671920512 -> hwthread 101 - OK[0m[1;34m
[0m[1;34m	threadid 22380470594048 -> hwthread 102 - OK[0m[1;34m
[0m[1;34m	threadid 22380269267584 -> hwthread 103 - OK[0m[1;34m
[0m[1;34m	threadid 22380067941120 -> hwthread 104 - OK[0m[1;34m
[0m[1;34m	threadid 22379866614656 -> hwthread 105 - OK[0m[1;34m
[0m[1;34m	threadid 22379665288192 -> hwthread 106 - OK[0m[1;34m
[0m[1;34m	threadid 22379463961728 -> hwthread 107 - OK[0m[1;34m
[0m[1;34m	threadid 22379262635264 -> hwthread 108 - OK[0m[1;34m
[0m[1;34m	threadid 22379061308800 -> hwthread 109 - OK[0m[1;34m
[0m[1;34m	threadid 22378859982336 -> hwthread 110 - OK[0m[1;34m
[0m[1;34m	threadid 22378658655872 -> hwthread 111 - OK[0m[1;34m
[0m[1;34m	threadid 22378457329408 -> hwthread 112 - OK[0m[1;34m
[0m[1;34m	threadid 22378256002944 -> hwthread 113 - OK[0m[1;34m
[0m[1;34m	threadid 22378054676480 -> hwthread 114 - OK[0m[1;34m
[0m[1;34m	threadid 22377853350016 -> hwthread 115 - OK[0m[1;34m
[0m[1;34m	threadid 22377652023552 -> hwthread 116 - OK[0m[1;34m
[0m[1;34m	threadid 22377450697088 -> hwthread 117 - OK[0m[1;34m
[0m[1;34m	threadid 22377249370624 -> hwthread 118 - OK[0m[1;34m
[0m[1;34m	threadid 22377048044160 -> hwthread 119 - OK[0m[1;34m
[0m[1;34m	threadid 22376846717696 -> hwthread 120 - OK[0m[1;34m
[0m[1;34m	threadid 22376645391232 -> hwthread 121 - OK[0m[1;34m
[0m[1;34m	threadid 22376444064768 -> hwthread 122 - OK[0m[1;34m
[0m[1;34m	threadid 22376242738304 -> hwthread 123 - OK[0m[1;34m
[0m[1;34m	threadid 22376041411840 -> hwthread 124 - OK[0m[1;34m
[0m[1;34m	threadid 22375840085376 -> hwthread 125 - OK[0m[1;34m
[0m[1;34m	threadid 22375638758912 -> hwthread 126 - OK[0m[1;34m
[0m[1;34m	threadid 22375437432448 -> hwthread 127 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22387792086784 -> hwthread 64 - OK[0m[1;34m
[0m[1;34m	threadid 22387613488896 -> hwthread 65 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 139, m: 139)                                                               	 1.62234   	 700       	 10.8153   	 0         	 0.200556  	 53.9262   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6950, cols: 139, reductionFactor: 32, colBlockingSize: 12)                 	 1.03241   	 600       	 160.957   	 0         	 4.58132   	 35.1333   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6950, cols: 89, reductionFactor: 37, colBlockingSize: 12)                  	 0.554294  	 700       	 142.802   	 0         	 6.3292    	 22.5624   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 139, n: 50, r: 139, r2: 139)          	 0.424941  	 600       	 379.199   	 0         	 22.0426   	 17.203    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 139, r: 139, r2: 6950, leftOrthog: 0)      	 0.317808  	 600       	 507.026   	 0         	 44.3557   	 11.4309   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 6950, Xcols: 89, r: 89, streamingCols: 0)                   	 0.196696  	 700       	 195.915   	 0         	 35.3334   	 5.54475   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 139, Qr2: 89)      	 0.134543  	 700       	 0         	 0         	 71.1579   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 139, reductionFactor: 32, colBlockingSize: 12)                 	 0.130951  	 100       	 76.0775   	 0         	 2.24097   	 33.9484   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 89, m: 4450, k: 89) 	 0.112171  	 700       	 439.936   	 0         	 39.9402   	 11.0149   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 89, m: 89)                                                                  	 0.107816  	 800       	 6.97455   	 0         	 1.41587   	 4.92599   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 6950, m: 89)                                                                       	 0.0702932 	 700       	 0         	 0         	 98.5552   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 139)                                                                	 0.0682261 	 100       	 4.31897   	 0         	 0.192888  	 22.3911   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 89, reductionFactor: 37, colBlockingSize: 12)                  	 0.0659502 	 100       	 61.6759   	 0         	 2.79509   	 22.0658   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 89, n: 50, r2: 89)                                                                                         	 0.0504187 	 700       	 0         	 0         	 87.9785   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 89, n: 50, r2: 89)                   	 0.0471594 	 700       	 0         	 0         	 146.901   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 89, k: 2500)   	 0.0461505 	 800       	 385.695   	 0         	 48.8073   	 7.9024    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                 	 0.0426265 	 100       	 2.73695   	 0         	 0.141696  	 19.3157   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 4450, k: 89) 	 0.0409594 	 700       	 676.854   	 0         	 85.1771   	 7.94643   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 2500, m: 89, k: 50)	 0.0379331 	 800       	 469.247   	 0         	 59.3803   	 7.9024    
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 6950, m: 89)                                                              	 0.0370089 	 700       	 0         	 0         	 187.192   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6950, cols: 50, reductionFactor: 37, colBlockingSize: 12)                  	 0.0308746 	 100       	 115.594   	 0         	 9.06894   	 12.7461   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r: 139, r2: 139)           	 0.0260969 	 100       	 370.178   	 0         	 21.8975   	 16.905    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 139, r: 139, r2: 2500, leftOrthog: 0)      	 0.0242071 	 100       	 399.076   	 0         	 35.7297   	 11.1693   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 139, n: 50, r: 139, r2: 50)           	 0.0237127 	 100       	 407.398   	 0         	 44.55     	 9.14474   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 6950, leftOrthog: 0)        	 0.017064  	 100       	 203.645   	 0         	 49.1091   	 4.14678   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 89, r: 89, streamingCols: 0)                   	 0.0153338 	 100       	 129.143   	 0         	 23.4233   	 5.51343   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 139, reductionFactor: 32, colBlockingSize: 12)                   	 0.0151547 	 100       	 13.1476   	 0         	 1.38682   	 9.48041   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 2500, m: 89)                                                                       	 0.00677267	 100       	 0         	 0         	 52.5642   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 50, Qr2: 89)       	 0.00655922	 100       	 0         	 0         	 84.7662   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 0, n: 50, r2: 89)                    	 0.00569154	 100       	 0         	 0         	 62.5489   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 89)                                                              	 0.00534619	 100       	 0         	 0         	 66.5895   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 4450, k: 50) 	 0.00507574	 100       	 438.36    	 0         	 70.5316   	 6.21508   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                  	 0.00447367	 100       	 3.72549   	 0         	 1.35012   	 2.75937   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 50, reductionFactor: 37, colBlockingSize: 12)                    	 0.00368154	 100       	 6.97417   	 0         	 1.0865    	 6.41892   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 139, r: 50, r2: 50, leftOrthog: 0)         	 0.00288848	 100       	 24.0611   	 0         	 7.15948   	 3.36074   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 89)                                                                                         	 0.00287481	 100       	 0         	 0         	 123.834   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 89, m: 89, fromLeft: 0)                	 0.00237327	 800       	 0         	 0         	 42.7211   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 89, m: 50, k: 89)   	 0.00115451	 100       	 68.6089   	 0         	 11.6558   	 5.88624   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 50, k: 89)   	 0.000952182	 100       	 46.7348   	 0         	 9.578     	 4.87939   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50, k: 50)     	 0.00093345	 100       	 26.7824   	 0         	 6.42777   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 89, n: 50, r2: 1)                                                                                          	 0.000855863	 200       	 0         	 0         	 16.6382   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 50, r2: 50)              	 0.0008228 	 100       	 30.3841   	 0         	 7.29217   	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                   	 0.000820985	 100       	 0.609025  	 0         	 2.4361    	 0.25      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                          	 0.000800602	 200       	 0         	 0         	 9.99248   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 50, m: 50, k: 50)  	 0.000620933	 100       	 40.262    	 0         	 9.66288   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                          	 0.00055176	 100       	 0         	 0         	 7.24953   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 89, n: 50, r2: 1)                    	 0.000541005	 100       	 0         	 0         	 20.5543   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 1, r1low: 0, n: 50, r2: 50)                     	 0.00053492	 100       	 0         	 0         	 7.47775   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                            	 0.000447176	 100       	 1.11813   	 0         	 13.4175   	 0.0833333 
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 50)                                                                	 0.000444611	 100       	 0         	 0         	 8.99663   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 1, Xr2: 50, Qr1: 1, Qr2: 0)          	 0.000442624	 100       	 0         	 0         	 9.03702   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                 	 0.000388343	 100       	 0.643761  	 0         	 10.3002   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 89, n: 50, r2: 1)                                                                                 	 0.000369003	 100       	 1.20595   	 0         	 19.2952   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                 	 0.000332746	 100       	 0.751324  	 0         	 12.0212   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 0, m: 4450, k: 50)  	 6.84e-06  	 100       	 0         	 0         	 26023.4   	 0         
Timing statistics:
function                                                                                                                                                                                      	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                        	 6.59812   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_normalized(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                     	 6.59805   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::rightNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                            	 5.05605   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::rightNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                        	 5.05481   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double]	 4.50146   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                  	 1.83331   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                               	 1.73319   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_leftOrthogonalize(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&) [with T = double]                                   	 1.54191   	 100       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                            	 1.20999   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]           	 1.09385   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.624416  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                           	 0.475573  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                	 0.361968  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                    	 0.21203   	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double]        	 0.160319  	 1800      
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                                       	 0.141544  	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.11229   	 900       
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                       	 0.0770659 	 800       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                	 0.0555017 	 1300      
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                        	 0.0539268 	 1000      
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double]          	 0.0470839 	 900       
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                              	 0.0427997 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double]       	 0.038554  	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                         	 0.0132215 	 5200      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                	 0.00443447	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                              	 0.00388717	 6400      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                           	 0.00237327	 800       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                       	 0.00109009	 300       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                         	 0.000820985	 100       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                                                  	 0.000447176	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
orthoX: L, orthoY: L
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 64
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->65  [0m[1;34m1->66  [0m[1;34m2->67  [0m[1;34m3->68  [0m[1;34m4->69  [0m[1;34m5->70  [0m[1;34m6->71  [0m[1;34m7->72  [0m[1;34m8->73  [0m[1;34m9->74  [0m[1;34m10->75  [0m[1;34m11->76  [0m[1;34m12->77  [0m[1;34m13->78  [0m[1;34m14->79  [0m[1;34m15->80  [0m[1;34m16->81  [0m[1;34m17->82  [0m[1;34m18->83  [0m[1;34m19->84  [0m[1;34m20->85  [0m[1;34m21->86  [0m[1;34m22->87  [0m[1;34m23->88  [0m[1;34m24->89  [0m[1;34m25->90  [0m[1;34m26->91  [0m[1;34m27->92  [0m[1;34m28->93  [0m[1;34m29->94  [0m[1;34m30->95  [0m[1;34m31->96  [0m[1;34m32->97  [0m[1;34m33->98  [0m[1;34m34->99  [0m[1;34m35->100  [0m[1;34m36->101  [0m[1;34m37->102  [0m[1;34m38->103  [0m[1;34m39->104  [0m[1;34m40->105  [0m[1;34m41->106  [0m[1;34m42->107  [0m[1;34m43->108  [0m[1;34m44->109  [0m[1;34m45->110  [0m[1;34m46->111  [0m[1;34m47->112  [0m[1;34m48->113  [0m[1;34m49->114  [0m[1;34m50->115  [0m[1;34m51->116  [0m[1;34m52->117  [0m[1;34m53->118  [0m[1;34m54->119  [0m[1;34m55->120  [0m[1;34m56->121  [0m[1;34m57->122  [0m[1;34m58->123  [0m[1;34m59->124  [0m[1;34m60->125  [0m[1;34m61->126  [0m[1;34m62->127  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23230290536320 -> hwthread 65 - OK[0m[1;34m
[0m[1;34m	threadid 23230068811776 -> hwthread 66 - OK[0m[1;34m
[0m[1;34m	threadid 23229867485312 -> hwthread 67 - OK[0m[1;34m
[0m[1;34m	threadid 23229666158848 -> hwthread 68 - OK[0m[1;34m
[0m[1;34m	threadid 23229464832384 -> hwthread 69 - OK[0m[1;34m
[0m[1;34m	threadid 23229263505920 -> hwthread 70 - OK[0m[1;34m
[0m[1;34m	threadid 23229062179456 -> hwthread 71 - OK[0m[1;34m
[0m[1;34m	threadid 23228860852992 -> hwthread 72 - OK[0m[1;34m
[0m[1;34m	threadid 23228659526528 -> hwthread 73 - OK[0m[1;34m
[0m[1;34m	threadid 23228458200064 -> hwthread 74 - OK[0m[1;34m
[0m[1;34m	threadid 23228256873600 -> hwthread 75 - OK[0m[1;34m
[0m[1;34m	threadid 23228055547136 -> hwthread 76 - OK[0m[1;34m
[0m[1;34m	threadid 23227854220672 -> hwthread 77 - OK[0m[1;34m
[0m[1;34m	threadid 23227652894208 -> hwthread 78 - OK[0m[1;34m
[0m[1;34m	threadid 23227451567744 -> hwthread 79 - OK[0m[1;34m
[0m[1;34m	threadid 23227250241280 -> hwthread 80 - OK[0m[1;34m
[0m[1;34m	threadid 23227048914816 -> hwthread 81 - OK[0m[1;34m
[0m[1;34m	threadid 23226847588352 -> hwthread 82 - OK[0m[1;34m
[0m[1;34m	threadid 23226646261888 -> hwthread 83 - OK[0m[1;34m
[0m[1;34m	threadid 23226444935424 -> hwthread 84 - OK[0m[1;34m
[0m[1;34m	threadid 23226243608960 -> hwthread 85 - OK[0m[1;34m
[0m[1;34m	threadid 23226042282496 -> hwthread 86 - OK[0m[1;34m
[0m[1;34m	threadid 23225840956032 -> hwthread 87 - OK[0m[1;34m
[0m[1;34m	threadid 23225639629568 -> hwthread 88 - OK[0m[1;34m
[0m[1;34m	threadid 23225438303104 -> hwthread 89 - OK[0m[1;34m
[0m[1;34m	threadid 23225236976640 -> hwthread 90 - OK[0m[1;34m
[0m[1;34m	threadid 23225035650176 -> hwthread 91 - OK[0m[1;34m
[0m[1;34m	threadid 23224834323712 -> hwthread 92 - OK[0m[1;34m
[0m[1;34m	threadid 23224632997248 -> hwthread 93 - OK[0m[1;34m
[0m[1;34m	threadid 23224431670784 -> hwthread 94 - OK[0m[1;34m
[0m[1;34m	threadid 23224230344320 -> hwthread 95 - OK[0m[1;34m
[0m[1;34m	threadid 23224029017856 -> hwthread 96 - OK[0m[1;34m
[0m[1;34m	threadid 23223827687296 -> hwthread 97 - OK[0m[1;34m
[0m[1;34m	threadid 23223626360832 -> hwthread 98 - OK[0m[1;34m
[0m[1;34m	threadid 23223425034368 -> hwthread 99 - OK[0m[1;34m
[0m[1;34m	threadid 23223223707904 -> hwthread 100 - OK[0m[1;34m
[0m[1;34m	threadid 23223022381440 -> hwthread 101 - OK[0m[1;34m
[0m[1;34m	threadid 23222821054976 -> hwthread 102 - OK[0m[1;34m
[0m[1;34m	threadid 23222619728512 -> hwthread 103 - OK[0m[1;34m
[0m[1;34m	threadid 23222418402048 -> hwthread 104 - OK[0m[1;34m
[0m[1;34m	threadid 23222217075584 -> hwthread 105 - OK[0m[1;34m
[0m[1;34m	threadid 23222015749120 -> hwthread 106 - OK[0m[1;34m
[0m[1;34m	threadid 23221814422656 -> hwthread 107 - OK[0m[1;34m
[0m[1;34m	threadid 23221613096192 -> hwthread 108 - OK[0m[1;34m
[0m[1;34m	threadid 23221411769728 -> hwthread 109 - OK[0m[1;34m
[0m[1;34m	threadid 23221210443264 -> hwthread 110 - OK[0m[1;34m
[0m[1;34m	threadid 23221009116800 -> hwthread 111 - OK[0m[1;34m
[0m[1;34m	threadid 23220807790336 -> hwthread 112 - OK[0m[1;34m
[0m[1;34m	threadid 23220606463872 -> hwthread 113 - OK[0m[1;34m
[0m[1;34m	threadid 23220405137408 -> hwthread 114 - OK[0m[1;34m
[0m[1;34m	threadid 23220203810944 -> hwthread 115 - OK[0m[1;34m
[0m[1;34m	threadid 23220002484480 -> hwthread 116 - OK[0m[1;34m
[0m[1;34m	threadid 23219801158016 -> hwthread 117 - OK[0m[1;34m
[0m[1;34m	threadid 23219599831552 -> hwthread 118 - OK[0m[1;34m
[0m[1;34m	threadid 23219398505088 -> hwthread 119 - OK[0m[1;34m
[0m[1;34m	threadid 23219197178624 -> hwthread 120 - OK[0m[1;34m
[0m[1;34m	threadid 23218995852160 -> hwthread 121 - OK[0m[1;34m
[0m[1;34m	threadid 23218794525696 -> hwthread 122 - OK[0m[1;34m
[0m[1;34m	threadid 23218593199232 -> hwthread 123 - OK[0m[1;34m
[0m[1;34m	threadid 23218391872768 -> hwthread 124 - OK[0m[1;34m
[0m[1;34m	threadid 23218190546304 -> hwthread 125 - OK[0m[1;34m
[0m[1;34m	threadid 23217989219840 -> hwthread 126 - OK[0m[1;34m
[0m[1;34m	threadid 23217787893376 -> hwthread 127 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23230184875776 -> hwthread 64 - OK[0m[1;34m
[0m[1;34m	threadid 23230178285312 -> hwthread 65 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 140, m: 140)                                                               	 1.61196   	 700       	 11.1215   	 0         	 0.204759  	 54.3151   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 7000, cols: 140, reductionFactor: 32, colBlockingSize: 12)                 	 1.03978   	 600       	 163.289   	 0         	 4.61451   	 35.386    
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 7000, cols: 90, reductionFactor: 37, colBlockingSize: 12)                  	 0.558493  	 700       	 145.974   	 0         	 6.39822   	 22.8148   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 140, n: 50, r: 140, r2: 140)          	 0.441428  	 600       	 372.971   	 0         	 21.5258   	 17.3267   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 140, r: 140, r2: 7000, leftOrthog: 0)      	 0.314385  	 600       	 523.69    	 0         	 45.4862   	 11.5132   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 7000, Xcols: 90, r: 90, streamingCols: 0)                   	 0.203431  	 700       	 195.103   	 0         	 34.7964   	 5.60698   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 140, Qr2: 90)      	 0.135711  	 700       	 0         	 0         	 71.5933   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 140, reductionFactor: 32, colBlockingSize: 12)                 	 0.132515  	 100       	 76.2651   	 0         	 2.2313    	 34.1797   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 90, m: 4500, k: 90) 	 0.116036  	 700       	 439.779   	 0         	 39.4824   	 11.1386   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 90, m: 90)                                                                  	 0.105394  	 800       	 7.37803   	 0         	 1.48107   	 4.98155   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 7000, m: 90)                                                                       	 0.070539  	 700       	 0         	 0         	 100.03    	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 90, reductionFactor: 37, colBlockingSize: 12)                  	 0.0661759 	 100       	 62.8546   	 0         	 2.81794   	 22.3051   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 140)                                                                	 0.0657993 	 100       	 4.50866   	 0         	 0.201218  	 22.4068   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 90, n: 50, r2: 90)                                                                                         	 0.0542108 	 700       	 0         	 0         	 83.6734   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 7000, m: 90)                                                              	 0.051351  	 700       	 0         	 0         	 137.407   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 90, k: 2500)   	 0.0451359 	 800       	 398.795   	 0         	 50.2659   	 7.93371   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 90, n: 50, r2: 90)                   	 0.0434845 	 700       	 0         	 0         	 162.265   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                 	 0.0430778 	 100       	 2.70828   	 0         	 0.140211  	 19.3157   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 4500, k: 90) 	 0.0390595 	 700       	 725.815   	 0         	 90.9689   	 7.97872   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 2500, m: 90, k: 50)	 0.0383077 	 800       	 469.88    	 0         	 59.2258   	 7.93371   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 7000, cols: 50, reductionFactor: 37, colBlockingSize: 12)                  	 0.0310847 	 100       	 115.639   	 0         	 9.07199   	 12.7468   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r: 140, r2: 140)           	 0.0267422 	 100       	 366.463   	 0         	 21.5271   	 17.0233   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 140, r: 140, r2: 2500, leftOrthog: 0)      	 0.0239716 	 100       	 408.817   	 0         	 36.3497   	 11.2468   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 140, n: 50, r: 140, r2: 50)           	 0.0223402 	 100       	 438.671   	 0         	 47.8778   	 9.1623    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 7000, leftOrthog: 0)        	 0.0190287 	 100       	 183.933   	 0         	 44.354    	 4.14692   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 140, reductionFactor: 32, colBlockingSize: 12)                   	 0.017223  	 100       	 11.7358   	 0         	 1.23556   	 9.49836   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 90, r: 90, streamingCols: 0)                   	 0.0153717 	 100       	 131.735   	 0         	 23.6304   	 5.57483   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 2500, m: 90)                                                                       	 0.00762117	 100       	 0         	 0         	 47.2368   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 4500, k: 50) 	 0.007277  	 100       	 309.194   	 0         	 49.7458   	 6.21547   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 90)                                                              	 0.00713711	 100       	 0         	 0         	 50.4406   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 50, Qr2: 90)       	 0.00698902	 100       	 0         	 0         	 80.1256   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 50, reductionFactor: 37, colBlockingSize: 12)                    	 0.00677113	 100       	 3.79193   	 0         	 0.590744  	 6.41892   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 0, n: 50, r2: 90)                    	 0.00622407	 100       	 0         	 0         	 57.8399   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                  	 0.0044133 	 100       	 3.77645   	 0         	 1.36859   	 2.75937   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 140, r: 50, r2: 50, leftOrthog: 0)         	 0.0029237 	 100       	 23.9423   	 0         	 7.11427   	 3.36538   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 90)                                                                                         	 0.00287469	 100       	 0         	 0         	 125.231   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 90, m: 90, fromLeft: 0)                	 0.00200089	 800       	 0         	 0         	 51.817    	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 90, m: 50, k: 90)   	 0.0011181 	 100       	 72.4444   	 0         	 12.2351   	 5.92105   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 50, k: 90)   	 0.000948913	 100       	 47.4227   	 0         	 9.6953    	 4.8913    
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50, k: 50)     	 0.000917438	 100       	 27.2498   	 0         	 6.53995   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 90, n: 50, r2: 1)                                                                                          	 0.000867899	 200       	 0         	 0         	 16.5918   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 50, r2: 50)              	 0.000850943	 100       	 29.3792   	 0         	 7.051     	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                   	 0.000832471	 100       	 0.600622  	 0         	 2.40249   	 0.25      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                          	 0.000799239	 200       	 0         	 0         	 10.0095   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 50, m: 50, k: 50)  	 0.000640841	 100       	 39.0112   	 0         	 9.3627    	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                          	 0.000569103	 100       	 0         	 0         	 7.0286    	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 90, n: 50, r2: 1)                    	 0.000540932	 100       	 0         	 0         	 20.705    	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 1, r1low: 0, n: 50, r2: 50)                     	 0.000516378	 100       	 0         	 0         	 7.74626   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 1, Xr2: 50, Qr1: 1, Qr2: 0)          	 0.000453135	 100       	 0         	 0         	 8.82739   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 50)                                                                	 0.000431544	 100       	 0         	 0         	 9.26904   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                            	 0.000423657	 100       	 1.1802    	 0         	 14.1624   	 0.0833333 
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                 	 0.000390387	 100       	 0.64039   	 0         	 10.2462   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 90, n: 50, r2: 1)                                                                                 	 0.000360623	 100       	 1.24784   	 0         	 19.9654   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                 	 0.000327694	 100       	 0.762907  	 0         	 12.2065   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 0, m: 4500, k: 50)  	 6.94e-06  	 100       	 0         	 0         	 25936.6   	 0         
Timing statistics:
function                                                                                                                                                                                      	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                        	 6.68504   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_normalized(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                     	 6.68496   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::rightNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                            	 5.10768   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::rightNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                        	 5.10643   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double]	 4.53325   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                  	 1.85204   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                               	 1.72084   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_leftOrthogonalize(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&) [with T = double]                                   	 1.57718   	 100       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                            	 1.22122   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]           	 1.12067   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.631973  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                           	 0.491361  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                	 0.360309  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                    	 0.218803  	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double]        	 0.164446  	 1800      
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                                       	 0.143153  	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.109807  	 900       
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                       	 0.0781601 	 800       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                	 0.0593217 	 1300      
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                              	 0.0589197 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                        	 0.0507659 	 1000      
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double]          	 0.0460534 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double]       	 0.0389485 	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                         	 0.00826232	 5200      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                	 0.00585133	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                              	 0.00385701	 6400      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                           	 0.00200089	 800       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                       	 0.0010787 	 300       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                         	 0.000832471	 100       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                                                  	 0.000423657	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
orthoX: L, orthoY: L
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 64
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->65  [0m[1;34m1->66  [0m[1;34m2->67  [0m[1;34m3->68  [0m[1;34m4->69  [0m[1;34m5->70  [0m[1;34m6->71  [0m[1;34m7->72  [0m[1;34m8->73  [0m[1;34m9->74  [0m[1;34m10->75  [0m[1;34m11->76  [0m[1;34m12->77  [0m[1;34m13->78  [0m[1;34m14->79  [0m[1;34m15->80  [0m[1;34m16->81  [0m[1;34m17->82  [0m[1;34m18->83  [0m[1;34m19->84  [0m[1;34m20->85  [0m[1;34m21->86  [0m[1;34m22->87  [0m[1;34m23->88  [0m[1;34m24->89  [0m[1;34m25->90  [0m[1;34m26->91  [0m[1;34m27->92  [0m[1;34m28->93  [0m[1;34m29->94  [0m[1;34m30->95  [0m[1;34m31->96  [0m[1;34m32->97  [0m[1;34m33->98  [0m[1;34m34->99  [0m[1;34m35->100  [0m[1;34m36->101  [0m[1;34m37->102  [0m[1;34m38->103  [0m[1;34m39->104  [0m[1;34m40->105  [0m[1;34m41->106  [0m[1;34m42->107  [0m[1;34m43->108  [0m[1;34m44->109  [0m[1;34m45->110  [0m[1;34m46->111  [0m[1;34m47->112  [0m[1;34m48->113  [0m[1;34m49->114  [0m[1;34m50->115  [0m[1;34m51->116  [0m[1;34m52->117  [0m[1;34m53->118  [0m[1;34m54->119  [0m[1;34m55->120  [0m[1;34m56->121  [0m[1;34m57->122  [0m[1;34m58->123  [0m[1;34m59->124  [0m[1;34m60->125  [0m[1;34m61->126  [0m[1;34m62->127  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23454135097216 -> hwthread 65 - OK[0m[1;34m
[0m[1;34m	threadid 23453943982080 -> hwthread 66 - OK[0m[1;34m
[0m[1;34m	threadid 23453742655616 -> hwthread 67 - OK[0m[1;34m
[0m[1;34m	threadid 23453541329152 -> hwthread 68 - OK[0m[1;34m
[0m[1;34m	threadid 23453340002688 -> hwthread 69 - OK[0m[1;34m
[0m[1;34m	threadid 23453138676224 -> hwthread 70 - OK[0m[1;34m
[0m[1;34m	threadid 23452937349760 -> hwthread 71 - OK[0m[1;34m
[0m[1;34m	threadid 23452736023296 -> hwthread 72 - OK[0m[1;34m
[0m[1;34m	threadid 23452534696832 -> hwthread 73 - OK[0m[1;34m
[0m[1;34m	threadid 23452333370368 -> hwthread 74 - OK[0m[1;34m
[0m[1;34m	threadid 23452132043904 -> hwthread 75 - OK[0m[1;34m
[0m[1;34m	threadid 23451930717440 -> hwthread 76 - OK[0m[1;34m
[0m[1;34m	threadid 23451729390976 -> hwthread 77 - OK[0m[1;34m
[0m[1;34m	threadid 23451528064512 -> hwthread 78 - OK[0m[1;34m
[0m[1;34m	threadid 23451326738048 -> hwthread 79 - OK[0m[1;34m
[0m[1;34m	threadid 23451125411584 -> hwthread 80 - OK[0m[1;34m
[0m[1;34m	threadid 23450924085120 -> hwthread 81 - OK[0m[1;34m
[0m[1;34m	threadid 23450722758656 -> hwthread 82 - OK[0m[1;34m
[0m[1;34m	threadid 23450521432192 -> hwthread 83 - OK[0m[1;34m
[0m[1;34m	threadid 23450320105728 -> hwthread 84 - OK[0m[1;34m
[0m[1;34m	threadid 23450118779264 -> hwthread 85 - OK[0m[1;34m
[0m[1;34m	threadid 23449917452800 -> hwthread 86 - OK[0m[1;34m
[0m[1;34m	threadid 23449716126336 -> hwthread 87 - OK[0m[1;34m
[0m[1;34m	threadid 23449514799872 -> hwthread 88 - OK[0m[1;34m
[0m[1;34m	threadid 23449313473408 -> hwthread 89 - OK[0m[1;34m
[0m[1;34m	threadid 23449112146944 -> hwthread 90 - OK[0m[1;34m
[0m[1;34m	threadid 23448910820480 -> hwthread 91 - OK[0m[1;34m
[0m[1;34m	threadid 23448709494016 -> hwthread 92 - OK[0m[1;34m
[0m[1;34m	threadid 23448508167552 -> hwthread 93 - OK[0m[1;34m
[0m[1;34m	threadid 23448306841088 -> hwthread 94 - OK[0m[1;34m
[0m[1;34m	threadid 23448105514624 -> hwthread 95 - OK[0m[1;34m
[0m[1;34m	threadid 23447904188160 -> hwthread 96 - OK[0m[1;34m
[0m[1;34m	threadid 23447702857600 -> hwthread 97 - OK[0m[1;34m
[0m[1;34m	threadid 23447501531136 -> hwthread 98 - OK[0m[1;34m
[0m[1;34m	threadid 23447300204672 -> hwthread 99 - OK[0m[1;34m
[0m[1;34m	threadid 23447098878208 -> hwthread 100 - OK[0m[1;34m
[0m[1;34m	threadid 23446897551744 -> hwthread 101 - OK[0m[1;34m
[0m[1;34m	threadid 23446696225280 -> hwthread 102 - OK[0m[1;34m
[0m[1;34m	threadid 23446494898816 -> hwthread 103 - OK[0m[1;34m
[0m[1;34m	threadid 23446293572352 -> hwthread 104 - OK[0m[1;34m
[0m[1;34m	threadid 23446092245888 -> hwthread 105 - OK[0m[1;34m
[0m[1;34m	threadid 23445890919424 -> hwthread 106 - OK[0m[1;34m
[0m[1;34m	threadid 23445689592960 -> hwthread 107 - OK[0m[1;34m
[0m[1;34m	threadid 23445488266496 -> hwthread 108 - OK[0m[1;34m
[0m[1;34m	threadid 23445286940032 -> hwthread 109 - OK[0m[1;34m
[0m[1;34m	threadid 23445085613568 -> hwthread 110 - OK[0m[1;34m
[0m[1;34m	threadid 23444884287104 -> hwthread 111 - OK[0m[1;34m
[0m[1;34m	threadid 23444682960640 -> hwthread 112 - OK[0m[1;34m
[0m[1;34m	threadid 23444481634176 -> hwthread 113 - OK[0m[1;34m
[0m[1;34m	threadid 23444280307712 -> hwthread 114 - OK[0m[1;34m
[0m[1;34m	threadid 23444078981248 -> hwthread 115 - OK[0m[1;34m
[0m[1;34m	threadid 23443877654784 -> hwthread 116 - OK[0m[1;34m
[0m[1;34m	threadid 23443676328320 -> hwthread 117 - OK[0m[1;34m
[0m[1;34m	threadid 23443475001856 -> hwthread 118 - OK[0m[1;34m
[0m[1;34m	threadid 23443273675392 -> hwthread 119 - OK[0m[1;34m
[0m[1;34m	threadid 23443072348928 -> hwthread 120 - OK[0m[1;34m
[0m[1;34m	threadid 23442871022464 -> hwthread 121 - OK[0m[1;34m
[0m[1;34m	threadid 23442669696000 -> hwthread 122 - OK[0m[1;34m
[0m[1;34m	threadid 23442468369536 -> hwthread 123 - OK[0m[1;34m
[0m[1;34m	threadid 23442267043072 -> hwthread 124 - OK[0m[1;34m
[0m[1;34m	threadid 23442065716608 -> hwthread 125 - OK[0m[1;34m
[0m[1;34m	threadid 23441864390144 -> hwthread 126 - OK[0m[1;34m
[0m[1;34m	threadid 23441663063680 -> hwthread 127 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23454029436672 -> hwthread 64 - OK[0m[1;34m
[0m[1;34m	threadid 23454022846208 -> hwthread 65 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 141, m: 141)                                                               	 1.67907   	 700       	 10.9074   	 0         	 0.19939   	 54.704    
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 7050, cols: 141, reductionFactor: 32, colBlockingSize: 12)                 	 1.05799   	 600       	 163.942   	 0         	 4.6001    	 35.6388   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 7050, cols: 91, reductionFactor: 37, colBlockingSize: 12)                  	 0.578978  	 700       	 144.984   	 0         	 6.2853    	 23.0671   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 141, n: 50, r: 141, r2: 141)          	 0.456671  	 600       	 368.303   	 0         	 21.1056   	 17.4505   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 141, r: 141, r2: 7050, leftOrthog: 0)      	 0.331337  	 600       	 507.62    	 0         	 43.7777   	 11.5954   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 7050, Xcols: 91, r: 91, streamingCols: 0)                   	 0.20789   	 700       	 196.578   	 0         	 34.6748   	 5.66921   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 141, Qr2: 91)      	 0.138821  	 700       	 0         	 0         	 71.0219   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 141, reductionFactor: 32, colBlockingSize: 12)                 	 0.137291  	 100       	 74.6672   	 0         	 2.16988   	 34.4108   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 91, m: 4550, k: 91) 	 0.115882  	 700       	 455.204   	 0         	 40.4181   	 11.2624   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 91, m: 91)                                                                  	 0.111242  	 800       	 7.22578   	 0         	 1.43451   	 5.0371    
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 7050, m: 91)                                                                       	 0.0713711 	 700       	 0         	 0         	 100.676   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 91, reductionFactor: 37, colBlockingSize: 12)                  	 0.0712281 	 100       	 59.7012   	 0         	 2.64818   	 22.5443   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 141)                                                                	 0.0642953 	 100       	 4.64524   	 0         	 0.207169  	 22.4224   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 91, n: 50, r2: 91)                                                                                         	 0.0545001 	 700       	 0         	 0         	 85.089    	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 91, k: 2500)   	 0.0489476 	 800       	 371.826   	 0         	 46.685    	 7.96457   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 91, n: 50, r2: 91)                   	 0.0432682 	 700       	 0         	 0         	 166.065   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                 	 0.0418433 	 100       	 2.78818   	 0         	 0.144348  	 19.3157   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 7050, m: 91)                                                              	 0.041279  	 700       	 0         	 0         	 174.068   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 2500, m: 91, k: 50)	 0.0407585 	 800       	 446.533   	 0         	 56.0649   	 7.96457   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 4550, k: 91) 	 0.0405548 	 700       	 714.676   	 0         	 89.2167   	 8.01056   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r: 141, r2: 141)           	 0.0310368 	 100       	 320.281   	 0         	 18.6844   	 17.1416   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 7050, cols: 50, reductionFactor: 37, colBlockingSize: 12)                  	 0.0301706 	 100       	 119.993   	 0         	 9.41313   	 12.7474   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 141, r: 141, r2: 2500, leftOrthog: 0)      	 0.0272979 	 100       	 364.148   	 0         	 32.1566   	 11.3242   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 141, n: 50, r: 141, r2: 50)           	 0.022374  	 100       	 444.288   	 0         	 48.3991   	 9.17969   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 7050, leftOrthog: 0)        	 0.0198838 	 100       	 177.28    	 0         	 42.7484   	 4.14706   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 91, r: 91, streamingCols: 0)                   	 0.0156322 	 100       	 132.435   	 0         	 23.4971   	 5.63621   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 141, reductionFactor: 32, colBlockingSize: 12)                   	 0.0152921 	 100       	 13.4071   	 0         	 1.40888   	 9.51612   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 2500, m: 91)                                                                       	 0.00731408	 100       	 0         	 0         	 49.767    	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 50, Qr2: 91)       	 0.00671805	 100       	 0         	 0         	 83.953    	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 91)                                                              	 0.00595388	 100       	 0         	 0         	 61.1366   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 0, n: 50, r2: 91)                    	 0.00566155	 100       	 0         	 0         	 64.2933   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 4550, k: 50) 	 0.0048588 	 100       	 468.223   	 0         	 75.3272   	 6.21585   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                  	 0.00448832	 100       	 3.71333   	 0         	 1.34572   	 2.75937   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 50, reductionFactor: 37, colBlockingSize: 12)                    	 0.00345267	 100       	 7.43647   	 0         	 1.15852   	 6.41892   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 141, r: 50, r2: 50, leftOrthog: 0)         	 0.00298831	 100       	 23.5919   	 0         	 7.00061   	 3.36998   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 91)                                                                                         	 0.00284744	 100       	 0         	 0         	 127.834   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 91, m: 91, fromLeft: 0)                	 0.00243506	 800       	 0         	 0         	 43.5295   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 91, m: 50, k: 91)   	 0.00112674	 100       	 73.495    	 0         	 12.3407   	 5.9555    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 50, r2: 50)              	 0.00101008	 100       	 24.7505   	 0         	 5.94011   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50, k: 50)     	 0.000952031	 100       	 26.2596   	 0         	 6.30232   	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                   	 0.000941291	 100       	 0.531185  	 0         	 2.12474   	 0.25      
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 50, k: 91)   	 0.000932481	 100       	 48.7946   	 0         	 9.95195   	 4.90302   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 91, n: 50, r2: 1)                                                                                          	 0.000823372	 200       	 0         	 0         	 17.6834   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                          	 0.00079126	 200       	 0         	 0         	 10.1105   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 50, m: 50, k: 50)  	 0.000658749	 100       	 37.9507   	 0         	 9.10817   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 91, n: 50, r2: 1)                    	 0.000555694	 100       	 0         	 0         	 20.2989   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 1, r1low: 0, n: 50, r2: 50)                     	 0.000530594	 100       	 0         	 0         	 7.53872   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                          	 0.000501456	 100       	 0         	 0         	 7.97677   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                            	 0.000449722	 100       	 1.1118    	 0         	 13.3416   	 0.0833333 
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 1, Xr2: 50, Qr1: 1, Qr2: 0)          	 0.000432991	 100       	 0         	 0         	 9.23807   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 50)                                                                	 0.000413591	 100       	 0         	 0         	 9.67139   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                 	 0.000404967	 100       	 0.617334  	 0         	 9.87735   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 91, n: 50, r2: 1)                                                                                 	 0.000368968	 100       	 1.23317   	 0         	 19.7307   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                 	 0.000336325	 100       	 0.743329  	 0         	 11.8933   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 0, m: 4550, k: 50)  	 6.041e-06 	 100       	 0         	 0         	 30127.5   	 0         
Timing statistics:
function                                                                                                                                                                                      	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                        	 6.85772   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_normalized(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                     	 6.85766   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::rightNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                            	 5.24455   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::rightNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                        	 5.24317   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double]	 4.64544   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                  	 1.89441   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                               	 1.78521   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_leftOrthogonalize(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&) [with T = double]                                   	 1.61302   	 100       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                            	 1.24136   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]           	 1.14599   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.654163  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                           	 0.511092  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                	 0.381507  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                    	 0.223523  	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double]        	 0.163361  	 1800      
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                                       	 0.145972  	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.11573   	 900       
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                       	 0.0786852 	 800       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                	 0.0594636 	 1300      
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                        	 0.0500161 	 1000      
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double]          	 0.0498997 	 900       
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                              	 0.0476464 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double]       	 0.0414172 	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                         	 0.0122655 	 5200      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                	 0.00599185	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                              	 0.00444149	 6400      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                           	 0.00243506	 800       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                       	 0.00111026	 300       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                         	 0.000941291	 100       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                                                  	 0.000449722	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
orthoX: L, orthoY: L
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 64
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->65  [0m[1;34m1->66  [0m[1;34m2->67  [0m[1;34m3->68  [0m[1;34m4->69  [0m[1;34m5->70  [0m[1;34m6->71  [0m[1;34m7->72  [0m[1;34m8->73  [0m[1;34m9->74  [0m[1;34m10->75  [0m[1;34m11->76  [0m[1;34m12->77  [0m[1;34m13->78  [0m[1;34m14->79  [0m[1;34m15->80  [0m[1;34m16->81  [0m[1;34m17->82  [0m[1;34m18->83  [0m[1;34m19->84  [0m[1;34m20->85  [0m[1;34m21->86  [0m[1;34m22->87  [0m[1;34m23->88  [0m[1;34m24->89  [0m[1;34m25->90  [0m[1;34m26->91  [0m[1;34m27->92  [0m[1;34m28->93  [0m[1;34m29->94  [0m[1;34m30->95  [0m[1;34m31->96  [0m[1;34m32->97  [0m[1;34m33->98  [0m[1;34m34->99  [0m[1;34m35->100  [0m[1;34m36->101  [0m[1;34m37->102  [0m[1;34m38->103  [0m[1;34m39->104  [0m[1;34m40->105  [0m[1;34m41->106  [0m[1;34m42->107  [0m[1;34m43->108  [0m[1;34m44->109  [0m[1;34m45->110  [0m[1;34m46->111  [0m[1;34m47->112  [0m[1;34m48->113  [0m[1;34m49->114  [0m[1;34m50->115  [0m[1;34m51->116  [0m[1;34m52->117  [0m[1;34m53->118  [0m[1;34m54->119  [0m[1;34m55->120  [0m[1;34m56->121  [0m[1;34m57->122  [0m[1;34m58->123  [0m[1;34m59->124  [0m[1;34m60->125  [0m[1;34m61->126  [0m[1;34m62->127  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23241226065792 -> hwthread 65 - OK[0m[1;34m
[0m[1;34m	threadid 23241007556608 -> hwthread 66 - OK[0m[1;34m
[0m[1;34m	threadid 23240806230144 -> hwthread 67 - OK[0m[1;34m
[0m[1;34m	threadid 23240604903680 -> hwthread 68 - OK[0m[1;34m
[0m[1;34m	threadid 23240403577216 -> hwthread 69 - OK[0m[1;34m
[0m[1;34m	threadid 23240202250752 -> hwthread 70 - OK[0m[1;34m
[0m[1;34m	threadid 23240000924288 -> hwthread 71 - OK[0m[1;34m
[0m[1;34m	threadid 23239799597824 -> hwthread 72 - OK[0m[1;34m
[0m[1;34m	threadid 23239598271360 -> hwthread 73 - OK[0m[1;34m
[0m[1;34m	threadid 23239396944896 -> hwthread 74 - OK[0m[1;34m
[0m[1;34m	threadid 23239195618432 -> hwthread 75 - OK[0m[1;34m
[0m[1;34m	threadid 23238994291968 -> hwthread 76 - OK[0m[1;34m
[0m[1;34m	threadid 23238792965504 -> hwthread 77 - OK[0m[1;34m
[0m[1;34m	threadid 23238591639040 -> hwthread 78 - OK[0m[1;34m
[0m[1;34m	threadid 23238390312576 -> hwthread 79 - OK[0m[1;34m
[0m[1;34m	threadid 23238188986112 -> hwthread 80 - OK[0m[1;34m
[0m[1;34m	threadid 23237987659648 -> hwthread 81 - OK[0m[1;34m
[0m[1;34m	threadid 23237786333184 -> hwthread 82 - OK[0m[1;34m
[0m[1;34m	threadid 23237585006720 -> hwthread 83 - OK[0m[1;34m
[0m[1;34m	threadid 23237383680256 -> hwthread 84 - OK[0m[1;34m
[0m[1;34m	threadid 23237182353792 -> hwthread 85 - OK[0m[1;34m
[0m[1;34m	threadid 23236981027328 -> hwthread 86 - OK[0m[1;34m
[0m[1;34m	threadid 23236779700864 -> hwthread 87 - OK[0m[1;34m
[0m[1;34m	threadid 23236578374400 -> hwthread 88 - OK[0m[1;34m
[0m[1;34m	threadid 23236377047936 -> hwthread 89 - OK[0m[1;34m
[0m[1;34m	threadid 23236175721472 -> hwthread 90 - OK[0m[1;34m
[0m[1;34m	threadid 23235974395008 -> hwthread 91 - OK[0m[1;34m
[0m[1;34m	threadid 23235773068544 -> hwthread 92 - OK[0m[1;34m
[0m[1;34m	threadid 23235571742080 -> hwthread 93 - OK[0m[1;34m
[0m[1;34m	threadid 23235370415616 -> hwthread 94 - OK[0m[1;34m
[0m[1;34m	threadid 23235169089152 -> hwthread 95 - OK[0m[1;34m
[0m[1;34m	threadid 23234967762688 -> hwthread 96 - OK[0m[1;34m
[0m[1;34m	threadid 23234766432128 -> hwthread 97 - OK[0m[1;34m
[0m[1;34m	threadid 23234565105664 -> hwthread 98 - OK[0m[1;34m
[0m[1;34m	threadid 23234363779200 -> hwthread 99 - OK[0m[1;34m
[0m[1;34m	threadid 23234162452736 -> hwthread 100 - OK[0m[1;34m
[0m[1;34m	threadid 23233961126272 -> hwthread 101 - OK[0m[1;34m
[0m[1;34m	threadid 23233759799808 -> hwthread 102 - OK[0m[1;34m
[0m[1;34m	threadid 23233558473344 -> hwthread 103 - OK[0m[1;34m
[0m[1;34m	threadid 23233357146880 -> hwthread 104 - OK[0m[1;34m
[0m[1;34m	threadid 23233155820416 -> hwthread 105 - OK[0m[1;34m
[0m[1;34m	threadid 23232954493952 -> hwthread 106 - OK[0m[1;34m
[0m[1;34m	threadid 23232753167488 -> hwthread 107 - OK[0m[1;34m
[0m[1;34m	threadid 23232551841024 -> hwthread 108 - OK[0m[1;34m
[0m[1;34m	threadid 23232350514560 -> hwthread 109 - OK[0m[1;34m
[0m[1;34m	threadid 23232149188096 -> hwthread 110 - OK[0m[1;34m
[0m[1;34m	threadid 23231947861632 -> hwthread 111 - OK[0m[1;34m
[0m[1;34m	threadid 23231746535168 -> hwthread 112 - OK[0m[1;34m
[0m[1;34m	threadid 23231545208704 -> hwthread 113 - OK[0m[1;34m
[0m[1;34m	threadid 23231343882240 -> hwthread 114 - OK[0m[1;34m
[0m[1;34m	threadid 23231142555776 -> hwthread 115 - OK[0m[1;34m
[0m[1;34m	threadid 23230941229312 -> hwthread 116 - OK[0m[1;34m
[0m[1;34m	threadid 23230739902848 -> hwthread 117 - OK[0m[1;34m
[0m[1;34m	threadid 23230538576384 -> hwthread 118 - OK[0m[1;34m
[0m[1;34m	threadid 23230337249920 -> hwthread 119 - OK[0m[1;34m
[0m[1;34m	threadid 23230135923456 -> hwthread 120 - OK[0m[1;34m
[0m[1;34m	threadid 23229934596992 -> hwthread 121 - OK[0m[1;34m
[0m[1;34m	threadid 23229733270528 -> hwthread 122 - OK[0m[1;34m
[0m[1;34m	threadid 23229531944064 -> hwthread 123 - OK[0m[1;34m
[0m[1;34m	threadid 23229330617600 -> hwthread 124 - OK[0m[1;34m
[0m[1;34m	threadid 23229129291136 -> hwthread 125 - OK[0m[1;34m
[0m[1;34m	threadid 23228927964672 -> hwthread 126 - OK[0m[1;34m
[0m[1;34m	threadid 23228726638208 -> hwthread 127 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23241120405248 -> hwthread 64 - OK[0m[1;34m
[0m[1;34m	threadid 23241113814784 -> hwthread 65 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 142, m: 142)                                                               	 1.67704   	 700       	 11.1547   	 0         	 0.20247   	 55.0929   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 7100, cols: 142, reductionFactor: 32, colBlockingSize: 12)                 	 1.06227   	 600       	 166.781   	 0         	 4.64681   	 35.8915   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 7100, cols: 92, reductionFactor: 37, colBlockingSize: 12)                  	 0.579041  	 700       	 149.223   	 0         	 6.39906   	 23.3195   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 142, n: 50, r: 142, r2: 142)          	 0.454528  	 600       	 377.968   	 0         	 21.5069   	 17.5743   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 142, r: 142, r2: 7100, leftOrthog: 0)      	 0.332547  	 600       	 516.61    	 0         	 44.2393   	 11.6776   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 7100, Xcols: 92, r: 92, streamingCols: 0)                   	 0.210117  	 700       	 200.203   	 0         	 34.9307   	 5.73143   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 142, Qr2: 92)      	 0.153286  	 700       	 0         	 0         	 65.2628   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 142, reductionFactor: 32, colBlockingSize: 12)                 	 0.136191  	 100       	 76.3417   	 0         	 2.20375   	 34.6417   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 92, m: 4600, k: 92) 	 0.129201  	 700       	 421.886   	 0         	 37.0526   	 11.3861   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 92, m: 92)                                                                  	 0.108254  	 800       	 7.6727    	 0         	 1.50662   	 5.09266   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 7100, m: 92)                                                                       	 0.081859  	 700       	 0         	 0         	 89.3712   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 92, reductionFactor: 37, colBlockingSize: 12)                  	 0.0687045 	 100       	 63.2619   	 0         	 2.77669   	 22.7832   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 142)                                                                	 0.0671413 	 100       	 4.47812   	 0         	 0.199579  	 22.4378   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 92, n: 50, r2: 92)                                                                                         	 0.0565773 	 700       	 0         	 0         	 83.7763   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 92, k: 2500)   	 0.0486257 	 800       	 378.401   	 0         	 47.3297   	 7.99499   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 92, n: 50, r2: 92)                   	 0.046163  	 700       	 0         	 0         	 158.478   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                 	 0.0428173 	 100       	 2.72476   	 0         	 0.141065  	 19.3157   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 4600, k: 92) 	 0.0427599 	 700       	 692.799   	 0         	 86.1481   	 8.04196   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 2500, m: 92, k: 50)	 0.0395305 	 800       	 465.463   	 0         	 58.2194   	 7.99499   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 7100, m: 92)                                                              	 0.0387556 	 700       	 0         	 0         	 188.768   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 7100, cols: 50, reductionFactor: 37, colBlockingSize: 12)                  	 0.0307283 	 100       	 118.651   	 0         	 9.30739   	 12.7481   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r: 142, r2: 142)           	 0.0264768 	 100       	 380.787   	 0         	 22.062    	 17.2598   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 142, r: 142, r2: 2500, leftOrthog: 0)      	 0.0252455 	 100       	 399.358   	 0         	 35.0265   	 11.4016   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 142, n: 50, r: 142, r2: 50)           	 0.0236544 	 100       	 426.22    	 0         	 46.3439   	 9.19689   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 7100, leftOrthog: 0)        	 0.0182992 	 100       	 193.998   	 0         	 46.7781   	 4.1472    
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 142, reductionFactor: 32, colBlockingSize: 12)                   	 0.0162328 	 100       	 12.81     	 0         	 1.34365   	 9.53369   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 92, r: 92, streamingCols: 0)                   	 0.0159338 	 100       	 132.799   	 0         	 23.308    	 5.69758   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 2500, m: 92)                                                                       	 0.00796146	 100       	 0         	 0         	 46.2227   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 50, Qr2: 92)       	 0.00654535	 100       	 0         	 0         	 86.7792   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 0, n: 50, r2: 92)                    	 0.00620155	 100       	 0         	 0         	 59.34     	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 4600, k: 50) 	 0.00611971	 100       	 375.835   	 0         	 60.4604   	 6.21622   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 92)                                                              	 0.00565483	 100       	 0         	 0         	 65.0771   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                  	 0.00452626	 100       	 3.6822    	 0         	 1.33444   	 2.75937   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 50, reductionFactor: 37, colBlockingSize: 12)                    	 0.00373288	 100       	 6.87825   	 0         	 1.07156   	 6.41892   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 142, r: 50, r2: 50, leftOrthog: 0)         	 0.00322216	 100       	 22.0349   	 0         	 6.52979   	 3.37452   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 92)                                                                                         	 0.00303607	 100       	 0         	 0         	 121.209   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 92, m: 92, fromLeft: 0)                	 0.00164245	 800       	 0         	 0         	 65.962    	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 92, m: 50, k: 92)   	 0.00111064	 100       	 76.2083   	 0         	 12.7235   	 5.98958   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 50, k: 92)   	 0.000979004	 100       	 46.9865   	 0         	 9.56074   	 4.91453   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                   	 0.000949883	 100       	 0.526381  	 0         	 2.10552   	 0.25      
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50, k: 50)     	 0.000947943	 100       	 26.3729   	 0         	 6.32949   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 92, n: 50, r2: 1)                                                                                          	 0.00087726	 200       	 0         	 0         	 16.7795   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 50, r2: 50)              	 0.000847017	 100       	 29.5153   	 0         	 7.08368   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                          	 0.000830946	 200       	 0         	 0         	 9.62758   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 50, m: 50, k: 50)  	 0.00062976	 100       	 39.6977   	 0         	 9.52744   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 92, n: 50, r2: 1)                    	 0.000570476	 100       	 0         	 0         	 19.9132   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 1, r1low: 0, n: 50, r2: 50)                     	 0.000509449	 100       	 0         	 0         	 7.85162   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                          	 0.000504534	 100       	 0         	 0         	 7.92811   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                            	 0.000446572	 100       	 1.11964   	 0         	 13.4357   	 0.0833333 
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 50)                                                                	 0.000432794	 100       	 0         	 0         	 9.24227   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 1, Xr2: 50, Qr1: 1, Qr2: 0)          	 0.000421649	 100       	 0         	 0         	 9.48656   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                 	 0.00040324	 100       	 0.619978  	 0         	 9.91965   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 92, n: 50, r2: 1)                                                                                 	 0.000388366	 100       	 1.18445   	 0         	 18.9512   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                 	 0.000325205	 100       	 0.768746  	 0         	 12.2999   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 0, m: 4600, k: 50)  	 6.87e-06  	 100       	 0         	 0         	 26783.1   	 0         
Timing statistics:
function                                                                                                                                                                                      	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                        	 6.97216   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_normalized(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                     	 6.9721    	 100       
<PITTS::TensorTrain<double>> :: T PITTS::rightNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                            	 5.3158    	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::rightNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                        	 5.31442   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double]	 4.68209   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                  	 1.8969    	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                               	 1.787     	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_leftOrthogonalize(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&) [with T = double]                                   	 1.6562    	 100       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                            	 1.24603   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]           	 1.15573   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.652037  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                           	 0.505506  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                	 0.379314  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                    	 0.226051  	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double]        	 0.180177  	 1800      
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                                       	 0.160253  	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.11278   	 900       
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                       	 0.0898205 	 800       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                	 0.0618261 	 1300      
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                        	 0.0534445 	 1000      
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double]          	 0.0495736 	 900       
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                              	 0.0448432 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double]       	 0.0401603 	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                         	 0.0142674 	 5200      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                	 0.0064211 	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                              	 0.00420473	 6400      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                           	 0.00164245	 800       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                       	 0.00111681	 300       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                         	 0.000949883	 100       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                                                  	 0.000446572	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
orthoX: L, orthoY: L
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 64
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->65  [0m[1;34m1->66  [0m[1;34m2->67  [0m[1;34m3->68  [0m[1;34m4->69  [0m[1;34m5->70  [0m[1;34m6->71  [0m[1;34m7->72  [0m[1;34m8->73  [0m[1;34m9->74  [0m[1;34m10->75  [0m[1;34m11->76  [0m[1;34m12->77  [0m[1;34m13->78  [0m[1;34m14->79  [0m[1;34m15->80  [0m[1;34m16->81  [0m[1;34m17->82  [0m[1;34m18->83  [0m[1;34m19->84  [0m[1;34m20->85  [0m[1;34m21->86  [0m[1;34m22->87  [0m[1;34m23->88  [0m[1;34m24->89  [0m[1;34m25->90  [0m[1;34m26->91  [0m[1;34m27->92  [0m[1;34m28->93  [0m[1;34m29->94  [0m[1;34m30->95  [0m[1;34m31->96  [0m[1;34m32->97  [0m[1;34m33->98  [0m[1;34m34->99  [0m[1;34m35->100  [0m[1;34m36->101  [0m[1;34m37->102  [0m[1;34m38->103  [0m[1;34m39->104  [0m[1;34m40->105  [0m[1;34m41->106  [0m[1;34m42->107  [0m[1;34m43->108  [0m[1;34m44->109  [0m[1;34m45->110  [0m[1;34m46->111  [0m[1;34m47->112  [0m[1;34m48->113  [0m[1;34m49->114  [0m[1;34m50->115  [0m[1;34m51->116  [0m[1;34m52->117  [0m[1;34m53->118  [0m[1;34m54->119  [0m[1;34m55->120  [0m[1;34m56->121  [0m[1;34m57->122  [0m[1;34m58->123  [0m[1;34m59->124  [0m[1;34m60->125  [0m[1;34m61->126  [0m[1;34m62->127  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22814930888576 -> hwthread 65 - OK[0m[1;34m
[0m[1;34m	threadid 22814732052480 -> hwthread 66 - OK[0m[1;34m
[0m[1;34m	threadid 22814530726016 -> hwthread 67 - OK[0m[1;34m
[0m[1;34m	threadid 22814329399552 -> hwthread 68 - OK[0m[1;34m
[0m[1;34m	threadid 22814128073088 -> hwthread 69 - OK[0m[1;34m
[0m[1;34m	threadid 22813926746624 -> hwthread 70 - OK[0m[1;34m
[0m[1;34m	threadid 22813725420160 -> hwthread 71 - OK[0m[1;34m
[0m[1;34m	threadid 22813524093696 -> hwthread 72 - OK[0m[1;34m
[0m[1;34m	threadid 22813322767232 -> hwthread 73 - OK[0m[1;34m
[0m[1;34m	threadid 22813121440768 -> hwthread 74 - OK[0m[1;34m
[0m[1;34m	threadid 22812920114304 -> hwthread 75 - OK[0m[1;34m
[0m[1;34m	threadid 22812718787840 -> hwthread 76 - OK[0m[1;34m
[0m[1;34m	threadid 22812517461376 -> hwthread 77 - OK[0m[1;34m
[0m[1;34m	threadid 22812316134912 -> hwthread 78 - OK[0m[1;34m
[0m[1;34m	threadid 22812114808448 -> hwthread 79 - OK[0m[1;34m
[0m[1;34m	threadid 22811913481984 -> hwthread 80 - OK[0m[1;34m
[0m[1;34m	threadid 22811712155520 -> hwthread 81 - OK[0m[1;34m
[0m[1;34m	threadid 22811510829056 -> hwthread 82 - OK[0m[1;34m
[0m[1;34m	threadid 22811309502592 -> hwthread 83 - OK[0m[1;34m
[0m[1;34m	threadid 22811108176128 -> hwthread 84 - OK[0m[1;34m
[0m[1;34m	threadid 22810906849664 -> hwthread 85 - OK[0m[1;34m
[0m[1;34m	threadid 22810705523200 -> hwthread 86 - OK[0m[1;34m
[0m[1;34m	threadid 22810504196736 -> hwthread 87 - OK[0m[1;34m
[0m[1;34m	threadid 22810302870272 -> hwthread 88 - OK[0m[1;34m
[0m[1;34m	threadid 22810101543808 -> hwthread 89 - OK[0m[1;34m
[0m[1;34m	threadid 22809900217344 -> hwthread 90 - OK[0m[1;34m
[0m[1;34m	threadid 22809698890880 -> hwthread 91 - OK[0m[1;34m
[0m[1;34m	threadid 22809497564416 -> hwthread 92 - OK[0m[1;34m
[0m[1;34m	threadid 22809296237952 -> hwthread 93 - OK[0m[1;34m
[0m[1;34m	threadid 22809094911488 -> hwthread 94 - OK[0m[1;34m
[0m[1;34m	threadid 22808893585024 -> hwthread 95 - OK[0m[1;34m
[0m[1;34m	threadid 22808692258560 -> hwthread 96 - OK[0m[1;34m
[0m[1;34m	threadid 22808490928000 -> hwthread 97 - OK[0m[1;34m
[0m[1;34m	threadid 22808289601536 -> hwthread 98 - OK[0m[1;34m
[0m[1;34m	threadid 22808088275072 -> hwthread 99 - OK[0m[1;34m
[0m[1;34m	threadid 22807886948608 -> hwthread 100 - OK[0m[1;34m
[0m[1;34m	threadid 22807685622144 -> hwthread 101 - OK[0m[1;34m
[0m[1;34m	threadid 22807484295680 -> hwthread 102 - OK[0m[1;34m
[0m[1;34m	threadid 22807282969216 -> hwthread 103 - OK[0m[1;34m
[0m[1;34m	threadid 22807081642752 -> hwthread 104 - OK[0m[1;34m
[0m[1;34m	threadid 22806880316288 -> hwthread 105 - OK[0m[1;34m
[0m[1;34m	threadid 22806678989824 -> hwthread 106 - OK[0m[1;34m
[0m[1;34m	threadid 22806477663360 -> hwthread 107 - OK[0m[1;34m
[0m[1;34m	threadid 22806276336896 -> hwthread 108 - OK[0m[1;34m
[0m[1;34m	threadid 22806075010432 -> hwthread 109 - OK[0m[1;34m
[0m[1;34m	threadid 22805873683968 -> hwthread 110 - OK[0m[1;34m
[0m[1;34m	threadid 22805672357504 -> hwthread 111 - OK[0m[1;34m
[0m[1;34m	threadid 22805471031040 -> hwthread 112 - OK[0m[1;34m
[0m[1;34m	threadid 22805269704576 -> hwthread 113 - OK[0m[1;34m
[0m[1;34m	threadid 22805068378112 -> hwthread 114 - OK[0m[1;34m
[0m[1;34m	threadid 22804867051648 -> hwthread 115 - OK[0m[1;34m
[0m[1;34m	threadid 22804665725184 -> hwthread 116 - OK[0m[1;34m
[0m[1;34m	threadid 22804464398720 -> hwthread 117 - OK[0m[1;34m
[0m[1;34m	threadid 22804263072256 -> hwthread 118 - OK[0m[1;34m
[0m[1;34m	threadid 22804061745792 -> hwthread 119 - OK[0m[1;34m
[0m[1;34m	threadid 22803860419328 -> hwthread 120 - OK[0m[1;34m
[0m[1;34m	threadid 22803659092864 -> hwthread 121 - OK[0m[1;34m
[0m[1;34m	threadid 22803457766400 -> hwthread 122 - OK[0m[1;34m
[0m[1;34m	threadid 22803256439936 -> hwthread 123 - OK[0m[1;34m
[0m[1;34m	threadid 22803055113472 -> hwthread 124 - OK[0m[1;34m
[0m[1;34m	threadid 22802853787008 -> hwthread 125 - OK[0m[1;34m
[0m[1;34m	threadid 22802652460544 -> hwthread 126 - OK[0m[1;34m
[0m[1;34m	threadid 22802451134080 -> hwthread 127 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22814825228032 -> hwthread 64 - OK[0m[1;34m
[0m[1;34m	threadid 22814818637568 -> hwthread 65 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 143, m: 143)                                                               	 1.72045   	 700       	 11.1045   	 0         	 0.200147  	 55.4818   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 7150, cols: 143, reductionFactor: 31, colBlockingSize: 12)                 	 1.08325   	 600       	 167.194   	 0         	 4.62121   	 36.1796   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 7150, cols: 93, reductionFactor: 37, colBlockingSize: 12)                  	 0.593781  	 700       	 149.746   	 0         	 6.35277   	 23.5718   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 143, n: 50, r: 143, r2: 143)          	 0.470166  	 600       	 373.171   	 0         	 21.0855   	 17.698    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 143, r: 143, r2: 7150, leftOrthog: 0)      	 0.352939  	 600       	 497.118   	 0         	 42.2724   	 11.7599   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 7150, Xcols: 93, r: 93, streamingCols: 0)                   	 0.21298   	 700       	 203.25    	 0         	 35.0815   	 5.79366   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 143, reductionFactor: 31, colBlockingSize: 12)                 	 0.136538  	 100       	 77.2996   	 0         	 2.21447   	 34.9066   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 143, Qr2: 93)      	 0.134011  	 700       	 0         	 0         	 75.7356   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 93, m: 4650, k: 93) 	 0.131458  	 700       	 428.312   	 0         	 37.2125   	 11.5099   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 93, m: 93)                                                                  	 0.116     	 800       	 7.39638   	 0         	 1.43669   	 5.14821   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 143)                                                                	 0.0704208 	 100       	 4.29797   	 0         	 0.191421  	 22.453    
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 93, reductionFactor: 37, colBlockingSize: 12)                  	 0.0703126 	 100       	 63.1662   	 0         	 2.74374   	 23.022    
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 7150, m: 93)                                                                       	 0.0690252 	 700       	 0         	 0         	 107.895   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 93, n: 50, r2: 93)                                                                                         	 0.0567807 	 700       	 0         	 0         	 85.3008   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 93, k: 2500)   	 0.0502342 	 800       	 370.265   	 0         	 46.139    	 8.02499   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 93, n: 50, r2: 93)                   	 0.0478859 	 700       	 0         	 0         	 155.525   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 7150, m: 93)                                                              	 0.0466139 	 700       	 0         	 0         	 159.769   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                 	 0.0442519 	 100       	 2.63642   	 0         	 0.136491  	 19.3157   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 4650, k: 93) 	 0.0427056 	 700       	 708.842   	 0         	 87.805    	 8.07292   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 2500, m: 93, k: 50)	 0.0400157 	 800       	 464.817   	 0         	 57.9212   	 8.02499   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 7150, cols: 50, reductionFactor: 37, colBlockingSize: 12)                  	 0.031634  	 100       	 116.066   	 0         	 9.10412   	 12.7487   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 143, r: 143, r2: 2500, leftOrthog: 0)      	 0.0287578 	 100       	 355.539   	 0         	 30.9731   	 11.4789   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r: 143, r2: 143)           	 0.0277856 	 100       	 367.979   	 0         	 21.175    	 17.378    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 143, n: 50, r: 143, r2: 50)           	 0.0232511 	 100       	 439.743   	 0         	 47.7259   	 9.21392   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 7150, leftOrthog: 0)        	 0.0186088 	 100       	 192.114   	 0         	 46.3222   	 4.14733   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 143, reductionFactor: 31, colBlockingSize: 12)                   	 0.016356  	 100       	 12.9058   	 0         	 1.34992   	 9.56042   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 93, r: 93, streamingCols: 0)                   	 0.0159134 	 100       	 135.876   	 0         	 23.5939   	 5.75894   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 2500, m: 93)                                                                       	 0.00773276	 100       	 0         	 0         	 48.107    	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 93)                                                              	 0.00727767	 100       	 0         	 0         	 51.1153   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 50, Qr2: 93)       	 0.00726897	 100       	 0         	 0         	 78.6907   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 0, n: 50, r2: 93)                    	 0.00659506	 100       	 0         	 0         	 56.4059   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 4650, k: 50) 	 0.00467845	 100       	 496.959   	 0         	 79.941    	 6.21658   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                  	 0.00456713	 100       	 3.64925   	 0         	 1.32249   	 2.75937   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 50, reductionFactor: 37, colBlockingSize: 12)                    	 0.00374662	 100       	 6.85302   	 0         	 1.06763   	 6.41892   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 143, r: 50, r2: 50, leftOrthog: 0)         	 0.00314439	 100       	 22.7389   	 0         	 6.72945   	 3.37902   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 93)                                                                                         	 0.00301782	 100       	 0         	 0         	 123.268   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 93, m: 93, fromLeft: 0)                	 0.00250516	 800       	 0         	 0         	 44.1917   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 93, m: 50, k: 93)   	 0.00122727	 100       	 70.4738   	 0         	 11.7002   	 6.02332   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 50, k: 93)   	 0.00103231	 100       	 45.0447   	 0         	 9.14456   	 4.92585   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50, k: 50)     	 0.000962026	 100       	 25.9868   	 0         	 6.23684   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 93, n: 50, r2: 1)                                                                                          	 0.000834793	 200       	 0         	 0         	 17.8248   	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                   	 0.000822394	 100       	 0.607981  	 0         	 2.43192   	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 50, r2: 50)              	 0.000801517	 100       	 31.1909   	 0         	 7.48581   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                          	 0.000800355	 200       	 0         	 0         	 9.99556   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 50, m: 50, k: 50)  	 0.000643948	 100       	 38.823    	 0         	 9.31752   	 4.16667   
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                 	 0.000588912	 100       	 0.424512  	 0         	 6.79219   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 93, n: 50, r2: 1)                    	 0.000575978	 100       	 0         	 0         	 19.8619   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 1, r1low: 0, n: 50, r2: 50)                     	 0.000571701	 100       	 0         	 0         	 6.99666   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                          	 0.000530239	 100       	 0         	 0         	 7.54377   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 1, Xr2: 50, Qr1: 1, Qr2: 0)          	 0.000447089	 100       	 0         	 0         	 8.94676   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                            	 0.000441841	 100       	 1.13163   	 0         	 13.5795   	 0.0833333 
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 50)                                                                	 0.000420219	 100       	 0         	 0         	 9.51885   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 93, n: 50, r2: 1)                                                                                 	 0.000366093	 100       	 1.27017   	 0         	 20.3227   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                 	 0.000327736	 100       	 0.762809  	 0         	 12.2049   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 0, m: 4650, k: 50)  	 8.57e-06  	 100       	 0         	 0         	 21703.6   	 0         
Timing statistics:
function                                                                                                                                                                                      	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                        	 7.15034   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_normalized(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                     	 7.15028   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::rightNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                            	 5.4944    	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::rightNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                        	 5.49315   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double]	 4.88397   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                  	 1.93561   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                               	 1.83513   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_leftOrthogonalize(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&) [with T = double]                                   	 1.65578   	 100       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                            	 1.26837   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]           	 1.17395   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.668302  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                           	 0.522004  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                	 0.40345   	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                    	 0.228894  	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double]        	 0.18111   	 1800      
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                                       	 0.141728  	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.120567  	 900       
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                       	 0.076758  	 800       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                	 0.0619639 	 1300      
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                        	 0.0556286 	 1000      
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                              	 0.0543118 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double]          	 0.0511963 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double]       	 0.0406597 	 900       
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                	 0.012859  	 1800      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                         	 0.00641944	 5200      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                              	 0.00445538	 6400      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                           	 0.00250516	 800       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                       	 0.00128274	 300       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                         	 0.000822394	 100       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                                                  	 0.000441841	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
orthoX: L, orthoY: L
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 64
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->65  [0m[1;34m1->66  [0m[1;34m2->67  [0m[1;34m3->68  [0m[1;34m4->69  [0m[1;34m5->70  [0m[1;34m6->71  [0m[1;34m7->72  [0m[1;34m8->73  [0m[1;34m9->74  [0m[1;34m10->75  [0m[1;34m11->76  [0m[1;34m12->77  [0m[1;34m13->78  [0m[1;34m14->79  [0m[1;34m15->80  [0m[1;34m16->81  [0m[1;34m17->82  [0m[1;34m18->83  [0m[1;34m19->84  [0m[1;34m20->85  [0m[1;34m21->86  [0m[1;34m22->87  [0m[1;34m23->88  [0m[1;34m24->89  [0m[1;34m25->90  [0m[1;34m26->91  [0m[1;34m27->92  [0m[1;34m28->93  [0m[1;34m29->94  [0m[1;34m30->95  [0m[1;34m31->96  [0m[1;34m32->97  [0m[1;34m33->98  [0m[1;34m34->99  [0m[1;34m35->100  [0m[1;34m36->101  [0m[1;34m37->102  [0m[1;34m38->103  [0m[1;34m39->104  [0m[1;34m40->105  [0m[1;34m41->106  [0m[1;34m42->107  [0m[1;34m43->108  [0m[1;34m44->109  [0m[1;34m45->110  [0m[1;34m46->111  [0m[1;34m47->112  [0m[1;34m48->113  [0m[1;34m49->114  [0m[1;34m50->115  [0m[1;34m51->116  [0m[1;34m52->117  [0m[1;34m53->118  [0m[1;34m54->119  [0m[1;34m55->120  [0m[1;34m56->121  [0m[1;34m57->122  [0m[1;34m58->123  [0m[1;34m59->124  [0m[1;34m60->125  [0m[1;34m61->126  [0m[1;34m62->127  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22423548839808 -> hwthread 65 - OK[0m[1;34m
[0m[1;34m	threadid 22423353157632 -> hwthread 66 - OK[0m[1;34m
[0m[1;34m	threadid 22423151831168 -> hwthread 67 - OK[0m[1;34m
[0m[1;34m	threadid 22422950504704 -> hwthread 68 - OK[0m[1;34m
[0m[1;34m	threadid 22422749178240 -> hwthread 69 - OK[0m[1;34m
[0m[1;34m	threadid 22422547851776 -> hwthread 70 - OK[0m[1;34m
[0m[1;34m	threadid 22422346525312 -> hwthread 71 - OK[0m[1;34m
[0m[1;34m	threadid 22422145198848 -> hwthread 72 - OK[0m[1;34m
[0m[1;34m	threadid 22421943872384 -> hwthread 73 - OK[0m[1;34m
[0m[1;34m	threadid 22421742545920 -> hwthread 74 - OK[0m[1;34m
[0m[1;34m	threadid 22421541219456 -> hwthread 75 - OK[0m[1;34m
[0m[1;34m	threadid 22421339892992 -> hwthread 76 - OK[0m[1;34m
[0m[1;34m	threadid 22421138566528 -> hwthread 77 - OK[0m[1;34m
[0m[1;34m	threadid 22420937240064 -> hwthread 78 - OK[0m[1;34m
[0m[1;34m	threadid 22420735913600 -> hwthread 79 - OK[0m[1;34m
[0m[1;34m	threadid 22420534587136 -> hwthread 80 - OK[0m[1;34m
[0m[1;34m	threadid 22420333260672 -> hwthread 81 - OK[0m[1;34m
[0m[1;34m	threadid 22420131934208 -> hwthread 82 - OK[0m[1;34m
[0m[1;34m	threadid 22419930607744 -> hwthread 83 - OK[0m[1;34m
[0m[1;34m	threadid 22419729281280 -> hwthread 84 - OK[0m[1;34m
[0m[1;34m	threadid 22419527954816 -> hwthread 85 - OK[0m[1;34m
[0m[1;34m	threadid 22419326628352 -> hwthread 86 - OK[0m[1;34m
[0m[1;34m	threadid 22419125301888 -> hwthread 87 - OK[0m[1;34m
[0m[1;34m	threadid 22418923975424 -> hwthread 88 - OK[0m[1;34m
[0m[1;34m	threadid 22418722648960 -> hwthread 89 - OK[0m[1;34m
[0m[1;34m	threadid 22418521322496 -> hwthread 90 - OK[0m[1;34m
[0m[1;34m	threadid 22418319996032 -> hwthread 91 - OK[0m[1;34m
[0m[1;34m	threadid 22418118669568 -> hwthread 92 - OK[0m[1;34m
[0m[1;34m	threadid 22417917343104 -> hwthread 93 - OK[0m[1;34m
[0m[1;34m	threadid 22417716016640 -> hwthread 94 - OK[0m[1;34m
[0m[1;34m	threadid 22417514690176 -> hwthread 95 - OK[0m[1;34m
[0m[1;34m	threadid 22417313363712 -> hwthread 96 - OK[0m[1;34m
[0m[1;34m	threadid 22417112033152 -> hwthread 97 - OK[0m[1;34m
[0m[1;34m	threadid 22416910706688 -> hwthread 98 - OK[0m[1;34m
[0m[1;34m	threadid 22416709380224 -> hwthread 99 - OK[0m[1;34m
[0m[1;34m	threadid 22416508053760 -> hwthread 100 - OK[0m[1;34m
[0m[1;34m	threadid 22416306727296 -> hwthread 101 - OK[0m[1;34m
[0m[1;34m	threadid 22416105400832 -> hwthread 102 - OK[0m[1;34m
[0m[1;34m	threadid 22415904074368 -> hwthread 103 - OK[0m[1;34m
[0m[1;34m	threadid 22415702747904 -> hwthread 104 - OK[0m[1;34m
[0m[1;34m	threadid 22415501421440 -> hwthread 105 - OK[0m[1;34m
[0m[1;34m	threadid 22415300094976 -> hwthread 106 - OK[0m[1;34m
[0m[1;34m	threadid 22415098768512 -> hwthread 107 - OK[0m[1;34m
[0m[1;34m	threadid 22414897442048 -> hwthread 108 - OK[0m[1;34m
[0m[1;34m	threadid 22414696115584 -> hwthread 109 - OK[0m[1;34m
[0m[1;34m	threadid 22414494789120 -> hwthread 110 - OK[0m[1;34m
[0m[1;34m	threadid 22414293462656 -> hwthread 111 - OK[0m[1;34m
[0m[1;34m	threadid 22414092136192 -> hwthread 112 - OK[0m[1;34m
[0m[1;34m	threadid 22413890809728 -> hwthread 113 - OK[0m[1;34m
[0m[1;34m	threadid 22413689483264 -> hwthread 114 - OK[0m[1;34m
[0m[1;34m	threadid 22413488156800 -> hwthread 115 - OK[0m[1;34m
[0m[1;34m	threadid 22413286830336 -> hwthread 116 - OK[0m[1;34m
[0m[1;34m	threadid 22413085503872 -> hwthread 117 - OK[0m[1;34m
[0m[1;34m	threadid 22412884177408 -> hwthread 118 - OK[0m[1;34m
[0m[1;34m	threadid 22412682850944 -> hwthread 119 - OK[0m[1;34m
[0m[1;34m	threadid 22412481524480 -> hwthread 120 - OK[0m[1;34m
[0m[1;34m	threadid 22412280198016 -> hwthread 121 - OK[0m[1;34m
[0m[1;34m	threadid 22412078871552 -> hwthread 122 - OK[0m[1;34m
[0m[1;34m	threadid 22411877545088 -> hwthread 123 - OK[0m[1;34m
[0m[1;34m	threadid 22411676218624 -> hwthread 124 - OK[0m[1;34m
[0m[1;34m	threadid 22411474892160 -> hwthread 125 - OK[0m[1;34m
[0m[1;34m	threadid 22411273565696 -> hwthread 126 - OK[0m[1;34m
[0m[1;34m	threadid 22411072239232 -> hwthread 127 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22423443179264 -> hwthread 64 - OK[0m[1;34m
[0m[1;34m	threadid 22423436588800 -> hwthread 65 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 144, m: 144)                                                               	 1.70557   	 700       	 11.4381   	 0         	 0.204724  	 55.8707   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 7200, cols: 144, reductionFactor: 31, colBlockingSize: 12)                 	 1.09141   	 600       	 169.449   	 0         	 4.65102   	 36.4326   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 7200, cols: 94, reductionFactor: 37, colBlockingSize: 12)                  	 0.607431  	 700       	 150.592   	 0         	 6.32099   	 23.8241   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 144, n: 50, r: 144, r2: 144)          	 0.474896  	 600       	 377.259   	 0         	 21.1684   	 17.8218   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 144, r: 144, r2: 7200, leftOrthog: 0)      	 0.336181  	 600       	 532.924   	 0         	 45.0025   	 11.8421   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 7200, Xcols: 94, r: 94, streamingCols: 0)                   	 0.216997  	 700       	 205.226   	 0         	 35.0462   	 5.85589   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 144, Qr2: 94)      	 0.145804  	 700       	 0         	 0         	 70.6167   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 144, reductionFactor: 31, colBlockingSize: 12)                 	 0.1415    	 100       	 75.6355   	 0         	 2.15257   	 35.1374   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 94, m: 4700, k: 94) 	 0.135811  	 700       	 428.101   	 0         	 36.7984   	 11.6337   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 94, m: 94)                                                                  	 0.117045  	 800       	 7.56933   	 0         	 1.45459   	 5.20376   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 94, reductionFactor: 37, colBlockingSize: 12)                  	 0.0717687 	 100       	 63.2226   	 0         	 2.71802   	 23.2605   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 7200, m: 94)                                                                       	 0.0690028 	 700       	 0         	 0         	 109.853   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 144)                                                                	 0.0680604 	 100       	 4.47642   	 0         	 0.199235  	 22.468    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 94, n: 50, r2: 94)                                                                                         	 0.0608132 	 700       	 0         	 0         	 81.3665   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 94, k: 2500)   	 0.0478157 	 800       	 393.176   	 0         	 48.8141   	 8.05457   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 94, n: 50, r2: 94)                   	 0.0459551 	 700       	 0         	 0         	 164.947   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 7200, m: 94)                                                              	 0.0452694 	 700       	 0         	 0         	 167.445   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 4700, k: 94) 	 0.043144  	 700       	 716.809   	 0         	 88.4573   	 8.10345   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                 	 0.0422927 	 100       	 2.75856   	 0         	 0.142814  	 19.3157   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 2500, m: 94, k: 50)	 0.0394613 	 800       	 476.416   	 0         	 59.1486   	 8.05457   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r: 144, r2: 144)           	 0.0310206 	 100       	 334.23    	 0         	 19.1031   	 17.4961   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 7200, cols: 50, reductionFactor: 37, colBlockingSize: 12)                  	 0.0307533 	 100       	 120.224   	 0         	 9.42988   	 12.7493   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 144, r: 144, r2: 2500, leftOrthog: 0)      	 0.0254972 	 100       	 406.633   	 0         	 35.1873   	 11.5562   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 144, n: 50, r: 144, r2: 50)           	 0.0248104 	 100       	 417.889   	 0         	 45.2714   	 9.23077   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 7200, leftOrthog: 0)        	 0.0191928 	 100       	 187.57    	 0         	 45.2253   	 4.14747   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 144, reductionFactor: 31, colBlockingSize: 12)                   	 0.0165888 	 100       	 12.9032   	 0         	 1.34722   	 9.57765   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 94, r: 94, streamingCols: 0)                   	 0.0163679 	 100       	 134.959   	 0         	 23.1877   	 5.82029   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 2500, m: 94)                                                                       	 0.00806939	 100       	 0         	 0         	 46.5959   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 50, Qr2: 94)       	 0.00718001	 100       	 0         	 0         	 80.2227   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 0, n: 50, r2: 94)                    	 0.00639835	 100       	 0         	 0         	 58.7652   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 94)                                                              	 0.00639352	 100       	 0         	 0         	 58.8096   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 4700, k: 50) 	 0.00519135	 100       	 452.676   	 0         	 72.8135   	 6.21693   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                  	 0.00440817	 100       	 3.78084   	 0         	 1.37018   	 2.75937   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 50, reductionFactor: 37, colBlockingSize: 12)                    	 0.00318372	 100       	 8.06468   	 0         	 1.25639   	 6.41892   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 94)                                                                                         	 0.0030978 	 100       	 0         	 0         	 121.377   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 144, r: 50, r2: 50, leftOrthog: 0)         	 0.00286113	 100       	 25.1649   	 0         	 7.43763   	 3.38346   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 94, m: 94, fromLeft: 0)                	 0.00221235	 800       	 0         	 0         	 51.1224   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 94, m: 50, k: 94)   	 0.00119366	 100       	 74.0242   	 0         	 12.2219   	 6.0567    
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 50, k: 94)   	 0.00100975	 100       	 46.5459   	 0         	 9.42803   	 4.93697   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50, k: 50)     	 0.000946229	 100       	 26.4207   	 0         	 6.34096   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                          	 0.000889199	 200       	 0         	 0         	 8.99686   	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                   	 0.000886439	 100       	 0.564055  	 0         	 2.25622   	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 50, r2: 50)              	 0.000853716	 100       	 29.2837   	 0         	 7.0281    	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 94, n: 50, r2: 1)                                                                                          	 0.000832902	 200       	 0         	 0         	 18.0573   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 50, m: 50, k: 50)  	 0.000676825	 100       	 36.9372   	 0         	 8.86492   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 94, n: 50, r2: 1)                    	 0.000560938	 100       	 0         	 0         	 20.537    	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 1, r1low: 0, n: 50, r2: 50)                     	 0.000536254	 100       	 0         	 0         	 7.45915   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                          	 0.000521457	 100       	 0         	 0         	 7.67081   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                            	 0.000458724	 100       	 1.08998   	 0         	 13.0798   	 0.0833333 
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 1, Xr2: 50, Qr1: 1, Qr2: 0)          	 0.000416605	 100       	 0         	 0         	 9.60142   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                 	 0.000415695	 100       	 0.601402  	 0         	 9.62244   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 50)                                                                	 0.000413862	 100       	 0         	 0         	 9.66506   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                 	 0.000395227	 100       	 0.632548  	 0         	 10.1208   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 94, n: 50, r2: 1)                                                                                 	 0.000371538	 100       	 1.26501   	 0         	 20.2402   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 0, m: 4700, k: 50)  	 8.33e-06  	 100       	 0         	 0         	 22569     	 0         
Timing statistics:
function                                                                                                                                                                                      	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                        	 7.28151   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_normalized(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                     	 7.28145   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::rightNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                            	 5.58994   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::rightNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                        	 5.58853   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double]	 4.96464   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                  	 1.96264   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                               	 1.81592   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_leftOrthogonalize(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&) [with T = double]                                   	 1.69142   	 100       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                            	 1.28088   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]           	 1.19971   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.682848  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                           	 0.531581  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                	 0.383732  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                    	 0.233365  	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double]        	 0.186358  	 1800      
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                                       	 0.1534    	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.121454  	 900       
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                       	 0.0770721 	 800       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                	 0.0661546 	 1300      
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                        	 0.0534506 	 1000      
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                              	 0.0520768 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double]          	 0.048762  	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double]       	 0.0401381 	 900       
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                	 0.00629616	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                              	 0.00418649	 6400      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                           	 0.00221235	 800       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                         	 0.00191843	 5200      
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                       	 0.00118246	 300       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                         	 0.000886439	 100       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                                                  	 0.000458724	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
orthoX: L, orthoY: L
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 64
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->65  [0m[1;34m1->66  [0m[1;34m2->67  [0m[1;34m3->68  [0m[1;34m4->69  [0m[1;34m5->70  [0m[1;34m6->71  [0m[1;34m7->72  [0m[1;34m8->73  [0m[1;34m9->74  [0m[1;34m10->75  [0m[1;34m11->76  [0m[1;34m12->77  [0m[1;34m13->78  [0m[1;34m14->79  [0m[1;34m15->80  [0m[1;34m16->81  [0m[1;34m17->82  [0m[1;34m18->83  [0m[1;34m19->84  [0m[1;34m20->85  [0m[1;34m21->86  [0m[1;34m22->87  [0m[1;34m23->88  [0m[1;34m24->89  [0m[1;34m25->90  [0m[1;34m26->91  [0m[1;34m27->92  [0m[1;34m28->93  [0m[1;34m29->94  [0m[1;34m30->95  [0m[1;34m31->96  [0m[1;34m32->97  [0m[1;34m33->98  [0m[1;34m34->99  [0m[1;34m35->100  [0m[1;34m36->101  [0m[1;34m37->102  [0m[1;34m38->103  [0m[1;34m39->104  [0m[1;34m40->105  [0m[1;34m41->106  [0m[1;34m42->107  [0m[1;34m43->108  [0m[1;34m44->109  [0m[1;34m45->110  [0m[1;34m46->111  [0m[1;34m47->112  [0m[1;34m48->113  [0m[1;34m49->114  [0m[1;34m50->115  [0m[1;34m51->116  [0m[1;34m52->117  [0m[1;34m53->118  [0m[1;34m54->119  [0m[1;34m55->120  [0m[1;34m56->121  [0m[1;34m57->122  [0m[1;34m58->123  [0m[1;34m59->124  [0m[1;34m60->125  [0m[1;34m61->126  [0m[1;34m62->127  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23258493572992 -> hwthread 65 - OK[0m[1;34m
[0m[1;34m	threadid 23258254534656 -> hwthread 66 - OK[0m[1;34m
[0m[1;34m	threadid 23258053208192 -> hwthread 67 - OK[0m[1;34m
[0m[1;34m	threadid 23257851881728 -> hwthread 68 - OK[0m[1;34m
[0m[1;34m	threadid 23257650555264 -> hwthread 69 - OK[0m[1;34m
[0m[1;34m	threadid 23257449228800 -> hwthread 70 - OK[0m[1;34m
[0m[1;34m	threadid 23257247902336 -> hwthread 71 - OK[0m[1;34m
[0m[1;34m	threadid 23257046575872 -> hwthread 72 - OK[0m[1;34m
[0m[1;34m	threadid 23256845249408 -> hwthread 73 - OK[0m[1;34m
[0m[1;34m	threadid 23256643922944 -> hwthread 74 - OK[0m[1;34m
[0m[1;34m	threadid 23256442596480 -> hwthread 75 - OK[0m[1;34m
[0m[1;34m	threadid 23256241270016 -> hwthread 76 - OK[0m[1;34m
[0m[1;34m	threadid 23256039943552 -> hwthread 77 - OK[0m[1;34m
[0m[1;34m	threadid 23255838617088 -> hwthread 78 - OK[0m[1;34m
[0m[1;34m	threadid 23255637290624 -> hwthread 79 - OK[0m[1;34m
[0m[1;34m	threadid 23255435964160 -> hwthread 80 - OK[0m[1;34m
[0m[1;34m	threadid 23255234637696 -> hwthread 81 - OK[0m[1;34m
[0m[1;34m	threadid 23255033311232 -> hwthread 82 - OK[0m[1;34m
[0m[1;34m	threadid 23254831984768 -> hwthread 83 - OK[0m[1;34m
[0m[1;34m	threadid 23254630658304 -> hwthread 84 - OK[0m[1;34m
[0m[1;34m	threadid 23254429331840 -> hwthread 85 - OK[0m[1;34m
[0m[1;34m	threadid 23254228005376 -> hwthread 86 - OK[0m[1;34m
[0m[1;34m	threadid 23254026678912 -> hwthread 87 - OK[0m[1;34m
[0m[1;34m	threadid 23253825352448 -> hwthread 88 - OK[0m[1;34m
[0m[1;34m	threadid 23253624025984 -> hwthread 89 - OK[0m[1;34m
[0m[1;34m	threadid 23253422699520 -> hwthread 90 - OK[0m[1;34m
[0m[1;34m	threadid 23253221373056 -> hwthread 91 - OK[0m[1;34m
[0m[1;34m	threadid 23253020046592 -> hwthread 92 - OK[0m[1;34m
[0m[1;34m	threadid 23252818720128 -> hwthread 93 - OK[0m[1;34m
[0m[1;34m	threadid 23252617393664 -> hwthread 94 - OK[0m[1;34m
[0m[1;34m	threadid 23252416067200 -> hwthread 95 - OK[0m[1;34m
[0m[1;34m	threadid 23252214740736 -> hwthread 96 - OK[0m[1;34m
[0m[1;34m	threadid 23252013410176 -> hwthread 97 - OK[0m[1;34m
[0m[1;34m	threadid 23251812083712 -> hwthread 98 - OK[0m[1;34m
[0m[1;34m	threadid 23251610757248 -> hwthread 99 - OK[0m[1;34m
[0m[1;34m	threadid 23251409430784 -> hwthread 100 - OK[0m[1;34m
[0m[1;34m	threadid 23251208104320 -> hwthread 101 - OK[0m[1;34m
[0m[1;34m	threadid 23251006777856 -> hwthread 102 - OK[0m[1;34m
[0m[1;34m	threadid 23250805451392 -> hwthread 103 - OK[0m[1;34m
[0m[1;34m	threadid 23250604124928 -> hwthread 104 - OK[0m[1;34m
[0m[1;34m	threadid 23250402798464 -> hwthread 105 - OK[0m[1;34m
[0m[1;34m	threadid 23250201472000 -> hwthread 106 - OK[0m[1;34m
[0m[1;34m	threadid 23250000145536 -> hwthread 107 - OK[0m[1;34m
[0m[1;34m	threadid 23249798819072 -> hwthread 108 - OK[0m[1;34m
[0m[1;34m	threadid 23249597492608 -> hwthread 109 - OK[0m[1;34m
[0m[1;34m	threadid 23249396166144 -> hwthread 110 - OK[0m[1;34m
[0m[1;34m	threadid 23249194839680 -> hwthread 111 - OK[0m[1;34m
[0m[1;34m	threadid 23248993513216 -> hwthread 112 - OK[0m[1;34m
[0m[1;34m	threadid 23248792186752 -> hwthread 113 - OK[0m[1;34m
[0m[1;34m	threadid 23248590860288 -> hwthread 114 - OK[0m[1;34m
[0m[1;34m	threadid 23248389533824 -> hwthread 115 - OK[0m[1;34m
[0m[1;34m	threadid 23248188207360 -> hwthread 116 - OK[0m[1;34m
[0m[1;34m	threadid 23247986880896 -> hwthread 117 - OK[0m[1;34m
[0m[1;34m	threadid 23247785554432 -> hwthread 118 - OK[0m[1;34m
[0m[1;34m	threadid 23247584227968 -> hwthread 119 - OK[0m[1;34m
[0m[1;34m	threadid 23247382901504 -> hwthread 120 - OK[0m[1;34m
[0m[1;34m	threadid 23247181575040 -> hwthread 121 - OK[0m[1;34m
[0m[1;34m	threadid 23246980248576 -> hwthread 122 - OK[0m[1;34m
[0m[1;34m	threadid 23246778922112 -> hwthread 123 - OK[0m[1;34m
[0m[1;34m	threadid 23246577595648 -> hwthread 124 - OK[0m[1;34m
[0m[1;34m	threadid 23246376269184 -> hwthread 125 - OK[0m[1;34m
[0m[1;34m	threadid 23246174942720 -> hwthread 126 - OK[0m[1;34m
[0m[1;34m	threadid 23245973616256 -> hwthread 127 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23258387912448 -> hwthread 64 - OK[0m[1;34m
[0m[1;34m	threadid 23258381321984 -> hwthread 65 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 145, m: 145)                                                               	 1.7762    	 700       	 11.2136   	 0         	 0.19932   	 56.2596   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 7250, cols: 145, reductionFactor: 31, colBlockingSize: 12)                 	 1.12641   	 600       	 167.628   	 0         	 4.56932   	 36.6856   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 7250, cols: 95, reductionFactor: 37, colBlockingSize: 12)                  	 0.617219  	 700       	 152.425   	 0         	 6.33088   	 24.0764   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 145, r: 145, r2: 7250, leftOrthog: 0)      	 0.345934  	 600       	 528.763   	 0         	 44.3432   	 11.9243   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 145, n: 50, r: 145, r2: 145)          	 0.323782  	 600       	 564.94    	 0         	 31.4808   	 17.9455   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 7250, Xcols: 95, r: 95, streamingCols: 0)                   	 0.222083  	 700       	 206.237   	 0         	 34.8485   	 5.91811   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 145, Qr2: 95)      	 0.150283  	 700       	 0         	 0         	 69.4953   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 145, reductionFactor: 31, colBlockingSize: 12)                 	 0.141259  	 100       	 76.8206   	 0         	 2.17204   	 35.368    
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 95, m: 4750, k: 95) 	 0.136255  	 700       	 440.47    	 0         	 37.4631   	 11.7574   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 95, m: 95)                                                                  	 0.119729  	 800       	 7.63835   	 0         	 1.45235   	 5.25932   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 145)                                                                	 0.0753322 	 100       	 4.07086   	 0         	 0.181065  	 22.4829   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 7250, m: 95)                                                                       	 0.0741712 	 700       	 0         	 0         	 104.003   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 95, reductionFactor: 37, colBlockingSize: 12)                  	 0.0733483 	 100       	 63.1843   	 0         	 2.68882   	 23.4989   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 95, n: 50, r2: 95)                                                                                         	 0.0600802 	 700       	 0         	 0         	 84.1209   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 95, k: 2500)   	 0.0491026 	 800       	 386.945   	 0         	 47.8671   	 8.08373   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 95, n: 50, r2: 95)                   	 0.048751  	 700       	 0         	 0         	 158.233   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 4750, k: 95) 	 0.0442462 	 700       	 713.903   	 0         	 87.7725   	 8.13356   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 2500, m: 95, k: 50)	 0.0430509 	 800       	 441.338   	 0         	 54.5958   	 8.08373   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                 	 0.0409878 	 100       	 2.84638   	 0         	 0.147361  	 19.3157   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 7250, m: 95)                                                              	 0.0406537 	 700       	 0         	 0         	 189.749   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 7250, cols: 50, reductionFactor: 37, colBlockingSize: 12)                  	 0.0312712 	 100       	 119.054   	 0         	 9.33765   	 12.7499   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 145, r: 145, r2: 2500, leftOrthog: 0)      	 0.0256694 	 100       	 409.534   	 0         	 35.203    	 11.6335   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 145, n: 50, r: 145, r2: 50)           	 0.0236762 	 100       	 444.012   	 0         	 48.0146   	 9.24745   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r: 145, r2: 145)           	 0.0227728 	 100       	 461.626   	 0         	 26.2076   	 17.6142   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 7250, leftOrthog: 0)        	 0.0202557 	 100       	 178.962   	 0         	 43.1484   	 4.1476    
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 95, r: 95, streamingCols: 0)                   	 0.0166651 	 100       	 135.388   	 0         	 23.0188   	 5.88162   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 145, reductionFactor: 31, colBlockingSize: 12)                   	 0.0164271 	 100       	 13.2118   	 0         	 1.37699   	 9.59471   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 2500, m: 95)                                                                       	 0.00805406	 100       	 0         	 0         	 47.1812   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 50, Qr2: 95)       	 0.00768647	 100       	 0         	 0         	 75.4572   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 0, n: 50, r2: 95)                    	 0.00673056	 100       	 0         	 0         	 56.4589   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 95)                                                              	 0.00643449	 100       	 0         	 0         	 59.0567   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                  	 0.00442919	 100       	 3.7629    	 0         	 1.36368   	 2.75937   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 4750, k: 50) 	 0.0041432 	 100       	 573.228   	 0         	 92.1992   	 6.21728   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 50, reductionFactor: 37, colBlockingSize: 12)                    	 0.0037266 	 100       	 6.88984   	 0         	 1.07336   	 6.41892   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 145, r: 50, r2: 50, leftOrthog: 0)         	 0.00330703	 100       	 21.923    	 0         	 6.47106   	 3.38785   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 95)                                                                                         	 0.00324952	 100       	 0         	 0         	 116.94    	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 95, m: 95, fromLeft: 0)                	 0.00251573	 800       	 0         	 0         	 45.9191   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 95, m: 50, k: 95)   	 0.0011669 	 100       	 77.3417   	 0         	 12.7003   	 6.08974   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 50, k: 95)   	 0.00100231	 100       	 47.3906   	 0         	 9.57788   	 4.94792   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                   	 0.000948578	 100       	 0.527105  	 0         	 2.10842   	 0.25      
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50, k: 50)     	 0.000936567	 100       	 26.6932   	 0         	 6.40638   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 95, n: 50, r2: 1)                                                                                          	 0.000873206	 200       	 0         	 0         	 17.4071   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 50, r2: 50)              	 0.000851269	 100       	 29.3679   	 0         	 7.0483    	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                          	 0.00080415	 200       	 0         	 0         	 9.94839   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 50, m: 50, k: 50)  	 0.000665096	 100       	 37.5886   	 0         	 9.02125   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 95, n: 50, r2: 1)                    	 0.000576443	 100       	 0         	 0         	 20.1234   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                          	 0.000526892	 100       	 0         	 0         	 7.59169   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 1, r1low: 0, n: 50, r2: 50)                     	 0.000515305	 100       	 0         	 0         	 7.76239   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 50)                                                                	 0.000462516	 100       	 0         	 0         	 8.64835   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                            	 0.00044913	 100       	 1.11326   	 0         	 13.3592   	 0.0833333 
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 1, Xr2: 50, Qr1: 1, Qr2: 0)          	 0.000415831	 100       	 0         	 0         	 9.61929   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                 	 0.000403098	 100       	 0.620197  	 0         	 9.92315   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 95, n: 50, r2: 1)                                                                                 	 0.000402104	 100       	 1.18129   	 0         	 18.9006   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                 	 0.000332295	 100       	 0.752344  	 0         	 12.0375   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 0, m: 4750, k: 50)  	 7.25e-06  	 100       	 0         	 0         	 26206.9   	 0         
Timing statistics:
function                                                                                                                                                                                      	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                        	 7.14643   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_normalized(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                     	 7.14637   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::rightNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                            	 5.42261   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::rightNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                        	 5.42122   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double]	 4.96539   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                  	 2.00966   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                               	 1.89252   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_leftOrthogonalize(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&) [with T = double]                                   	 1.72367   	 100       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                            	 1.31597   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]           	 1.21366   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.69478   	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                	 0.395167  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                           	 0.371082  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                    	 0.238748  	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double]        	 0.186821  	 1800      
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                                       	 0.158386  	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.124158  	 900       
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                       	 0.0822253 	 800       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                	 0.065534  	 1300      
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                        	 0.0565733 	 1000      
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double]          	 0.0500391 	 900       
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                              	 0.0475508 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double]       	 0.043716  	 900       
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                	 0.00936956	 1800      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                         	 0.00931576	 5200      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                              	 0.00409464	 6400      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                           	 0.00251573	 800       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                       	 0.0011375 	 300       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                         	 0.000948578	 100       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                                                  	 0.00044913	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
orthoX: L, orthoY: L
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 64
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->65  [0m[1;34m1->66  [0m[1;34m2->67  [0m[1;34m3->68  [0m[1;34m4->69  [0m[1;34m5->70  [0m[1;34m6->71  [0m[1;34m7->72  [0m[1;34m8->73  [0m[1;34m9->74  [0m[1;34m10->75  [0m[1;34m11->76  [0m[1;34m12->77  [0m[1;34m13->78  [0m[1;34m14->79  [0m[1;34m15->80  [0m[1;34m16->81  [0m[1;34m17->82  [0m[1;34m18->83  [0m[1;34m19->84  [0m[1;34m20->85  [0m[1;34m21->86  [0m[1;34m22->87  [0m[1;34m23->88  [0m[1;34m24->89  [0m[1;34m25->90  [0m[1;34m26->91  [0m[1;34m27->92  [0m[1;34m28->93  [0m[1;34m29->94  [0m[1;34m30->95  [0m[1;34m31->96  [0m[1;34m32->97  [0m[1;34m33->98  [0m[1;34m34->99  [0m[1;34m35->100  [0m[1;34m36->101  [0m[1;34m37->102  [0m[1;34m38->103  [0m[1;34m39->104  [0m[1;34m40->105  [0m[1;34m41->106  [0m[1;34m42->107  [0m[1;34m43->108  [0m[1;34m44->109  [0m[1;34m45->110  [0m[1;34m46->111  [0m[1;34m47->112  [0m[1;34m48->113  [0m[1;34m49->114  [0m[1;34m50->115  [0m[1;34m51->116  [0m[1;34m52->117  [0m[1;34m53->118  [0m[1;34m54->119  [0m[1;34m55->120  [0m[1;34m56->121  [0m[1;34m57->122  [0m[1;34m58->123  [0m[1;34m59->124  [0m[1;34m60->125  [0m[1;34m61->126  [0m[1;34m62->127  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22570794637184 -> hwthread 65 - OK[0m[1;34m
[0m[1;34m	threadid 22570590005248 -> hwthread 66 - OK[0m[1;34m
[0m[1;34m	threadid 22570388678784 -> hwthread 67 - OK[0m[1;34m
[0m[1;34m	threadid 22570187352320 -> hwthread 68 - OK[0m[1;34m
[0m[1;34m	threadid 22569986025856 -> hwthread 69 - OK[0m[1;34m
[0m[1;34m	threadid 22569784699392 -> hwthread 70 - OK[0m[1;34m
[0m[1;34m	threadid 22569583372928 -> hwthread 71 - OK[0m[1;34m
[0m[1;34m	threadid 22569382046464 -> hwthread 72 - OK[0m[1;34m
[0m[1;34m	threadid 22569180720000 -> hwthread 73 - OK[0m[1;34m
[0m[1;34m	threadid 22568979393536 -> hwthread 74 - OK[0m[1;34m
[0m[1;34m	threadid 22568778067072 -> hwthread 75 - OK[0m[1;34m
[0m[1;34m	threadid 22568576740608 -> hwthread 76 - OK[0m[1;34m
[0m[1;34m	threadid 22568375414144 -> hwthread 77 - OK[0m[1;34m
[0m[1;34m	threadid 22568174087680 -> hwthread 78 - OK[0m[1;34m
[0m[1;34m	threadid 22567972761216 -> hwthread 79 - OK[0m[1;34m
[0m[1;34m	threadid 22567771434752 -> hwthread 80 - OK[0m[1;34m
[0m[1;34m	threadid 22567570108288 -> hwthread 81 - OK[0m[1;34m
[0m[1;34m	threadid 22567368781824 -> hwthread 82 - OK[0m[1;34m
[0m[1;34m	threadid 22567167455360 -> hwthread 83 - OK[0m[1;34m
[0m[1;34m	threadid 22566966128896 -> hwthread 84 - OK[0m[1;34m
[0m[1;34m	threadid 22566764802432 -> hwthread 85 - OK[0m[1;34m
[0m[1;34m	threadid 22566563475968 -> hwthread 86 - OK[0m[1;34m
[0m[1;34m	threadid 22566362149504 -> hwthread 87 - OK[0m[1;34m
[0m[1;34m	threadid 22566160823040 -> hwthread 88 - OK[0m[1;34m
[0m[1;34m	threadid 22565959496576 -> hwthread 89 - OK[0m[1;34m
[0m[1;34m	threadid 22565758170112 -> hwthread 90 - OK[0m[1;34m
[0m[1;34m	threadid 22565556843648 -> hwthread 91 - OK[0m[1;34m
[0m[1;34m	threadid 22565355517184 -> hwthread 92 - OK[0m[1;34m
[0m[1;34m	threadid 22565154190720 -> hwthread 93 - OK[0m[1;34m
[0m[1;34m	threadid 22564952864256 -> hwthread 94 - OK[0m[1;34m
[0m[1;34m	threadid 22564751537792 -> hwthread 95 - OK[0m[1;34m
[0m[1;34m	threadid 22564550211328 -> hwthread 96 - OK[0m[1;34m
[0m[1;34m	threadid 22564348880768 -> hwthread 97 - OK[0m[1;34m
[0m[1;34m	threadid 22564147554304 -> hwthread 98 - OK[0m[1;34m
[0m[1;34m	threadid 22563946227840 -> hwthread 99 - OK[0m[1;34m
[0m[1;34m	threadid 22563744901376 -> hwthread 100 - OK[0m[1;34m
[0m[1;34m	threadid 22563543574912 -> hwthread 101 - OK[0m[1;34m
[0m[1;34m	threadid 22563342248448 -> hwthread 102 - OK[0m[1;34m
[0m[1;34m	threadid 22563140921984 -> hwthread 103 - OK[0m[1;34m
[0m[1;34m	threadid 22562939595520 -> hwthread 104 - OK[0m[1;34m
[0m[1;34m	threadid 22562738269056 -> hwthread 105 - OK[0m[1;34m
[0m[1;34m	threadid 22562536942592 -> hwthread 106 - OK[0m[1;34m
[0m[1;34m	threadid 22562335616128 -> hwthread 107 - OK[0m[1;34m
[0m[1;34m	threadid 22562134289664 -> hwthread 108 - OK[0m[1;34m
[0m[1;34m	threadid 22561932963200 -> hwthread 109 - OK[0m[1;34m
[0m[1;34m	threadid 22561731636736 -> hwthread 110 - OK[0m[1;34m
[0m[1;34m	threadid 22561530310272 -> hwthread 111 - OK[0m[1;34m
[0m[1;34m	threadid 22561328983808 -> hwthread 112 - OK[0m[1;34m
[0m[1;34m	threadid 22561127657344 -> hwthread 113 - OK[0m[1;34m
[0m[1;34m	threadid 22560926330880 -> hwthread 114 - OK[0m[1;34m
[0m[1;34m	threadid 22560725004416 -> hwthread 115 - OK[0m[1;34m
[0m[1;34m	threadid 22560523677952 -> hwthread 116 - OK[0m[1;34m
[0m[1;34m	threadid 22560322351488 -> hwthread 117 - OK[0m[1;34m
[0m[1;34m	threadid 22560121025024 -> hwthread 118 - OK[0m[1;34m
[0m[1;34m	threadid 22559919698560 -> hwthread 119 - OK[0m[1;34m
[0m[1;34m	threadid 22559718372096 -> hwthread 120 - OK[0m[1;34m
[0m[1;34m	threadid 22559517045632 -> hwthread 121 - OK[0m[1;34m
[0m[1;34m	threadid 22559315719168 -> hwthread 122 - OK[0m[1;34m
[0m[1;34m	threadid 22559114392704 -> hwthread 123 - OK[0m[1;34m
[0m[1;34m	threadid 22558913066240 -> hwthread 124 - OK[0m[1;34m
[0m[1;34m	threadid 22558711739776 -> hwthread 125 - OK[0m[1;34m
[0m[1;34m	threadid 22558510413312 -> hwthread 126 - OK[0m[1;34m
[0m[1;34m	threadid 22558309086848 -> hwthread 127 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22570688976640 -> hwthread 64 - OK[0m[1;34m
[0m[1;34m	threadid 22570682386176 -> hwthread 65 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 146, m: 146)                                                               	 1.79433   	 700       	 11.3316   	 0         	 0.200034  	 56.6484   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 7300, cols: 146, reductionFactor: 31, colBlockingSize: 12)                 	 1.15267   	 600       	 167.222   	 0         	 4.52701   	 36.9386   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 7300, cols: 96, reductionFactor: 37, colBlockingSize: 12)                  	 0.63854   	 700       	 151.491   	 0         	 6.22685   	 24.3287   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 146, r: 146, r2: 7300, leftOrthog: 0)      	 0.367578  	 600       	 507.995   	 0         	 42.3098   	 12.0066   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 146, n: 50, r: 146, r2: 146)          	 0.349885  	 600       	 533.684   	 0         	 29.5354   	 18.0693   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 7300, Xcols: 96, r: 96, streamingCols: 0)                   	 0.220355  	 700       	 213.718   	 0         	 35.7367   	 5.98034   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 146, Qr2: 96)      	 0.144249  	 700       	 0         	 0         	 73.435    	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 146, reductionFactor: 31, colBlockingSize: 12)                 	 0.142852  	 100       	 77.0152   	 0         	 2.16344   	 35.5985   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 96, m: 4800, k: 96) 	 0.140332  	 700       	 441.322   	 0         	 37.1446   	 11.8812   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 96, m: 96)                                                                  	 0.121949  	 800       	 7.73864   	 0         	 1.45603   	 5.31488   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 7300, m: 96)                                                                       	 0.0766387 	 700       	 0         	 0         	 102.415   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 146)                                                                	 0.0752009 	 100       	 4.10456   	 0         	 0.182445  	 22.4976   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 96, reductionFactor: 37, colBlockingSize: 12)                  	 0.0741109 	 100       	 63.8575   	 0         	 2.69019   	 23.7371   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 96, n: 50, r2: 96)                                                                                         	 0.0617899 	 700       	 0         	 0         	 83.5244   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 96, k: 2500)   	 0.0503311 	 800       	 381.474   	 0         	 47.023    	 8.11249   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 96, n: 50, r2: 96)                   	 0.0476095 	 700       	 0         	 0         	 164.861   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 4800, k: 96) 	 0.0444462 	 700       	 725.732   	 0         	 88.9021   	 8.16327   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                 	 0.0429159 	 100       	 2.7185    	 0         	 0.140741  	 19.3157   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 2500, m: 96, k: 50)	 0.0423898 	 800       	 452.939   	 0         	 55.8322   	 8.11249   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 7300, m: 96)                                                              	 0.0405043 	 700       	 0         	 0         	 193.781   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 7300, cols: 50, reductionFactor: 37, colBlockingSize: 12)                  	 0.0320599 	 100       	 116.926   	 0         	 9.17033   	 12.7505   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 146, r: 146, r2: 2500, leftOrthog: 0)      	 0.0258354 	 100       	 412.535   	 0         	 35.2271   	 11.7107   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 146, n: 50, r: 146, r2: 50)           	 0.0245411 	 100       	 434.292   	 0         	 46.8798   	 9.26396   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r: 146, r2: 146)           	 0.0235391 	 100       	 452.779   	 0         	 25.5343   	 17.7322   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 7300, leftOrthog: 0)        	 0.020821  	 100       	 175.304   	 0         	 42.265    	 4.14773   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 146, reductionFactor: 31, colBlockingSize: 12)                   	 0.0169435 	 100       	 12.9865   	 0         	 1.35112   	 9.61159   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 96, r: 96, streamingCols: 0)                   	 0.0166116 	 100       	 138.698   	 0         	 23.3383   	 5.94295   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 2500, m: 96)                                                                       	 0.00814714	 100       	 0         	 0         	 47.1331   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 50, Qr2: 96)       	 0.00802643	 100       	 0         	 0         	 72.7596   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 0, n: 50, r2: 96)                    	 0.00702039	 100       	 0         	 0         	 54.6978   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 96)                                                              	 0.00684903	 100       	 0         	 0         	 56.0663   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                  	 0.00442983	 100       	 3.76235   	 0         	 1.36348   	 2.75937   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 4800, k: 50) 	 0.00421267	 100       	 569.71    	 0         	 91.6284   	 6.21762   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 50, reductionFactor: 37, colBlockingSize: 12)                    	 0.00363229	 100       	 7.06873   	 0         	 1.10123   	 6.41892   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 146, r: 50, r2: 50, leftOrthog: 0)         	 0.00313859	 100       	 23.2589   	 0         	 6.85659   	 3.39219   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 96)                                                                                         	 0.00292415	 100       	 0         	 0         	 131.32    	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 96, m: 96, fromLeft: 0)                	 0.0017551 	 800       	 0         	 0         	 67.2124   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 96, m: 50, k: 96)   	 0.00115442	 100       	 79.8323   	 0         	 13.0393   	 6.12245   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 50, k: 96)   	 0.00102578	 100       	 46.7937   	 0         	 9.43672   	 4.95868   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50, k: 50)     	 0.000948034	 100       	 26.3704   	 0         	 6.32889   	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                   	 0.00093411	 100       	 0.535269  	 0         	 2.14108   	 0.25      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 96, n: 50, r2: 1)                                                                                          	 0.000912117	 200       	 0         	 0         	 16.8399   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 50, r2: 50)              	 0.00083103	 100       	 30.0831   	 0         	 7.21996   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                          	 0.000812031	 200       	 0         	 0         	 9.85184   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 50, m: 50, k: 50)  	 0.000630615	 100       	 39.6438   	 0         	 9.51452   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 96, n: 50, r2: 1)                    	 0.000587832	 100       	 0         	 0         	 19.8696   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 1, r1low: 0, n: 50, r2: 50)                     	 0.000538755	 100       	 0         	 0         	 7.42453   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                          	 0.000493372	 100       	 0         	 0         	 8.10747   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                            	 0.000455048	 100       	 1.09879   	 0         	 13.1854   	 0.0833333 
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 1, Xr2: 50, Qr1: 1, Qr2: 0)          	 0.000436242	 100       	 0         	 0         	 9.16922   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 50)                                                                	 0.000435636	 100       	 0         	 0         	 9.18198   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                 	 0.000395183	 100       	 0.632618  	 0         	 10.1219   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 96, n: 50, r2: 1)                                                                                 	 0.000382321	 100       	 1.25549   	 0         	 20.0878   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                 	 0.00033326	 100       	 0.750165  	 0         	 12.0026   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 0, m: 4800, k: 50)  	 6.82e-06  	 100       	 0         	 0         	 28152.5   	 0         
Timing statistics:
function                                                                                                                                                                                      	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                        	 7.30735   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_normalized(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                     	 7.30726   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::rightNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                            	 5.55344   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::rightNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                        	 5.55205   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double]	 5.06491   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                  	 2.06081   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                               	 1.91244   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_leftOrthogonalize(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&) [with T = double]                                   	 1.75373   	 100       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                            	 1.34521   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]           	 1.24764   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.716749  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                	 0.417373  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                           	 0.398796  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                    	 0.236967  	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double]        	 0.191178  	 1800      
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                                       	 0.152712  	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.126379  	 900       
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                       	 0.0847859 	 800       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                	 0.0669316 	 1300      
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                        	 0.0557565 	 1000      
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double]          	 0.0512791 	 900       
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                              	 0.0477889 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double]       	 0.0430205 	 900       
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                	 0.00830325	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                              	 0.00427365	 6400      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                         	 0.00341252	 5200      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                           	 0.0017551 	 800       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                       	 0.00111076	 300       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                         	 0.00093411	 100       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                                                  	 0.000455048	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
orthoX: L, orthoY: L
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 64
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->65  [0m[1;34m1->66  [0m[1;34m2->67  [0m[1;34m3->68  [0m[1;34m4->69  [0m[1;34m5->70  [0m[1;34m6->71  [0m[1;34m7->72  [0m[1;34m8->73  [0m[1;34m9->74  [0m[1;34m10->75  [0m[1;34m11->76  [0m[1;34m12->77  [0m[1;34m13->78  [0m[1;34m14->79  [0m[1;34m15->80  [0m[1;34m16->81  [0m[1;34m17->82  [0m[1;34m18->83  [0m[1;34m19->84  [0m[1;34m20->85  [0m[1;34m21->86  [0m[1;34m22->87  [0m[1;34m23->88  [0m[1;34m24->89  [0m[1;34m25->90  [0m[1;34m26->91  [0m[1;34m27->92  [0m[1;34m28->93  [0m[1;34m29->94  [0m[1;34m30->95  [0m[1;34m31->96  [0m[1;34m32->97  [0m[1;34m33->98  [0m[1;34m34->99  [0m[1;34m35->100  [0m[1;34m36->101  [0m[1;34m37->102  [0m[1;34m38->103  [0m[1;34m39->104  [0m[1;34m40->105  [0m[1;34m41->106  [0m[1;34m42->107  [0m[1;34m43->108  [0m[1;34m44->109  [0m[1;34m45->110  [0m[1;34m46->111  [0m[1;34m47->112  [0m[1;34m48->113  [0m[1;34m49->114  [0m[1;34m50->115  [0m[1;34m51->116  [0m[1;34m52->117  [0m[1;34m53->118  [0m[1;34m54->119  [0m[1;34m55->120  [0m[1;34m56->121  [0m[1;34m57->122  [0m[1;34m58->123  [0m[1;34m59->124  [0m[1;34m60->125  [0m[1;34m61->126  [0m[1;34m62->127  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22492986701696 -> hwthread 65 - OK[0m[1;34m
[0m[1;34m	threadid 22492810831872 -> hwthread 66 - OK[0m[1;34m
[0m[1;34m	threadid 22492609505408 -> hwthread 67 - OK[0m[1;34m
[0m[1;34m	threadid 22492408178944 -> hwthread 68 - OK[0m[1;34m
[0m[1;34m	threadid 22492206852480 -> hwthread 69 - OK[0m[1;34m
[0m[1;34m	threadid 22492005526016 -> hwthread 70 - OK[0m[1;34m
[0m[1;34m	threadid 22491804199552 -> hwthread 71 - OK[0m[1;34m
[0m[1;34m	threadid 22491602873088 -> hwthread 72 - OK[0m[1;34m
[0m[1;34m	threadid 22491401546624 -> hwthread 73 - OK[0m[1;34m
[0m[1;34m	threadid 22491200220160 -> hwthread 74 - OK[0m[1;34m
[0m[1;34m	threadid 22490998893696 -> hwthread 75 - OK[0m[1;34m
[0m[1;34m	threadid 22490797567232 -> hwthread 76 - OK[0m[1;34m
[0m[1;34m	threadid 22490596240768 -> hwthread 77 - OK[0m[1;34m
[0m[1;34m	threadid 22490394914304 -> hwthread 78 - OK[0m[1;34m
[0m[1;34m	threadid 22490193587840 -> hwthread 79 - OK[0m[1;34m
[0m[1;34m	threadid 22489992261376 -> hwthread 80 - OK[0m[1;34m
[0m[1;34m	threadid 22489790934912 -> hwthread 81 - OK[0m[1;34m
[0m[1;34m	threadid 22489589608448 -> hwthread 82 - OK[0m[1;34m
[0m[1;34m	threadid 22489388281984 -> hwthread 83 - OK[0m[1;34m
[0m[1;34m	threadid 22489186955520 -> hwthread 84 - OK[0m[1;34m
[0m[1;34m	threadid 22488985629056 -> hwthread 85 - OK[0m[1;34m
[0m[1;34m	threadid 22488784302592 -> hwthread 86 - OK[0m[1;34m
[0m[1;34m	threadid 22488582976128 -> hwthread 87 - OK[0m[1;34m
[0m[1;34m	threadid 22488381649664 -> hwthread 88 - OK[0m[1;34m
[0m[1;34m	threadid 22488180323200 -> hwthread 89 - OK[0m[1;34m
[0m[1;34m	threadid 22487978996736 -> hwthread 90 - OK[0m[1;34m
[0m[1;34m	threadid 22487777670272 -> hwthread 91 - OK[0m[1;34m
[0m[1;34m	threadid 22487576343808 -> hwthread 92 - OK[0m[1;34m
[0m[1;34m	threadid 22487375017344 -> hwthread 93 - OK[0m[1;34m
[0m[1;34m	threadid 22487173690880 -> hwthread 94 - OK[0m[1;34m
[0m[1;34m	threadid 22486972364416 -> hwthread 95 - OK[0m[1;34m
[0m[1;34m	threadid 22486771037952 -> hwthread 96 - OK[0m[1;34m
[0m[1;34m	threadid 22486569707392 -> hwthread 97 - OK[0m[1;34m
[0m[1;34m	threadid 22486368380928 -> hwthread 98 - OK[0m[1;34m
[0m[1;34m	threadid 22486167054464 -> hwthread 99 - OK[0m[1;34m
[0m[1;34m	threadid 22485965728000 -> hwthread 100 - OK[0m[1;34m
[0m[1;34m	threadid 22485764401536 -> hwthread 101 - OK[0m[1;34m
[0m[1;34m	threadid 22485563075072 -> hwthread 102 - OK[0m[1;34m
[0m[1;34m	threadid 22485361748608 -> hwthread 103 - OK[0m[1;34m
[0m[1;34m	threadid 22485160422144 -> hwthread 104 - OK[0m[1;34m
[0m[1;34m	threadid 22484959095680 -> hwthread 105 - OK[0m[1;34m
[0m[1;34m	threadid 22484757769216 -> hwthread 106 - OK[0m[1;34m
[0m[1;34m	threadid 22484556442752 -> hwthread 107 - OK[0m[1;34m
[0m[1;34m	threadid 22484355116288 -> hwthread 108 - OK[0m[1;34m
[0m[1;34m	threadid 22484153789824 -> hwthread 109 - OK[0m[1;34m
[0m[1;34m	threadid 22483952463360 -> hwthread 110 - OK[0m[1;34m
[0m[1;34m	threadid 22483751136896 -> hwthread 111 - OK[0m[1;34m
[0m[1;34m	threadid 22483549810432 -> hwthread 112 - OK[0m[1;34m
[0m[1;34m	threadid 22483348483968 -> hwthread 113 - OK[0m[1;34m
[0m[1;34m	threadid 22483147157504 -> hwthread 114 - OK[0m[1;34m
[0m[1;34m	threadid 22482945831040 -> hwthread 115 - OK[0m[1;34m
[0m[1;34m	threadid 22482744504576 -> hwthread 116 - OK[0m[1;34m
[0m[1;34m	threadid 22482543178112 -> hwthread 117 - OK[0m[1;34m
[0m[1;34m	threadid 22482341851648 -> hwthread 118 - OK[0m[1;34m
[0m[1;34m	threadid 22482140525184 -> hwthread 119 - OK[0m[1;34m
[0m[1;34m	threadid 22481939198720 -> hwthread 120 - OK[0m[1;34m
[0m[1;34m	threadid 22481737872256 -> hwthread 121 - OK[0m[1;34m
[0m[1;34m	threadid 22481536545792 -> hwthread 122 - OK[0m[1;34m
[0m[1;34m	threadid 22481335219328 -> hwthread 123 - OK[0m[1;34m
[0m[1;34m	threadid 22481133892864 -> hwthread 124 - OK[0m[1;34m
[0m[1;34m	threadid 22480932566400 -> hwthread 125 - OK[0m[1;34m
[0m[1;34m	threadid 22480731239936 -> hwthread 126 - OK[0m[1;34m
[0m[1;34m	threadid 22480529913472 -> hwthread 127 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22492881041152 -> hwthread 64 - OK[0m[1;34m
[0m[1;34m	threadid 22492702467840 -> hwthread 65 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 147, m: 147)                                                               	 1.85909   	 700       	 11.1632   	 0         	 0.195717  	 57.0373   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 7350, cols: 147, reductionFactor: 30, colBlockingSize: 12)                 	 1.1829    	 600       	 166.493   	 0         	 4.47198   	 37.2304   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 7350, cols: 97, reductionFactor: 37, colBlockingSize: 12)                  	 0.671426  	 700       	 148.096   	 0         	 6.0248    	 24.581    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 147, r: 147, r2: 7350, leftOrthog: 0)      	 0.357018  	 600       	 533.843   	 0         	 44.1601   	 12.0888   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 147, n: 50, r: 147, r2: 147)          	 0.334949  	 600       	 569.017   	 0         	 31.2766   	 18.1931   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 7350, Xcols: 97, r: 97, streamingCols: 0)                   	 0.225576  	 700       	 214.603   	 0         	 35.5153   	 6.04256   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 147, Qr2: 97)      	 0.173181  	 700       	 0         	 0         	 62.0336   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 147, reductionFactor: 30, colBlockingSize: 12)                 	 0.148549  	 100       	 75.1583   	 0         	 2.09553   	 35.8661   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 97, m: 97)                                                                  	 0.128707  	 800       	 7.5638    	 0         	 1.40842   	 5.37043   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 97, m: 4850, k: 97) 	 0.0850435 	 700       	 751.229   	 0         	 62.5766   	 12.005    
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 7350, m: 97)                                                                       	 0.0827576 	 700       	 0         	 0         	 96.4871   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 97, reductionFactor: 37, colBlockingSize: 12)                  	 0.0779963 	 100       	 61.9471   	 0         	 2.5838    	 23.9752   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 147)                                                                	 0.0758966 	 100       	 4.09329   	 0         	 0.181826  	 22.5121   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 97, n: 50, r2: 97)                                                                                         	 0.0647958 	 700       	 0         	 0         	 81.3176   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 97, k: 2500)   	 0.0491747 	 800       	 394.512   	 0         	 48.4607   	 8.14086   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 4850, k: 97) 	 0.0441095 	 700       	 746.585   	 0         	 91.1295   	 8.19257   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                 	 0.0426501 	 100       	 2.73544   	 0         	 0.141618  	 19.3157   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 7350, m: 97)                                                              	 0.0420654 	 700       	 0         	 0         	 189.825   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 2500, m: 97, k: 50)	 0.0385165 	 800       	 503.68    	 0         	 61.8706   	 8.14086   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 97, n: 50, r2: 97)                   	 0.0345696 	 700       	 0         	 0         	 230.984   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 7350, cols: 50, reductionFactor: 37, colBlockingSize: 12)                  	 0.0311969 	 100       	 120.984   	 0         	 9.48813   	 12.7511   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 147, r: 147, r2: 2500, leftOrthog: 0)      	 0.0271331 	 100       	 398.204   	 0         	 33.7807   	 11.7879   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r: 147, r2: 147)           	 0.0259232 	 100       	 416.788   	 0         	 23.3492   	 17.8502   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 147, n: 50, r: 147, r2: 50)           	 0.0255805 	 100       	 422.372   	 0         	 45.5128   	 9.2803    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 7350, leftOrthog: 0)        	 0.0207298 	 100       	 177.281   	 0         	 42.7405   	 4.14786   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 147, reductionFactor: 30, colBlockingSize: 12)                   	 0.017738  	 100       	 12.5884   	 0         	 1.30607   	 9.63832   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 97, r: 97, streamingCols: 0)                   	 0.0170243 	 100       	 138.17    	 0         	 23.012    	 6.00426   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 2500, m: 97)                                                                       	 0.00885683	 100       	 0         	 0         	 43.808    	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 4850, k: 50) 	 0.00862874	 100       	 281.038   	 0         	 45.1978   	 6.21795   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 50, Qr2: 97)       	 0.00760914	 100       	 0         	 0         	 77.2754   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 97)                                                              	 0.00727033	 100       	 0         	 0         	 53.3676   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 0, n: 50, r2: 97)                    	 0.00666532	 100       	 0         	 0         	 58.2118   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                  	 0.0044778 	 100       	 3.72205   	 0         	 1.34888   	 2.75937   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 147, r: 50, r2: 50, leftOrthog: 0)         	 0.00319551	 100       	 23.001    	 0         	 6.77199   	 3.39649   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 50, reductionFactor: 37, colBlockingSize: 12)                    	 0.00312137	 100       	 8.22578   	 0         	 1.28149   	 6.41892   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 97)                                                                                         	 0.00285397	 100       	 0         	 0         	 135.951   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 97, m: 97, fromLeft: 0)                	 0.00267147	 800       	 0         	 0         	 45.0821   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 97, m: 50, k: 97)   	 0.00130993	 100       	 71.828    	 0         	 11.6702   	 6.15482   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 50, k: 97)   	 0.00111775	 100       	 43.3907   	 0         	 8.73183   	 4.96926   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50, k: 50)     	 0.00102325	 100       	 24.4319   	 0         	 5.86366   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 97, n: 50, r2: 1)                                                                                          	 0.000870403	 200       	 0         	 0         	 17.8308   	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                   	 0.000854158	 100       	 0.585372  	 0         	 2.34149   	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 50, r2: 50)              	 0.000845307	 100       	 29.5751   	 0         	 7.09801   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                          	 0.000838053	 200       	 0         	 0         	 9.54594   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 50, m: 50, k: 50)  	 0.000631562	 100       	 39.5844   	 0         	 9.50025   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 97, n: 50, r2: 1)                    	 0.000577598	 100       	 0         	 0         	 20.3602   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 1, r1low: 0, n: 50, r2: 50)                     	 0.00057271	 100       	 0         	 0         	 6.98434   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                          	 0.000550587	 100       	 0         	 0         	 7.26497   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                            	 0.000451114	 100       	 1.10837   	 0         	 13.3004   	 0.0833333 
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 50)                                                                	 0.000442799	 100       	 0         	 0         	 9.03344   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 1, Xr2: 50, Qr1: 1, Qr2: 0)          	 0.000423093	 100       	 0         	 0         	 9.45419   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                 	 0.000395566	 100       	 0.632006  	 0         	 10.1121   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 97, n: 50, r2: 1)                                                                                 	 0.000365145	 100       	 1.32824   	 0         	 21.2518   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                 	 0.000330805	 100       	 0.755732  	 0         	 12.0917   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 0, m: 4850, k: 50)  	 6.65e-06  	 100       	 0         	 0         	 29172.9   	 0         
Timing statistics:
function                                                                                                                                                                                      	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                        	 7.42348   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_normalized(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                     	 7.42342   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::rightNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                            	 5.65309   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::rightNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                        	 5.6518    	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double]	 5.14867   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                  	 2.13292   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                               	 1.97763   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_leftOrthogonalize(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&) [with T = double]                                   	 1.77025   	 100       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                            	 1.38096   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]           	 1.29719   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.753025  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                	 0.408076  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                           	 0.387298  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                    	 0.2426    	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                                       	 0.181213  	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double]        	 0.140216  	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.133185  	 900       
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                       	 0.0916144 	 800       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                	 0.0699088 	 1300      
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double]          	 0.050198  	 900       
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                              	 0.0497785 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                        	 0.0423852 	 1000      
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double]       	 0.0391481 	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                         	 0.0191361 	 5200      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                	 0.00644568	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                              	 0.00418113	 6400      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                           	 0.00267147	 800       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                       	 0.00109152	 300       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                         	 0.000854158	 100       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                                                  	 0.000451114	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
orthoX: L, orthoY: L
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 64
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->65  [0m[1;34m1->66  [0m[1;34m2->67  [0m[1;34m3->68  [0m[1;34m4->69  [0m[1;34m5->70  [0m[1;34m6->71  [0m[1;34m7->72  [0m[1;34m8->73  [0m[1;34m9->74  [0m[1;34m10->75  [0m[1;34m11->76  [0m[1;34m12->77  [0m[1;34m13->78  [0m[1;34m14->79  [0m[1;34m15->80  [0m[1;34m16->81  [0m[1;34m17->82  [0m[1;34m18->83  [0m[1;34m19->84  [0m[1;34m20->85  [0m[1;34m21->86  [0m[1;34m22->87  [0m[1;34m23->88  [0m[1;34m24->89  [0m[1;34m25->90  [0m[1;34m26->91  [0m[1;34m27->92  [0m[1;34m28->93  [0m[1;34m29->94  [0m[1;34m30->95  [0m[1;34m31->96  [0m[1;34m32->97  [0m[1;34m33->98  [0m[1;34m34->99  [0m[1;34m35->100  [0m[1;34m36->101  [0m[1;34m37->102  [0m[1;34m38->103  [0m[1;34m39->104  [0m[1;34m40->105  [0m[1;34m41->106  [0m[1;34m42->107  [0m[1;34m43->108  [0m[1;34m44->109  [0m[1;34m45->110  [0m[1;34m46->111  [0m[1;34m47->112  [0m[1;34m48->113  [0m[1;34m49->114  [0m[1;34m50->115  [0m[1;34m51->116  [0m[1;34m52->117  [0m[1;34m53->118  [0m[1;34m54->119  [0m[1;34m55->120  [0m[1;34m56->121  [0m[1;34m57->122  [0m[1;34m58->123  [0m[1;34m59->124  [0m[1;34m60->125  [0m[1;34m61->126  [0m[1;34m62->127  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22875802011520 -> hwthread 65 - OK[0m[1;34m
[0m[1;34m	threadid 22875599792128 -> hwthread 66 - OK[0m[1;34m
[0m[1;34m	threadid 22875398465664 -> hwthread 67 - OK[0m[1;34m
[0m[1;34m	threadid 22875197139200 -> hwthread 68 - OK[0m[1;34m
[0m[1;34m	threadid 22874995812736 -> hwthread 69 - OK[0m[1;34m
[0m[1;34m	threadid 22874794486272 -> hwthread 70 - OK[0m[1;34m
[0m[1;34m	threadid 22874593159808 -> hwthread 71 - OK[0m[1;34m
[0m[1;34m	threadid 22874391833344 -> hwthread 72 - OK[0m[1;34m
[0m[1;34m	threadid 22874190506880 -> hwthread 73 - OK[0m[1;34m
[0m[1;34m	threadid 22873989180416 -> hwthread 74 - OK[0m[1;34m
[0m[1;34m	threadid 22873787853952 -> hwthread 75 - OK[0m[1;34m
[0m[1;34m	threadid 22873586527488 -> hwthread 76 - OK[0m[1;34m
[0m[1;34m	threadid 22873385201024 -> hwthread 77 - OK[0m[1;34m
[0m[1;34m	threadid 22873183874560 -> hwthread 78 - OK[0m[1;34m
[0m[1;34m	threadid 22872982548096 -> hwthread 79 - OK[0m[1;34m
[0m[1;34m	threadid 22872781221632 -> hwthread 80 - OK[0m[1;34m
[0m[1;34m	threadid 22872579895168 -> hwthread 81 - OK[0m[1;34m
[0m[1;34m	threadid 22872378568704 -> hwthread 82 - OK[0m[1;34m
[0m[1;34m	threadid 22872177242240 -> hwthread 83 - OK[0m[1;34m
[0m[1;34m	threadid 22871975915776 -> hwthread 84 - OK[0m[1;34m
[0m[1;34m	threadid 22871774589312 -> hwthread 85 - OK[0m[1;34m
[0m[1;34m	threadid 22871573262848 -> hwthread 86 - OK[0m[1;34m
[0m[1;34m	threadid 22871371936384 -> hwthread 87 - OK[0m[1;34m
[0m[1;34m	threadid 22871170609920 -> hwthread 88 - OK[0m[1;34m
[0m[1;34m	threadid 22870969283456 -> hwthread 89 - OK[0m[1;34m
[0m[1;34m	threadid 22870767956992 -> hwthread 90 - OK[0m[1;34m
[0m[1;34m	threadid 22870566630528 -> hwthread 91 - OK[0m[1;34m
[0m[1;34m	threadid 22870365304064 -> hwthread 92 - OK[0m[1;34m
[0m[1;34m	threadid 22870163977600 -> hwthread 93 - OK[0m[1;34m
[0m[1;34m	threadid 22869962651136 -> hwthread 94 - OK[0m[1;34m
[0m[1;34m	threadid 22869761324672 -> hwthread 95 - OK[0m[1;34m
[0m[1;34m	threadid 22869559998208 -> hwthread 96 - OK[0m[1;34m
[0m[1;34m	threadid 22869358667648 -> hwthread 97 - OK[0m[1;34m
[0m[1;34m	threadid 22869157341184 -> hwthread 98 - OK[0m[1;34m
[0m[1;34m	threadid 22868956014720 -> hwthread 99 - OK[0m[1;34m
[0m[1;34m	threadid 22868754688256 -> hwthread 100 - OK[0m[1;34m
[0m[1;34m	threadid 22868553361792 -> hwthread 101 - OK[0m[1;34m
[0m[1;34m	threadid 22868352035328 -> hwthread 102 - OK[0m[1;34m
[0m[1;34m	threadid 22868150708864 -> hwthread 103 - OK[0m[1;34m
[0m[1;34m	threadid 22867949382400 -> hwthread 104 - OK[0m[1;34m
[0m[1;34m	threadid 22867748055936 -> hwthread 105 - OK[0m[1;34m
[0m[1;34m	threadid 22867546729472 -> hwthread 106 - OK[0m[1;34m
[0m[1;34m	threadid 22867345403008 -> hwthread 107 - OK[0m[1;34m
[0m[1;34m	threadid 22867144076544 -> hwthread 108 - OK[0m[1;34m
[0m[1;34m	threadid 22866942750080 -> hwthread 109 - OK[0m[1;34m
[0m[1;34m	threadid 22866741423616 -> hwthread 110 - OK[0m[1;34m
[0m[1;34m	threadid 22866540097152 -> hwthread 111 - OK[0m[1;34m
[0m[1;34m	threadid 22866338770688 -> hwthread 112 - OK[0m[1;34m
[0m[1;34m	threadid 22866137444224 -> hwthread 113 - OK[0m[1;34m
[0m[1;34m	threadid 22865936117760 -> hwthread 114 - OK[0m[1;34m
[0m[1;34m	threadid 22865734791296 -> hwthread 115 - OK[0m[1;34m
[0m[1;34m	threadid 22865533464832 -> hwthread 116 - OK[0m[1;34m
[0m[1;34m	threadid 22865332138368 -> hwthread 117 - OK[0m[1;34m
[0m[1;34m	threadid 22865130811904 -> hwthread 118 - OK[0m[1;34m
[0m[1;34m	threadid 22864929485440 -> hwthread 119 - OK[0m[1;34m
[0m[1;34m	threadid 22864728158976 -> hwthread 120 - OK[0m[1;34m
[0m[1;34m	threadid 22864526832512 -> hwthread 121 - OK[0m[1;34m
[0m[1;34m	threadid 22864325506048 -> hwthread 122 - OK[0m[1;34m
[0m[1;34m	threadid 22864124179584 -> hwthread 123 - OK[0m[1;34m
[0m[1;34m	threadid 22863922853120 -> hwthread 124 - OK[0m[1;34m
[0m[1;34m	threadid 22863721526656 -> hwthread 125 - OK[0m[1;34m
[0m[1;34m	threadid 22863520200192 -> hwthread 126 - OK[0m[1;34m
[0m[1;34m	threadid 22863318873728 -> hwthread 127 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22875696350976 -> hwthread 64 - OK[0m[1;34m
[0m[1;34m	threadid 22875689760512 -> hwthread 65 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 148, m: 148)                                                               	 1.81472   	 700       	 11.6711   	 0         	 0.203236  	 57.4262   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 7400, cols: 148, reductionFactor: 30, colBlockingSize: 12)                 	 1.19765   	 600       	 167.822   	 0         	 4.47719   	 37.4837   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 7400, cols: 98, reductionFactor: 37, colBlockingSize: 12)                  	 0.679192  	 700       	 150.453   	 0         	 6.05853   	 24.8333   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 148, r: 148, r2: 7400, leftOrthog: 0)      	 0.379053  	 600       	 513.141   	 0         	 42.1608   	 12.1711   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 148, n: 50, r: 148, r2: 148)          	 0.344524  	 600       	 564.569   	 0         	 30.8224   	 18.3168   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 7400, Xcols: 98, r: 98, streamingCols: 0)                   	 0.229711  	 700       	 216.571   	 0         	 35.4756   	 6.10479   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 148, Qr2: 98)      	 0.162651  	 700       	 0         	 0         	 66.9793   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 148, reductionFactor: 30, colBlockingSize: 12)                 	 0.146678  	 100       	 77.1556   	 0         	 2.13749   	 36.0964   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 98, m: 98)                                                                  	 0.12813   	 800       	 7.83529   	 0         	 1.44403   	 5.42599   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 98, m: 4900, k: 98) 	 0.084298  	 700       	 781.554   	 0         	 64.4384   	 12.1287   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 98, reductionFactor: 37, colBlockingSize: 12)                  	 0.0801776 	 100       	 61.5108   	 0         	 2.5404    	 24.213    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 148)                                                                	 0.076916  	 100       	 4.06504   	 0         	 0.180457  	 22.5264   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 7400, m: 98)                                                                       	 0.0760404 	 700       	 0         	 0         	 106.815   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 98, n: 50, r2: 98)                                                                                         	 0.0658365 	 700       	 0         	 0         	 81.6909   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 98, k: 2500)   	 0.0493541 	 800       	 397.13    	 0         	 48.6152   	 8.16885   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 4900, k: 98) 	 0.044971  	 700       	 747.46    	 0         	 90.9155   	 8.22148   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 7400, m: 98)                                                              	 0.044038  	 700       	 0         	 0         	 184.437   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                 	 0.0422662 	 100       	 2.76028   	 0         	 0.142904  	 19.3157   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 2500, m: 98, k: 50)	 0.0396426 	 800       	 494.418   	 0         	 60.5249   	 8.16885   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 98, n: 50, r2: 98)                   	 0.0322415 	 700       	 0         	 0         	 251.919   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 7400, cols: 50, reductionFactor: 37, colBlockingSize: 12)                  	 0.0311058 	 100       	 122.164   	 0         	 9.5802    	 12.7517   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 148, r: 148, r2: 2500, leftOrthog: 0)      	 0.0279305 	 100       	 392.117   	 0         	 33.048    	 11.8651   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 148, n: 50, r: 148, r2: 50)           	 0.02515   	 100       	 435.467   	 0         	 46.8421   	 9.29648   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r: 148, r2: 148)           	 0.0234032 	 100       	 467.971   	 0         	 26.0445   	 17.9681   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 7400, leftOrthog: 0)        	 0.0211231 	 100       	 175.164   	 0         	 42.2287   	 4.14798   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 148, reductionFactor: 30, colBlockingSize: 12)                   	 0.0178802 	 100       	 12.6588   	 0         	 1.31113   	 9.65488   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 98, r: 98, streamingCols: 0)                   	 0.0168589 	 100       	 142.418   	 0         	 23.4797   	 6.06556   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 2500, m: 98)                                                                       	 0.00803736	 100       	 0         	 0         	 48.7723   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 50, Qr2: 98)       	 0.00767884	 100       	 0         	 0         	 77.095    	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 50, reductionFactor: 37, colBlockingSize: 12)                    	 0.00663101	 100       	 3.87206   	 0         	 0.603226  	 6.41892   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 98)                                                              	 0.00661268	 100       	 0         	 0         	 59.2801   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 0, n: 50, r2: 98)                    	 0.00655394	 100       	 0         	 0         	 59.8114   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                  	 0.00440678	 100       	 3.78203   	 0         	 1.37061   	 2.75937   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 4900, k: 50) 	 0.00416073	 100       	 588.839   	 0         	 94.6949   	 6.21827   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 148, r: 50, r2: 50, leftOrthog: 0)         	 0.00325848	 100       	 22.71     	 0         	 6.67796   	 3.40074   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 98)                                                                                         	 0.00289812	 100       	 0         	 0         	 135.26    	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 98, m: 98, fromLeft: 0)                	 0.00228173	 800       	 0         	 0         	 53.8763   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 98, m: 50, k: 98)   	 0.00132026	 100       	 72.7431   	 0         	 11.7577   	 6.18687   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 50, k: 98)   	 0.00108186	 100       	 45.2925   	 0         	 9.09548   	 4.97967   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50, k: 50)     	 0.000921742	 100       	 27.1226   	 0         	 6.50941   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 98, n: 50, r2: 1)                                                                                          	 0.000873678	 200       	 0         	 0         	 17.9471   	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                   	 0.000852771	 100       	 0.586324  	 0         	 2.3453    	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 50, r2: 50)              	 0.000843162	 100       	 29.6503   	 0         	 7.11607   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                          	 0.000790805	 200       	 0         	 0         	 10.1163   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 50, m: 50, k: 50)  	 0.000670196	 100       	 37.3025   	 0         	 8.9526    	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 98, n: 50, r2: 1)                    	 0.000572906	 100       	 0         	 0         	 20.6666   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 1, r1low: 0, n: 50, r2: 50)                     	 0.000566083	 100       	 0         	 0         	 7.0661    	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                          	 0.000512301	 100       	 0         	 0         	 7.80791   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 50)                                                                	 0.000440995	 100       	 0         	 0         	 9.0704    	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                            	 0.000436578	 100       	 1.14527   	 0         	 13.7432   	 0.0833333 
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 1, Xr2: 50, Qr1: 1, Qr2: 0)          	 0.000424044	 100       	 0         	 0         	 9.43298   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                 	 0.000391595	 100       	 0.638415  	 0         	 10.2146   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 98, n: 50, r2: 1)                                                                                 	 0.000364405	 100       	 1.34466   	 0         	 21.5145   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                 	 0.000328129	 100       	 0.761895  	 0         	 12.1903   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 0, m: 4900, k: 50)  	 7.32e-06  	 100       	 0         	 0         	 26776     	 0         
Timing statistics:
function                                                                                                                                                                                      	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                        	 7.42487   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_normalized(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                     	 7.42481   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::rightNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                            	 5.66592   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::rightNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                        	 5.66463   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double]	 5.19354   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                  	 2.15931   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                               	 1.9339    	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_leftOrthogonalize(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&) [with T = double]                                   	 1.75881   	 100       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                            	 1.39393   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]           	 1.31057   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.766458  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                	 0.431365  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                           	 0.39392   	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                    	 0.24657   	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                                       	 0.170754  	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double]        	 0.135839  	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.132537  	 900       
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                       	 0.0840777 	 800       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                	 0.0709114 	 1300      
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                              	 0.0510916 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double]          	 0.0502759 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double]       	 0.0403128 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                        	 0.0399344 	 1000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                	 0.00765246	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                              	 0.00424726	 6400      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                         	 0.00371631	 5200      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                           	 0.00228173	 800       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                       	 0.00108413	 300       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                         	 0.000852771	 100       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                                                  	 0.000436578	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
orthoX: L, orthoY: L
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 64
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->65  [0m[1;34m1->66  [0m[1;34m2->67  [0m[1;34m3->68  [0m[1;34m4->69  [0m[1;34m5->70  [0m[1;34m6->71  [0m[1;34m7->72  [0m[1;34m8->73  [0m[1;34m9->74  [0m[1;34m10->75  [0m[1;34m11->76  [0m[1;34m12->77  [0m[1;34m13->78  [0m[1;34m14->79  [0m[1;34m15->80  [0m[1;34m16->81  [0m[1;34m17->82  [0m[1;34m18->83  [0m[1;34m19->84  [0m[1;34m20->85  [0m[1;34m21->86  [0m[1;34m22->87  [0m[1;34m23->88  [0m[1;34m24->89  [0m[1;34m25->90  [0m[1;34m26->91  [0m[1;34m27->92  [0m[1;34m28->93  [0m[1;34m29->94  [0m[1;34m30->95  [0m[1;34m31->96  [0m[1;34m32->97  [0m[1;34m33->98  [0m[1;34m34->99  [0m[1;34m35->100  [0m[1;34m36->101  [0m[1;34m37->102  [0m[1;34m38->103  [0m[1;34m39->104  [0m[1;34m40->105  [0m[1;34m41->106  [0m[1;34m42->107  [0m[1;34m43->108  [0m[1;34m44->109  [0m[1;34m45->110  [0m[1;34m46->111  [0m[1;34m47->112  [0m[1;34m48->113  [0m[1;34m49->114  [0m[1;34m50->115  [0m[1;34m51->116  [0m[1;34m52->117  [0m[1;34m53->118  [0m[1;34m54->119  [0m[1;34m55->120  [0m[1;34m56->121  [0m[1;34m57->122  [0m[1;34m58->123  [0m[1;34m59->124  [0m[1;34m60->125  [0m[1;34m61->126  [0m[1;34m62->127  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22662684190592 -> hwthread 65 - OK[0m[1;34m
[0m[1;34m	threadid 22662462040064 -> hwthread 66 - OK[0m[1;34m
[0m[1;34m	threadid 22662260713600 -> hwthread 67 - OK[0m[1;34m
[0m[1;34m	threadid 22662059387136 -> hwthread 68 - OK[0m[1;34m
[0m[1;34m	threadid 22661858060672 -> hwthread 69 - OK[0m[1;34m
[0m[1;34m	threadid 22661656734208 -> hwthread 70 - OK[0m[1;34m
[0m[1;34m	threadid 22661455407744 -> hwthread 71 - OK[0m[1;34m
[0m[1;34m	threadid 22661254081280 -> hwthread 72 - OK[0m[1;34m
[0m[1;34m	threadid 22661052754816 -> hwthread 73 - OK[0m[1;34m
[0m[1;34m	threadid 22660851428352 -> hwthread 74 - OK[0m[1;34m
[0m[1;34m	threadid 22660650101888 -> hwthread 75 - OK[0m[1;34m
[0m[1;34m	threadid 22660448775424 -> hwthread 76 - OK[0m[1;34m
[0m[1;34m	threadid 22660247448960 -> hwthread 77 - OK[0m[1;34m
[0m[1;34m	threadid 22660046122496 -> hwthread 78 - OK[0m[1;34m
[0m[1;34m	threadid 22659844796032 -> hwthread 79 - OK[0m[1;34m
[0m[1;34m	threadid 22659643469568 -> hwthread 80 - OK[0m[1;34m
[0m[1;34m	threadid 22659442143104 -> hwthread 81 - OK[0m[1;34m
[0m[1;34m	threadid 22659240816640 -> hwthread 82 - OK[0m[1;34m
[0m[1;34m	threadid 22659039490176 -> hwthread 83 - OK[0m[1;34m
[0m[1;34m	threadid 22658838163712 -> hwthread 84 - OK[0m[1;34m
[0m[1;34m	threadid 22658636837248 -> hwthread 85 - OK[0m[1;34m
[0m[1;34m	threadid 22658435510784 -> hwthread 86 - OK[0m[1;34m
[0m[1;34m	threadid 22658234184320 -> hwthread 87 - OK[0m[1;34m
[0m[1;34m	threadid 22658032857856 -> hwthread 88 - OK[0m[1;34m
[0m[1;34m	threadid 22657831531392 -> hwthread 89 - OK[0m[1;34m
[0m[1;34m	threadid 22657630204928 -> hwthread 90 - OK[0m[1;34m
[0m[1;34m	threadid 22657428878464 -> hwthread 91 - OK[0m[1;34m
[0m[1;34m	threadid 22657227552000 -> hwthread 92 - OK[0m[1;34m
[0m[1;34m	threadid 22657026225536 -> hwthread 93 - OK[0m[1;34m
[0m[1;34m	threadid 22656824899072 -> hwthread 94 - OK[0m[1;34m
[0m[1;34m	threadid 22656623572608 -> hwthread 95 - OK[0m[1;34m
[0m[1;34m	threadid 22656422246144 -> hwthread 96 - OK[0m[1;34m
[0m[1;34m	threadid 22656220915584 -> hwthread 97 - OK[0m[1;34m
[0m[1;34m	threadid 22656019589120 -> hwthread 98 - OK[0m[1;34m
[0m[1;34m	threadid 22655818262656 -> hwthread 99 - OK[0m[1;34m
[0m[1;34m	threadid 22655616936192 -> hwthread 100 - OK[0m[1;34m
[0m[1;34m	threadid 22655415609728 -> hwthread 101 - OK[0m[1;34m
[0m[1;34m	threadid 22655214283264 -> hwthread 102 - OK[0m[1;34m
[0m[1;34m	threadid 22655012956800 -> hwthread 103 - OK[0m[1;34m
[0m[1;34m	threadid 22654811630336 -> hwthread 104 - OK[0m[1;34m
[0m[1;34m	threadid 22654610303872 -> hwthread 105 - OK[0m[1;34m
[0m[1;34m	threadid 22654408977408 -> hwthread 106 - OK[0m[1;34m
[0m[1;34m	threadid 22654207650944 -> hwthread 107 - OK[0m[1;34m
[0m[1;34m	threadid 22654006324480 -> hwthread 108 - OK[0m[1;34m
[0m[1;34m	threadid 22653804998016 -> hwthread 109 - OK[0m[1;34m
[0m[1;34m	threadid 22653603671552 -> hwthread 110 - OK[0m[1;34m
[0m[1;34m	threadid 22653402345088 -> hwthread 111 - OK[0m[1;34m
[0m[1;34m	threadid 22653201018624 -> hwthread 112 - OK[0m[1;34m
[0m[1;34m	threadid 22652999692160 -> hwthread 113 - OK[0m[1;34m
[0m[1;34m	threadid 22652798365696 -> hwthread 114 - OK[0m[1;34m
[0m[1;34m	threadid 22652597039232 -> hwthread 115 - OK[0m[1;34m
[0m[1;34m	threadid 22652395712768 -> hwthread 116 - OK[0m[1;34m
[0m[1;34m	threadid 22652194386304 -> hwthread 117 - OK[0m[1;34m
[0m[1;34m	threadid 22651993059840 -> hwthread 118 - OK[0m[1;34m
[0m[1;34m	threadid 22651791733376 -> hwthread 119 - OK[0m[1;34m
[0m[1;34m	threadid 22651590406912 -> hwthread 120 - OK[0m[1;34m
[0m[1;34m	threadid 22651389080448 -> hwthread 121 - OK[0m[1;34m
[0m[1;34m	threadid 22651187753984 -> hwthread 122 - OK[0m[1;34m
[0m[1;34m	threadid 22650986427520 -> hwthread 123 - OK[0m[1;34m
[0m[1;34m	threadid 22650785101056 -> hwthread 124 - OK[0m[1;34m
[0m[1;34m	threadid 22650583774592 -> hwthread 125 - OK[0m[1;34m
[0m[1;34m	threadid 22650382448128 -> hwthread 126 - OK[0m[1;34m
[0m[1;34m	threadid 22650181121664 -> hwthread 127 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22662578530048 -> hwthread 64 - OK[0m[1;34m
[0m[1;34m	threadid 22662571939584 -> hwthread 65 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 149, m: 149)                                                               	 1.91241   	 700       	 11.3009   	 0         	 0.195466  	 57.8151   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 7450, cols: 149, reductionFactor: 30, colBlockingSize: 12)                 	 1.21032   	 600       	 169.454   	 0         	 4.4904    	 37.7369   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 7450, cols: 99, reductionFactor: 37, colBlockingSize: 12)                  	 0.694324  	 700       	 151.208   	 0         	 6.02768   	 25.0856   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 149, r: 149, r2: 7450, leftOrthog: 0)      	 0.366269  	 600       	 541.888   	 0         	 44.2239   	 12.2533   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 149, n: 50, r: 149, r2: 149)          	 0.347581  	 600       	 571.024   	 0         	 30.9656   	 18.4406   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 7450, Xcols: 99, r: 99, streamingCols: 0)                   	 0.231761  	 700       	 220.538   	 0         	 35.761    	 6.16701   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 149, Qr2: 99)      	 0.1854    	 700       	 0         	 0         	 59.5823   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 149, reductionFactor: 30, colBlockingSize: 12)                 	 0.149027  	 100       	 76.9696   	 0         	 2.11882   	 36.3266   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 99, m: 99)                                                                  	 0.134365  	 800       	 7.70281   	 0         	 1.40523   	 5.48154   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 99, m: 4950, k: 99) 	 0.0943409 	 700       	 719.952   	 0         	 58.7597   	 12.2525   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 7450, m: 99)                                                                       	 0.0839536 	 700       	 0         	 0         	 98.3943   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 99, reductionFactor: 37, colBlockingSize: 12)                  	 0.08147   	 100       	 61.7767   	 0         	 2.52659   	 24.4507   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 149)                                                                	 0.0773628 	 100       	 4.06741   	 0         	 0.180448  	 22.5406   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 99, n: 50, r2: 99)                                                                                         	 0.0647942 	 700       	 0         	 0         	 84.7076   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 99, k: 2500)   	 0.0483717 	 800       	 409.33    	 0         	 49.94     	 8.19645   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 7450, m: 99)                                                              	 0.0463092 	 700       	 0         	 0         	 178.378   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 4950, k: 99) 	 0.0461185 	 700       	 743.813   	 0         	 90.1591   	 8.25      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                 	 0.0428994 	 100       	 2.71954   	 0         	 0.140795  	 19.3157   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 2500, m: 99, k: 50)	 0.0396415 	 800       	 499.477   	 0         	 60.9382   	 8.19645   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 99, n: 50, r2: 99)                   	 0.0381722 	 700       	 0         	 0         	 216.402   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 7450, cols: 50, reductionFactor: 37, colBlockingSize: 12)                  	 0.0314473 	 100       	 121.654   	 0         	 9.53977   	 12.7523   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 149, r: 149, r2: 2500, leftOrthog: 0)      	 0.0275508 	 100       	 402.91    	 0         	 33.7385   	 11.9422   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 149, n: 50, r: 149, r2: 50)           	 0.0260805 	 100       	 425.624   	 0         	 45.7046   	 9.3125    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r: 149, r2: 149)           	 0.025995  	 100       	 427.024   	 0         	 23.6107   	 18.086    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 7450, leftOrthog: 0)        	 0.0210876 	 100       	 176.644   	 0         	 42.5843   	 4.14811   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 99, r: 99, streamingCols: 0)                   	 0.0176482 	 100       	 138.838   	 0         	 22.6607   	 6.12684   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 149, reductionFactor: 30, colBlockingSize: 12)                   	 0.0174884 	 100       	 13.1179   	 0         	 1.35637   	 9.67127   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 4950, k: 50) 	 0.0103586 	 100       	 238.932   	 0         	 38.4222   	 6.21859   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 2500, m: 99)                                                                       	 0.00889418	 100       	 0         	 0         	 44.5235   	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 99)                                                              	 0.00776234	 100       	 0         	 0         	 51.0155   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 50, Qr2: 99)       	 0.00772257	 100       	 0         	 0         	 77.1764   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 0, n: 50, r2: 99)                    	 0.00760418	 100       	 0         	 0         	 52.0766   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                  	 0.00465942	 100       	 3.57697   	 0         	 1.2963    	 2.75937   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 50, reductionFactor: 37, colBlockingSize: 12)                    	 0.00376275	 100       	 6.82364   	 0         	 1.06305   	 6.41892   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 149, r: 50, r2: 50, leftOrthog: 0)         	 0.00363707	 100       	 20.4835   	 0         	 6.01584   	 3.40494   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 99)                                                                                         	 0.00306404	 100       	 0         	 0         	 129.241   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 99, m: 99, fromLeft: 0)                	 0.00271927	 800       	 0         	 0         	 46.1348   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 99, m: 50, k: 99)   	 0.0013249 	 100       	 73.9755   	 0         	 11.8959   	 6.21859   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 50, k: 99)   	 0.00105458	 100       	 46.9379   	 0         	 9.40654   	 4.98992   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50, k: 50)     	 0.00104642	 100       	 23.891    	 0         	 5.73385   	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                   	 0.000904213	 100       	 0.552967  	 0         	 2.21187   	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 50, r2: 50)              	 0.000872526	 100       	 28.6524   	 0         	 6.87659   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 99, n: 50, r2: 1)                                                                                          	 0.000863165	 200       	 0         	 0         	 18.3511   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                          	 0.000859121	 200       	 0         	 0         	 9.31184   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 99, n: 50, r2: 1)                    	 0.000716711	 100       	 0         	 0         	 16.6315   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 50, m: 50, k: 50)  	 0.0006485 	 100       	 38.5505   	 0         	 9.25212   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                          	 0.00054656	 100       	 0         	 0         	 7.3185    	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 1, r1low: 0, n: 50, r2: 50)                     	 0.000533325	 100       	 0         	 0         	 7.50012   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 1, Xr2: 50, Qr1: 1, Qr2: 0)          	 0.000484441	 100       	 0         	 0         	 8.25694   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                            	 0.000471362	 100       	 1.06076   	 0         	 12.7291   	 0.0833333 
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 50)                                                                	 0.000413072	 100       	 0         	 0         	 9.68354   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                 	 0.000390603	 100       	 0.640036  	 0         	 10.2406   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 99, n: 50, r2: 1)                                                                                 	 0.000379433	 100       	 1.30458   	 0         	 20.8733   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                 	 0.000339091	 100       	 0.737265  	 0         	 11.7962   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 0, m: 4950, k: 50)  	 6.212e-06 	 100       	 0         	 0         	 31873.8   	 0         
Timing statistics:
function                                                                                                                                                                                      	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                        	 7.70145   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_normalized(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                     	 7.70137   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::rightNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                            	 5.85523   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::rightNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                        	 5.85388   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double]	 5.3195    	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                  	 2.18784   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                               	 2.03268   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_leftOrthogonalize(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&) [with T = double]                                   	 1.84603   	 100       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                            	 1.40892   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]           	 1.35326   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.78008   	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                	 0.418545  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                           	 0.400529  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                    	 0.249409  	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                                       	 0.193607  	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double]        	 0.153204  	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.139024  	 900       
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                       	 0.0928478 	 800       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                	 0.0701271 	 1300      
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                              	 0.0544846 	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                         	 0.0544302 	 5200      
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double]          	 0.0494181 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                        	 0.0470264 	 1000      
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double]       	 0.04029   	 900       
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                	 0.00830228	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                              	 0.00423056	 6400      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                           	 0.00271927	 800       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                       	 0.00110913	 300       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                         	 0.000904213	 100       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                                                  	 0.000471362	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
orthoX: L, orthoY: L
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 64
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->65  [0m[1;34m1->66  [0m[1;34m2->67  [0m[1;34m3->68  [0m[1;34m4->69  [0m[1;34m5->70  [0m[1;34m6->71  [0m[1;34m7->72  [0m[1;34m8->73  [0m[1;34m9->74  [0m[1;34m10->75  [0m[1;34m11->76  [0m[1;34m12->77  [0m[1;34m13->78  [0m[1;34m14->79  [0m[1;34m15->80  [0m[1;34m16->81  [0m[1;34m17->82  [0m[1;34m18->83  [0m[1;34m19->84  [0m[1;34m20->85  [0m[1;34m21->86  [0m[1;34m22->87  [0m[1;34m23->88  [0m[1;34m24->89  [0m[1;34m25->90  [0m[1;34m26->91  [0m[1;34m27->92  [0m[1;34m28->93  [0m[1;34m29->94  [0m[1;34m30->95  [0m[1;34m31->96  [0m[1;34m32->97  [0m[1;34m33->98  [0m[1;34m34->99  [0m[1;34m35->100  [0m[1;34m36->101  [0m[1;34m37->102  [0m[1;34m38->103  [0m[1;34m39->104  [0m[1;34m40->105  [0m[1;34m41->106  [0m[1;34m42->107  [0m[1;34m43->108  [0m[1;34m44->109  [0m[1;34m45->110  [0m[1;34m46->111  [0m[1;34m47->112  [0m[1;34m48->113  [0m[1;34m49->114  [0m[1;34m50->115  [0m[1;34m51->116  [0m[1;34m52->117  [0m[1;34m53->118  [0m[1;34m54->119  [0m[1;34m55->120  [0m[1;34m56->121  [0m[1;34m57->122  [0m[1;34m58->123  [0m[1;34m59->124  [0m[1;34m60->125  [0m[1;34m61->126  [0m[1;34m62->127  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22942652938112 -> hwthread 65 - OK[0m[1;34m
[0m[1;34m	threadid 22942440220672 -> hwthread 66 - OK[0m[1;34m
[0m[1;34m	threadid 22942238894208 -> hwthread 67 - OK[0m[1;34m
[0m[1;34m	threadid 22942037567744 -> hwthread 68 - OK[0m[1;34m
[0m[1;34m	threadid 22941836241280 -> hwthread 69 - OK[0m[1;34m
[0m[1;34m	threadid 22941634914816 -> hwthread 70 - OK[0m[1;34m
[0m[1;34m	threadid 22941433588352 -> hwthread 71 - OK[0m[1;34m
[0m[1;34m	threadid 22941232261888 -> hwthread 72 - OK[0m[1;34m
[0m[1;34m	threadid 22941030935424 -> hwthread 73 - OK[0m[1;34m
[0m[1;34m	threadid 22940829608960 -> hwthread 74 - OK[0m[1;34m
[0m[1;34m	threadid 22940628282496 -> hwthread 75 - OK[0m[1;34m
[0m[1;34m	threadid 22940426956032 -> hwthread 76 - OK[0m[1;34m
[0m[1;34m	threadid 22940225629568 -> hwthread 77 - OK[0m[1;34m
[0m[1;34m	threadid 22940024303104 -> hwthread 78 - OK[0m[1;34m
[0m[1;34m	threadid 22939822976640 -> hwthread 79 - OK[0m[1;34m
[0m[1;34m	threadid 22939621650176 -> hwthread 80 - OK[0m[1;34m
[0m[1;34m	threadid 22939420323712 -> hwthread 81 - OK[0m[1;34m
[0m[1;34m	threadid 22939218997248 -> hwthread 82 - OK[0m[1;34m
[0m[1;34m	threadid 22939017670784 -> hwthread 83 - OK[0m[1;34m
[0m[1;34m	threadid 22938816344320 -> hwthread 84 - OK[0m[1;34m
[0m[1;34m	threadid 22938615017856 -> hwthread 85 - OK[0m[1;34m
[0m[1;34m	threadid 22938413691392 -> hwthread 86 - OK[0m[1;34m
[0m[1;34m	threadid 22938212364928 -> hwthread 87 - OK[0m[1;34m
[0m[1;34m	threadid 22938011038464 -> hwthread 88 - OK[0m[1;34m
[0m[1;34m	threadid 22937809712000 -> hwthread 89 - OK[0m[1;34m
[0m[1;34m	threadid 22937608385536 -> hwthread 90 - OK[0m[1;34m
[0m[1;34m	threadid 22937407059072 -> hwthread 91 - OK[0m[1;34m
[0m[1;34m	threadid 22937205732608 -> hwthread 92 - OK[0m[1;34m
[0m[1;34m	threadid 22937004406144 -> hwthread 93 - OK[0m[1;34m
[0m[1;34m	threadid 22936803079680 -> hwthread 94 - OK[0m[1;34m
[0m[1;34m	threadid 22936601753216 -> hwthread 95 - OK[0m[1;34m
[0m[1;34m	threadid 22936400426752 -> hwthread 96 - OK[0m[1;34m
[0m[1;34m	threadid 22936199096192 -> hwthread 97 - OK[0m[1;34m
[0m[1;34m	threadid 22935997769728 -> hwthread 98 - OK[0m[1;34m
[0m[1;34m	threadid 22935796443264 -> hwthread 99 - OK[0m[1;34m
[0m[1;34m	threadid 22935595116800 -> hwthread 100 - OK[0m[1;34m
[0m[1;34m	threadid 22935393790336 -> hwthread 101 - OK[0m[1;34m
[0m[1;34m	threadid 22935192463872 -> hwthread 102 - OK[0m[1;34m
[0m[1;34m	threadid 22934991137408 -> hwthread 103 - OK[0m[1;34m
[0m[1;34m	threadid 22934789810944 -> hwthread 104 - OK[0m[1;34m
[0m[1;34m	threadid 22934588484480 -> hwthread 105 - OK[0m[1;34m
[0m[1;34m	threadid 22934387158016 -> hwthread 106 - OK[0m[1;34m
[0m[1;34m	threadid 22934185831552 -> hwthread 107 - OK[0m[1;34m
[0m[1;34m	threadid 22933984505088 -> hwthread 108 - OK[0m[1;34m
[0m[1;34m	threadid 22933783178624 -> hwthread 109 - OK[0m[1;34m
[0m[1;34m	threadid 22933581852160 -> hwthread 110 - OK[0m[1;34m
[0m[1;34m	threadid 22933380525696 -> hwthread 111 - OK[0m[1;34m
[0m[1;34m	threadid 22933179199232 -> hwthread 112 - OK[0m[1;34m
[0m[1;34m	threadid 22932977872768 -> hwthread 113 - OK[0m[1;34m
[0m[1;34m	threadid 22932776546304 -> hwthread 114 - OK[0m[1;34m
[0m[1;34m	threadid 22932575219840 -> hwthread 115 - OK[0m[1;34m
[0m[1;34m	threadid 22932373893376 -> hwthread 116 - OK[0m[1;34m
[0m[1;34m	threadid 22932172566912 -> hwthread 117 - OK[0m[1;34m
[0m[1;34m	threadid 22931971240448 -> hwthread 118 - OK[0m[1;34m
[0m[1;34m	threadid 22931769913984 -> hwthread 119 - OK[0m[1;34m
[0m[1;34m	threadid 22931568587520 -> hwthread 120 - OK[0m[1;34m
[0m[1;34m	threadid 22931367261056 -> hwthread 121 - OK[0m[1;34m
[0m[1;34m	threadid 22931165934592 -> hwthread 122 - OK[0m[1;34m
[0m[1;34m	threadid 22930964608128 -> hwthread 123 - OK[0m[1;34m
[0m[1;34m	threadid 22930763281664 -> hwthread 124 - OK[0m[1;34m
[0m[1;34m	threadid 22930561955200 -> hwthread 125 - OK[0m[1;34m
[0m[1;34m	threadid 22930360628736 -> hwthread 126 - OK[0m[1;34m
[0m[1;34m	threadid 22930159302272 -> hwthread 127 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22942547277568 -> hwthread 64 - OK[0m[1;34m
[0m[1;34m	threadid 22942540687104 -> hwthread 65 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                       	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 150, m: 150)                                                                	 1.87251   	 700       	 11.7756   	 0         	 0.202317  	 58.204    
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 7500, cols: 150, reductionFactor: 30, colBlockingSize: 12)                  	 1.20999   	 600       	 172.936   	 0         	 4.55211   	 37.9902   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 7500, cols: 100, reductionFactor: 37, colBlockingSize: 12)                  	 0.703961  	 700       	 153.187   	 0         	 6.04579   	 25.3378   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 150, r: 150, r2: 7500, leftOrthog: 0)       	 0.370513  	 600       	 546.54    	 0         	 44.3061   	 12.3355   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 150, n: 50, r: 150, r2: 150)           	 0.362617  	 600       	 558.441   	 0         	 30.0814   	 18.5644   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 7500, Xcols: 100, r: 100, streamingCols: 0)                  	 0.237396  	 700       	 221.15    	 0         	 35.5019   	 6.22924   
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 150, Qr2: 100)      	 0.183146  	 700       	 0         	 0         	 61.1534   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 150, reductionFactor: 30, colBlockingSize: 12)                  	 0.151824  	 100       	 76.5687   	 0         	 2.09452   	 36.5566   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 100, m: 100)                                                                 	 0.133983  	 800       	 7.96122   	 0         	 1.4378    	 5.53709   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 7500, m: 100)                                                                       	 0.0932754 	 700       	 0         	 0         	 90.0559   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 100, m: 5000, k: 100)	 0.0866924 	 700       	 807.453   	 0         	 65.2422   	 12.3762   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 100, reductionFactor: 37, colBlockingSize: 12)                  	 0.0828146 	 100       	 62.0076   	 0         	 2.51163   	 24.6881   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 150)                                                                 	 0.0776957 	 100       	 4.07573   	 0         	 0.180705  	 22.5546   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 100, n: 50, r2: 100)                                                                                        	 0.0695178 	 700       	 0         	 0         	 80.5549   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 100, k: 2500)   	 0.0499151 	 800       	 400.68    	 0         	 48.7227   	 8.22368   
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 5000, k: 100) 	 0.0467176 	 700       	 749.183   	 0         	 90.5013   	 8.27815   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                  	 0.0445549 	 100       	 2.61849   	 0         	 0.135563  	 19.3157   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 7500, m: 100)                                                              	 0.0442848 	 700       	 0         	 0         	 189.681   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 2500, m: 100, k: 50)	 0.0377564 	 800       	 529.712   	 0         	 64.4129   	 8.22368   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 100, n: 50, r2: 100)                  	 0.0357649 	 700       	 0         	 0         	 234.867   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 7500, cols: 50, reductionFactor: 37, colBlockingSize: 12)                   	 0.0324488 	 100       	 118.69    	 0         	 9.30697   	 12.7528   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 150, r: 150, r2: 2500, leftOrthog: 0)       	 0.0283974 	 100       	 396.163   	 0         	 32.9607   	 12.0192   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r: 150, r2: 150)            	 0.0275381 	 100       	 408.525   	 0         	 22.4416   	 18.2039   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 150, n: 50, r: 150, r2: 50)            	 0.02675   	 100       	 420.562   	 0         	 45.0842   	 9.32836   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 7500, leftOrthog: 0)         	 0.0217084 	 100       	 172.744   	 0         	 41.6429   	 4.14823   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 150, reductionFactor: 30, colBlockingSize: 12)                    	 0.0177465 	 100       	 13.1012   	 0         	 1.35238   	 9.6875    
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 100, r: 100, streamingCols: 0)                  	 0.0173057 	 100       	 144.461   	 0         	 23.345    	 6.18812   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 2500, m: 100)                                                                       	 0.00827527	 100       	 0         	 0         	 48.3368   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 50, Xr2: 50, Qr1: 50, Qr2: 100)       	 0.00784891	 100       	 0         	 0         	 76.4438   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 5000, k: 50)  	 0.00779128	 100       	 320.872   	 0         	 51.5962   	 6.21891   
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 100)                                                              	 0.0069692 	 100       	 0         	 0         	 57.3954   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 0, n: 50, r2: 100)                    	 0.00689631	 100       	 0         	 0         	 58.002    	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                   	 0.00463721	 100       	 3.5941    	 0         	 1.30251   	 2.75937   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 50, reductionFactor: 37, colBlockingSize: 12)                     	 0.00377851	 100       	 6.79519   	 0         	 1.05862   	 6.41892   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 100)                                                                                         	 0.0030695 	 100       	 0         	 0         	 130.314   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 150, r: 50, r2: 50, leftOrthog: 0)          	 0.00306746	 100       	 24.4502   	 0         	 7.17207   	 3.40909   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 100, m: 100, fromLeft: 0)               	 0.00194101	 800       	 0         	 0         	 65.9451   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 100, m: 50, k: 100)  	 0.00140281	 100       	 71.2855   	 0         	 11.4057   	 6.25      
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 50, m: 50, k: 100)   	 0.00102892	 100       	 48.5945   	 0         	 9.71891   	 5         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                    	 0.000957413	 100       	 0.522241  	 0         	 2.08896   	 0.25      
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50, k: 50)      	 0.000934378	 100       	 26.7558   	 0         	 6.42138   	 4.16667   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 50, r2: 50)               	 0.000882475	 100       	 28.3294   	 0         	 6.79906   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 100, n: 50, r2: 1)                                                                                          	 0.000867032	 200       	 0         	 0         	 18.4538   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                           	 0.000785306	 200       	 0         	 0         	 10.1871   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double](n: 50, m: 50, k: 50)   	 0.000660908	 100       	 37.8267   	 0         	 9.07842   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 50, r1low: 100, n: 50, r2: 1)                    	 0.000565282	 100       	 0         	 0         	 21.2283   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                           	 0.000527089	 100       	 0         	 0         	 7.58885   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1upp: 1, r1low: 0, n: 50, r2: 50)                      	 0.000499722	 100       	 0         	 0         	 8.00445   	 0         
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                             	 0.000460742	 100       	 1.08521   	 0         	 13.0225   	 0.0833333 
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](n(all): 50, Xr1: 1, Xr2: 50, Qr1: 1, Qr2: 0)           	 0.000409086	 100       	 0         	 0         	 9.7779    	 0         
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 50)                                                                 	 0.0004029 	 100       	 0         	 0         	 9.92802   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                  	 0.000390189	 100       	 0.640715  	 0         	 10.2514   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 100, n: 50, r2: 1)                                                                                 	 0.000371881	 100       	 1.34452   	 0         	 21.5123   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                  	 0.000346096	 100       	 0.722343  	 0         	 11.5575   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double](n: 0, m: 5000, k: 50)   	 7.7e-06   	 100       	 0         	 0         	 25974     	 0         
Timing statistics:
function                                                                                                                                                                                      	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                        	 7.72533   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_normalized(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                     	 7.72526   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::rightNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                            	 5.85162   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::rightNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                        	 5.8502    	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double]	 5.27546   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                  	 2.20256   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                               	 1.99476   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_leftOrthogonalize(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&) [with T = double]                                   	 1.87354   	 100       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                            	 1.41266   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]           	 1.37562   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.791052  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                	 0.423686  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                           	 0.417787  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                    	 0.254702  	 800       
<PITTS::Tensor3<double>> :: void PITTS::internal::concat3_X0Q(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                                       	 0.191404  	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract3(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>) [with T = double]        	 0.143641  	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.13862   	 900       
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                       	 0.101551  	 800       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                	 0.0747668 	 1300      
<double> :: void PITTS::internal::normalize_qb_copy(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                              	 0.0516569 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract1l(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2<T>&) [with T = double]          	 0.0508495 	 900       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_concat1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                        	 0.0437262 	 1000      
<PITTS::Tensor3<double>> :: void PITTS::internal::axpby_ortho_contract2(const PITTS::ConstTensor2View<T>&, const PITTS::ConstTensor2View<T>&, PITTS::Tensor2View<T>&) [with T = double]       	 0.0384173 	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                         	 0.0192577 	 5200      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                	 0.00631165	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                              	 0.00480841	 6400      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                           	 0.00194101	 800       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                       	 0.00110817	 300       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                         	 0.000957413	 100       
<PITTS::Tensor3<double>> :: void PITTS::internal::t3_axpy(T, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                                                                  	 0.000460742	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
