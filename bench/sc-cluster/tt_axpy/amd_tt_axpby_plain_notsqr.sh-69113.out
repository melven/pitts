[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22829699282816 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22829496002560 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22829294676096 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22829093349632 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22828892023168 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22828690696704 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22828489370240 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22828288043776 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22828086717312 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22827885390848 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22827684064384 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22827482737920 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22827281411456 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22827080084992 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22826878758528 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22826677432064 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22826476105600 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22826274779136 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22826073452672 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22825872126208 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22825670799744 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22825469473280 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22825268146816 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22825066820352 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22824865493888 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22824664167424 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22824462840960 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22824261514496 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22824060188032 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22823858861568 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22823657535104 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22823456208640 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22823254878080 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22823053551616 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22822852225152 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22822650898688 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22822449572224 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22822248245760 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22822046919296 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22821845592832 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22821644266368 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22821442939904 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22821241613440 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22821040286976 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22820838960512 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22820637634048 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22820436307584 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22820234981120 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22820033654656 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22819832328192 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22819631001728 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22819429675264 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22819228348800 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22819027022336 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22818825695872 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22818624369408 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22818423042944 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22818221716480 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22818020390016 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22817819063552 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22817617737088 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22817416410624 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22817215084160 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22829593622272 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22829587031808 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_TENSORTRAIN_NORMALIZE_PLAIN_QB PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2550, m: 51)                                                                             	 1.22273   	 600       	 26.1239   	 0         	 1.03147   	 25.3268   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 51, m: 2550)                                                                              	 1.01043   	 700       	 9.1285    	 0         	 1.45623   	 6.26859   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 51)                                                                             	 0.213483  	 100       	 24.4501   	 0         	 0.965516  	 25.3233   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2550, m: 50)                                                                             	 0.19851   	 100       	 25.7753   	 0         	 1.03793   	 24.8334   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 51, m: 2500)                                                                              	 0.143897  	 100       	 8.97625   	 0         	 1.43242   	 6.26648   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 51, n: 50, r2new: 51)	 0.10013   	 700       	 89.1697   	 0         	 14.4125   	 6.18697   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 51, n: 50, r: 51, r2: 51)                           	 0.0597942 	 700       	 155.292   	 0         	 24.6032   	 6.31188   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 51)                                                                               	 0.0417632 	 100       	 2.84142   	 0         	 0.14654   	 19.39     
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 51, r1_: 51, n: 50, r2: 51)                         	 0.0379716 	 600       	 209.605   	 0         	 33.2081   	 6.31188   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2550, r: 51, r2: 51, leftOrthog: 1)                      	 0.0292801 	 600       	 271.825   	 0         	 64.8117   	 4.19408   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 51, n: 50, r2new: 50)	 0.0143878 	 100       	 86.9142   	 0         	 14.1843   	 6.1275    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 51, r1_: 50, n: 50, r2: 51)                         	 0.00921143	 100       	 141.183   	 0         	 22.5893   	 6.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 51, n: 50, r: 51, r2: 50)                           	 0.00843535	 100       	 154.173   	 0         	 24.6676   	 6.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 51, r1_: 51, n: 50, r2: 50)                         	 0.00618839	 100       	 210.152   	 0         	 33.3012   	 6.31063   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 51, m: 50)                                                                                	 0.00470046	 100       	 3.65211   	 0         	 1.302     	 2.805     
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2550, r: 50, r2: 50, leftOrthog: 1)                      	 0.00436289	 100       	 292.238   	 0         	 71.0539   	 4.1129    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 51, r2: 51, leftOrthog: 1)                      	 0.00420104	 100       	 309.566   	 0         	 73.8298   	 4.19298   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 1)                                                                                                         	 0.00353886	 1000      	 0         	 0         	 0.226061  	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 51) 	 0.00166553	 100       	 15.6167   	 0         	 3.69901   	 4.22185   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 51, m: 51, fromLeft: 1)                              	 0.00131771	 800       	 0         	 0         	 25.2656   	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000936554	 100       	 0.533872  	 0         	 2.13549   	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 51, n: 50, r2new: 1) 	 0.000928794	 100       	 0.549099  	 0         	 4.39452   	 0.124951  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000854592	 100       	 29.2537   	 0         	 7.02089   	 4.16667   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 51, r2: 51)                            	 0.000816125	 100       	 31.8701   	 0         	 7.54884   	 4.22185   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 51)                           	 0.000671441	 100       	 0         	 0         	 6.07648   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 51)                                                                                                        	 0.00055318	 100       	 0         	 0         	 7.37554   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000388906	 100       	 0.642829  	 0         	 10.2853   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 51, n: 50, r: 2, r2: 1)                             	 0.000359663	 100       	 2.83599   	 0         	 17.0204   	 0.166623  
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 51, leftOrthog: 1)                        	 0.000344966	 100       	 73.9203   	 0         	 29.3362   	 2.51976   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 51, m: 50, fromLeft: 1)                              	 0.000165481	 100       	 0         	 0         	 24.6554   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 4.18994   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 4.18991   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 2.29736   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 1.77336   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 1.77195   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 1.71647   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 1.67648   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 1.15902   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.117112  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.0694053 	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.054226  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.038189  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.00409204	 1100      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00183972	 4600      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00148319	 900       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000936554	 100       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.000771553	 4600      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000671441	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000388906	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22923876874112 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22923649738752 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22923448412288 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22923247085824 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22923045759360 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22922844432896 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22922643106432 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22922441779968 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22922240453504 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22922039127040 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22921837800576 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22921636474112 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22921435147648 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22921233821184 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22921032494720 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22920831168256 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22920629841792 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22920428515328 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22920227188864 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22920025862400 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22919824535936 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22919623209472 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22919421883008 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22919220556544 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22919019230080 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22918817903616 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22918616577152 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22918415250688 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22918213924224 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22918012597760 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22917811271296 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22917609944832 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22917408614272 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22917207287808 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22917005961344 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22916804634880 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22916603308416 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22916401981952 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22916200655488 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22915999329024 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22915798002560 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22915596676096 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22915395349632 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22915194023168 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22914992696704 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22914791370240 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22914590043776 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22914388717312 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22914187390848 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22913986064384 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22913784737920 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22913583411456 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22913382084992 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22913180758528 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22912979432064 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22912778105600 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22912576779136 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22912375452672 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22912174126208 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22911972799744 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22911771473280 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22911570146816 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22911368820352 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22923771213568 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22923764623104 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_TENSORTRAIN_NORMALIZE_PLAIN_QB PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2600, m: 52)                                                                             	 1.34187   	 600       	 25.2323   	 0         	 0.977108  	 25.8235   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 52, m: 2600)                                                                              	 1.03074   	 700       	 9.48533   	 0         	 1.48405   	 6.39152   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2600, m: 50)                                                                             	 0.235081  	 100       	 22.1909   	 0         	 0.893477  	 24.8365   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 52)                                                                             	 0.224924  	 100       	 24.127    	 0         	 0.93456   	 25.8165   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 52, m: 2500)                                                                              	 0.140365  	 100       	 9.56524   	 0         	 1.49756   	 6.38723   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 52, n: 50, r2new: 52)	 0.127283  	 700       	 71.6086   	 0         	 11.5756   	 6.18615   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 52, n: 50, r: 52, r2: 52)                           	 0.0784192 	 700       	 125.512   	 0         	 19.5027   	 6.43564   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 52)                                                                               	 0.0443599 	 100       	 2.72017   	 0         	 0.139766  	 19.4624   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 52, r1_: 52, n: 50, r2: 52)                         	 0.0413176 	 600       	 204.186   	 0         	 31.7274   	 6.43564   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2600, r: 52, r2: 52, leftOrthog: 1)                      	 0.0345975 	 600       	 243.847   	 0         	 57.0226   	 4.27632   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 52, n: 50, r2new: 50)	 0.0210903 	 100       	 59.3638   	 0         	 9.7789    	 6.0706    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 52, n: 50, r: 52, r2: 50)                           	 0.0125993 	 100       	 107.308   	 0         	 17.0042   	 6.31068   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 52, r1_: 50, n: 50, r2: 52)                         	 0.0111689 	 100       	 121.05    	 0         	 19.1818   	 6.31068   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 52, r1_: 52, n: 50, r2: 50)                         	 0.00815004	 100       	 165.889   	 0         	 25.7868   	 6.4331    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2600, r: 50, r2: 50, leftOrthog: 1)                      	 0.00552954	 100       	 235.101   	 0         	 57.1476   	 4.11392   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 52, m: 50)                                                                                	 0.00477983	 100       	 3.69608   	 0         	 1.29712   	 2.84945   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 52, r2: 52, leftOrthog: 1)                      	 0.0046578 	 100       	 290.266   	 0         	 67.9132   	 4.27407   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 2, n: 50, r2: 2)                                                                                                         	 0.00278445	 800       	 0         	 0         	 0.919392  	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 52) 	 0.00174302	 100       	 15.5133   	 0         	 3.62773   	 4.27632   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 52, m: 52, fromLeft: 1)                              	 0.00139956	 800       	 0         	 0         	 24.7301   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 52, n: 50, r2new: 1) 	 0.00113916	 100       	 0.456477  	 0         	 3.65322   	 0.124952  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.00101764	 100       	 24.5666   	 0         	 5.89599   	 4.16667   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 52, r2: 52)                            	 0.00089739	 100       	 30.1318   	 0         	 7.04621   	 4.27632   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000876784	 100       	 0.570266  	 0         	 2.28106   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 52)                           	 0.000695392	 100       	 0         	 0         	 5.98224   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 52)                                                                                                        	 0.000563975	 100       	 0         	 0         	 7.37621   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 52, n: 50, r: 2, r2: 1)                             	 0.000530276	 100       	 1.96124   	 0         	 11.7705   	 0.166624  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 2)                                                                                                         	 0.000396848	 100       	 0         	 0         	 0.403177  	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000365727	 100       	 0.68357   	 0         	 10.9371   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 2, n: 50, r2: 1)                                                                                                         	 0.000345566	 100       	 0         	 0         	 0.463009  	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 52, leftOrthog: 1)                        	 0.00025768	 100       	 100.9     	 0         	 39.7392   	 2.53906   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 52, m: 50, fromLeft: 1)                              	 0.00019024	 100       	 0         	 0         	 21.8671   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 4.5588    	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 4.55876   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 2.4406    	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 1.96399   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 1.96266   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 1.89307   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 1.84623   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 1.17589   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.151256  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.0924461 	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.0616542 	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.0450425 	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.00409084	 1100      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00207652	 4600      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0015898 	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.000938743	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000876784	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000695392	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000365727	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22842177587072 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22841978251264 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22841776924800 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22841575598336 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22841374271872 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22841172945408 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22840971618944 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22840770292480 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22840568966016 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22840367639552 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22840166313088 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22839964986624 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22839763660160 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22839562333696 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22839361007232 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22839159680768 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22838958354304 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22838757027840 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22838555701376 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22838354374912 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22838153048448 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22837951721984 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22837750395520 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22837549069056 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22837347742592 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22837146416128 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22836945089664 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22836743763200 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22836542436736 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22836341110272 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22836139783808 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22835938457344 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22835737126784 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22835535800320 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22835334473856 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22835133147392 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22834931820928 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22834730494464 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22834529168000 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22834327841536 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22834126515072 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22833925188608 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22833723862144 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22833522535680 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22833321209216 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22833119882752 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22832918556288 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22832717229824 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22832515903360 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22832314576896 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22832113250432 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22831911923968 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22831710597504 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22831509271040 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22831307944576 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22831106618112 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22830905291648 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22830703965184 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22830502638720 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22830301312256 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22830099985792 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22829898659328 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22829697332864 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22842071926528 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22842065336064 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_TENSORTRAIN_NORMALIZE_PLAIN_QB PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2650, m: 53)                                                                             	 1.29933   	 600       	 27.5909   	 0         	 1.04828   	 26.3202   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 53, m: 2650)                                                                              	 1.07857   	 700       	 9.59785   	 0         	 1.47332   	 6.51446   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2650, m: 50)                                                                             	 0.221278  	 100       	 24.0271   	 0         	 0.967289  	 24.8396   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 53)                                                                             	 0.213683  	 100       	 26.3841   	 0         	 1.00284   	 26.3095   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 53, m: 2500)                                                                              	 0.150161  	 100       	 9.28718   	 0         	 1.42706   	 6.5079    
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 53, n: 50, r2new: 53)	 0.114138  	 700       	 81.5537   	 0         	 13.1838   	 6.18592   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 53, n: 50, r: 53, r2: 53)                           	 0.0666113 	 700       	 156.451   	 0         	 23.8514   	 6.55941   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 53)                                                                               	 0.0421283 	 100       	 2.91174   	 0         	 0.149069  	 19.5329   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 53, r1_: 53, n: 50, r2: 53)                         	 0.0414699 	 600       	 215.4     	 0         	 32.8384   	 6.55941   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2650, r: 53, r2: 53, leftOrthog: 1)                      	 0.0399736 	 600       	 223.463   	 0         	 51.27     	 4.35855   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 53, n: 50, r2new: 50)	 0.0161902 	 100       	 77.4853   	 0         	 12.8769   	 6.01736   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 53, r1_: 50, n: 50, r2: 53)                         	 0.0100148 	 100       	 140.242   	 0         	 22.0154   	 6.37019   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 53, n: 50, r: 53, r2: 50)                           	 0.00935296	 100       	 150.166   	 0         	 23.5733   	 6.37019   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 53, r1_: 53, n: 50, r2: 50)                         	 0.00779383	 100       	 180.207   	 0         	 27.4894   	 6.55551   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 53, m: 50)                                                                                	 0.00511343	 100       	 3.55272   	 0         	 1.22814   	 2.89277   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2650, r: 50, r2: 50, leftOrthog: 1)                      	 0.00465113	 100       	 284.877   	 0         	 69.2304   	 4.11491   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 53, r2: 53, leftOrthog: 1)                      	 0.00452082	 100       	 310.674   	 0         	 71.3354   	 4.35511   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 3, n: 50, r2: 3)                                                                                                         	 0.00269011	 800       	 0         	 0         	 2.14118   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 53) 	 0.00180768	 100       	 15.5393   	 0         	 3.58869   	 4.33007   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 53, m: 53, fromLeft: 1)                              	 0.00147939	 800       	 0         	 0         	 24.3041   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 53, n: 50, r2new: 1) 	 0.000933328	 100       	 0.56786   	 0         	 4.5446    	 0.124953  
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 53)                           	 0.000867409	 100       	 0         	 0         	 4.88812   	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000862454	 100       	 0.579741  	 0         	 2.31896   	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000812328	 100       	 30.7757   	 0         	 7.38618   	 4.16667   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 53, r2: 53)                            	 0.000807513	 100       	 34.7858   	 0         	 8.03355   	 4.33007   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 53)                                                                                                        	 0.000536158	 100       	 0         	 0         	 7.90812   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 3)                                                                                                         	 0.000394054	 100       	 0         	 0         	 0.609054  	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000352915	 100       	 0.708386  	 0         	 11.3342   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 53, n: 50, r: 2, r2: 1)                             	 0.00033153	 100       	 3.1973    	 0         	 19.1886   	 0.166625  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 3, n: 50, r2: 1)                                                                                                         	 0.000322844	 100       	 0         	 0         	 0.743393  	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 53, leftOrthog: 1)                        	 0.000244769	 100       	 108.265   	 0         	 42.3256   	 2.55792   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 53, m: 50, fromLeft: 1)                              	 0.000176556	 100       	 0         	 0         	 24.015    	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 4.48443   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 4.4844    	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 2.44465   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 1.90109   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 1.8998    	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 1.82761   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 1.77642   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 1.23384   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.133069  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.0771033 	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.0600908 	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.0493903 	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.00394316	 1100      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00207258	 4600      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00165594	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00102308	 4600      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000867409	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000862454	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000352915	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23337739667328 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23337510103040 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23337308776576 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23337107450112 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23336906123648 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23336704797184 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23336503470720 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23336302144256 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23336100817792 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23335899491328 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23335698164864 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23335496838400 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23335295511936 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23335094185472 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23334892859008 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23334691532544 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23334490206080 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23334288879616 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23334087553152 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23333886226688 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23333684900224 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23333483573760 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23333282247296 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23333080920832 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23332879594368 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23332678267904 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23332476941440 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23332275614976 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23332074288512 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23331872962048 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23331671635584 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23331470309120 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23331268978560 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23331067652096 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23330866325632 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23330664999168 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23330463672704 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23330262346240 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23330061019776 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23329859693312 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23329658366848 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23329457040384 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23329255713920 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23329054387456 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23328853060992 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23328651734528 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23328450408064 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23328249081600 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23328047755136 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23327846428672 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23327645102208 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23327443775744 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23327242449280 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23327041122816 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23326839796352 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23326638469888 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23326437143424 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23326235816960 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23326034490496 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23325833164032 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23325631837568 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23325430511104 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23325229184640 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23337634006784 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23337627416320 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_TENSORTRAIN_NORMALIZE_PLAIN_QB PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2700, m: 54)                                                                             	 1.33277   	 600       	 28.4501   	 0         	 1.0609    	 26.8169   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 54, m: 2700)                                                                              	 1.11819   	 700       	 9.79174   	 0         	 1.47524   	 6.6374    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 54)                                                                             	 0.217986  	 100       	 26.8503   	 0         	 1.00179   	 26.8024   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2700, m: 50)                                                                             	 0.205405  	 100       	 26.3707   	 0         	 1.06151   	 24.8425   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 54, m: 2500)                                                                              	 0.150385  	 100       	 9.62529   	 0         	 1.45211   	 6.62849   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 54, n: 50, r2new: 54)	 0.110074  	 700       	 86.4009   	 0         	 13.966    	 6.18652   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 54, n: 50, r: 54, r2: 54)                           	 0.0676667 	 700       	 162.894   	 0         	 24.3737   	 6.68317   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 54)                                                                               	 0.0437684 	 100       	 2.84833   	 0         	 0.14531   	 19.6017   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 54, r1_: 54, n: 50, r2: 54)                         	 0.040973  	 600       	 230.587   	 0         	 34.5026   	 6.68317   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2700, r: 54, r2: 54, leftOrthog: 1)                      	 0.029153  	 600       	 324.078   	 0         	 72.9776   	 4.44079   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 54, n: 50, r2new: 50)	 0.0161633 	 100       	 77.8306   	 0         	 13.0419   	 5.96774   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 54, r1_: 50, n: 50, r2: 54)                         	 0.0108279 	 100       	 134.652   	 0         	 20.9459   	 6.42857   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 54, n: 50, r: 54, r2: 50)                           	 0.00977784	 100       	 149.113   	 0         	 23.1953   	 6.42857   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 54, r1_: 54, n: 50, r2: 50)                         	 0.00708281	 100       	 205.85    	 0         	 30.8257   	 6.67788   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 54, m: 50)                                                                                	 0.0055286 	 100       	 3.37637   	 0         	 1.15038   	 2.935     
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 54, r2: 54, leftOrthog: 1)                      	 0.00479987	 100       	 303.758   	 0         	 68.4739   	 4.43612   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2700, r: 50, r2: 50, leftOrthog: 1)                      	 0.00445621	 100       	 302.948   	 0         	 73.6052   	 4.11585   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 4, n: 50, r2: 4)                                                                                                         	 0.00271504	 800       	 0         	 0         	 3.77158   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 54) 	 0.001799  	 100       	 16.2091   	 0         	 3.69806   	 4.38312   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 54, m: 54, fromLeft: 1)                              	 0.0015078 	 800       	 0         	 0         	 24.7545   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 54, n: 50, r2new: 1) 	 0.00117953	 100       	 0.457808  	 0         	 3.66382   	 0.124954  
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 54)                           	 0.000860804	 100       	 0         	 0         	 5.01856   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000858459	 100       	 29.1219   	 0         	 6.98927   	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000807455	 100       	 0.61923   	 0         	 2.47692   	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 54, r2: 54)                            	 0.000783467	 100       	 37.2192   	 0         	 8.49149   	 4.38312   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 54, n: 50, r: 2, r2: 1)                             	 0.000624311	 100       	 1.72991   	 0         	 10.382    	 0.166626  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 54)                                                                                                        	 0.000499341	 100       	 0         	 0         	 8.6514    	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 4)                                                                                                         	 0.000413627	 100       	 0         	 0         	 0.773644  	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000348602	 100       	 0.71715   	 0         	 11.4744   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 4, n: 50, r2: 1)                                                                                                         	 0.000322851	 100       	 0         	 0         	 0.991169  	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 54, leftOrthog: 1)                        	 0.000289408	 100       	 93.2939   	 0         	 36.2119   	 2.57634   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 54, m: 50, fromLeft: 1)                              	 0.000182654	 100       	 0         	 0         	 23.6513   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 4.5119    	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 4.51187   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 2.47818   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 1.90244   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 1.9012    	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 1.84033   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 1.79993   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 1.2741    	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.129216  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.0788523 	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.0597422 	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.0386984 	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.00395086	 1100      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00191245	 4600      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00169045	 900       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000860804	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000807455	 100       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.000743709	 4600      
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000348602	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23205473830784 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23205238532096 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23205037205632 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23204835879168 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23204634552704 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23204433226240 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23204231899776 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23204030573312 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23203829246848 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23203627920384 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23203426593920 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23203225267456 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23203023940992 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23202822614528 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23202621288064 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23202419961600 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23202218635136 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23202017308672 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23201815982208 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23201614655744 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23201413329280 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23201212002816 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23201010676352 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23200809349888 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23200608023424 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23200406696960 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23200205370496 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23200004044032 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23199802717568 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23199601391104 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23199400064640 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23199198738176 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23198997407616 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23198796081152 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23198594754688 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23198393428224 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23198192101760 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23197990775296 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23197789448832 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23197588122368 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23197386795904 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23197185469440 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23196984142976 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23196782816512 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23196581490048 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23196380163584 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23196178837120 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23195977510656 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23195776184192 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23195574857728 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23195373531264 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23195172204800 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23194970878336 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23194769551872 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23194568225408 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23194366898944 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23194165572480 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23193964246016 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23193762919552 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23193561593088 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23193360266624 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23193158940160 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23192957613696 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23205368170240 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23205361579776 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_TENSORTRAIN_NORMALIZE_PLAIN_QB PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2750, m: 55)                                                                             	 1.34425   	 600       	 29.8034   	 0         	 1.09116   	 27.3136   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 55, m: 2750)                                                                              	 1.19012   	 700       	 9.7205    	 0         	 1.43787   	 6.76033   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 55)                                                                             	 0.224786  	 100       	 27.0132   	 0         	 0.98967   	 27.2951   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2750, m: 50)                                                                             	 0.218213  	 100       	 25.2812   	 0         	 1.01754   	 24.8454   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 55, m: 2500)                                                                              	 0.160671  	 100       	 9.34464   	 0         	 1.3846    	 6.74899   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 55, n: 50, r2new: 55)	 0.100735  	 700       	 96.5031   	 0         	 15.5948   	 6.18817   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 55, n: 50, r: 55, r2: 55)                           	 0.0624972 	 700       	 186.348   	 0         	 27.3763   	 6.80693   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 55)                                                                               	 0.0433332 	 100       	 2.92309   	 0         	 0.148616  	 19.6687   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 55, r1_: 55, n: 50, r2: 55)                         	 0.0398778 	 600       	 250.327   	 0         	 36.7754   	 6.80693   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2750, r: 55, r2: 55, leftOrthog: 1)                      	 0.0335975 	 600       	 297.12    	 0         	 65.6906   	 4.52303   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 55, n: 50, r2new: 50)	 0.0145639 	 100       	 86.687    	 0         	 14.639    	 5.92167   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 55, r1_: 50, n: 50, r2: 55)                         	 0.0101968 	 100       	 148.331   	 0         	 22.8699   	 6.48585   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 55, n: 50, r: 55, r2: 50)                           	 0.00835819	 100       	 180.96    	 0         	 27.9008   	 6.48585   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 55, r1_: 55, n: 50, r2: 50)                         	 0.00644121	 100       	 234.816   	 0         	 34.5308   	 6.8002    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 55, m: 50)                                                                                	 0.00545098	 100       	 3.51617   	 0         	 1.18144   	 2.97618   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 55, r2: 55, leftOrthog: 1)                      	 0.00512413	 100       	 295.172   	 0         	 65.3457   	 4.51708   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2750, r: 50, r2: 50, leftOrthog: 1)                      	 0.0042557 	 100       	 323.096   	 0         	 78.4831   	 4.11677   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 5, n: 50, r2: 5)                                                                                                         	 0.00288698	 800       	 0         	 0         	 5.54212   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 55) 	 0.00179082	 100       	 16.8917   	 0         	 3.80831   	 4.43548   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 55, m: 55, fromLeft: 1)                              	 0.00156569	 800       	 0         	 0         	 24.7302   	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000923552	 100       	 0.541388  	 0         	 2.16555   	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 55, n: 50, r2new: 1) 	 0.000920488	 100       	 0.597509  	 0         	 4.78181   	 0.124955  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000849115	 100       	 29.4424   	 0         	 7.06618   	 4.16667   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 55)                           	 0.000844963	 100       	 0         	 0         	 5.20733   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 55, r2: 55)                            	 0.000791272	 100       	 38.2296   	 0         	 8.61903   	 4.43548   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 55)                                                                                                        	 0.000517082	 100       	 0         	 0         	 8.50929   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 5)                                                                                                         	 0.000390744	 100       	 0         	 0         	 1.02369   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000372951	 100       	 0.670329  	 0         	 10.7253   	 0.0625    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 55, n: 50, r: 2, r2: 1)                             	 0.000370555	 100       	 2.96852   	 0         	 17.8154   	 0.166626  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 5, n: 50, r2: 1)                                                                                                         	 0.000342414	 100       	 0         	 0         	 1.16818   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 55, leftOrthog: 1)                        	 0.0003085 	 100       	 89.141    	 0         	 34.3598   	 2.59434   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 55, m: 50, fromLeft: 1)                              	 0.000180767	 100       	 0         	 0         	 24.3407   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 4.85385   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 4.85382   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 2.75634   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 1.97656   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 1.97517   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 1.87559   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 1.83058   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 1.35625   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.11801   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.0720173 	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.0573649 	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.0432858 	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.00413722	 1100      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00224091	 4600      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00174646	 900       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000923552	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000844963	 100       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.000835268	 4600      
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000372951	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22647991494528 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22647765198848 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22647563872384 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22647362545920 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22647161219456 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22646959892992 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22646758566528 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22646557240064 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22646355913600 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22646154587136 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22645953260672 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22645751934208 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22645550607744 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22645349281280 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22645147954816 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22644946628352 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22644745301888 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22644543975424 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22644342648960 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22644141322496 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22643939996032 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22643738669568 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22643537343104 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22643336016640 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22643134690176 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22642933363712 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22642732037248 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22642530710784 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22642329384320 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22642128057856 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22641926731392 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22641725404928 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22641524074368 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22641322747904 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22641121421440 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22640920094976 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22640718768512 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22640517442048 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22640316115584 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22640114789120 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22639913462656 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22639712136192 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22639510809728 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22639309483264 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22639108156800 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22638906830336 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22638705503872 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22638504177408 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22638302850944 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22638101524480 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22637900198016 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22637698871552 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22637497545088 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22637296218624 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22637094892160 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22636893565696 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22636692239232 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22636490912768 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22636289586304 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22636088259840 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22635886933376 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22635685606912 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22635484280448 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22647885833984 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22647879243520 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_TENSORTRAIN_NORMALIZE_PLAIN_QB PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2800, m: 56)                                                                             	 1.56      	 600       	 27.1079   	 0         	 0.974743  	 27.8103   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 56, m: 2800)                                                                              	 1.19084   	 700       	 10.2542   	 0         	 1.48973   	 6.88327   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 56)                                                                             	 0.250678  	 100       	 25.1136   	 0         	 0.903764  	 27.7878   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2800, m: 50)                                                                             	 0.227529  	 100       	 24.6855   	 0         	 0.993455  	 24.8481   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 56, m: 2500)                                                                              	 0.152662  	 100       	 10.1944   	 0         	 1.48402   	 6.86942   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 56, n: 50, r2new: 56)	 0.129687  	 700       	 76.655    	 0         	 12.3816   	 6.19106   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 56, n: 50, r: 56, r2: 56)                           	 0.0768631 	 700       	 159.935   	 0         	 23.0764   	 6.93069   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2800, r: 56, r2: 56, leftOrthog: 1)                      	 0.0498627 	 600       	 211.319   	 0         	 45.8865   	 4.60526   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 56)                                                                               	 0.0434898 	 100       	 2.95855   	 0         	 0.14992   	 19.7342   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 56, r1_: 56, n: 50, r2: 56)                         	 0.0428591 	 600       	 245.851   	 0         	 35.4728   	 6.93069   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 56, n: 50, r2new: 50)	 0.0177318 	 100       	 71.51     	 0         	 12.1635   	 5.87908   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 56, n: 50, r: 56, r2: 50)                           	 0.010881  	 100       	 144.104   	 0         	 22.0274   	 6.54206   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 56, r1_: 50, n: 50, r2: 56)                         	 0.0102659 	 100       	 152.739   	 0         	 23.3472   	 6.54206   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 56, r1_: 56, n: 50, r2: 50)                         	 0.00791018	 100       	 198.226   	 0         	 28.6351   	 6.92247   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 56, r2: 56, leftOrthog: 1)                      	 0.00580956	 100       	 269.9     	 0         	 58.6994   	 4.598     
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 56, m: 50)                                                                                	 0.00533072	 100       	 3.68929   	 0         	 1.2231    	 3.01635   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2800, r: 50, r2: 50, leftOrthog: 1)                      	 0.00449029	 100       	 311.784   	 0         	 75.719    	 4.11765   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 6, n: 50, r2: 6)                                                                                                         	 0.00280791	 800       	 0         	 0         	 8.20539   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 56) 	 0.00186811	 100       	 16.787    	 0         	 3.74111   	 4.48718   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 56, m: 56, fromLeft: 1)                              	 0.00161836	 800       	 0         	 0         	 24.8034   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 56, n: 50, r2new: 1) 	 0.0011916 	 100       	 0.469958  	 0         	 3.76101   	 0.124955  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.00115043	 100       	 21.731    	 0         	 5.21545   	 4.16667   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 56, r2: 56)                            	 0.000878986	 100       	 35.6775   	 0         	 7.95098   	 4.48718   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000865656	 100       	 0.577597  	 0         	 2.31039   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 56)                           	 0.000841386	 100       	 0         	 0         	 5.32455   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 56, n: 50, r: 2, r2: 1)                             	 0.000622535	 100       	 1.7991    	 0         	 10.7971   	 0.166627  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 56)                                                                                                        	 0.000516074	 100       	 0         	 0         	 8.68093   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 6)                                                                                                         	 0.000388112	 100       	 0         	 0         	 1.23676   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000364714	 100       	 0.685469  	 0         	 10.9675   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 6, n: 50, r2: 1)                                                                                                         	 0.000330807	 100       	 0         	 0         	 1.451     	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 56, leftOrthog: 1)                        	 0.000263298	 100       	 106.343   	 0         	 40.7143   	 2.61194   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 56, m: 50, fromLeft: 1)                              	 0.000179177	 100       	 0         	 0         	 25.0032   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 4.98123   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 4.9812    	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 2.60843   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 2.21943   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 2.21811   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 2.14391   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 2.0817    	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 1.34884   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.150478  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.0892456 	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.0621856 	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.0604259 	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0040429 	 1100      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00201104	 4600      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00179754	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00123282	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000865656	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000841386	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000364714	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22692208293760 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22691989940224 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22691788613760 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22691587287296 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22691385960832 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22691184634368 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22690983307904 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22690781981440 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22690580654976 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22690379328512 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22690178002048 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22689976675584 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22689775349120 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22689574022656 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22689372696192 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22689171369728 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22688970043264 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22688768716800 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22688567390336 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22688366063872 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22688164737408 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22687963410944 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22687762084480 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22687560758016 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22687359431552 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22687158105088 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22686956778624 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22686755452160 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22686554125696 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22686352799232 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22686151472768 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22685950146304 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22685748815744 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22685547489280 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22685346162816 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22685144836352 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22684943509888 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22684742183424 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22684540856960 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22684339530496 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22684138204032 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22683936877568 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22683735551104 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22683534224640 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22683332898176 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22683131571712 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22682930245248 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22682728918784 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22682527592320 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22682326265856 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22682124939392 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22681923612928 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22681722286464 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22681520960000 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22681319633536 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22681118307072 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22680916980608 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22680715654144 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22680514327680 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22680313001216 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22680111674752 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22679910348288 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22679709021824 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22692102633216 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22692096042752 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_TENSORTRAIN_NORMALIZE_PLAIN_QB PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2850, m: 57)                                                                             	 1.51472   	 600       	 29.4408   	 0         	 1.04005   	 28.307    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 57, m: 2850)                                                                              	 1.29831   	 700       	 9.91838   	 0         	 1.41566   	 7.00621   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 57)                                                                             	 0.239883  	 100       	 27.1911   	 0         	 0.961488  	 28.2802   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2850, m: 50)                                                                             	 0.212755  	 100       	 26.8698   	 0         	 1.08125   	 24.8508   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 57, m: 2500)                                                                              	 0.1702    	 100       	 9.47211   	 0         	 1.35514   	 6.98977   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 57, n: 50, r2new: 57)	 0.125291  	 700       	 81.1749   	 0         	 13.1025   	 6.19536   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 57, n: 50, r: 57, r2: 57)                           	 0.0710757 	 700       	 182.39    	 0         	 25.8546   	 7.05446   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 57, r1_: 57, n: 50, r2: 57)                         	 0.0455798 	 600       	 243.783   	 0         	 34.5573   	 7.05446   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 57)                                                                               	 0.0437298 	 100       	 2.98805   	 0         	 0.150927  	 19.798    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2850, r: 57, r2: 57, leftOrthog: 1)                      	 0.0407835 	 600       	 272.453   	 0         	 58.1232   	 4.6875    
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 57, n: 50, r2new: 50)	 0.0168404 	 100       	 75.681    	 0         	 12.9593   	 5.8399    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 57, n: 50, r: 57, r2: 50)                           	 0.00986983	 100       	 164.593   	 0         	 24.9488   	 6.59722   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 57, r1_: 50, n: 50, r2: 57)                         	 0.00984103	 100       	 165.074   	 0         	 25.0218   	 6.59722   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 57, r1_: 57, n: 50, r2: 50)                         	 0.00733456	 100       	 221.486   	 0         	 31.4401   	 7.04469   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 57, r2: 57, leftOrthog: 1)                      	 0.00712235	 100       	 228.085   	 0         	 48.7477   	 4.67888   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 57, m: 50)                                                                                	 0.00566278	 100       	 3.56126   	 0         	 1.16551   	 3.05555   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2850, r: 50, r2: 50, leftOrthog: 1)                      	 0.00495432	 100       	 287.628   	 0         	 69.8381   	 4.1185    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 7, n: 50, r2: 7)                                                                                                         	 0.0029764 	 800       	 0         	 0         	 10.5362   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 57) 	 0.00182324	 100       	 17.8199   	 0         	 3.92664   	 4.53822   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 57, m: 57, fromLeft: 1)                              	 0.00173754	 800       	 0         	 0         	 23.9346   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 57, n: 50, r2new: 1) 	 0.00129528	 100       	 0.440059  	 0         	 3.52171   	 0.124956  
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.00104568	 100       	 0.478159  	 0         	 1.91263   	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000871365	 100       	 28.6906   	 0         	 6.88575   	 4.16667   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 57)                           	 0.000852514	 100       	 0         	 0         	 5.34889   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 57, r2: 57)                            	 0.000815942	 100       	 39.819    	 0         	 8.77415   	 4.53822   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 57, n: 50, r: 2, r2: 1)                             	 0.000738632	 100       	 1.54339   	 0         	 9.26253   	 0.166628  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 57)                                                                                                        	 0.000515825	 100       	 0         	 0         	 8.84021   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 57, leftOrthog: 1)                        	 0.000413064	 100       	 68.9966   	 0         	 26.2429   	 2.62915   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 7)                                                                                                         	 0.000380962	 100       	 0         	 0         	 1.46996   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000355173	 100       	 0.703882  	 0         	 11.2621   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 7, n: 50, r2: 1)                                                                                                         	 0.000323471	 100       	 0         	 0         	 1.73122   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 57, m: 50, fromLeft: 1)                              	 0.000197067	 100       	 0         	 0         	 23.1393   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 5.53914   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 5.53911   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 3.18122   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 2.21026   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 2.20877   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 2.06637   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 2.01108   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 1.47417   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.14525   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.0825001 	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.0636267 	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.0532732 	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.00419666	 1100      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00276393	 4600      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0019346 	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00145725	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.00104568	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000852514	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000355173	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23011346622336 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23011159697408 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23010958370944 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23010757044480 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23010555718016 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23010354391552 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23010153065088 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23009951738624 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23009750412160 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23009549085696 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23009347759232 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23009146432768 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23008945106304 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23008743779840 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23008542453376 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23008341126912 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23008139800448 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23007938473984 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23007737147520 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23007535821056 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23007334494592 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23007133168128 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23006931841664 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23006730515200 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23006529188736 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23006327862272 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23006126535808 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23005925209344 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23005723882880 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23005522556416 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23005321229952 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23005119903488 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23004918572928 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23004717246464 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23004515920000 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23004314593536 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23004113267072 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23003911940608 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23003710614144 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23003509287680 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23003307961216 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23003106634752 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23002905308288 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23002703981824 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23002502655360 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23002301328896 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23002100002432 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23001898675968 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23001697349504 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23001496023040 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23001294696576 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23001093370112 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23000892043648 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23000690717184 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23000489390720 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23000288064256 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23000086737792 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22999885411328 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22999684084864 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22999482758400 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22999281431936 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22999080105472 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22998878779008 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23011240961792 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23011234371328 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_TENSORTRAIN_NORMALIZE_PLAIN_QB PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2900, m: 58)                                                                             	 1.48802   	 600       	 31.5743   	 0         	 1.09619   	 28.8037   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 58, m: 2900)                                                                              	 1.29554   	 700       	 10.4719   	 0         	 1.46889   	 7.12915   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 58)                                                                             	 0.235572  	 100       	 28.6708   	 0         	 0.99646   	 28.7726   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2900, m: 50)                                                                             	 0.215999  	 100       	 26.9291   	 0         	 1.08352   	 24.8533   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 58, m: 2500)                                                                              	 0.163151  	 100       	 10.2297   	 0         	 1.43878   	 7.11003   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 58, n: 50, r2new: 58)	 0.106121  	 700       	 98.0945   	 0         	 15.8186   	 6.20121   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 58, n: 50, r: 58, r2: 58)                           	 0.0644588 	 700       	 211.885   	 0         	 29.5177   	 7.17822   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 58)                                                                               	 0.042877  	 100       	 3.09412   	 0         	 0.155795  	 19.8603   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 58, r1_: 58, n: 50, r2: 58)                         	 0.040559  	 600       	 288.634   	 0         	 40.2097   	 7.17822   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2900, r: 58, r2: 58, leftOrthog: 1)                      	 0.0403994 	 600       	 289.774   	 0         	 60.7527   	 4.76974   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 58, n: 50, r2new: 50)	 0.0153696 	 100       	 83.4113   	 0         	 14.3712   	 5.80406   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 58, r1_: 50, n: 50, r2: 58)                         	 0.00946867	 100       	 177.639   	 0         	 26.707    	 6.65138   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 58, n: 50, r: 58, r2: 50)                           	 0.00906811	 100       	 185.485   	 0         	 27.8867   	 6.65138   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 58, r1_: 58, n: 50, r2: 50)                         	 0.00594248	 100       	 283.047   	 0         	 39.4938   	 7.16686   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 58, r2: 58, leftOrthog: 1)                      	 0.00547891	 100       	 306.995   	 0         	 64.4987   	 4.75972   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 58, m: 50)                                                                                	 0.00528934	 100       	 3.90722   	 0         	 1.26292   	 3.0938    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2900, r: 50, r2: 50, leftOrthog: 1)                      	 0.00509164	 100       	 284.781   	 0         	 69.133    	 4.11932   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 8, n: 50, r2: 8)                                                                                                         	 0.00292263	 800       	 0         	 0         	 14.0148   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 58) 	 0.0017678 	 100       	 19.0294   	 0         	 4.14709   	 4.58861   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 58, m: 58, fromLeft: 1)                              	 0.00172625	 800       	 0         	 0         	 24.9438   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 58, n: 50, r2new: 1) 	 0.00104168	 100       	 0.556794  	 0         	 4.45589   	 0.124957  
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000907479	 100       	 0.550977  	 0         	 2.20391   	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 58, r2: 58)                            	 0.000820216	 100       	 41.0136   	 0         	 8.93813   	 4.58861   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 58)                           	 0.000811625	 100       	 0         	 0         	 5.71693   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000782227	 100       	 31.96     	 0         	 7.67041   	 4.16667   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 58, n: 50, r: 2, r2: 1)                             	 0.000487196	 100       	 2.38097   	 0         	 14.2891   	 0.166628  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 58)                                                                                                        	 0.000475983	 100       	 0         	 0         	 9.74825   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 8)                                                                                                         	 0.000365728	 100       	 0         	 0         	 1.74993   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000327446	 100       	 0.763485  	 0         	 12.2158   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 8, n: 50, r2: 1)                                                                                                         	 0.000311493	 100       	 0         	 0         	 2.05462   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 58, leftOrthog: 1)                        	 0.000282231	 100       	 102.753   	 0         	 38.8334   	 2.64599   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 58, m: 50, fromLeft: 1)                              	 0.000183006	 100       	 0         	 0         	 25.3544   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 5.03549   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 5.03546   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 2.81173   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 2.0974    	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 2.09609   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 2.0354    	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 1.98246   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 1.46398   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.1243    	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.0748343 	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.0567524 	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.0512522 	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.00407583	 1100      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00198698	 4600      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00190926	 900       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000907479	 100       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.000848361	 4600      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000811625	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000327446	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23061491545984 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23061290018816 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23061088692352 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23060887365888 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23060686039424 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23060484712960 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23060283386496 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23060082060032 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23059880733568 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23059679407104 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23059478080640 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23059276754176 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23059075427712 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23058874101248 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23058672774784 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23058471448320 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23058270121856 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23058068795392 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23057867468928 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23057666142464 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23057464816000 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23057263489536 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23057062163072 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23056860836608 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23056659510144 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23056458183680 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23056256857216 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23056055530752 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23055854204288 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23055652877824 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23055451551360 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23055250224896 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23055048894336 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23054847567872 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23054646241408 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23054444914944 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23054243588480 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23054042262016 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23053840935552 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23053639609088 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23053438282624 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23053236956160 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23053035629696 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23052834303232 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23052632976768 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23052431650304 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23052230323840 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23052028997376 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23051827670912 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23051626344448 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23051425017984 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23051223691520 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23051022365056 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23050821038592 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23050619712128 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23050418385664 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23050217059200 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23050015732736 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23049814406272 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23049613079808 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23049411753344 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23049210426880 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23049009100416 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23061385885440 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23061379294976 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_TENSORTRAIN_NORMALIZE_PLAIN_QB PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2950, m: 59)                                                                             	 1.5959    	 600       	 30.9889   	 0         	 1.05763   	 29.3004   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 59, m: 2950)                                                                              	 1.39182   	 700       	 10.2604   	 0         	 1.41482   	 7.25208   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 59)                                                                             	 0.253482  	 100       	 27.5735   	 0         	 0.942205  	 29.2649   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2950, m: 50)                                                                             	 0.210024  	 100       	 28.1714   	 0         	 1.13339   	 24.8558   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 59, m: 2500)                                                                              	 0.173286  	 100       	 9.96509   	 0         	 1.37825   	 7.23022   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 59, n: 50, r2new: 59)	 0.121461  	 700       	 87.7609   	 0         	 14.135    	 6.20876   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 59, n: 50, r: 59, r2: 59)                           	 0.0725856 	 700       	 198.063   	 0         	 27.1246   	 7.30198   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 59, r1_: 59, n: 50, r2: 59)                         	 0.0467506 	 600       	 263.585   	 0         	 36.0977   	 7.30198   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 59)                                                                               	 0.0440456 	 100       	 3.05744   	 0         	 0.153477  	 19.9211   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2950, r: 59, r2: 59, leftOrthog: 1)                      	 0.0414788 	 600       	 297.085   	 0         	 61.2298   	 4.85197   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 59, n: 50, r2new: 50)	 0.0170653 	 100       	 75.6211   	 0         	 13.1026   	 5.77147   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 59, r1_: 50, n: 50, r2: 59)                         	 0.0105242 	 100       	 165.381   	 0         	 24.667    	 6.70455   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 59, n: 50, r: 59, r2: 50)                           	 0.0101222 	 100       	 171.948   	 0         	 25.6465   	 6.70455   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2950, r: 50, r2: 50, leftOrthog: 1)                      	 0.00922725	 100       	 159.853   	 0         	 38.7981   	 4.12011   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 59, r2: 59, leftOrthog: 1)                      	 0.00735795	 100       	 236.547   	 0         	 48.8681   	 4.84051   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 59, r1_: 59, n: 50, r2: 50)                         	 0.00695524	 100       	 250.243   	 0         	 34.3316   	 7.28899   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 59, m: 50)                                                                                	 0.00583788	 100       	 3.62574   	 0         	 1.15796   	 3.13115   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 9, n: 50, r2: 9)                                                                                                         	 0.00323227	 800       	 0         	 0         	 16.0382   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 59) 	 0.00187835	 100       	 18.5323   	 0         	 3.99543   	 4.63836   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 59, m: 59, fromLeft: 1)                              	 0.00182349	 800       	 0         	 0         	 24.4349   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 59, n: 50, r2new: 1) 	 0.00113132	 100       	 0.521513  	 0         	 4.17352   	 0.124958  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000889183	 100       	 28.1157   	 0         	 6.74777   	 4.16667   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 59)                           	 0.000867687	 100       	 0         	 0         	 5.43975   	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000866659	 100       	 0.576928  	 0         	 2.30771   	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 59, r2: 59)                            	 0.000861924	 100       	 40.3864   	 0         	 8.70703   	 4.63836   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 59, n: 50, r: 2, r2: 1)                             	 0.000519302	 100       	 2.27228   	 0         	 13.6368   	 0.166629  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 59)                                                                                                        	 0.000508588	 100       	 0         	 0         	 9.2806    	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 9)                                                                                                         	 0.000375317	 100       	 0         	 0         	 1.91838   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000348603	 100       	 0.717148  	 0         	 11.4744   	 0.0625    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 59, leftOrthog: 1)                        	 0.000327447	 100       	 90.0909   	 0         	 33.8375   	 2.66245   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 9, n: 50, r2: 1)                                                                                                         	 0.000317061	 100       	 0         	 0         	 2.27086   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 59, m: 50, fromLeft: 1)                              	 0.000203275	 100       	 0         	 0         	 23.2198   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 5.43078   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 5.43075   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 3.05337   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 2.23376   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 2.23246   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 2.16364   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 2.10345   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 1.57095   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.141536  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.084089  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.0651192 	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.0583915 	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.00443324	 1100      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00202676	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00192198	 4600      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.000900058	 4600      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000867687	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000866659	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000348603	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22770093143936 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22769903331328 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22769702004864 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22769500678400 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22769299351936 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22769098025472 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22768896699008 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22768695372544 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22768494046080 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22768292719616 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22768091393152 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22767890066688 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22767688740224 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22767487413760 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22767286087296 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22767084760832 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22766883434368 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22766682107904 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22766480781440 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22766279454976 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22766078128512 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22765876802048 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22765675475584 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22765474149120 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22765272822656 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22765071496192 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22764870169728 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22764668843264 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22764467516800 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22764266190336 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22764064863872 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22763863537408 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22763662206848 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22763460880384 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22763259553920 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22763058227456 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22762856900992 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22762655574528 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22762454248064 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22762252921600 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22762051595136 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22761850268672 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22761648942208 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22761447615744 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22761246289280 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22761044962816 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22760843636352 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22760642309888 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22760440983424 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22760239656960 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22760038330496 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22759837004032 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22759635677568 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22759434351104 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22759233024640 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22759031698176 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22758830371712 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22758629045248 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22758427718784 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22758226392320 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22758025065856 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22757823739392 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22757622412928 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22769987483392 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22769980892928 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_TENSORTRAIN_NORMALIZE_PLAIN_QB PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 3000, m: 60)                                                                             	 1.61336   	 600       	 32.2387   	 0         	 1.08194   	 29.7971   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 60, m: 3000)                                                                              	 1.39278   	 700       	 10.7836   	 0         	 1.46218   	 7.37502   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 60)                                                                             	 0.254317  	 100       	 28.4243   	 0         	 0.955216  	 29.757    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 3000, m: 50)                                                                             	 0.231013  	 100       	 26.0447   	 0         	 1.04773   	 24.8582   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 60, m: 2500)                                                                              	 0.169634  	 100       	 10.5262   	 0         	 1.43207   	 7.35033   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 60, n: 50, r2new: 60)	 0.142776  	 700       	 76.4836   	 0         	 12.3001   	 6.21811   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3000, r: 60, r2: 60, leftOrthog: 1)                      	 0.0808257 	 600       	 160.345   	 0         	 32.4966   	 4.93421   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 60, n: 50, r: 60, r2: 60)                           	 0.0652765 	 700       	 231.63    	 0         	 31.1928   	 7.42574   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 60)                                                                               	 0.0447705 	 100       	 3.05261   	 0         	 0.152779  	 19.9805   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 60, r1_: 60, n: 50, r2: 60)                         	 0.0404989 	 600       	 320.009   	 0         	 43.0945   	 7.42574   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 60, n: 50, r2new: 50)	 0.0159433 	 100       	 81.5387   	 0         	 14.2003   	 5.74205   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 60, r1_: 50, n: 50, r2: 60)                         	 0.0110557 	 100       	 162.811   	 0         	 24.0961   	 6.75676   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 60, r2: 60, leftOrthog: 1)                      	 0.00964018	 100       	 186.718   	 0         	 37.9412   	 4.92126   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 60, n: 50, r: 60, r2: 50)                           	 0.00929979	 100       	 193.553   	 0         	 28.6458   	 6.75676   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3000, r: 50, r2: 50, leftOrthog: 1)                      	 0.009014  	 100       	 166.408   	 0         	 40.3816   	 4.12088   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 60, m: 50)                                                                                	 0.00613231	 100       	 3.53319   	 0         	 1.1154    	 3.16763   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 60, r1_: 60, n: 50, r2: 50)                         	 0.00582868	 100       	 308.818   	 0         	 41.6698   	 7.41107   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 10, n: 50, r2: 10)                                                                                                       	 0.00320046	 800       	 0         	 0         	 19.9972   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 60, m: 60, fromLeft: 1)                              	 0.00189946	 800       	 0         	 0         	 24.2595   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 60) 	 0.00185395	 100       	 19.418    	 0         	 4.14251   	 4.6875    
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 60, n: 50, r2new: 1) 	 0.00112534	 100       	 0.533171  	 0         	 4.26679   	 0.124958  
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000946449	 100       	 0.52829   	 0         	 2.11316   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 60)                           	 0.000867675	 100       	 0         	 0         	 5.53203   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 60, r2: 60)                            	 0.000834397	 100       	 43.1449   	 0         	 9.20425   	 4.6875    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000770795	 100       	 32.434    	 0         	 7.78417   	 4.16667   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 60, n: 50, r: 2, r2: 1)                             	 0.000545695	 100       	 2.19903   	 0         	 13.1971   	 0.16663   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 60)                                                                                                        	 0.000483889	 100       	 0         	 0         	 9.91963   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 10)                                                                                                        	 0.00039094	 100       	 0         	 0         	 2.04635   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000368168	 100       	 0.679038  	 0         	 10.8646   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 10, n: 50, r2: 1)                                                                                                        	 0.000326531	 100       	 0         	 0         	 2.45      	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 60, leftOrthog: 1)                        	 0.000271592	 100       	 110.46    	 0         	 41.2383   	 2.67857   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 60, m: 50, fromLeft: 1)                              	 0.000196545	 100       	 0         	 0         	 24.4219   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 5.53978   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 5.53974   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 3.03401   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 2.3382    	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 2.33681   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 2.24502   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 2.14347   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 1.56855   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.161698  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.0997515 	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.0759564 	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.0581541 	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.00440182	 1100      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00225952	 4600      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00209601	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00185339	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000946449	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000867675	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000368168	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23444552578944 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23444347414528 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23444146088064 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23443944761600 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23443743435136 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23443542108672 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23443340782208 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23443139455744 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23442938129280 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23442736802816 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23442535476352 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23442334149888 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23442132823424 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23441931496960 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23441730170496 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23441528844032 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23441327517568 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23441126191104 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23440924864640 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23440723538176 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23440522211712 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23440320885248 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23440119558784 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23439918232320 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23439716905856 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23439515579392 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23439314252928 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23439112926464 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23438911600000 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23438710273536 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23438508947072 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23438307620608 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23438106290048 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23437904963584 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23437703637120 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23437502310656 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23437300984192 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23437099657728 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23436898331264 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23436697004800 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23436495678336 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23436294351872 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23436093025408 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23435891698944 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23435690372480 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23435489046016 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23435287719552 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23435086393088 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23434885066624 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23434683740160 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23434482413696 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23434281087232 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23434079760768 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23433878434304 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23433677107840 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23433475781376 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23433274454912 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23433073128448 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23432871801984 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23432670475520 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23432469149056 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23432267822592 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23432066496128 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23444446918400 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23444440327936 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_TENSORTRAIN_NORMALIZE_PLAIN_QB PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 3050, m: 61)                                                                             	 1.75022   	 600       	 31.2286   	 0         	 1.03086   	 30.2938   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 61, m: 3050)                                                                              	 1.51239   	 700       	 10.4357   	 0         	 1.3918    	 7.49796   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 61)                                                                             	 0.258373  	 100       	 28.9205   	 0         	 0.956083  	 30.2489   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 3050, m: 50)                                                                             	 0.246409  	 100       	 24.8232   	 0         	 0.998502  	 24.8605   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 61, m: 2500)                                                                              	 0.181266  	 100       	 10.1804   	 0         	 1.36278   	 7.47035   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 61, n: 50, r2new: 61)	 0.105467  	 700       	 106.115   	 0         	 17.0346   	 6.22937   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 61, n: 50, r: 61, r2: 61)                           	 0.0643373 	 700       	 246.959   	 0         	 32.7119   	 7.5495    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 61, r1_: 61, n: 50, r2: 61)                         	 0.0448828 	 600       	 303.432   	 0         	 40.1923   	 7.5495    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 61)                                                                               	 0.0440958 	 100       	 3.14467   	 0         	 0.156931  	 20.0385   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3050, r: 61, r2: 61, leftOrthog: 1)                      	 0.0390227 	 600       	 348.999   	 0         	 69.5709   	 5.01645   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 61, n: 50, r2new: 50)	 0.0147971 	 100       	 88.5646   	 0         	 15.4949   	 5.71572   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 61, r1_: 50, n: 50, r2: 61)                         	 0.0102124 	 100       	 182.18    	 0         	 26.7596   	 6.80804   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 61, n: 50, r: 61, r2: 50)                           	 0.00823329	 100       	 225.973   	 0         	 33.1921   	 6.80804   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 61, r2: 61, leftOrthog: 1)                      	 0.00589719	 100       	 315.489   	 0         	 63.0731   	 5.00197   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 61, m: 50)                                                                                	 0.00588373	 100       	 3.76744   	 0         	 1.17612   	 3.20327   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 61, r1_: 61, n: 50, r2: 50)                         	 0.00575637	 100       	 323.207   	 0         	 42.9049   	 7.5331    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3050, r: 50, r2: 50, leftOrthog: 1)                      	 0.00511358	 100       	 298.225   	 0         	 72.3563   	 4.12162   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 11, n: 50, r2: 11)                                                                                                       	 0.00325271	 800       	 0         	 0         	 23.8078   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 61, m: 61, fromLeft: 1)                              	 0.00201589	 800       	 0         	 0         	 23.6267   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 61) 	 0.00183984	 100       	 20.2246   	 0         	 4.27037   	 4.73602   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000906032	 100       	 0.551857  	 0         	 2.20743   	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 61, n: 50, r2new: 1) 	 0.000878204	 100       	 0.694599  	 0         	 5.55862   	 0.124959  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 61, r2: 61)                            	 0.00085207	 100       	 43.6701   	 0         	 9.22084   	 4.73602   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 61)                           	 0.000831679	 100       	 0         	 0         	 5.86765   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000812696	 100       	 30.7618   	 0         	 7.38283   	 4.16667   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 61, leftOrthog: 1)                        	 0.000594466	 100       	 51.3066   	 0         	 19.0423   	 2.69435   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 61)                                                                                                        	 0.000483854	 100       	 0         	 0         	 10.0857   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 11)                                                                                                        	 0.000362496	 100       	 0         	 0         	 2.42761   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 61, n: 50, r: 2, r2: 1)                             	 0.00034035	 100       	 3.58455   	 0         	 21.512    	 0.16663   
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000326087	 100       	 0.766667  	 0         	 12.2667   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 11, n: 50, r2: 1)                                                                                                        	 0.000299838	 100       	 0         	 0         	 2.93492   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 61, m: 50, fromLeft: 1)                              	 0.000182373	 100       	 0         	 0         	 26.7583   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 5.90606   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 5.90604   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 3.31324   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 2.46677   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 2.46546   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 2.35156   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 2.2991    	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 1.69954   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.122982  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.073763  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.0616643 	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.0506279 	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0043989 	 1100      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00220159	 4600      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00219826	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.000959903	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000906032	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000831679	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000326087	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23141658724224 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23141485111296 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23141283784832 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23141082458368 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23140881131904 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23140679805440 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23140478478976 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23140277152512 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23140075826048 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23139874499584 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23139673173120 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23139471846656 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23139270520192 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23139069193728 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23138867867264 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23138666540800 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23138465214336 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23138263887872 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23138062561408 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23137861234944 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23137659908480 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23137458582016 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23137257255552 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23137055929088 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23136854602624 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23136653276160 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23136451949696 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23136250623232 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23136049296768 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23135847970304 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23135646643840 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23135445317376 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23135243986816 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23135042660352 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23134841333888 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23134640007424 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23134438680960 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23134237354496 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23134036028032 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23133834701568 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23133633375104 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23133432048640 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23133230722176 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23133029395712 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23132828069248 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23132626742784 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23132425416320 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23132224089856 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23132022763392 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23131821436928 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23131620110464 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23131418784000 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23131217457536 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23131016131072 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23130814804608 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23130613478144 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23130412151680 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23130210825216 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23130009498752 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23129808172288 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23129606845824 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23129405519360 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23129204192896 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23141380249344 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23141374490368 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_TENSORTRAIN_NORMALIZE_PLAIN_QB PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 3100, m: 62)                                                                             	 1.81366   	 600       	 31.6429   	 0         	 1.02769   	 30.7905   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 62, m: 3100)                                                                              	 1.57817   	 700       	 10.5006   	 0         	 1.37787   	 7.62089   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 62)                                                                             	 0.261625  	 100       	 29.507    	 0         	 0.959864  	 30.7408   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 3100, m: 50)                                                                             	 0.223377  	 100       	 27.8303   	 0         	 1.11936   	 24.8627   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 62, m: 2500)                                                                              	 0.184206  	 100       	 10.3477   	 0         	 1.36328   	 7.5903    
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 62, n: 50, r2new: 62)	 0.108504  	 700       	 105.756   	 0         	 16.941    	 6.24261   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 62, n: 50, r: 62, r2: 62)                           	 0.0669398 	 700       	 249.223   	 0         	 32.4794   	 7.67327   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 62, r1_: 62, n: 50, r2: 62)                         	 0.0441061 	 600       	 324.211   	 0         	 42.252    	 7.67327   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 62)                                                                               	 0.0438917 	 100       	 3.20485   	 0         	 0.159483  	 20.0952   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3100, r: 62, r2: 62, leftOrthog: 1)                      	 0.0399015 	 600       	 358.375   	 0         	 70.2877   	 5.09868   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 62, n: 50, r2new: 50)	 0.0153954 	 100       	 85.87     	 0         	 15.0851   	 5.69239   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 62, r1_: 50, n: 50, r2: 62)                         	 0.011117  	 100       	 172.889   	 0         	 25.2083   	 6.85841   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 62, n: 50, r: 62, r2: 50)                           	 0.00868066	 100       	 221.412   	 0         	 32.2833   	 6.85841   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 62, r1_: 62, n: 50, r2: 50)                         	 0.00603964	 100       	 318.231   	 0         	 41.5712   	 7.65508   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 62, m: 50)                                                                                	 0.00579016	 100       	 3.91468   	 0         	 1.20895   	 3.23809   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 62, r2: 62, leftOrthog: 1)                      	 0.00546707	 100       	 351.559   	 0         	 69.1687   	 5.08263   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3100, r: 50, r2: 50, leftOrthog: 1)                      	 0.00519572	 100       	 298.323   	 0         	 72.3673   	 4.12234   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 12, n: 50, r2: 12)                                                                                                       	 0.0034807 	 800       	 0         	 0         	 26.4774   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 62, m: 62, fromLeft: 1)                              	 0.00202458	 800       	 0         	 0         	 24.3029   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 62) 	 0.0018679 	 100       	 20.5793   	 0         	 4.30174   	 4.78395   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 62, n: 50, r2new: 1) 	 0.00122543	 100       	 0.505945  	 0         	 4.04886   	 0.12496   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 62, r2: 62)                            	 0.000872516	 100       	 44.0565   	 0         	 9.20923   	 4.78395   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 62)                           	 0.000850713	 100       	 0         	 0         	 5.8304    	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000837675	 100       	 0.59689   	 0         	 2.38756   	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000780269	 100       	 32.0402   	 0         	 7.68966   	 4.16667   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 62, n: 50, r: 2, r2: 1)                             	 0.000630164	 100       	 1.96774   	 0         	 11.809    	 0.166631  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 62)                                                                                                        	 0.000497769	 100       	 0         	 0         	 9.96446   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 12)                                                                                                        	 0.000394343	 100       	 0         	 0         	 2.43443   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000333273	 100       	 0.750136  	 0         	 12.0022   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 12, n: 50, r2: 1)                                                                                                        	 0.000314634	 100       	 0         	 0         	 3.05116   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 62, leftOrthog: 1)                        	 0.000281706	 100       	 110.044   	 0         	 40.6097   	 2.70979   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 62, m: 50, fromLeft: 1)                              	 0.000188277	 100       	 0         	 0         	 26.3442   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 5.82999   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 5.82996   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 3.23821   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 2.46273   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 2.46145   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 2.39513   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 2.34255   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 1.76817   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.126993  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.0771231 	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.0620429 	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.050846  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.00468745	 1100      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00221286	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00199085	 4600      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000850713	 100       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.000841788	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000837675	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000333273	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22575117989760 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22574884972544 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22574683646080 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22574482319616 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22574280993152 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22574079666688 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22573878340224 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22573677013760 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22573475687296 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22573274360832 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22573073034368 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22572871707904 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22572670381440 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22572469054976 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22572267728512 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22572066402048 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22571865075584 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22571663749120 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22571462422656 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22571261096192 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22571059769728 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22570858443264 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22570657116800 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22570455790336 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22570254463872 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22570053137408 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22569851810944 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22569650484480 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22569449158016 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22569247831552 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22569046505088 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22568845178624 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22568643848064 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22568442521600 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22568241195136 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22568039868672 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22567838542208 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22567637215744 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22567435889280 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22567234562816 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22567033236352 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22566831909888 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22566630583424 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22566429256960 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22566227930496 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22566026604032 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22565825277568 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22565623951104 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22565422624640 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22565221298176 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22565019971712 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22564818645248 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22564617318784 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22564415992320 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22564214665856 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22564013339392 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22563812012928 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22563610686464 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22563409360000 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22563208033536 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22563006707072 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22562805380608 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22562604054144 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22575012329216 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22575005738752 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_TENSORTRAIN_NORMALIZE_PLAIN_QB PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 3150, m: 63)                                                                             	 1.85144   	 600       	 32.5213   	 0         	 1.03945   	 31.2872   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 63, m: 3150)                                                                              	 1.65244   	 700       	 10.5218   	 0         	 1.35873   	 7.74383   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 63)                                                                             	 0.263316  	 100       	 30.2729   	 0         	 0.969275  	 31.2325   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 3150, m: 50)                                                                             	 0.236985  	 100       	 26.6543   	 0         	 1.07197   	 24.8649   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 63, m: 2500)                                                                              	 0.192094  	 100       	 10.2441   	 0         	 1.32865   	 7.71016   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 63, n: 50, r2new: 63)	 0.112285  	 700       	 104.825   	 0         	 16.7508   	 6.25791   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 63, n: 50, r: 63, r2: 63)                           	 0.070508  	 700       	 248.245   	 0         	 31.8384   	 7.79703   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 63)                                                                               	 0.0492673 	 100       	 2.89577   	 0         	 0.143706  	 20.1507   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 63, r1_: 63, n: 50, r2: 63)                         	 0.0439336 	 600       	 341.488   	 0         	 43.7972   	 7.79703   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3150, r: 63, r2: 63, leftOrthog: 1)                      	 0.041598  	 600       	 360.662   	 0         	 69.6135   	 5.18092   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 63, n: 50, r2new: 50)	 0.0164147 	 100       	 81.2992   	 0         	 14.3335   	 5.67197   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 63, r1_: 50, n: 50, r2: 63)                         	 0.012151  	 100       	 163.32    	 0         	 23.6425   	 6.90789   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 63, n: 50, r: 63, r2: 50)                           	 0.00926934	 100       	 214.093   	 0         	 30.9925   	 6.90789   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 63, r1_: 63, n: 50, r2: 50)                         	 0.00618296	 100       	 320.963   	 0         	 41.2707   	 7.77701   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 63, m: 50)                                                                                	 0.00596648	 100       	 3.88279   	 0         	 1.18663   	 3.27212   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 63, r2: 63, leftOrthog: 1)                      	 0.00493739	 100       	 401.933   	 0         	 77.8448   	 5.16326   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3150, r: 50, r2: 50, leftOrthog: 1)                      	 0.00452649	 100       	 347.951   	 0         	 84.392    	 4.12304   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 13, n: 50, r2: 13)                                                                                                       	 0.00379671	 800       	 0         	 0         	 28.4878   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 63, m: 63, fromLeft: 1)                              	 0.00211794	 800       	 0         	 0         	 23.987    	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 63) 	 0.00193584	 100       	 20.5027   	 0         	 4.24374   	 4.83129   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 63, n: 50, r2new: 1) 	 0.00119806	 100       	 0.525848  	 0         	 4.20812   	 0.12496   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000992482	 100       	 0.503787  	 0         	 2.01515   	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.00093258	 100       	 26.8074   	 0         	 6.43376   	 4.16667   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 63, r2: 63)                            	 0.000898977	 100       	 44.1502   	 0         	 9.13839   	 4.83129   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 63)                           	 0.000879791	 100       	 0         	 0         	 5.72863   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 63, n: 50, r: 2, r2: 1)                             	 0.000671332	 100       	 1.87687   	 0         	 11.2636   	 0.166631  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 63)                                                                                                        	 0.000493704	 100       	 0         	 0         	 10.2085   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 13)                                                                                                        	 0.000375582	 100       	 0         	 0         	 2.76904   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000344101	 100       	 0.726531  	 0         	 11.6245   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 13, n: 50, r2: 1)                                                                                                        	 0.000316638	 100       	 0         	 0         	 3.28451   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 63, leftOrthog: 1)                        	 0.000272168	 100       	 115.737   	 0         	 42.4738   	 2.72491   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 63, m: 50, fromLeft: 1)                              	 0.000183093	 100       	 0         	 0         	 27.527    	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 6.45838   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 6.45835   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 3.72338   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 2.60116   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 2.59975   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 2.45416   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 2.40101   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 1.8505    	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.131834  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.0813477 	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.0632002 	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.0513341 	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.00498264	 1100      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00230104	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00203749	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000992482	 100       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.000892736	 4600      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000879791	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000344101	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22961990473600 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22961767573504 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22961566247040 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22961364920576 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22961163594112 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22960962267648 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22960760941184 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22960559614720 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22960358288256 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22960156961792 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22959955635328 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22959754308864 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22959552982400 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22959351655936 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22959150329472 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22958949003008 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22958747676544 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22958546350080 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22958345023616 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22958143697152 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22957942370688 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22957741044224 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22957539717760 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22957338391296 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22957137064832 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22956935738368 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22956734411904 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22956533085440 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22956331758976 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22956130432512 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22955929106048 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22955727779584 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22955526449024 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22955325122560 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22955123796096 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22954922469632 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22954721143168 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22954519816704 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22954318490240 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22954117163776 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22953915837312 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22953714510848 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22953513184384 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22953311857920 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22953110531456 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22952909204992 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22952707878528 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22952506552064 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22952305225600 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22952103899136 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22951902572672 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22951701246208 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22951499919744 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22951298593280 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22951097266816 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22950895940352 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22950694613888 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22950493287424 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22950291960960 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22950090634496 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22949889308032 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22949687981568 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22949486655104 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22961884813056 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22961878222592 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_TENSORTRAIN_NORMALIZE_PLAIN_QB PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 3200, m: 64)                                                                             	 1.98721   	 600       	 31.7653   	 0         	 0.999416  	 31.7839   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 64, m: 3200)                                                                              	 1.74279   	 700       	 10.459    	 0         	 1.32951   	 7.86677   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 64)                                                                             	 0.291737  	 100       	 28.1999   	 0         	 0.88891   	 31.7241   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 3200, m: 50)                                                                             	 0.279809  	 100       	 22.9323   	 0         	 0.922202  	 24.8669   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 64, m: 2500)                                                                              	 0.201458  	 100       	 10.0791   	 0         	 1.28726   	 7.82994   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 64, n: 50, r2new: 64)	 0.133769  	 700       	 90.2908   	 0         	 14.3883   	 6.27531   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 64, n: 50, r: 64, r2: 64)                           	 0.0796897 	 700       	 230.269   	 0         	 29.0715   	 7.92079   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3200, r: 64, r2: 64, leftOrthog: 1)                      	 0.0616401 	 600       	 255.169   	 0         	 48.4821   	 5.26316   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 64)                                                                               	 0.045501  	 100       	 3.17942   	 0         	 0.157359  	 20.2048   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 64, r1_: 64, n: 50, r2: 64)                         	 0.044415  	 600       	 354.129   	 0         	 44.7087   	 7.92079   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 64, n: 50, r2new: 50)	 0.0183899 	 100       	 73.301    	 0         	 12.9636   	 5.65436   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3200, r: 50, r2: 50, leftOrthog: 1)                      	 0.0150965 	 100       	 105.985   	 0         	 25.7014   	 4.12371   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 64, n: 50, r: 64, r2: 50)                           	 0.0114518 	 100       	 178.836   	 0         	 25.7077   	 6.95652   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 64, r2: 64, leftOrthog: 1)                      	 0.0104053 	 100       	 196.822   	 0         	 37.534    	 5.24384   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 64, r1_: 50, n: 50, r2: 64)                         	 0.01014   	 100       	 201.973   	 0         	 29.0336   	 6.95652   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 64, m: 50)                                                                                	 0.00634211	 100       	 3.73166   	 0         	 1.12896   	 3.30539   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 64, r1_: 64, n: 50, r2: 50)                         	 0.00588283	 100       	 348.132   	 0         	 44.0735   	 7.89889   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 14, n: 50, r2: 14)                                                                                                       	 0.00410265	 800       	 0         	 0         	 30.5754   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 64, m: 64, fromLeft: 1)                              	 0.0026056 	 800       	 0         	 0         	 20.1216   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 64) 	 0.0019355 	 100       	 21.1625   	 0         	 4.33832   	 4.87805   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 64, n: 50, r2new: 1) 	 0.00159792	 100       	 0.40052   	 0         	 3.20516   	 0.124961  
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000925402	 100       	 0.540306  	 0         	 2.16122   	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 64, r2: 64)                            	 0.000915375	 100       	 44.7467   	 0         	 9.17307   	 4.87805   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 64)                           	 0.000835434	 100       	 0         	 0         	 6.12855   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.00082538	 100       	 30.2891   	 0         	 7.26938   	 4.16667   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 64, n: 50, r: 2, r2: 1)                             	 0.000543209	 100       	 2.35637   	 0         	 14.1412   	 0.166632  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 64)                                                                                                        	 0.000488043	 100       	 0         	 0         	 10.4909   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 14)                                                                                                        	 0.000360534	 100       	 0         	 0         	 3.1065    	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000344729	 100       	 0.725207  	 0         	 11.6033   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 14, n: 50, r2: 1)                                                                                                        	 0.000311829	 100       	 0         	 0         	 3.59171   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 64, leftOrthog: 1)                        	 0.000303295	 100       	 105.508   	 0         	 38.5104   	 2.73973   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 64, m: 50, fromLeft: 1)                              	 0.000216424	 100       	 0         	 0         	 23.6573   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 6.64224   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 6.64221   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 3.68262   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 2.80183   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 2.80045   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 2.6935    	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 2.60425   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 1.95059   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.155692  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.0926001 	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.0874451 	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.0612633 	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.00526306	 1100      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00282203	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00232203	 4600      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.0010749 	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000925402	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000835434	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000344729	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23106859157376 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23106655610880 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23106454284416 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23106252957952 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23106051631488 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23105850305024 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23105648978560 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23105447652096 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23105246325632 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23105044999168 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23104843672704 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23104642346240 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23104441019776 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23104239693312 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23104038366848 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23103837040384 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23103635713920 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23103434387456 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23103233060992 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23103031734528 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23102830408064 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23102629081600 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23102427755136 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23102226428672 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23102025102208 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23101823775744 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23101622449280 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23101421122816 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23101219796352 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23101018469888 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23100817143424 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23100615816960 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23100414486400 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23100213159936 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23100011833472 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23099810507008 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23099609180544 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23099407854080 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23099206527616 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23099005201152 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23098803874688 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23098602548224 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23098401221760 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23098199895296 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23097998568832 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23097797242368 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23097595915904 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23097394589440 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23097193262976 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23096991936512 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23096790610048 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23096589283584 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23096387957120 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23096186630656 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23095985304192 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23095783977728 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23095582651264 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23095381324800 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23095179998336 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23094978671872 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23094777345408 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23094576018944 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23094374692480 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23106753496832 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23106746906368 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_TENSORTRAIN_NORMALIZE_PLAIN_QB PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 65, m: 3250)                                                                              	 1.92892   	 700       	 9.89964   	 0         	 1.23905   	 7.98971   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 3250, m: 65)                                                                             	 1.62672   	 600       	 40.6521   	 0         	 1.25934   	 32.2806   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 3250, m: 50)                                                                             	 0.294368  	 100       	 22.1378   	 0         	 0.890177  	 24.869    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 65)                                                                             	 0.243512  	 100       	 34.851    	 0         	 1.0818    	 32.2156   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 65, m: 2500)                                                                              	 0.213725  	 100       	 9.79853   	 0         	 1.23257   	 7.94965   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 65, n: 50, r2new: 65)	 0.153559  	 700       	 80.7426   	 0         	 12.8267   	 6.29487   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 65, n: 50, r: 65, r2: 65)                           	 0.0754747 	 700       	 254.704   	 0         	 31.6617   	 8.04455   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 65, r1_: 65, n: 50, r2: 65)                         	 0.0587253 	 600       	 280.586   	 0         	 34.879    	 8.04455   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 65)                                                                               	 0.0499906 	 100       	 2.93388   	 0         	 0.144827  	 20.2578   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3250, r: 65, r2: 65, leftOrthog: 1)                      	 0.0454249 	 600       	 362.742   	 0         	 67.8606   	 5.34539   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 65, n: 50, r2new: 50)	 0.0172216 	 100       	 79.1157   	 0         	 14.0289   	 5.63949   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 65, r1_: 50, n: 50, r2: 65)                         	 0.0106541 	 100       	 198.28    	 0         	 28.3083   	 7.00431   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 65, n: 50, r: 65, r2: 50)                           	 0.00910458	 100       	 232.026   	 0         	 33.1262   	 7.00431   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 65, r1_: 65, n: 50, r2: 50)                         	 0.00818884	 100       	 257.973   	 0         	 32.1633   	 8.02073   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 65, r2: 65, leftOrthog: 1)                      	 0.00731896	 100       	 288.634   	 0         	 54.2099   	 5.32438   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 65, m: 50)                                                                                	 0.00602022	 100       	 4.01424   	 0         	 1.20261   	 3.33793   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3250, r: 50, r2: 50, leftOrthog: 1)                      	 0.00482725	 100       	 336.631   	 0         	 81.62     	 4.12437   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 15, n: 50, r2: 15)                                                                                                       	 0.00436464	 800       	 0         	 0         	 32.9924   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 65, m: 65, fromLeft: 1)                              	 0.00228617	 800       	 0         	 0         	 23.6553   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 65) 	 0.00184448	 100       	 22.9062   	 0         	 4.65172   	 4.92424   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 65, n: 50, r2new: 1) 	 0.00118583	 100       	 0.54814   	 0         	 4.38647   	 0.124962  
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.00101018	 100       	 0.494962  	 0         	 1.97985   	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000895417	 100       	 27.92     	 0         	 6.70079   	 4.16667   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 65, r2: 65)                            	 0.000870191	 100       	 48.5526   	 0         	 9.8599    	 4.92424   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 65)                           	 0.000802371	 100       	 0         	 0         	 6.48079   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 65, n: 50, r: 2, r2: 1)                             	 0.000640345	 100       	 2.03016   	 0         	 12.1834   	 0.166632  
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 65, leftOrthog: 1)                        	 0.000506886	 100       	 64.117    	 0         	 23.2794   	 2.75424   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 65)                                                                                                        	 0.00047232	 100       	 0         	 0         	 11.0095   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000359933	 100       	 0.694574  	 0         	 11.1132   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 15)                                                                                                        	 0.000358028	 100       	 0         	 0         	 3.35169   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 15, n: 50, r2: 1)                                                                                                        	 0.000311321	 100       	 0         	 0         	 3.85454   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 65, m: 50, fromLeft: 1)                              	 0.000187386	 100       	 0         	 0         	 27.7502   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 6.68109   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 6.68106   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 4.06688   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 2.43742   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 2.43597   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 2.27449   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 2.21459   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 2.14866   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.173811  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.0860899 	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.0784636 	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.058078  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.00550631	 1100      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00247356	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00219257	 4600      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00196612	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.00101018	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000802371	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000359933	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22722318153600 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22722121820160 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22721920493696 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22721719167232 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22721517840768 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22721316514304 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22721115187840 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22720913861376 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22720712534912 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22720511208448 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22720309881984 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22720108555520 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22719907229056 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22719705902592 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22719504576128 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22719303249664 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22719101923200 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22718900596736 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22718699270272 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22718497943808 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22718296617344 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22718095290880 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22717893964416 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22717692637952 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22717491311488 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22717289985024 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22717088658560 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22716887332096 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22716686005632 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22716484679168 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22716283352704 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22716082026240 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22715880695680 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22715679369216 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22715478042752 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22715276716288 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22715075389824 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22714874063360 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22714672736896 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22714471410432 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22714270083968 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22714068757504 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22713867431040 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22713666104576 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22713464778112 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22713263451648 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22713062125184 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22712860798720 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22712659472256 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22712458145792 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22712256819328 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22712055492864 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22711854166400 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22711652839936 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22711451513472 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22711250187008 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22711048860544 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22710847534080 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22710646207616 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22710444881152 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22710243554688 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22710042228224 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22709840901760 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22722212493056 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22722205902592 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_TENSORTRAIN_NORMALIZE_PLAIN_QB PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 66, m: 3300)                                                                              	 1.98271   	 700       	 10.0824   	 0         	 1.2428    	 8.11264   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 3300, m: 66)                                                                             	 1.74209   	 600       	 39.7392   	 0         	 1.2124    	 32.7773   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 3300, m: 50)                                                                             	 0.349767  	 100       	 18.9174   	 0         	 0.760621  	 24.8709   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 66)                                                                             	 0.254241  	 100       	 34.4174   	 0         	 1.0523    	 32.7069   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 66, m: 2500)                                                                              	 0.212481  	 100       	 10.1601   	 0         	 1.25911   	 8.06927   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 66, n: 50, r2new: 66)	 0.151529  	 700       	 84.0284   	 0         	 13.3028   	 6.31661   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 66, n: 50, r: 66, r2: 66)                           	 0.079793  	 700       	 252.211   	 0         	 30.8768   	 8.16832   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 66, r1_: 66, n: 50, r2: 66)                         	 0.0592618 	 600       	 291.077   	 0         	 35.6349   	 8.16832   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3300, r: 66, r2: 66, leftOrthog: 1)                      	 0.0522695 	 600       	 330.016   	 0         	 60.803    	 5.42763   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 66)                                                                               	 0.0472136 	 100       	 3.14881   	 0         	 0.15504   	 20.3097   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 66, n: 50, r2new: 50)	 0.0179948 	 100       	 76.5777   	 0         	 13.6084   	 5.62725   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3300, r: 50, r2: 50, leftOrthog: 1)                      	 0.0118238 	 100       	 139.549   	 0         	 33.8302   	 4.125     
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 66, r1_: 50, n: 50, r2: 66)                         	 0.0108266 	 100       	 201.171   	 0         	 28.5297   	 7.05128   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 66, n: 50, r: 66, r2: 50)                           	 0.0104621 	 100       	 208.181   	 0         	 29.5238   	 7.05128   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 66, r1_: 66, n: 50, r2: 50)                         	 0.0082128 	 100       	 265.196   	 0         	 32.5693   	 8.14252   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 66, r2: 66, leftOrthog: 1)                      	 0.0072177 	 100       	 301.758   	 0         	 55.8307   	 5.40487   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 66, m: 50)                                                                                	 0.00646685	 100       	 3.81431   	 0         	 1.13193   	 3.36975   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 16, n: 50, r2: 16)                                                                                                       	 0.00474152	 800       	 0         	 0         	 34.5543   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 66, m: 66, fromLeft: 1)                              	 0.00233907	 800       	 0         	 0         	 23.8371   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 66) 	 0.0020734 	 100       	 21.0089   	 0         	 4.22725   	 4.96988   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 66, r2: 66)                            	 0.00106087	 100       	 41.0605   	 0         	 8.26187   	 4.96988   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 66, n: 50, r2new: 1) 	 0.00101568	 100       	 0.649808  	 0         	 5.20004   	 0.124962  
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000843894	 100       	 0.592491  	 0         	 2.36997   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 66)                           	 0.000841704	 100       	 0         	 0         	 6.27299   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000820474	 100       	 30.4702   	 0         	 7.31285   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 66)                                                                                                        	 0.000488622	 100       	 0         	 0         	 10.8059   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 66, n: 50, r: 2, r2: 1)                             	 0.000458304	 100       	 2.88018   	 0         	 17.2846   	 0.166633  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 16)                                                                                                        	 0.000385528	 100       	 0         	 0         	 3.32012   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 66, leftOrthog: 1)                        	 0.000366269	 100       	 90.0977   	 0         	 32.5444   	 2.76846   
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000336915	 100       	 0.742027  	 0         	 11.8724   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 16, n: 50, r2: 1)                                                                                                        	 0.000315499	 100       	 0         	 0         	 4.05707   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 66, m: 50, fromLeft: 1)                              	 0.000194605	 100       	 0         	 0         	 27.1319   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 6.97651   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 6.97647   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 4.18694   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 2.61182   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 2.61055   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 2.46684   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 2.39331   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 2.20166   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.172613  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.0917743 	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.0791217 	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.0716772 	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.00593117	 1100      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00253368	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00236924	 4600      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00141618	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000843894	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000841704	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000336915	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23099086923648 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23098870982656 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23098669656192 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23098468329728 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23098267003264 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23098065676800 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23097864350336 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23097663023872 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23097461697408 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23097260370944 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23097059044480 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23096857718016 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23096656391552 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23096455065088 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23096253738624 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23096052412160 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23095851085696 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23095649759232 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23095448432768 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23095247106304 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23095045779840 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23094844453376 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23094643126912 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23094441800448 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23094240473984 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23094039147520 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23093837821056 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23093636494592 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23093435168128 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23093233841664 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23093032515200 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23092831188736 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23092629858176 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23092428531712 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23092227205248 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23092025878784 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23091824552320 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23091623225856 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23091421899392 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23091220572928 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23091019246464 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23090817920000 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23090616593536 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23090415267072 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23090213940608 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23090012614144 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23089811287680 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23089609961216 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23089408634752 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23089207308288 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23089005981824 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23088804655360 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23088603328896 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23088402002432 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23088200675968 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23087999349504 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23087798023040 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23087596696576 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23087395370112 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23087194043648 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23086992717184 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23086791390720 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23086590064256 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23098981263104 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23098974672640 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_TENSORTRAIN_NORMALIZE_PLAIN_QB PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 67, m: 3350)                                                                              	 2.07141   	 700       	 10.096    	 0         	 1.2259    	 8.23558   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 3350, m: 67)                                                                             	 1.71082   	 600       	 42.3328   	 0         	 1.27225   	 33.274    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 3350, m: 50)                                                                             	 0.296852  	 100       	 22.6263   	 0         	 0.909679  	 24.8729   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 67)                                                                             	 0.253241  	 100       	 35.6107   	 0         	 1.07267   	 33.1981   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 67, m: 2500)                                                                              	 0.224669  	 100       	 9.90102   	 0         	 1.20909   	 8.18881   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 67, n: 50, r2new: 67)	 0.145416  	 700       	 89.952    	 0         	 14.1868   	 6.34055   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 67, n: 50, r: 67, r2: 67)                           	 0.0806821 	 700       	 260.943   	 0         	 31.4689   	 8.29208   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3350, r: 67, r2: 67, leftOrthog: 1)                      	 0.0612813 	 600       	 294.474   	 0         	 53.4449   	 5.50987   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 67, r1_: 67, n: 50, r2: 67)                         	 0.0609717 	 600       	 295.97    	 0         	 35.6931   	 8.29208   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 67)                                                                               	 0.0480098 	 100       	 3.13825   	 0         	 0.154135  	 20.3604   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 67, n: 50, r2new: 50)	 0.0187032 	 100       	 74.5594   	 0         	 13.2726   	 5.61755   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 67, r1_: 50, n: 50, r2: 67)                         	 0.0124965 	 100       	 179.611   	 0         	 25.3064   	 7.09746   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 67, n: 50, r: 67, r2: 50)                           	 0.0100009 	 100       	 224.43    	 0         	 31.6211   	 7.09746   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 67, r1_: 67, n: 50, r2: 50)                         	 0.00810221	 100       	 277.023   	 0         	 33.5206   	 8.26426   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 67, r2: 67, leftOrthog: 1)                      	 0.00682508	 100       	 328.861   	 0         	 59.9528   	 5.48533   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 67, m: 50)                                                                                	 0.00617204	 100       	 4.07752   	 0         	 1.19896   	 3.40089   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3350, r: 50, r2: 50, leftOrthog: 1)                      	 0.00561679	 100       	 298.213   	 0         	 72.2833   	 4.12562   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 17, n: 50, r2: 17)                                                                                                       	 0.00511568	 800       	 0         	 0         	 36.1555   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 67, m: 67, fromLeft: 1)                              	 0.00238644	 800       	 0         	 0         	 24.0774   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 67) 	 0.00190193	 100       	 23.6024   	 0         	 4.70638   	 5.01497   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 67, n: 50, r2new: 1) 	 0.00119392	 100       	 0.561178  	 0         	 4.49076   	 0.124963  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 67, r2: 67)                            	 0.000895045	 100       	 50.1539   	 0         	 10.0008   	 5.01497   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000891721	 100       	 0.560713  	 0         	 2.24285   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 67)                           	 0.000859732	 100       	 0         	 0         	 6.2345    	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000801982	 100       	 31.1728   	 0         	 7.48146   	 4.16667   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 67, n: 50, r: 2, r2: 1)                             	 0.000634351	 100       	 2.1124    	 0         	 12.6769   	 0.166634  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 67)                                                                                                        	 0.000499197	 100       	 0         	 0         	 10.7372   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 17)                                                                                                        	 0.000393467	 100       	 0         	 0         	 3.45645   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000339412	 100       	 0.736568  	 0         	 11.7851   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 17, n: 50, r2: 1)                                                                                                        	 0.00033903	 100       	 0         	 0         	 4.01144   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 67, leftOrthog: 1)                        	 0.000275905	 100       	 121.419   	 0         	 43.6382   	 2.78239   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 67, m: 50, fromLeft: 1)                              	 0.000189427	 100       	 0         	 0         	 28.2959   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 7.05104   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 7.051     	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 4.34571   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 2.53091   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 2.5296    	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 2.38465   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 2.30892   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 2.30226   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.167215  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.0922124 	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.0823723 	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.0739991 	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.00634737	 1100      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00257586	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00211336	 4600      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00136074	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000891721	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000859732	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000339412	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23066656761728 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23066457401344 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23066256074880 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23066054748416 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23065853421952 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23065652095488 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23065450769024 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23065249442560 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23065048116096 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23064846789632 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23064645463168 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23064444136704 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23064242810240 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23064041483776 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23063840157312 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23063638830848 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23063437504384 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23063236177920 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23063034851456 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23062833524992 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23062632198528 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23062430872064 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23062229545600 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23062028219136 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23061826892672 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23061625566208 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23061424239744 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23061222913280 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23061021586816 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23060820260352 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23060618933888 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23060417607424 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23060216276864 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23060014950400 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23059813623936 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23059612297472 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23059410971008 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23059209644544 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23059008318080 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23058806991616 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23058605665152 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23058404338688 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23058203012224 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23058001685760 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23057800359296 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23057599032832 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23057397706368 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23057196379904 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23056995053440 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23056793726976 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23056592400512 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23056391074048 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23056189747584 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23055988421120 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23055787094656 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23055585768192 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23055384441728 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23055183115264 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23054981788800 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23054780462336 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23054579135872 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23054377809408 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23054176482944 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23066551101184 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23066544510720 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_TENSORTRAIN_NORMALIZE_PLAIN_QB PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 68, m: 3400)                                                                              	 2.10218   	 700       	 10.4004   	 0         	 1.24429   	 8.35852   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 3400, m: 68)                                                                             	 1.79838   	 600       	 42.1019   	 0         	 1.2467    	 33.7707   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 3400, m: 50)                                                                             	 0.291095  	 100       	 23.4173   	 0         	 0.941411  	 24.8747   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 68)                                                                             	 0.255828  	 100       	 36.3132   	 0         	 1.07789   	 33.6892   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 68, m: 2500)                                                                              	 0.222339  	 100       	 10.3043   	 0         	 1.24024   	 8.30828   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 68, n: 50, r2new: 68)	 0.145645  	 700       	 92.2948   	 0         	 14.4965   	 6.3667    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 68, n: 50, r: 68, r2: 68)                           	 0.0848128 	 700       	 259.516   	 0         	 30.8366   	 8.41584   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 68, r1_: 68, n: 50, r2: 68)                         	 0.0579703 	 600       	 325.441   	 0         	 38.6701   	 8.41584   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3400, r: 68, r2: 68, leftOrthog: 1)                      	 0.0557652 	 600       	 338.31    	 0         	 60.4977   	 5.59211   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 68)                                                                               	 0.0473539 	 100       	 3.22395   	 0         	 0.15796   	 20.41     
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 68, n: 50, r2new: 50)	 0.0183847 	 100       	 76.803    	 0         	 13.6897   	 5.6103    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 68, r1_: 50, n: 50, r2: 68)                         	 0.0126389 	 100       	 182.928   	 0         	 25.6099   	 7.14286   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 68, n: 50, r: 68, r2: 50)                           	 0.00998609	 100       	 231.522   	 0         	 32.4131   	 7.14286   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 68, r1_: 68, n: 50, r2: 50)                         	 0.00804148	 100       	 287.509   	 0         	 34.2846   	 8.38595   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 68, r2: 68, leftOrthog: 1)                      	 0.00696152	 100       	 332.112   	 0         	 59.6707   	 5.56574   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 68, m: 50)                                                                                	 0.00625299	 100       	 4.10469   	 0         	 1.19623   	 3.43136   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3400, r: 50, r2: 50, leftOrthog: 1)                      	 0.00557805	 100       	 304.766   	 0         	 73.861    	 4.12621   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 18, n: 50, r2: 18)                                                                                                       	 0.00548785	 800       	 0         	 0         	 37.7853   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 68, m: 68, fromLeft: 1)                              	 0.00260935	 800       	 0         	 0         	 22.6827   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 68) 	 0.0019635 	 100       	 23.5498   	 0         	 4.65454   	 5.05952   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 68, n: 50, r2new: 1) 	 0.00124432	 100       	 0.546482  	 0         	 4.37314   	 0.124963  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 68, r2: 68)                            	 0.000948706	 100       	 48.7401   	 0         	 9.63333   	 5.05952   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000875285	 100       	 0.571243  	 0         	 2.28497   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 68)                           	 0.00085418	 100       	 0         	 0         	 6.36868   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000768877	 100       	 32.515    	 0         	 7.80359   	 4.16667   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 68, n: 50, r: 2, r2: 1)                             	 0.000656181	 100       	 2.0726    	 0         	 12.438    	 0.166634  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 68)                                                                                                        	 0.000534928	 100       	 0         	 0         	 10.1696   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 18)                                                                                                        	 0.00038598	 100       	 0         	 0         	 3.73076   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000337394	 100       	 0.740973  	 0         	 11.8556   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 18, n: 50, r2: 1)                                                                                                        	 0.000329074	 100       	 0         	 0         	 4.37592   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 68, leftOrthog: 1)                        	 0.000298644	 100       	 113.848   	 0         	 40.7174   	 2.79605   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 68, m: 50, fromLeft: 1)                              	 0.000191156	 100       	 0         	 0         	 28.4584   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 7.13429   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 7.13426   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 4.35803   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 2.60055   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 2.59926   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 2.46864   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 2.39266   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 2.33077   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.167237  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.0964038 	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.0794195 	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.0686034 	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.00673783	 1100      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00280051	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00223566	 4600      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00125335	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000875285	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.00085418	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000337394	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22929651763072 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22929421101056 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22929219774592 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22929018448128 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22928817121664 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22928615795200 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22928414468736 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22928213142272 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22928011815808 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22927810489344 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22927609162880 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22927407836416 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22927206509952 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22927005183488 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22926803857024 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22926602530560 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22926401204096 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22926199877632 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22925998551168 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22925797224704 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22925595898240 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22925394571776 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22925193245312 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22924991918848 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22924790592384 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22924589265920 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22924387939456 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22924186612992 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22923985286528 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22923783960064 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22923582633600 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22923381307136 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22923179976576 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22922978650112 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22922777323648 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22922575997184 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22922374670720 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22922173344256 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22921972017792 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22921770691328 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22921569364864 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22921368038400 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22921166711936 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22920965385472 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22920764059008 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22920562732544 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22920361406080 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22920160079616 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22919958753152 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22919757426688 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22919556100224 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22919354773760 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22919153447296 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22918952120832 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22918750794368 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22918549467904 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22918348141440 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22918146814976 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22917945488512 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22917744162048 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22917542835584 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22917341509120 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22917140182656 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22929546102528 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22929539512064 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_TENSORTRAIN_NORMALIZE_PLAIN_QB PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 69, m: 3450)                                                                              	 2.19786   	 700       	 10.393    	 0         	 1.22538   	 8.48146   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 3450, m: 69)                                                                             	 1.82138   	 600       	 43.4314   	 0         	 1.26743   	 34.2674   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 3450, m: 50)                                                                             	 0.281282  	 100       	 24.5898   	 0         	 0.988474  	 24.8765   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 69)                                                                             	 0.255292  	 100       	 37.47     	 0         	 1.09625   	 34.1802   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 69, m: 2500)                                                                              	 0.234887  	 100       	 10.0414   	 0         	 1.19148   	 8.42766   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 69, n: 50, r2new: 69)	 0.175028  	 700       	 78.9509   	 0         	 12.3456   	 6.39508   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 69, n: 50, r: 69, r2: 69)                           	 0.0855488 	 700       	 268.801   	 0         	 31.477    	 8.5396    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3450, r: 69, r2: 69, leftOrthog: 1)                      	 0.0687068 	 600       	 286.879   	 0         	 50.5573   	 5.67434   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 69, r1_: 69, n: 50, r2: 69)                         	 0.0590859 	 600       	 333.591   	 0         	 39.064    	 8.5396    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 69)                                                                               	 0.0497668 	 100       	 3.10783   	 0         	 0.151908  	 20.4586   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 69, n: 50, r2new: 50)	 0.0183738 	 100       	 77.8555   	 0         	 13.8894   	 5.60541   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 69, r1_: 50, n: 50, r2: 69)                         	 0.0120775 	 100       	 197.102   	 0         	 27.4229   	 7.1875    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 69, n: 50, r: 69, r2: 50)                           	 0.0102416 	 100       	 232.434   	 0         	 32.3387   	 7.1875    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 69, r1_: 69, n: 50, r2: 50)                         	 0.00776747	 100       	 306.471   	 0         	 36.0232   	 8.5076    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3450, r: 50, r2: 50, leftOrthog: 1)                      	 0.00766687	 100       	 224.994   	 0         	 54.5203   	 4.12679   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 69, r2: 69, leftOrthog: 1)                      	 0.00736478	 100       	 323.227   	 0         	 57.2478   	 5.64611   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 69, m: 50)                                                                                	 0.00650921	 100       	 4.01993   	 0         	 1.16143   	 3.46119   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 19, n: 50, r2: 19)                                                                                                       	 0.00585708	 800       	 0         	 0         	 39.4463   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 69, m: 69, fromLeft: 1)                              	 0.00259975	 800       	 0         	 0         	 23.4411   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 69) 	 0.00218711	 100       	 21.7685   	 0         	 4.26536   	 5.10355   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 69, n: 50, r2new: 1) 	 0.00117614	 100       	 0.586666  	 0         	 4.69469   	 0.124964  
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 69)                           	 0.00107792	 100       	 0         	 0         	 5.12099   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 69, r2: 69)                            	 0.000949026	 100       	 50.1672   	 0         	 9.82987   	 5.10355   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000934552	 100       	 0.535016  	 0         	 2.14006   	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000775246	 100       	 32.2478   	 0         	 7.73948   	 4.16667   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 69, n: 50, r: 2, r2: 1)                             	 0.000607309	 100       	 2.27232   	 0         	 13.6366   	 0.166634  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 69)                                                                                                        	 0.000496174	 100       	 0         	 0         	 11.1251   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 19)                                                                                                        	 0.000407304	 100       	 0         	 0         	 3.73186   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000330051	 100       	 0.757459  	 0         	 12.1193   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 19, n: 50, r2: 1)                                                                                                        	 0.000318778	 100       	 0         	 0         	 4.76821   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 69, leftOrthog: 1)                        	 0.000306124	 100       	 112.699   	 0         	 40.1145   	 2.80945   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 69, m: 50, fromLeft: 1)                              	 0.000189395	 100       	 0         	 0         	 29.1454   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 7.26216   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 7.26213   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 4.4364    	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 2.62306   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 2.62172   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 2.49357   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 2.43926   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 2.40772   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.196765  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.0973468 	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.0840445 	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.0797061 	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.00707934	 1100      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00278914	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00221817	 4600      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00175145	 4600      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.00107792	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000934552	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000330051	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23088963241856 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23088737544192 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23088536217728 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23088334891264 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23088133564800 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23087932238336 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23087730911872 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23087529585408 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23087328258944 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23087126932480 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23086925606016 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23086724279552 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23086522953088 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23086321626624 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23086120300160 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23085918973696 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23085717647232 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23085516320768 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23085314994304 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23085113667840 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23084912341376 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23084711014912 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23084509688448 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23084308361984 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23084107035520 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23083905709056 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23083704382592 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23083503056128 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23083301729664 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23083100403200 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23082899076736 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23082697750272 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23082496419712 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23082295093248 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23082093766784 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23081892440320 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23081691113856 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23081489787392 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23081288460928 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23081087134464 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23080885808000 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23080684481536 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23080483155072 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23080281828608 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23080080502144 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23079879175680 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23079677849216 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23079476522752 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23079275196288 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23079073869824 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23078872543360 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23078671216896 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23078469890432 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23078268563968 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23078067237504 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23077865911040 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23077664584576 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23077463258112 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23077261931648 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23077060605184 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23076859278720 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23076657952256 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23076456625792 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23088857581312 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23088850990848 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_TENSORTRAIN_NORMALIZE_PLAIN_QB PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 70, m: 3500)                                                                              	 2.24137   	 700       	 10.6408   	 0         	 1.23667   	 8.60439   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 3500, m: 70)                                                                             	 1.92196   	 600       	 42.974    	 0         	 1.23616   	 34.7641   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 70)                                                                             	 0.281767  	 100       	 34.9428   	 0         	 1.00784   	 34.671    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 3500, m: 50)                                                                             	 0.267929  	 100       	 26.1885   	 0         	 1.05267   	 24.8783   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 70, m: 2500)                                                                              	 0.229723  	 100       	 10.5655   	 0         	 1.23617   	 8.54697   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 70, n: 50, r2new: 70)	 0.158936  	 700       	 89.4069   	 0         	 13.914    	 6.42568   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 70, n: 50, r: 70, r2: 70)                           	 0.087366  	 700       	 274.821   	 0         	 31.7222   	 8.66337   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3500, r: 70, r2: 70, leftOrthog: 1)                      	 0.0869716 	 600       	 236.629   	 0         	 41.1059   	 5.75658   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 70, r1_: 70, n: 50, r2: 70)                         	 0.0631172 	 600       	 326.06    	 0         	 37.6366   	 8.66337   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 70)                                                                               	 0.0485112 	 100       	 3.22949   	 0         	 0.157489  	 20.5061   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 70, n: 50, r2new: 50)	 0.0187323 	 100       	 77.4064   	 0         	 13.8157   	 5.60278   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3500, r: 50, r2: 50, leftOrthog: 1)                      	 0.0127441 	 100       	 137.319   	 0         	 33.2704   	 4.12736   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 70, r1_: 50, n: 50, r2: 70)                         	 0.0122725 	 100       	 199.633   	 0         	 27.6064   	 7.2314    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 70, n: 50, r: 70, r2: 50)                           	 0.0106802 	 100       	 229.395   	 0         	 31.7221   	 7.2314    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 70, r1_: 70, n: 50, r2: 50)                         	 0.00823148	 100       	 297.638   	 0         	 34.492    	 8.62919   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 70, r2: 70, leftOrthog: 1)                      	 0.00777673	 100       	 315.042   	 0         	 55.0154   	 5.72644   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 70, m: 50)                                                                                	 0.00652843	 100       	 4.08469   	 0         	 1.17027   	 3.49039   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 20, n: 50, r2: 20)                                                                                                       	 0.00636894	 800       	 0         	 0         	 40.1951   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 70, m: 70, fromLeft: 1)                              	 0.00271924	 800       	 0         	 0         	 23.0653   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 70) 	 0.00195223	 100       	 25.0995   	 0         	 4.87648   	 5.14706   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 70, n: 50, r2new: 1) 	 0.00114321	 100       	 0.61231   	 0         	 4.89988   	 0.124964  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 70, r2: 70)                            	 0.000948514	 100       	 51.6598   	 0         	 10.0368   	 5.14706   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 70)                           	 0.000845038	 100       	 0         	 0         	 6.62692   	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000832571	 100       	 0.600549  	 0         	 2.4022    	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000788693	 100       	 31.698    	 0         	 7.60752   	 4.16667   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 70, n: 50, r: 2, r2: 1)                             	 0.00060442	 100       	 2.31627   	 0         	 13.9003   	 0.166635  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 70)                                                                                                        	 0.000500499	 100       	 0         	 0         	 11.1888   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 20)                                                                                                        	 0.000387182	 100       	 0         	 0         	 4.13242   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000329518	 100       	 0.758684  	 0         	 12.1389   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 20, n: 50, r2: 1)                                                                                                        	 0.000322641	 100       	 0         	 0         	 4.95907   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 70, leftOrthog: 1)                        	 0.000312028	 100       	 112.169   	 0         	 39.74     	 2.82258   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 70, m: 50, fromLeft: 1)                              	 0.000198768	 100       	 0         	 0         	 28.1735   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 7.56884   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 7.56881   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 4.61338   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 2.76702   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 2.76578   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 2.63593   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 2.52017   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 2.47762   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.180764  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.107804  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.0995992 	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.0844099 	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.00757926	 1100      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.002918  	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00230434	 4600      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.0011226 	 4600      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000845038	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000832571	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000329518	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22554947798912 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22554752313344 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22554550986880 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22554349660416 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22554148333952 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22553947007488 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22553745681024 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22553544354560 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22553343028096 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22553141701632 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22552940375168 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22552739048704 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22552537722240 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22552336395776 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22552135069312 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22551933742848 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22551732416384 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22551531089920 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22551329763456 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22551128436992 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22550927110528 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22550725784064 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22550524457600 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22550323131136 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22550121804672 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22549920478208 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22549719151744 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22549517825280 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22549316498816 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22549115172352 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22548913845888 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22548712519424 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22548511188864 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22548309862400 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22548108535936 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22547907209472 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22547705883008 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22547504556544 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22547303230080 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22547101903616 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22546900577152 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22546699250688 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22546497924224 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22546296597760 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22546095271296 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22545893944832 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22545692618368 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22545491291904 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22545289965440 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22545088638976 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22544887312512 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22544685986048 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22544484659584 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22544283333120 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22544082006656 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22543880680192 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22543679353728 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22543478027264 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22543276700800 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22543075374336 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22542874047872 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22542672721408 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22542471394944 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22554842138368 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22554835547904 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_TENSORTRAIN_NORMALIZE_PLAIN_QB PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 71, m: 3550)                                                                              	 2.39583   	 700       	 10.3875   	 0         	 1.19023   	 8.72733   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 3550, m: 71)                                                                             	 1.98336   	 600       	 43.454    	 0         	 1.23236   	 35.2608   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 3550, m: 50)                                                                             	 0.325183  	 100       	 21.8851   	 0         	 0.879627  	 24.88     
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 71)                                                                             	 0.266872  	 100       	 37.9573   	 0         	 1.07951   	 35.1617   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 71, m: 2500)                                                                              	 0.246184  	 100       	 10.1414   	 0         	 1.17022   	 8.66619   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 71, n: 50, r2new: 71)	 0.189848  	 700       	 76.9918   	 0         	 11.921    	 6.45848   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3550, r: 71, r2: 71, leftOrthog: 1)                      	 0.125247  	 600       	 171.459   	 0         	 29.3654   	 5.83882   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 71, n: 50, r: 71, r2: 71)                           	 0.0916209 	 700       	 273.45    	 0         	 31.1194   	 8.78713   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 71, r1_: 71, n: 50, r2: 71)                         	 0.062121  	 600       	 345.691   	 0         	 39.3406   	 8.78713   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 71)                                                                               	 0.0478138 	 100       	 3.31843   	 0         	 0.16146   	 20.5527   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 71, n: 50, r2new: 50)	 0.0198072 	 100       	 74.2408   	 0         	 13.2518   	 5.60233   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 71, r1_: 50, n: 50, r2: 71)                         	 0.0128326 	 100       	 196.414   	 0         	 27        	 7.27459   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 71, n: 50, r: 71, r2: 50)                           	 0.0108295 	 100       	 232.744   	 0         	 31.9941   	 7.27459   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 71, r1_: 71, n: 50, r2: 50)                         	 0.0085879 	 100       	 293.494   	 0         	 33.5394   	 8.75074   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 21, n: 50, r2: 21)                                                                                                       	 0.00671868	 800       	 0         	 0         	 42.0083   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 71, m: 50)                                                                                	 0.00657094	 100       	 4.13436   	 0         	 1.17487   	 3.51899   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 71, r2: 71, leftOrthog: 1)                      	 0.00589009	 100       	 427.922   	 0         	 73.6943   	 5.80673   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3550, r: 50, r2: 50, leftOrthog: 1)                      	 0.00545063	 100       	 325.651   	 0         	 78.89     	 4.12791   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 71, m: 71, fromLeft: 1)                              	 0.00280516	 800       	 0         	 0         	 23.0022   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 71) 	 0.00198455	 100       	 25.4013   	 0         	 4.89422   	 5.19006   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 71, r2: 71)                            	 0.000967381	 100       	 52.1098   	 0         	 10.0403   	 5.19006   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 71, n: 50, r2new: 1) 	 0.000963997	 100       	 0.736517  	 0         	 5.89379   	 0.124965  
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000909789	 100       	 0.549578  	 0         	 2.19831   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 71)                           	 0.00085865	 100       	 0         	 0         	 6.61504   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000808158	 100       	 30.9345   	 0         	 7.42429   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 71)                                                                                                        	 0.000502474	 100       	 0         	 0         	 11.3041   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 71, n: 50, r: 2, r2: 1)                             	 0.000415963	 100       	 3.41377   	 0         	 20.4864   	 0.166635  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 21)                                                                                                        	 0.000406342	 100       	 0         	 0         	 4.13445   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000347313	 100       	 0.719812  	 0         	 11.517    	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 21, n: 50, r2: 1)                                                                                                        	 0.000327964	 100       	 0         	 0         	 5.12251   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 71, leftOrthog: 1)                        	 0.00030341	 100       	 117.003   	 0         	 41.2643   	 2.83546   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 71, m: 50, fromLeft: 1)                              	 0.000193277	 100       	 0         	 0         	 29.3879   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 7.98179   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 7.98176   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 4.84003   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 2.92156   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 2.92022   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 2.76754   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 2.64859   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 2.62323   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.212604  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.136891  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.103834  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.0843497 	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.00795546	 1100      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00299844	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00226441	 4600      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00207671	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000909789	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.00085865	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000347313	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23134897543040 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23134707116032 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23134505789568 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23134304463104 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23134103136640 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23133901810176 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23133700483712 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23133499157248 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23133297830784 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23133096504320 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23132895177856 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23132693851392 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23132492524928 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23132291198464 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23132089872000 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23131888545536 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23131687219072 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23131485892608 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23131284566144 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23131083239680 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23130881913216 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23130680586752 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23130479260288 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23130277933824 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23130076607360 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23129875280896 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23129673954432 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23129472627968 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23129271301504 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23129069975040 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23128868648576 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23128667322112 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23128465991552 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23128264665088 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23128063338624 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23127862012160 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23127660685696 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23127459359232 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23127258032768 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23127056706304 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23126855379840 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23126654053376 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23126452726912 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23126251400448 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23126050073984 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23125848747520 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23125647421056 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23125446094592 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23125244768128 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23125043441664 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23124842115200 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23124640788736 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23124439462272 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23124238135808 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23124036809344 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23123835482880 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23123634156416 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23123432829952 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23123231503488 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23123030177024 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23122828850560 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23122627524096 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23122426197632 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23134791882496 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23134785292032 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_TENSORTRAIN_NORMALIZE_PLAIN_QB PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 72, m: 3600)                                                                              	 2.42296   	 700       	 10.7113   	 0         	 1.21028   	 8.85027   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 3600, m: 72)                                                                             	 2.25242   	 600       	 39.9029   	 0         	 1.11593   	 35.7575   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 72)                                                                             	 0.297216  	 100       	 35.0511   	 0         	 0.983138  	 35.6523   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 3600, m: 50)                                                                             	 0.291529  	 100       	 24.7545   	 0         	 0.994892  	 24.8816   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 72, m: 2500)                                                                              	 0.242914  	 100       	 10.568    	 0         	 1.20292   	 8.78533   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 72, n: 50, r2new: 72)	 0.183297  	 700       	 82.0492   	 0         	 12.6356   	 6.49348   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3600, r: 72, r2: 72, leftOrthog: 1)                      	 0.1217    	 600       	 184.018   	 0         	 31.0785   	 5.92105   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 72, n: 50, r: 72, r2: 72)                           	 0.0899752 	 700       	 290.384   	 0         	 32.5875   	 8.91089   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 72, r1_: 72, n: 50, r2: 72)                         	 0.0626423 	 600       	 357.504   	 0         	 40.1199   	 8.91089   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 72)                                                                               	 0.0490717 	 100       	 3.27412   	 0         	 0.158951  	 20.5983   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 72, n: 50, r2new: 50)	 0.0193464 	 100       	 77.1205   	 0         	 13.7618   	 5.60397   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 72, r1_: 50, n: 50, r2: 72)                         	 0.0132952 	 100       	 194.957   	 0         	 26.6441   	 7.31707   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 72, n: 50, r: 72, r2: 50)                           	 0.0108282 	 100       	 239.375   	 0         	 32.7146   	 7.31707   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3600, r: 50, r2: 50, leftOrthog: 1)                      	 0.00890268	 100       	 202.186   	 0         	 48.974    	 4.12844   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 72, r1_: 72, n: 50, r2: 50)                         	 0.00819482	 100       	 316.298   	 0         	 35.6502   	 8.87224   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 22, n: 50, r2: 22)                                                                                                       	 0.00719435	 800       	 0         	 0         	 43.056    	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 72, r2: 72, leftOrthog: 1)                      	 0.00697374	 100       	 371.68    	 0         	 63.1361   	 5.88697   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 72, m: 50)                                                                                	 0.00673702	 100       	 4.10665   	 0         	 1.15778   	 3.547     
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 72, m: 72, fromLeft: 1)                              	 0.00296078	 800       	 0         	 0         	 22.4114   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 72) 	 0.00200575	 100       	 25.8456   	 0         	 4.93939   	 5.23256   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 72, n: 50, r2new: 1) 	 0.00100183	 100       	 0.718683  	 0         	 5.75106   	 0.124965  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 72, r2: 72)                            	 0.00099165	 100       	 52.2765   	 0         	 9.99062   	 5.23256   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000931602	 100       	 0.53671   	 0         	 2.14684   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 72)                           	 0.000841107	 100       	 0         	 0         	 6.84812   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000778855	 100       	 32.0984   	 0         	 7.70362   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 72)                                                                                                        	 0.000492799	 100       	 0         	 0         	 11.6883   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 72, n: 50, r: 2, r2: 1)                             	 0.000428098	 100       	 3.36372   	 0         	 20.186    	 0.166636  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 22)                                                                                                        	 0.000384649	 100       	 0         	 0         	 4.5756    	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000344648	 100       	 0.725378  	 0         	 11.606    	 0.0625    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 72, leftOrthog: 1)                        	 0.000332224	 100       	 108.361   	 0         	 38.0466   	 2.8481    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 22, n: 50, r2: 1)                                                                                                        	 0.000324422	 100       	 0         	 0         	 5.42503   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 72, m: 50, fromLeft: 1)                              	 0.000188888	 100       	 0         	 0         	 30.4943   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 8.31856   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 8.31854   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 4.90691   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 3.2031    	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 3.20173   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 3.03451   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 2.89024   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 2.67261   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.205651  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.137908  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.102223  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.0849112 	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.00839622	 1100      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00314967	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00205351	 4600      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00152335	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000931602	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000841107	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000344648	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22408670861184 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22408454989824 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22408253663360 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22408052336896 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22407851010432 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22407649683968 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22407448357504 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22407247031040 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22407045704576 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22406844378112 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22406643051648 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22406441725184 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22406240398720 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22406039072256 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22405837745792 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22405636419328 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22405435092864 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22405233766400 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22405032439936 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22404831113472 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22404629787008 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22404428460544 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22404227134080 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22404025807616 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22403824481152 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22403623154688 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22403421828224 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22403220501760 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22403019175296 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22402817848832 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22402616522368 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22402415195904 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22402213865344 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22402012538880 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22401811212416 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22401609885952 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22401408559488 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22401207233024 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22401005906560 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22400804580096 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22400603253632 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22400401927168 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22400200600704 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22399999274240 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22399797947776 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22399596621312 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22399395294848 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22399193968384 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22398992641920 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22398791315456 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22398589988992 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22398388662528 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22398187336064 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22397986009600 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22397784683136 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22397583356672 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22397382030208 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22397180703744 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22396979377280 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22396778050816 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22396576724352 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22396375397888 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22396174071424 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22408565200640 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22408558610176 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_TENSORTRAIN_NORMALIZE_PLAIN_QB PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 73, m: 3650)                                                                              	 2.53045   	 700       	 10.6897   	 0         	 1.19129   	 8.97321   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 3650, m: 73)                                                                             	 2.40616   	 600       	 38.9314   	 0         	 1.07385   	 36.2542   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 73)                                                                             	 0.289917  	 100       	 36.9411   	 0         	 1.02209   	 36.1427   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 3650, m: 50)                                                                             	 0.282498  	 100       	 25.8999   	 0         	 1.04086   	 24.8832   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 73, m: 2500)                                                                              	 0.253271  	 100       	 10.418    	 0         	 1.16998   	 8.9044    
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 73, n: 50, r2new: 73)	 0.225105  	 700       	 68.7598   	 0         	 10.5288   	 6.53065   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3650, r: 73, r2: 73, leftOrthog: 1)                      	 0.188502  	 600       	 123.824   	 0         	 20.626    	 6.00329   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 73, n: 50, r: 73, r2: 73)                           	 0.0942393 	 700       	 288.958   	 0         	 31.9833   	 9.03465   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 73, r1_: 73, n: 50, r2: 73)                         	 0.0680232 	 600       	 343.133   	 0         	 37.9797   	 9.03465   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 73)                                                                               	 0.0476951 	 100       	 3.41056   	 0         	 0.165216  	 20.643    
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 73, n: 50, r2new: 50)	 0.0198036 	 100       	 76.476    	 0         	 13.6379   	 5.6076    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3650, r: 50, r2: 50, leftOrthog: 1)                      	 0.0147836 	 100       	 123.448   	 0         	 29.898    	 4.12896   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 73, r1_: 50, n: 50, r2: 73)                         	 0.0132441 	 100       	 201.184   	 0         	 27.339    	 7.35887   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 73, n: 50, r: 73, r2: 50)                           	 0.0107174 	 100       	 248.614   	 0         	 33.7843   	 7.35887   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 73, r1_: 73, n: 50, r2: 50)                         	 0.00914342	 100       	 291.412   	 0         	 32.4018   	 8.99369   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 73, r2: 73, leftOrthog: 1)                      	 0.00913026	 100       	 291.832   	 0         	 48.9062   	 5.96717   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 23, n: 50, r2: 23)                                                                                                       	 0.00808537	 800       	 0         	 0         	 41.8732   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 73, m: 50)                                                                                	 0.00674512	 100       	 4.17585   	 0         	 1.16825   	 3.57444   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 73, m: 73, fromLeft: 1)                              	 0.00363937	 800       	 0         	 0         	 18.7426   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 73) 	 0.00195485	 100       	 27.2605   	 0         	 5.16829   	 5.27457   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 73, n: 50, r2new: 1) 	 0.00108711	 100       	 0.671503  	 0         	 5.3735    	 0.124966  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 73, r2: 73)                            	 0.000951675	 100       	 55.996    	 0         	 10.6162   	 5.27457   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000905783	 100       	 0.552009  	 0         	 2.20803   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 73)                           	 0.000841477	 100       	 0         	 0         	 6.94018   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000804454	 100       	 31.077    	 0         	 7.45847   	 4.16667   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 73, n: 50, r: 2, r2: 1)                             	 0.000533363	 100       	 2.73735   	 0         	 16.4271   	 0.166636  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 73)                                                                                                        	 0.000498314	 100       	 0         	 0         	 11.7195   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 73, leftOrthog: 1)                        	 0.000454126	 100       	 80.3742   	 0         	 28.0979   	 2.8605    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 23)                                                                                                        	 0.00038651	 100       	 0         	 0         	 4.76055   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000334433	 100       	 0.747534  	 0         	 11.9605   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 23, n: 50, r2: 1)                                                                                                        	 0.000321979	 100       	 0         	 0         	 5.71466   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 73, m: 50, fromLeft: 1)                              	 0.000221742	 100       	 0         	 0         	 26.3369   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 8.92705   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 8.92703   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 5.25459   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 3.41963   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 3.4183    	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 3.24961   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 3.02627   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 2.79046   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.247951  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.21287   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.106442  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.0912151 	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.00929217	 1100      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00386111	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00214814	 4600      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00153393	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000905783	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000841477	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000334433	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23338888574848 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23338650953728 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23338449627264 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23338248300800 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23338046974336 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23337845647872 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23337644321408 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23337442994944 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23337241668480 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23337040342016 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23336839015552 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23336637689088 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23336436362624 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23336235036160 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23336033709696 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23335832383232 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23335631056768 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23335429730304 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23335228403840 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23335027077376 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23334825750912 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23334624424448 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23334423097984 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23334221771520 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23334020445056 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23333819118592 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23333617792128 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23333416465664 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23333215139200 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23333013812736 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23332812486272 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23332611159808 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23332409829248 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23332208502784 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23332007176320 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23331805849856 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23331604523392 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23331403196928 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23331201870464 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23331000544000 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23330799217536 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23330597891072 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23330396564608 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23330195238144 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23329993911680 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23329792585216 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23329591258752 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23329389932288 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23329188605824 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23328987279360 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23328785952896 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23328584626432 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23328383299968 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23328181973504 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23327980647040 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23327779320576 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23327577994112 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23327376667648 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23327175341184 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23326974014720 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23326772688256 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23326571361792 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23326370035328 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23338782914304 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23338776323840 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_TENSORTRAIN_NORMALIZE_PLAIN_QB PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 3700, m: 74)                                                                             	 2.57844   	 600       	 37.8438   	 0         	 1.02974   	 36.7509   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 74, m: 3700)                                                                              	 2.52554   	 700       	 11.1567   	 0         	 1.22653   	 9.09614   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 74)                                                                             	 0.294307  	 100       	 37.3965   	 0         	 1.02084   	 36.633    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 3700, m: 50)                                                                             	 0.28357   	 100       	 26.1547   	 0         	 1.05103   	 24.8848   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 74, m: 2500)                                                                              	 0.253944  	 100       	 10.6755   	 0         	 1.18309   	 9.02338   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 74, n: 50, r2new: 74)	 0.184891  	 700       	 86.1786   	 0         	 13.117    	 6.56998   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3700, r: 74, r2: 74, leftOrthog: 1)                      	 0.122162  	 600       	 199.025   	 0         	 32.7047   	 6.08553   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 74, n: 50, r: 74, r2: 74)                           	 0.0967696 	 700       	 293.126   	 0         	 32.0062   	 9.15842   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 74, r1_: 74, n: 50, r2: 74)                         	 0.0695085 	 600       	 349.791   	 0         	 38.1934   	 9.15842   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 74)                                                                               	 0.0488185 	 100       	 3.37304   	 0         	 0.163053  	 20.6868   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 74, n: 50, r2new: 50)	 0.0260608 	 100       	 59.0158   	 0         	 10.5139   	 5.61314   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 74, r1_: 50, n: 50, r2: 74)                         	 0.0149537 	 100       	 183.098   	 0         	 24.743    	 7.4       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 74, n: 50, r: 74, r2: 50)                           	 0.010917  	 100       	 250.802   	 0         	 33.8922   	 7.4       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 74, r1_: 74, n: 50, r2: 50)                         	 0.00901411	 100       	 303.746   	 0         	 33.3234   	 9.1151    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 24, n: 50, r2: 24)                                                                                                       	 0.00827725	 800       	 0         	 0         	 44.5365   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 74, r2: 74, leftOrthog: 1)                      	 0.00753622	 100       	 363.312   	 0         	 60.0781   	 6.04733   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 74, m: 50)                                                                                	 0.00665169	 100       	 4.30967   	 0         	 1.19669   	 3.60133   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3700, r: 50, r2: 50, leftOrthog: 1)                      	 0.00607262	 100       	 304.646   	 0         	 73.7738   	 4.12946   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 74, m: 74, fromLeft: 1)                              	 0.00316786	 800       	 0         	 0         	 22.1263   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 74) 	 0.00206148	 100       	 26.5634   	 0         	 4.99679   	 5.31609   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 74, n: 50, r2new: 1) 	 0.00119925	 100       	 0.617053  	 0         	 4.93776   	 0.124966  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 74, r2: 74)                            	 0.00101086	 100       	 54.1716   	 0         	 10.1901   	 5.31609   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 74)                           	 0.000879265	 100       	 0         	 0         	 6.7329    	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.00085909	 100       	 29.1006   	 0         	 6.98413   	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000812145	 100       	 0.615654  	 0         	 2.46261   	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 74, n: 50, r: 2, r2: 1)                             	 0.000667322	 100       	 2.21782   	 0         	 13.3093   	 0.166637  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 74)                                                                                                        	 0.000481714	 100       	 0         	 0         	 12.2894   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 24)                                                                                                        	 0.000377161	 100       	 0         	 0         	 5.09066   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000341439	 100       	 0.732195  	 0         	 11.7151   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 24, n: 50, r2: 1)                                                                                                        	 0.000322849	 100       	 0         	 0         	 5.94705   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 74, leftOrthog: 1)                        	 0.000297367	 100       	 124.425   	 0         	 43.3135   	 2.87267   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 74, m: 50, fromLeft: 1)                              	 0.000210647	 100       	 0         	 0         	 28.1039   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 9.02245   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 9.02242   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 5.21322   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 3.5871    	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 3.58587   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 3.41535   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 3.20514   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 2.78614   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.214213  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.136069  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.109365  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.0943354 	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.00945897	 1100      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0033785 	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00243307	 4600      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00217889	 4600      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000879265	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000812145	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000341439	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22983174723456 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22982973974528 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22982772648064 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22982571321600 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22982369995136 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22982168668672 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22981967342208 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22981766015744 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22981564689280 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22981363362816 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22981162036352 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22980960709888 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22980759383424 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22980558056960 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22980356730496 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22980155404032 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22979954077568 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22979752751104 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22979551424640 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22979350098176 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22979148771712 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22978947445248 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22978746118784 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22978544792320 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22978343465856 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22978142139392 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22977940812928 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22977739486464 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22977538160000 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22977336833536 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22977135507072 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22976934180608 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22976732850048 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22976531523584 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22976330197120 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22976128870656 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22975927544192 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22975726217728 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22975524891264 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22975323564800 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22975122238336 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22974920911872 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22974719585408 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22974518258944 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22974316932480 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22974115606016 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22973914279552 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22973712953088 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22973511626624 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22973310300160 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22973108973696 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22972907647232 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22972706320768 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22972504994304 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22972303667840 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22972102341376 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22971901014912 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22971699688448 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22971498361984 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22971297035520 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22971095709056 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22970894382592 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22970693056128 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22983069062912 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22983062472448 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_TENSORTRAIN_NORMALIZE_PLAIN_QB PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 75, m: 3750)                                                                              	 2.61237   	 700       	 11.229    	 0         	 1.21802   	 9.21908   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 3750, m: 75)                                                                             	 2.58071   	 600       	 39.3642   	 0         	 1.05683   	 37.2476   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 75)                                                                             	 0.290012  	 100       	 38.9854   	 0         	 1.05016   	 37.1232   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 75, m: 2500)                                                                              	 0.261243  	 100       	 10.6582   	 0         	 1.16581   	 9.14229   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 3750, m: 50)                                                                             	 0.247717  	 100       	 30.3438   	 0         	 1.2193    	 24.8863   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 75, n: 50, r2new: 75)	 0.180296  	 700       	 90.9961   	 0         	 13.7635   	 6.61142   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 75, n: 50, r: 75, r2: 75)                           	 0.10035   	 700       	 294.281   	 0         	 31.7039   	 9.28218   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3750, r: 75, r2: 75, leftOrthog: 1)                      	 0.0983681 	 600       	 257.324   	 0         	 41.7208   	 6.16776   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 75, r1_: 75, n: 50, r2: 75)                         	 0.0715253 	 600       	 353.896   	 0         	 38.1263   	 9.28218   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 75)                                                                               	 0.0490357 	 100       	 3.39889   	 0         	 0.163962  	 20.7297   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 75, n: 50, r2new: 50)	 0.0209241 	 100       	 74.6746   	 0         	 13.2861   	 5.6205    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 75, r1_: 50, n: 50, r2: 75)                         	 0.0135404 	 100       	 207.712   	 0         	 27.9165   	 7.44048   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 75, n: 50, r: 75, r2: 50)                           	 0.0116674 	 100       	 241.055   	 0         	 32.3978   	 7.44048   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 75, r1_: 75, n: 50, r2: 50)                         	 0.00890711	 100       	 315.759   	 0         	 34.1862   	 9.23645   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 25, n: 50, r2: 25)                                                                                                       	 0.00868445	 800       	 0         	 0         	 46.0593   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 75, r2: 75, leftOrthog: 1)                      	 0.00746113	 100       	 376.954   	 0         	 61.5189   	 6.12745   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 75, m: 50)                                                                                	 0.00708115	 100       	 4.11891   	 0         	 1.13541   	 3.62769   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3750, r: 50, r2: 50, leftOrthog: 1)                      	 0.00663322	 100       	 282.668   	 0         	 68.4434   	 4.12996   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 75, m: 75, fromLeft: 1)                              	 0.00324045	 800       	 0         	 0         	 22.2192   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 75) 	 0.00203328	 100       	 27.6646   	 0         	 5.16407   	 5.35714   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 75, n: 50, r2new: 1) 	 0.00110586	 100       	 0.678204  	 0         	 5.42708   	 0.124967  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 75, r2: 75)                            	 0.00101001	 100       	 55.6924   	 0         	 10.3959   	 5.35714   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 75)                           	 0.000872534	 100       	 0         	 0         	 6.87652   	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000863789	 100       	 0.578845  	 0         	 2.31538   	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000753735	 100       	 33.1682   	 0         	 7.96036   	 4.16667   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 75, n: 50, r: 2, r2: 1)                             	 0.00052104	 100       	 2.87886   	 0         	 17.2762   	 0.166637  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 75)                                                                                                        	 0.000506533	 100       	 0         	 0         	 11.8452   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 25)                                                                                                        	 0.000406231	 100       	 0         	 0         	 4.92331   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000339807	 100       	 0.735712  	 0         	 11.7714   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 25, n: 50, r2: 1)                                                                                                        	 0.000335155	 100       	 0         	 0         	 5.96739   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 75, leftOrthog: 1)                        	 0.000333461	 100       	 112.457   	 0         	 38.9851   	 2.88462   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 75, m: 50, fromLeft: 1)                              	 0.000211855	 100       	 0         	 0         	 28.3213   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 9.04087   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 9.04084   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 5.3415    	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 3.48524   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 3.48396   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 3.33186   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 3.16747   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 2.88069   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.204359  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.113549  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.112796  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.0947266 	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.00993237	 1100      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0034523 	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00237039	 4600      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00178884	 4600      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000872534	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000863789	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000339807	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23365375948672 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23365158955008 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23364957628544 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23364756302080 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23364554975616 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23364353649152 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23364152322688 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23363950996224 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23363749669760 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23363548343296 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23363347016832 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23363145690368 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23362944363904 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23362743037440 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23362541710976 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23362340384512 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23362139058048 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23361937731584 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23361736405120 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23361535078656 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23361333752192 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23361132425728 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23360931099264 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23360729772800 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23360528446336 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23360327119872 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23360125793408 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23359924466944 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23359723140480 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23359521814016 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23359320487552 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23359119161088 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23358917830528 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23358716504064 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23358515177600 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23358313851136 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23358112524672 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23357911198208 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23357709871744 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23357508545280 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23357307218816 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23357105892352 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23356904565888 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23356703239424 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23356501912960 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23356300586496 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23356099260032 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23355897933568 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23355696607104 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23355495280640 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23355293954176 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23355092627712 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23354891301248 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23354689974784 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23354488648320 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23354287321856 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23354085995392 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23353884668928 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23353683342464 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23353482016000 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23353280689536 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23353079363072 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23352878036608 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23365270288128 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23365263697664 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_TENSORTRAIN_NORMALIZE_PLAIN_QB PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 76, m: 3800)                                                                              	 2.62501   	 700       	 11.628    	 0         	 1.24469   	 9.34202   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 3800, m: 76)                                                                             	 2.21546   	 600       	 47.7127   	 0         	 1.2641    	 37.7443   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 76)                                                                             	 0.298626  	 100       	 38.8799   	 0         	 1.03367   	 37.6133   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 3800, m: 50)                                                                             	 0.260815  	 100       	 29.2034   	 0         	 1.1734    	 24.8878   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 76, m: 2500)                                                                              	 0.256492  	 100       	 11.1455   	 0         	 1.20347   	 9.26111   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 76, n: 50, r2new: 76)	 0.190953  	 700       	 88.4841   	 0         	 13.296    	 6.65496   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 76, n: 50, r: 76, r2: 76)                           	 0.101084  	 700       	 303.987   	 0         	 32.3186   	 9.40594   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3800, r: 76, r2: 76, leftOrthog: 1)                      	 0.0853827 	 600       	 308.476   	 0         	 49.3562   	 6.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 76, r1_: 76, n: 50, r2: 76)                         	 0.0724269 	 600       	 363.657   	 0         	 38.6625   	 9.40594   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 76)                                                                               	 0.0507331 	 100       	 3.32459   	 0         	 0.160053  	 20.7718   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 76, n: 50, r2new: 50)	 0.0210912 	 100       	 75.2919   	 0         	 13.3743   	 5.62961   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 76, r1_: 50, n: 50, r2: 76)                         	 0.0161444 	 100       	 178.886   	 0         	 23.9142   	 7.48031   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 76, n: 50, r: 76, r2: 50)                           	 0.0114945 	 100       	 251.25    	 0         	 33.5882   	 7.48031   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 26, n: 50, r2: 26)                                                                                                       	 0.00942465	 800       	 0         	 0         	 45.9051   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 76, r1_: 76, n: 50, r2: 50)                         	 0.00882092	 100       	 327.404   	 0         	 34.9874   	 9.35776   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 76, m: 50)                                                                                	 0.00728415	 100       	 4.07276   	 0         	 1.11475   	 3.65352   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 76, r2: 76, leftOrthog: 1)                      	 0.00613221	 100       	 470.955   	 0         	 75.8684   	 6.20753   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3800, r: 50, r2: 50, leftOrthog: 1)                      	 0.00522342	 100       	 363.747   	 0         	 88.065    	 4.13043   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 76, m: 76, fromLeft: 1)                              	 0.0034622 	 800       	 0         	 0         	 21.3543   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 76) 	 0.00207453	 100       	 27.8425   	 0         	 5.15819   	 5.39773   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 76, r2: 76)                            	 0.00105285	 100       	 54.8608   	 0         	 10.1637   	 5.39773   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 76, n: 50, r2new: 1) 	 0.00103554	 100       	 0.733915  	 0         	 5.87287   	 0.124967  
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000900002	 100       	 0.555554  	 0         	 2.22222   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 76)                           	 0.000843804	 100       	 0         	 0         	 7.20546   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000825711	 100       	 30.2769   	 0         	 7.26646   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 76)                                                                                                        	 0.000477701	 100       	 0         	 0         	 12.7276   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 76, n: 50, r: 2, r2: 1)                             	 0.000441283	 100       	 3.4445    	 0         	 20.6706   	 0.166637  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 26)                                                                                                        	 0.00040708	 100       	 0         	 0         	 5.10956   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000333944	 100       	 0.748629  	 0         	 11.9781   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 26, n: 50, r2: 1)                                                                                                        	 0.00032621	 100       	 0         	 0         	 6.37626   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 76, leftOrthog: 1)                        	 0.00032173	 100       	 118.111   	 0         	 40.7795   	 2.89634   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 76, m: 50, fromLeft: 1)                              	 0.000192724	 100       	 0         	 0         	 31.5477   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 8.47967   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 8.47963   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 5.21393   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 3.04737   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 3.04605   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 2.92451   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 2.88878   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 2.82563   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.215154  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.114073  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.098218  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.0970601 	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0106356 	 1100      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00365492	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00224882	 4600      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00205929	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000900002	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000843804	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000333944	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22771849693056 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22771648161792 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22771446835328 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22771245508864 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22771044182400 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22770842855936 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22770641529472 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22770440203008 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22770238876544 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22770037550080 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22769836223616 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22769634897152 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22769433570688 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22769232244224 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22769030917760 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22768829591296 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22768628264832 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22768426938368 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22768225611904 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22768024285440 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22767822958976 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22767621632512 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22767420306048 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22767218979584 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22767017653120 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22766816326656 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22766615000192 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22766413673728 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22766212347264 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22766011020800 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22765809694336 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22765608367872 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22765407037312 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22765205710848 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22765004384384 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22764803057920 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22764601731456 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22764400404992 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22764199078528 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22763997752064 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22763796425600 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22763595099136 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22763393772672 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22763192446208 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22762991119744 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22762789793280 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22762588466816 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22762387140352 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22762185813888 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22761984487424 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22761783160960 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22761581834496 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22761380508032 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22761179181568 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22760977855104 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22760776528640 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22760575202176 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22760373875712 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22760172549248 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22759971222784 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22759769896320 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22759568569856 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22759367243392 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22771744032512 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22771737442048 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_TENSORTRAIN_NORMALIZE_PLAIN_QB PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 77, m: 3850)                                                                              	 2.76978   	 700       	 11.4609   	 0         	 1.21088   	 9.46495   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 3850, m: 77)                                                                             	 2.45754   	 600       	 44.7329   	 0         	 1.16977   	 38.241    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 3850, m: 50)                                                                             	 0.42055   	 100       	 18.349    	 0         	 0.737226  	 24.8893   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 77)                                                                             	 0.301715  	 100       	 39.5038   	 0         	 1.03676   	 38.1032   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 77, m: 2500)                                                                              	 0.271082  	 100       	 10.8235   	 0         	 1.15391   	 9.37986   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 77, n: 50, r2new: 77)	 0.183996  	 700       	 94.5909   	 0         	 14.1169   	 6.70056   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3850, r: 77, r2: 77, leftOrthog: 1)                      	 0.148864  	 600       	 184.007   	 0         	 29.0588   	 6.33224   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 77, n: 50, r: 77, r2: 77)                           	 0.108836  	 700       	 293.628   	 0         	 30.8119   	 9.5297    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 77, r1_: 77, n: 50, r2: 77)                         	 0.0757592 	 600       	 361.566   	 0         	 37.941    	 9.5297    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 77)                                                                               	 0.0482177 	 100       	 3.5395    	 0         	 0.170062  	 20.813    
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 77, n: 50, r2new: 50)	 0.0243567 	 100       	 66.2856   	 0         	 11.752    	 5.64037   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 77, r1_: 50, n: 50, r2: 77)                         	 0.01499   	 100       	 197.765   	 0         	 26.3001   	 7.51953   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 77, n: 50, r: 77, r2: 50)                           	 0.0119394 	 100       	 248.295   	 0         	 33.02     	 7.51953   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 27, n: 50, r2: 27)                                                                                                       	 0.0103891 	 800       	 0         	 0         	 44.9086   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 77, r1_: 77, n: 50, r2: 50)                         	 0.0092425 	 100       	 320.747   	 0         	 33.8375   	 9.47902   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 77, m: 50)                                                                                	 0.00726274	 100       	 4.15361   	 0         	 1.12905   	 3.67885   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 77, r2: 77, leftOrthog: 1)                      	 0.00611285	 100       	 484.962   	 0         	 77.1303   	 6.28756   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3850, r: 50, r2: 50, leftOrthog: 1)                      	 0.00566535	 100       	 339.785   	 0         	 82.2544   	 4.1309    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 77, m: 77, fromLeft: 1)                              	 0.00341695	 800       	 0         	 0         	 22.2102   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 77) 	 0.0021853 	 100       	 27.1313   	 0         	 4.98935   	 5.43785   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 77, r2: 77)                            	 0.00111968	 100       	 52.9524   	 0         	 9.73775   	 5.43785   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 77, n: 50, r2new: 1) 	 0.0010814 	 100       	 0.712039  	 0         	 5.69779   	 0.124968  
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.00095041	 100       	 0.526089  	 0         	 2.10435   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 77)                           	 0.000898077	 100       	 0         	 0         	 6.8591    	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000808895	 100       	 30.9064   	 0         	 7.41753   	 4.16667   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 77, n: 50, r: 2, r2: 1)                             	 0.000519966	 100       	 2.96173   	 0         	 17.7735   	 0.166638  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 77)                                                                                                        	 0.000476901	 100       	 0         	 0         	 12.9167   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 27)                                                                                                        	 0.000390034	 100       	 0         	 0         	 5.53798   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000339109	 100       	 0.737226  	 0         	 11.7956   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 27, n: 50, r2: 1)                                                                                                        	 0.000332486	 100       	 0         	 0         	 6.49651   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 77, leftOrthog: 1)                        	 0.000291254	 100       	 132.187   	 0         	 45.4586   	 2.90785   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 77, m: 50, fromLeft: 1)                              	 0.000220789	 100       	 0         	 0         	 27.8999   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 9.539     	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 9.53897   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 5.7258    	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 3.59162   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 3.59025   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 3.39455   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 3.22803   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 3.04813   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.211619  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.160933  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.122415  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.100801  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0115885 	 1100      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00363774	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.0021234 	 4600      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00123077	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.00095041	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000898077	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000339109	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23339203168128 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23338986498048 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23338785171584 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23338583845120 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23338382518656 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23338181192192 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23337979865728 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23337778539264 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23337577212800 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23337375886336 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23337174559872 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23336973233408 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23336771906944 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23336570580480 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23336369254016 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23336167927552 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23335966601088 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23335765274624 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23335563948160 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23335362621696 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23335161295232 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23334959968768 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23334758642304 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23334557315840 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23334355989376 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23334154662912 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23333953336448 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23333752009984 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23333550683520 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23333349357056 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23333148030592 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23332946704128 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23332745373568 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23332544047104 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23332342720640 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23332141394176 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23331940067712 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23331738741248 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23331537414784 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23331336088320 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23331134761856 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23330933435392 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23330732108928 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23330530782464 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23330329456000 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23330128129536 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23329926803072 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23329725476608 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23329524150144 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23329322823680 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23329121497216 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23328920170752 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23328718844288 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23328517517824 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23328316191360 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23328114864896 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23327913538432 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23327712211968 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23327510885504 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23327309559040 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23327108232576 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23326906906112 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23326705579648 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23339097507584 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23339090917120 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_TENSORTRAIN_NORMALIZE_PLAIN_QB PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 3900, m: 78)                                                                             	 2.79722   	 600       	 40.852    	 0         	 1.05458   	 38.7377   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 78, m: 3900)                                                                              	 2.78593   	 700       	 11.8442   	 0         	 1.23533   	 9.58789   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 3900, m: 50)                                                                             	 0.325403  	 100       	 24.0215   	 0         	 0.965081  	 24.8907   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 78)                                                                             	 0.321973  	 100       	 37.9885   	 0         	 0.984336  	 38.593    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 78, m: 2500)                                                                              	 0.271649  	 100       	 11.0818   	 0         	 1.16669   	 9.49852   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 78, n: 50, r2new: 78)	 0.216125  	 700       	 82.9643   	 0         	 12.2943   	 6.74817   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 78, n: 50, r: 78, r2: 78)                           	 0.126385  	 700       	 262.836   	 0         	 27.2272   	 9.65347   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3900, r: 78, r2: 78, leftOrthog: 1)                      	 0.114238  	 600       	 249.245   	 0         	 38.8566   	 6.41447   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 78, r1_: 78, n: 50, r2: 78)                         	 0.0782897 	 600       	 363.689   	 0         	 37.6745   	 9.65347   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 78)                                                                               	 0.0507046 	 100       	 3.40534   	 0         	 0.163299  	 20.8535   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 78, n: 50, r2new: 50)	 0.0246973 	 100       	 66.4851   	 0         	 11.7616   	 5.65271   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 78, r1_: 50, n: 50, r2: 78)                         	 0.0156002 	 100       	 194.998   	 0         	 25.7997   	 7.55814   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 78, n: 50, r: 78, r2: 50)                           	 0.0129379 	 100       	 235.123   	 0         	 31.1085   	 7.55814   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 28, n: 50, r2: 28)                                                                                                       	 0.0111597 	 800       	 0         	 0         	 44.9616   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 78, r1_: 78, n: 50, r2: 50)                         	 0.0093832 	 100       	 324.197   	 0         	 33.7696   	 9.60024   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 78, r2: 78, leftOrthog: 1)                      	 0.00799296	 100       	 380.585   	 0         	 59.7694   	 6.36755   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3900, r: 50, r2: 50, leftOrthog: 1)                      	 0.00754366	 100       	 258.495   	 0         	 62.5691   	 4.13136   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 78, m: 50)                                                                                	 0.00733826	 100       	 4.179     	 0         	 1.12833   	 3.7037    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 78, m: 78, fromLeft: 1)                              	 0.00349748	 800       	 0         	 0         	 22.2661   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 78) 	 0.00208145	 100       	 29.2297   	 0         	 5.33629   	 5.47753   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 78, n: 50, r2new: 1) 	 0.00107069	 100       	 0.728504  	 0         	 5.82953   	 0.124968  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 78, r2: 78)                            	 0.00106003	 100       	 57.3946   	 0         	 10.4782   	 5.47753   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000889009	 100       	 0.562424  	 0         	 2.2497    	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 78)                           	 0.000864196	 100       	 0         	 0         	 7.22058   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.00081288	 100       	 30.7548   	 0         	 7.38116   	 4.16667   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 78, n: 50, r: 2, r2: 1)                             	 0.000497678	 100       	 3.13456   	 0         	 18.8106   	 0.166638  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 78)                                                                                                        	 0.000487913	 100       	 0         	 0         	 12.7892   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 28)                                                                                                        	 0.000400524	 100       	 0         	 0         	 5.59267   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000391693	 100       	 0.638255  	 0         	 10.2121   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 28, n: 50, r2: 1)                                                                                                        	 0.000350139	 100       	 0         	 0         	 6.39746   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 78, leftOrthog: 1)                        	 0.000336584	 100       	 115.87    	 0         	 39.6929   	 2.91916   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 78, m: 50, fromLeft: 1)                              	 0.000198593	 100       	 0         	 0         	 31.421    	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 9.94022   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 9.94019   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 5.79522   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 3.87764   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 3.87625   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 3.66347   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 3.4953    	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 3.06492   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.243974  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.140881  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.130111  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.104086  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0123983 	 1100      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00369608	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00234999	 4600      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00211638	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000889009	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000864196	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000391693	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23307742414720 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23307512440832 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23307311114368 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23307109787904 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23306908461440 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23306707134976 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23306505808512 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23306304482048 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23306103155584 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23305901829120 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23305700502656 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23305499176192 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23305297849728 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23305096523264 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23304895196800 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23304693870336 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23304492543872 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23304291217408 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23304089890944 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23303888564480 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23303687238016 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23303485911552 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23303284585088 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23303083258624 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23302881932160 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23302680605696 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23302479279232 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23302277952768 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23302076626304 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23301875299840 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23301673973376 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23301472646912 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23301271316352 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23301069989888 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23300868663424 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23300667336960 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23300466010496 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23300264684032 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23300063357568 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23299862031104 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23299660704640 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23299459378176 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23299258051712 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23299056725248 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23298855398784 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23298654072320 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23298452745856 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23298251419392 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23298050092928 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23297848766464 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23297647440000 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23297446113536 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23297244787072 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23297043460608 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23296842134144 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23296640807680 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23296439481216 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23296238154752 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23296036828288 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23295835501824 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23295634175360 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23295432848896 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23295231522432 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23307636754176 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23307630163712 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_TENSORTRAIN_NORMALIZE_PLAIN_QB PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 3950, m: 79)                                                                             	 2.98771   	 600       	 39.7374   	 0         	 1.01282   	 39.2344   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 79, m: 3950)                                                                              	 2.91751   	 700       	 11.7506   	 0         	 1.21006   	 9.71083   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 79)                                                                             	 0.322447  	 100       	 38.9141   	 0         	 0.995686  	 39.0827   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 79, m: 2500)                                                                              	 0.277559  	 100       	 11.1242   	 0         	 1.15671   	 9.61711   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 3950, m: 50)                                                                             	 0.274157  	 100       	 28.8764   	 0         	 1.16007   	 24.892    
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 79, n: 50, r2new: 79)	 0.217288  	 700       	 85.0289   	 0         	 12.5083   	 6.79777   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 79, n: 50, r: 79, r2: 79)                           	 0.136274  	 700       	 253.26    	 0         	 25.903    	 9.77723   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 79, r1_: 79, n: 50, r2: 79)                         	 0.0792585 	 600       	 373.239   	 0         	 38.1743   	 9.77723   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3950, r: 79, r2: 79, leftOrthog: 1)                      	 0.0681978 	 600       	 433.773   	 0         	 66.7681   	 6.49671   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 79)                                                                               	 0.0500135 	 100       	 3.49239   	 0         	 0.167155  	 20.8931   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 79, n: 50, r2new: 50)	 0.0231537 	 100       	 72.1482   	 0         	 12.7323   	 5.66655   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 79, r1_: 50, n: 50, r2: 79)                         	 0.0148779 	 100       	 209.741   	 0         	 27.6115   	 7.59615   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 79, n: 50, r: 79, r2: 50)                           	 0.0116443 	 100       	 267.985   	 0         	 35.2791   	 7.59615   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 29, n: 50, r2: 29)                                                                                                       	 0.0110509 	 800       	 0         	 0         	 48.7054   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 79, r1_: 79, n: 50, r2: 50)                         	 0.00973997	 100       	 320.381   	 0         	 32.9562   	 9.7214    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 79, r2: 79, leftOrthog: 1)                      	 0.00862486	 100       	 361.803   	 0         	 56.1152   	 6.44751   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3950, r: 50, r2: 50, leftOrthog: 1)                      	 0.00786413	 100       	 251.14    	 0         	 60.7823   	 4.1318    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 79, m: 50)                                                                                	 0.00724944	 100       	 4.29917   	 0         	 1.15319   	 3.72806   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 79, m: 79, fromLeft: 1)                              	 0.00364935	 800       	 0         	 0         	 21.8902   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 79) 	 0.00224545	 100       	 27.7939   	 0         	 5.03809   	 5.51676   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 79, r2: 79)                            	 0.00119274	 100       	 52.3251   	 0         	 9.48476   	 5.51676   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 79, n: 50, r2new: 1) 	 0.00108473	 100       	 0.728291  	 0         	 5.8278    	 0.124968  
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 79)                           	 0.000882253	 100       	 0         	 0         	 7.16348   	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000879077	 100       	 0.568778  	 0         	 2.27511   	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000822918	 100       	 30.3797   	 0         	 7.29113   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 79)                                                                                                        	 0.000499706	 100       	 0         	 0         	 12.6474   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 79, n: 50, r: 2, r2: 1)                             	 0.000498279	 100       	 3.17091   	 0         	 19.0287   	 0.166639  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 29)                                                                                                        	 0.000394732	 100       	 0         	 0         	 5.87741   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 29, n: 50, r2: 1)                                                                                                        	 0.000353328	 100       	 0         	 0         	 6.56614   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000337246	 100       	 0.741299  	 0         	 11.8608   	 0.0625    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 79, leftOrthog: 1)                        	 0.000309333	 100       	 127.694   	 0         	 43.5776   	 2.93027   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 79, m: 50, fromLeft: 1)                              	 0.000215596	 100       	 0         	 0         	 29.3141   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 10.5393   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 10.5392   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 6.24146   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 4.04465   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 4.04334   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 3.77299   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 3.63432   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 3.20232   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.243772  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.149609  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.104699  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.0849961 	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0122987 	 1100      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00386494	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00235212	 4600      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00148742	 4600      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000882253	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000879077	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000337246	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22552028497792 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22551799523328 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22551598196864 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22551396870400 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22551195543936 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22550994217472 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22550792891008 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22550591564544 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22550390238080 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22550188911616 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22549987585152 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22549786258688 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22549584932224 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22549383605760 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22549182279296 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22548980952832 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22548779626368 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22548578299904 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22548376973440 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22548175646976 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22547974320512 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22547772994048 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22547571667584 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22547370341120 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22547169014656 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22546967688192 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22546766361728 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22546565035264 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22546363708800 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22546162382336 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22545961055872 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22545759729408 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22545558398848 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22545357072384 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22545155745920 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22544954419456 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22544753092992 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22544551766528 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22544350440064 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22544149113600 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22543947787136 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22543746460672 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22543545134208 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22543343807744 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22543142481280 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22542941154816 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22542739828352 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22542538501888 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22542337175424 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22542135848960 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22541934522496 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22541733196032 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22541531869568 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22541330543104 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22541129216640 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22540927890176 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22540726563712 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22540525237248 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22540323910784 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22540122584320 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22539921257856 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22539719931392 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22539518604928 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22551922837248 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22551916246784 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_TENSORTRAIN_NORMALIZE_PLAIN_QB PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 80, m: 4000)                                                                              	 2.91734   	 700       	 12.2033   	 0         	 1.24096   	 9.83377   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 4000, m: 80)                                                                             	 2.84898   	 600       	 43.275    	 0         	 1.0892    	 39.7311   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 4000, m: 50)                                                                             	 0.348696  	 100       	 22.9904   	 0         	 0.923554  	 24.8934   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 80)                                                                             	 0.322998  	 100       	 39.8401   	 0         	 1.00677   	 39.5723   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 80, m: 2500)                                                                              	 0.268776  	 100       	 11.7788   	 0         	 1.20987   	 9.73562   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 80, n: 50, r2new: 80)	 0.209491  	 700       	 90.887    	 0         	 13.2695   	 6.84932   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 80, n: 50, r: 80, r2: 80)                           	 0.120086  	 700       	 298.452   	 0         	 30.1437   	 9.90099   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4000, r: 80, r2: 80, leftOrthog: 1)                      	 0.0785387 	 600       	 391.145   	 0         	 59.454    	 6.57895   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 80, r1_: 80, n: 50, r2: 80)                         	 0.0774516 	 600       	 396.635   	 0         	 40.0601   	 9.90099   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 80)                                                                               	 0.0501618 	 100       	 3.52194   	 0         	 0.168256  	 20.9321   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 80, n: 50, r2new: 50)	 0.0404257 	 100       	 42.0525   	 0         	 7.40123   	 5.68182   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 80, n: 50, r: 80, r2: 50)                           	 0.0231542 	 100       	 138.204   	 0         	 18.1047   	 7.63359   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 80, r1_: 50, n: 50, r2: 80)                         	 0.0151875 	 100       	 210.699   	 0         	 27.6016   	 7.63359   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 30, n: 50, r2: 30)                                                                                                       	 0.0120564 	 800       	 0         	 0         	 47.7754   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 80, r1_: 80, n: 50, r2: 50)                         	 0.00992072	 100       	 322.557   	 0         	 32.7718   	 9.84252   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 80, r2: 80, leftOrthog: 1)                      	 0.00964975	 100       	 331.615   	 0         	 50.8034   	 6.52742   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4000, r: 50, r2: 50, leftOrthog: 1)                      	 0.00801188	 100       	 249.629   	 0         	 60.4103   	 4.13223   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 80, m: 50)                                                                                	 0.00759198	 100       	 4.17106   	 0         	 1.1117    	 3.75197   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 80, m: 80, fromLeft: 1)                              	 0.00378751	 800       	 0         	 0         	 21.629    	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 80) 	 0.00216605	 100       	 29.5468   	 0         	 5.31843   	 5.55556   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 80, r2: 80)                            	 0.00111069	 100       	 57.6217   	 0         	 10.3719   	 5.55556   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 80, n: 50, r2new: 1) 	 0.00104179	 100       	 0.767906  	 0         	 6.14478   	 0.124969  
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.00101771	 100       	 0.4913    	 0         	 1.9652    	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 80)                           	 0.000899166	 100       	 0         	 0         	 7.11771   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000837682	 100       	 29.8443   	 0         	 7.16262   	 4.16667   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 80, leftOrthog: 1)                        	 0.000641543	 100       	 62.3497   	 0         	 21.1989   	 2.94118   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 80)                                                                                                        	 0.000495548	 100       	 0         	 0         	 12.915    	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 80, n: 50, r: 2, r2: 1)                             	 0.000411136	 100       	 3.89166   	 0         	 23.3538   	 0.166639  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 30)                                                                                                        	 0.000388546	 100       	 0         	 0         	 6.17687   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000335666	 100       	 0.744788  	 0         	 11.9166   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 30, n: 50, r2: 1)                                                                                                        	 0.000320914	 100       	 0         	 0         	 7.47864   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 80, m: 50, fromLeft: 1)                              	 0.000189749	 100       	 0         	 0         	 33.7288   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 10.3526   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 10.3525   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 6.12298   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 3.96242   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 3.96098   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 3.67489   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 3.57084   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 3.1937    	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.253124  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.144762  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.103397  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.0968419 	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0132614 	 1100      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00397726	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00254349	 4600      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00136757	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.00101771	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000899166	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000335666	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22859948140416 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22859762100224 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22859560773760 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22859359447296 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22859158120832 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22858956794368 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22858755467904 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22858554141440 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22858352814976 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22858151488512 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22857950162048 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22857748835584 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22857547509120 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22857346182656 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22857144856192 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22856943529728 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22856742203264 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22856540876800 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22856339550336 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22856138223872 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22855936897408 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22855735570944 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22855534244480 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22855332918016 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22855131591552 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22854930265088 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22854728938624 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22854527612160 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22854326285696 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22854124959232 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22853923632768 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22853722306304 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22853520975744 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22853319649280 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22853118322816 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22852916996352 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22852715669888 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22852514343424 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22852313016960 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22852111690496 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22851910364032 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22851709037568 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22851507711104 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22851306384640 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22851105058176 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22850903731712 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22850702405248 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22850501078784 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22850299752320 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22850098425856 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22849897099392 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22849695772928 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22849494446464 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22849293120000 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22849091793536 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22848890467072 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22848689140608 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22848487814144 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22848286487680 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22848085161216 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22847883834752 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22847682508288 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22847481181824 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22859842479872 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22859835889408 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_TENSORTRAIN_NORMALIZE_PLAIN_QB PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 81, m: 4050)                                                                              	 3.06104   	 700       	 12.072    	 0         	 1.21245   	 9.9567    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 4050, m: 81)                                                                             	 2.82214   	 600       	 45.3453   	 0         	 1.12721   	 40.2278   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 81)                                                                             	 0.350388  	 100       	 37.6522   	 0         	 0.939855  	 40.0617   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 4050, m: 50)                                                                             	 0.323697  	 100       	 25.0749   	 0         	 1.00724   	 24.8947   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 81, m: 2500)                                                                              	 0.292403  	 100       	 11.0979   	 0         	 1.12623   	 9.85404   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 81, n: 50, r2new: 81)	 0.228303  	 700       	 85.9554   	 0         	 12.4523   	 6.90276   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4050, r: 81, r2: 81, leftOrthog: 1)                      	 0.158805  	 600       	 200.79    	 0         	 30.1432   	 6.66118   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 81, n: 50, r: 81, r2: 81)                           	 0.122975  	 700       	 302.508   	 0         	 30.1761   	 10.0248   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 81, r1_: 81, n: 50, r2: 81)                         	 0.0868994 	 600       	 366.935   	 0         	 36.6029   	 10.0248   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 81)                                                                               	 0.0483094 	 100       	 3.69838   	 0         	 0.176363  	 20.9703   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 81, n: 50, r2new: 50)	 0.0241318 	 100       	 71.7104   	 0         	 12.5842   	 5.69843   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 81, r1_: 50, n: 50, r2: 81)                         	 0.0144304 	 100       	 227.333   	 0         	 29.6375   	 7.67045   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 81, n: 50, r: 81, r2: 50)                           	 0.0126928 	 100       	 258.453   	 0         	 33.6947   	 7.67045   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 31, n: 50, r2: 31)                                                                                                       	 0.0123433 	 800       	 0         	 0         	 49.828    	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 81, r1_: 81, n: 50, r2: 50)                         	 0.00959784	 100       	 341.796   	 0         	 34.3045   	 9.96359   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 81, m: 50)                                                                                	 0.00741799	 100       	 4.3363    	 0         	 1.14856   	 3.77542   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 81, r2: 81, leftOrthog: 1)                      	 0.00616783	 100       	 531.872   	 0         	 80.4979   	 6.60728   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4050, r: 50, r2: 50, leftOrthog: 1)                      	 0.00583864	 100       	 346.828   	 0         	 83.9237   	 4.13265   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 81, m: 81, fromLeft: 1)                              	 0.00378487	 800       	 0         	 0         	 22.1886   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 81) 	 0.00232574	 100       	 28.2104   	 0         	 5.04304   	 5.59392   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 81, n: 50, r2new: 1) 	 0.00123739	 100       	 0.654603  	 0         	 5.23812   	 0.124969  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 81, r2: 81)                            	 0.00115414	 100       	 56.8476   	 0         	 10.1624   	 5.59392   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 81)                           	 0.000998181	 100       	 0         	 0         	 6.49181   	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000969751	 100       	 0.515596  	 0         	 2.06239   	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000788916	 100       	 31.6891   	 0         	 7.60537   	 4.16667   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 81, n: 50, r: 2, r2: 1)                             	 0.000695231	 100       	 2.33016   	 0         	 13.9833   	 0.166639  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 81)                                                                                                        	 0.000489664	 100       	 0         	 0         	 13.2336   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 31)                                                                                                        	 0.000381669	 100       	 0         	 0         	 6.49778   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 81, leftOrthog: 1)                        	 0.000344146	 100       	 117.683   	 0         	 39.8668   	 2.9519    
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000331212	 100       	 0.754804  	 0         	 12.0769   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 31, n: 50, r2: 1)                                                                                                        	 0.000320065	 100       	 0         	 0         	 7.74843   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 81, m: 50, fromLeft: 1)                              	 0.000195839	 100       	 0         	 0         	 33.0884   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 10.2449   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 10.2449   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 6.08102   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 3.8968    	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 3.89542   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 3.71936   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 3.54454   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 3.36086   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.255998  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.171156  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.137517  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.111717  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0135347 	 1100      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00398071	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00238308	 4600      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00186553	 4600      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000998181	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000969751	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000331212	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22508513384320 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22508312979456 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22508111652992 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22507910326528 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22507709000064 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22507507673600 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22507306347136 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22507105020672 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22506903694208 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22506702367744 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22506501041280 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22506299714816 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22506098388352 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22505897061888 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22505695735424 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22505494408960 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22505293082496 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22505091756032 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22504890429568 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22504689103104 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22504487776640 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22504286450176 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22504085123712 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22503883797248 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22503682470784 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22503481144320 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22503279817856 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22503078491392 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22502877164928 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22502675838464 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22502474512000 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22502273185536 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22502071854976 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22501870528512 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22501669202048 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22501467875584 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22501266549120 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22501065222656 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22500863896192 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22500662569728 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22500461243264 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22500259916800 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22500058590336 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22499857263872 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22499655937408 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22499454610944 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22499253284480 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22499051958016 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22498850631552 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22498649305088 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22498447978624 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22498246652160 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22498045325696 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22497843999232 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22497642672768 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22497441346304 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22497240019840 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22497038693376 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22496837366912 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22496636040448 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22496434713984 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22496233387520 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22496032061056 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22508407723776 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22508401133312 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_TENSORTRAIN_NORMALIZE_PLAIN_QB PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 4100, m: 82)                                                                             	 3.26369   	 600       	 40.6808   	 0         	 0.998928  	 40.7245   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 82, m: 4100)                                                                              	 3.22588   	 700       	 11.8847   	 0         	 1.17908   	 10.0796   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 82)                                                                             	 0.365616  	 100       	 36.9828   	 0         	 0.912008  	 40.551    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 4100, m: 50)                                                                             	 0.319358  	 100       	 25.7287   	 0         	 1.03345   	 24.896    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 82, m: 2500)                                                                              	 0.295093  	 100       	 11.2685   	 0         	 1.12997   	 9.97239   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 82, n: 50, r2new: 82)	 0.206082  	 700       	 98.1542   	 0         	 14.1065   	 6.95807   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 82, n: 50, r: 82, r2: 82)                           	 0.131813  	 700       	 292.807   	 0         	 28.8522   	 10.1485   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4100, r: 82, r2: 82, leftOrthog: 1)                      	 0.0891804 	 600       	 370.957   	 0         	 55.0102   	 6.74342   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 82, r1_: 82, n: 50, r2: 82)                         	 0.0864903 	 600       	 382.495   	 0         	 37.6897   	 10.1485   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 82)                                                                               	 0.0510465 	 100       	 3.53926   	 0         	 0.168474  	 21.0078   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 82, n: 50, r2new: 50)	 0.0281927 	 100       	 62.4985   	 0         	 10.9333   	 5.71632   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 82, r1_: 50, n: 50, r2: 82)                         	 0.0164415 	 100       	 204.483   	 0         	 26.5329   	 7.70677   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 82, n: 50, r: 82, r2: 50)                           	 0.0152384 	 100       	 220.627   	 0         	 28.6277   	 7.70677   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 32, n: 50, r2: 32)                                                                                                       	 0.0135071 	 800       	 0         	 0         	 48.5198   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 82, r1_: 82, n: 50, r2: 50)                         	 0.0104724 	 100       	 321.034   	 0         	 31.834    	 10.0846   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 82, r2: 82, leftOrthog: 1)                      	 0.00784638	 100       	 428.478   	 0         	 64.0752   	 6.68711   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4100, r: 50, r2: 50, leftOrthog: 1)                      	 0.00743847	 100       	 275.594   	 0         	 66.6804   	 4.13306   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 82, m: 50)                                                                                	 0.00732292	 100       	 4.46087   	 0         	 1.1744    	 3.79844   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 82, m: 82, fromLeft: 1)                              	 0.00407427	 800       	 0         	 0         	 21.1246   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 82) 	 0.00240644	 100       	 27.9417   	 0         	 4.96135   	 5.63187   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 82, r2: 82)                            	 0.00134871	 100       	 49.855    	 0         	 8.8523    	 5.63187   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 82, n: 50, r2new: 1) 	 0.00124421	 100       	 0.659051  	 0         	 5.27369   	 0.12497   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000914154	 100       	 0.546954  	 0         	 2.18782   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 82)                           	 0.000898841	 100       	 0         	 0         	 7.29829   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000856606	 100       	 29.1849   	 0         	 7.00439   	 4.16667   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 82, n: 50, r: 2, r2: 1)                             	 0.000667609	 100       	 2.45653   	 0         	 14.7416   	 0.16664   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 82)                                                                                                        	 0.000496153	 100       	 0         	 0         	 13.2217   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 82, leftOrthog: 1)                        	 0.000443432	 100       	 92.4606   	 0         	 31.2111   	 2.96243   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 32)                                                                                                        	 0.000436742	 100       	 0         	 0         	 5.86158   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.00033391	 100       	 0.748705  	 0         	 11.9793   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 32, n: 50, r2: 1)                                                                                                        	 0.000318982	 100       	 0         	 0         	 8.02553   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 82, m: 50, fromLeft: 1)                              	 0.000204964	 100       	 0         	 0         	 32.0056   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 11.3208   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 11.3207   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 6.63199   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 4.44038   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 4.43904   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 4.17437   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 3.99971   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 3.52829   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.237925  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.149068  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.114261  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.104909  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0147589 	 1100      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00427924	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00246414	 4600      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00122921	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000914154	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000898841	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.00033391	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23378680678272 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23378446510080 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23378245183616 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23378043857152 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23377842530688 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23377641204224 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23377439877760 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23377238551296 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23377037224832 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23376835898368 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23376634571904 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23376433245440 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23376231918976 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23376030592512 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23375829266048 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23375627939584 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23375426613120 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23375225286656 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23375023960192 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23374822633728 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23374621307264 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23374419980800 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23374218654336 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23374017327872 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23373816001408 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23373614674944 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23373413348480 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23373212022016 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23373010695552 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23372809369088 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23372608042624 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23372406716160 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23372205385600 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23372004059136 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23371802732672 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23371601406208 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23371400079744 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23371198753280 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23370997426816 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23370796100352 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23370594773888 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23370393447424 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23370192120960 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23369990794496 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23369789468032 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23369588141568 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23369386815104 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23369185488640 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23368984162176 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23368782835712 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23368581509248 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23368380182784 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23368178856320 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23367977529856 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23367776203392 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23367574876928 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23367373550464 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23367172224000 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23366970897536 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23366769571072 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23366568244608 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23366366918144 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23366165591680 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23378575017728 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23378568427264 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_TENSORTRAIN_NORMALIZE_PLAIN_QB PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 83, m: 4150)                                                                              	 3.24101   	 700       	 12.2672   	 0         	 1.20237   	 10.2026   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 4150, m: 83)                                                                             	 2.95774   	 600       	 46.5512   	 0         	 1.1293    	 41.2212   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 83)                                                                             	 0.376559  	 100       	 36.7917   	 0         	 0.89648   	 41.0402   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 83, m: 2500)                                                                              	 0.293978  	 100       	 11.5872   	 0         	 1.14831   	 10.0907   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 4150, m: 50)                                                                             	 0.267673  	 100       	 31.0702   	 0         	 1.24794   	 24.8972   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 83, n: 50, r2new: 83)	 0.224028  	 700       	 93.0779   	 0         	 13.268    	 7.01519   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4150, r: 83, r2: 83, leftOrthog: 1)                      	 0.155478  	 600       	 220.657   	 0         	 32.3276   	 6.82566   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 83, n: 50, r: 83, r2: 83)                           	 0.122002  	 700       	 328.07    	 0         	 31.9375   	 10.2723   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 83, r1_: 83, n: 50, r2: 83)                         	 0.087087  	 600       	 393.942   	 0         	 38.35     	 10.2723   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 83)                                                                               	 0.0487153 	 100       	 3.74968   	 0         	 0.178178  	 21.0445   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 83, n: 50, r2new: 50)	 0.0243912 	 100       	 73.5717   	 0         	 12.8276   	 5.73543   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 83, r1_: 50, n: 50, r2: 83)                         	 0.0152026 	 100       	 226.573   	 0         	 29.2634   	 7.74254   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 33, n: 50, r2: 33)                                                                                                       	 0.0139841 	 800       	 0         	 0         	 49.8395   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 83, n: 50, r: 83, r2: 50)                           	 0.013354  	 100       	 257.938   	 0         	 33.3144   	 7.74254   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 83, r1_: 83, n: 50, r2: 50)                         	 0.0100047 	 100       	 344.287   	 0         	 33.7352   	 10.2056   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 83, r2: 83, leftOrthog: 1)                      	 0.00957812	 100       	 359.622   	 0         	 53.1443   	 6.76689   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 83, m: 50)                                                                                	 0.00754455	 100       	 4.3961    	 0         	 1.1505    	 3.82104   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4150, r: 50, r2: 50, leftOrthog: 1)                      	 0.00683026	 100       	 303.795   	 0         	 73.4965   	 4.13347   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 83, m: 83, fromLeft: 1)                              	 0.00402822	 800       	 0         	 0         	 21.8903   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 83) 	 0.00236718	 100       	 29.1022   	 0         	 5.1332    	 5.6694    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 83, r2: 83)                            	 0.00136901	 100       	 50.3209   	 0         	 8.87587   	 5.6694    
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 83, n: 50, r2new: 1) 	 0.00134784	 100       	 0.6158    	 0         	 4.92759   	 0.12497   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000975118	 100       	 0.512758  	 0         	 2.05103   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 83)                           	 0.000833135	 100       	 0         	 0         	 7.9699    	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000798344	 100       	 31.3148   	 0         	 7.51556   	 4.16667   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 83, n: 50, r: 2, r2: 1)                             	 0.000750356	 100       	 2.21228   	 0         	 13.2758   	 0.16664   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 83)                                                                                                        	 0.000498282	 100       	 0         	 0         	 13.3258   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 33)                                                                                                        	 0.000395671	 100       	 0         	 0         	 6.67221   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000343975	 100       	 0.726797  	 0         	 11.6288   	 0.0625    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 83, leftOrthog: 1)                        	 0.000315096	 100       	 131.706   	 0         	 44.304    	 2.97278   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 33, n: 50, r2: 1)                                                                                                        	 0.000311331	 100       	 0         	 0         	 8.47972   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 83, m: 50, fromLeft: 1)                              	 0.000193989	 100       	 0         	 0         	 34.2287   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 10.6875   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 10.6874   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 6.43001   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 3.99376   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 3.99236   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 3.83426   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 3.65069   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 3.54253   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.252135  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.172201  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.137475  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.113093  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0151894 	 1100      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00422221	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00275446	 4600      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.0020599 	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000975118	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000833135	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000343975	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22853979182976 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22853789411328 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22853588084864 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22853386758400 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22853185431936 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22852984105472 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22852782779008 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22852581452544 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22852380126080 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22852178799616 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22851977473152 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22851776146688 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22851574820224 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22851373493760 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22851172167296 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22850970840832 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22850769514368 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22850568187904 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22850366861440 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22850165534976 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22849964208512 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22849762882048 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22849561555584 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22849360229120 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22849158902656 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22848957576192 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22848756249728 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22848554923264 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22848353596800 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22848152270336 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22847950943872 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22847749617408 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22847548286848 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22847346960384 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22847145633920 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22846944307456 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22846742980992 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22846541654528 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22846340328064 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22846139001600 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22845937675136 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22845736348672 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22845535022208 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22845333695744 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22845132369280 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22844931042816 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22844729716352 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22844528389888 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22844327063424 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22844125736960 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22843924410496 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22843723084032 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22843521757568 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22843320431104 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22843119104640 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22842917778176 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22842716451712 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22842515125248 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22842313798784 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22842112472320 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22841911145856 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22841709819392 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22841508492928 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22853873522432 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22853866931968 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_TENSORTRAIN_NORMALIZE_PLAIN_QB PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 84, m: 4200)                                                                              	 3.2028    	 700       	 12.8677   	 0         	 1.2462    	 10.3255   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 4200, m: 84)                                                                             	 2.82352   	 600       	 50.5479   	 0         	 1.21166   	 41.7179   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 84)                                                                             	 0.368572  	 100       	 38.5028   	 0         	 0.927125  	 41.5292   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 84, m: 2500)                                                                              	 0.289622  	 100       	 12.045    	 0         	 1.17985   	 10.2088   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 4200, m: 50)                                                                             	 0.265662  	 100       	 31.6819   	 0         	 1.27244   	 24.8984   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 84, n: 50, r2new: 84)	 0.213595  	 700       	 100.645   	 0         	 14.2273   	 7.07409   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 84, n: 50, r: 84, r2: 84)                           	 0.124888  	 700       	 332.212   	 0         	 31.9556   	 10.396    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4200, r: 84, r2: 84, leftOrthog: 1)                      	 0.106766  	 600       	 333.085   	 0         	 48.218    	 6.90789   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 84, r1_: 84, n: 50, r2: 84)                         	 0.0842564 	 600       	 422.072   	 0         	 40.5993   	 10.396    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 84)                                                                               	 0.0513521 	 100       	 3.59609   	 0         	 0.170587  	 21.0807   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 84, n: 50, r2new: 50)	 0.0236389 	 100       	 77.3302   	 0         	 13.4355   	 5.75567   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 84, r1_: 50, n: 50, r2: 84)                         	 0.0155189 	 100       	 227.335   	 0         	 29.2288   	 7.77778   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 34, n: 50, r2: 34)                                                                                                       	 0.0142219 	 800       	 0         	 0         	 52.0213   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 84, n: 50, r: 84, r2: 50)                           	 0.0121216 	 100       	 291.051   	 0         	 37.4209   	 7.77778   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 84, r1_: 84, n: 50, r2: 50)                         	 0.0105157 	 100       	 335.497   	 0         	 32.4889   	 10.3265   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 84, r2: 84, leftOrthog: 1)                      	 0.00939383	 100       	 375.566   	 0         	 54.854    	 6.84664   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4200, r: 50, r2: 50, leftOrthog: 1)                      	 0.0093849 	 100       	 223.764   	 0         	 54.1295   	 4.13386   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 84, m: 50)                                                                                	 0.00780935	 100       	 4.31106   	 0         	 1.12173   	 3.84322   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 84, m: 84, fromLeft: 1)                              	 0.00420728	 800       	 0         	 0         	 21.4668   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 84) 	 0.00229035	 100       	 30.8075   	 0         	 5.39864   	 5.70652   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 84, n: 50, r2new: 1) 	 0.00111081	 100       	 0.756204  	 0         	 6.05107   	 0.12497   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 84, r2: 84)                            	 0.00109298	 100       	 64.5577   	 0         	 11.313    	 5.70652   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 84)                           	 0.00103856	 100       	 0         	 0         	 6.47047   	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000857059	 100       	 0.58339   	 0         	 2.33356   	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000749691	 100       	 33.3471   	 0         	 8.0033    	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 84)                                                                                                        	 0.000698184	 100       	 0         	 0         	 9.62497   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 84, n: 50, r: 2, r2: 1)                             	 0.000542898	 100       	 3.0945    	 0         	 18.57     	 0.16664   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 34)                                                                                                        	 0.000458352	 100       	 0         	 0         	 5.9343    	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 84, leftOrthog: 1)                        	 0.000346327	 100       	 121.273   	 0         	 40.6552   	 2.98295   
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.00033203	 100       	 0.752944  	 0         	 12.0471   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 34, n: 50, r2: 1)                                                                                                        	 0.000329244	 100       	 0         	 0         	 8.26135   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 84, m: 50, fromLeft: 1)                              	 0.000205345	 100       	 0         	 0         	 32.7254   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 10.334    	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 10.334    	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 6.32405   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 3.76555   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 3.76428   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 3.63681   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 3.50911   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 3.50023   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.240635  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.138645  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.125891  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.111041  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0157076 	 1100      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00441262	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00249508	 4600      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00179746	 4600      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.00103856	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000857059	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.00033203	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22988149364608 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22987940030464 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22987738704000 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22987537377536 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22987336051072 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22987134724608 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22986933398144 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22986732071680 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22986530745216 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22986329418752 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22986128092288 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22985926765824 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22985725439360 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22985524112896 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22985322786432 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22985121459968 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22984920133504 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22984718807040 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22984517480576 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22984316154112 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22984114827648 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22983913501184 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22983712174720 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22983510848256 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22983309521792 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22983108195328 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22982906868864 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22982705542400 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22982504215936 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22982302889472 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22982101563008 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22981900236544 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22981698905984 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22981497579520 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22981296253056 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22981094926592 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22980893600128 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22980692273664 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22980490947200 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22980289620736 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22980088294272 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22979886967808 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22979685641344 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22979484314880 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22979282988416 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22979081661952 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22978880335488 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22978679009024 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22978477682560 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22978276356096 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22978075029632 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22977873703168 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22977672376704 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22977471050240 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22977269723776 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22977068397312 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22976867070848 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22976665744384 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22976464417920 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22976263091456 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22976061764992 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22975860438528 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22975659112064 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22988043704064 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22988037113600 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_TENSORTRAIN_NORMALIZE_PLAIN_QB PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 85, m: 4250)                                                                              	 3.33519   	 700       	 12.8035   	 0         	 1.2254    	 10.4485   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 4250, m: 85)                                                                             	 3.16248   	 600       	 46.7612   	 0         	 1.1077    	 42.2146   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 85)                                                                             	 0.376786  	 100       	 38.568    	 0         	 0.917891  	 42.0181   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 85, m: 2500)                                                                              	 0.307626  	 100       	 11.6101   	 0         	 1.12425   	 10.327    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 4250, m: 50)                                                                             	 0.306465  	 100       	 27.79     	 0         	 1.11608   	 24.8996   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 85, n: 50, r2new: 85)	 0.282571  	 700       	 78.436    	 0         	 10.9936   	 7.13473   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4250, r: 85, r2: 85, leftOrthog: 1)                      	 0.218954  	 600       	 168.289   	 0         	 24.0752   	 6.99013   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 85, n: 50, r: 85, r2: 85)                           	 0.128951  	 700       	 333.374   	 0         	 31.6901   	 10.5198   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 85, r1_: 85, n: 50, r2: 85)                         	 0.0937182 	 600       	 393.173   	 0         	 37.3746   	 10.5198   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 85)                                                                               	 0.0526481 	 100       	 3.54555   	 0         	 0.167907  	 21.1161   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 85, n: 50, r2new: 50)	 0.0256199 	 100       	 72.6974   	 0         	 12.584    	 5.77699   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 85, r2: 85, leftOrthog: 1)                      	 0.0161297 	 100       	 223.966   	 0         	 32.3355   	 6.92634   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 85, r1_: 50, n: 50, r2: 85)                         	 0.0155403 	 100       	 232.46    	 0         	 29.7549   	 7.8125    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 35, n: 50, r2: 35)                                                                                                       	 0.0153847 	 800       	 0         	 0         	 50.9598   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 85, n: 50, r: 85, r2: 50)                           	 0.0137417 	 100       	 262.885   	 0         	 33.6493   	 7.8125    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 85, r1_: 85, n: 50, r2: 50)                         	 0.00990306	 100       	 364.786   	 0         	 34.9165   	 10.4474   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 85, m: 50)                                                                                	 0.00752854	 100       	 4.53828   	 0         	 1.1742    	 3.865     
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4250, r: 50, r2: 50, leftOrthog: 1)                      	 0.00633587	 100       	 335.392   	 0         	 81.1254   	 4.13424   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 85, m: 85, fromLeft: 1)                              	 0.00454346	 800       	 0         	 0         	 20.3545   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 85) 	 0.00242003	 100       	 29.8551   	 0         	 5.19829   	 5.74324   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 85, r2: 85)                            	 0.00138084	 100       	 52.3231   	 0         	 9.11038   	 5.74324   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 85, n: 50, r2new: 1) 	 0.00110678	 100       	 0.767991  	 0         	 6.14537   	 0.124971  
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000879706	 100       	 0.568372  	 0         	 2.27349   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 85)                           	 0.000852149	 100       	 0         	 0         	 7.97983   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000788318	 100       	 31.7131   	 0         	 7.61114   	 4.16667   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 85, leftOrthog: 1)                        	 0.000676204	 100       	 62.8509   	 0         	 20.9996   	 2.99296   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 85, n: 50, r: 2, r2: 1)                             	 0.000512077	 100       	 3.31981   	 0         	 19.922    	 0.166641  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 85)                                                                                                        	 0.000490468	 100       	 0         	 0         	 13.8643   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 35)                                                                                                        	 0.000397313	 100       	 0         	 0         	 7.04734   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000347575	 100       	 0.719269  	 0         	 11.5083   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 35, n: 50, r2: 1)                                                                                                        	 0.000321996	 100       	 0         	 0         	 8.69576   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 85, m: 50, fromLeft: 1)                              	 0.000204294	 100       	 0         	 0         	 33.2854   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 11.3659   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 11.3659   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 6.68604   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 4.35643   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 4.35511   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 4.14903   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 3.89838   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 3.65034   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.311718  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.242095  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.144585  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.11995   	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0165945 	 1100      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00474775	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00249742	 4600      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00170893	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000879706	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000852149	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000347575	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23033591859072 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23033372731392 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23033171404928 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23032970078464 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23032768752000 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23032567425536 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23032366099072 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23032164772608 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23031963446144 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23031762119680 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23031560793216 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23031359466752 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23031158140288 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23030956813824 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23030755487360 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23030554160896 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23030352834432 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23030151507968 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23029950181504 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23029748855040 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23029547528576 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23029346202112 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23029144875648 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23028943549184 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23028742222720 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23028540896256 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23028339569792 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23028138243328 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23027936916864 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23027735590400 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23027534263936 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23027332937472 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23027131606912 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23026930280448 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23026728953984 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23026527627520 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23026326301056 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23026124974592 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23025923648128 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23025722321664 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23025520995200 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23025319668736 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23025118342272 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23024917015808 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23024715689344 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23024514362880 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23024313036416 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23024111709952 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23023910383488 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23023709057024 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23023507730560 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23023306404096 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23023105077632 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23022903751168 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23022702424704 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23022501098240 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23022299771776 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23022098445312 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23021897118848 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23021695792384 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23021494465920 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23021293139456 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23021091812992 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23033486198528 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23033479608064 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_TENSORTRAIN_NORMALIZE_PLAIN_QB PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 4300, m: 86)                                                                             	 3.50434   	 600       	 43.7065   	 0         	 1.0233    	 42.7113   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 86, m: 4300)                                                                              	 3.40101   	 700       	 13.0041   	 0         	 1.23012   	 10.5714   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 86)                                                                             	 0.382893  	 100       	 38.8537   	 0         	 0.914056  	 42.5069   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 4300, m: 50)                                                                             	 0.309146  	 100       	 27.8725   	 0         	 1.11934   	 24.9008   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 86, m: 2500)                                                                              	 0.301743  	 100       	 12.1149   	 0         	 1.15988   	 10.445    
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 86, n: 50, r2new: 86)	 0.228272  	 700       	 100.108   	 0         	 13.9096   	 7.19705   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4300, r: 86, r2: 86, leftOrthog: 1)                      	 0.138216  	 600       	 276.114   	 0         	 39.0413   	 7.07237   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 86, n: 50, r: 86, r2: 86)                           	 0.130619  	 700       	 340.87    	 0         	 32.0259   	 10.6436   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 86, r1_: 86, n: 50, r2: 86)                         	 0.0908699 	 600       	 419.978   	 0         	 39.4584   	 10.6436   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 86)                                                                               	 0.0513475 	 100       	 3.67431   	 0         	 0.173718  	 21.151    
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 86, n: 50, r2new: 50)	 0.0268044 	 100       	 70.8094   	 0         	 12.21     	 5.79932   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 86, r1_: 50, n: 50, r2: 86)                         	 0.0166899 	 100       	 221.571   	 0         	 28.2375   	 7.84672   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 36, n: 50, r2: 36)                                                                                                       	 0.0166264 	 800       	 0         	 0         	 49.8868   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 86, n: 50, r: 86, r2: 50)                           	 0.0137501 	 100       	 268.943   	 0         	 34.2746   	 7.84672   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 86, r1_: 86, n: 50, r2: 50)                         	 0.0102837 	 100       	 359.597   	 0         	 34.0263   	 10.5682   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 86, r2: 86, leftOrthog: 1)                      	 0.00902637	 100       	 409.688   	 0         	 58.4768   	 7.006     
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4300, r: 50, r2: 50, leftOrthog: 1)                      	 0.0085422 	 100       	 251.692   	 0         	 60.8743   	 4.13462   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 86, m: 50)                                                                                	 0.00788812	 100       	 4.39478   	 0         	 1.13081   	 3.88639   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 86, m: 86, fromLeft: 1)                              	 0.00441795	 800       	 0         	 0         	 21.4282   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 86) 	 0.00222704	 100       	 33.21     	 0         	 5.7461    	 5.77957   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 86, r2: 86)                            	 0.00119129	 100       	 62.084    	 0         	 10.742    	 5.77957   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 86, n: 50, r2new: 1) 	 0.000994738	 100       	 0.864549  	 0         	 6.918     	 0.124971  
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000965016	 100       	 0.518126  	 0         	 2.0725    	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 86)                           	 0.000863514	 100       	 0         	 0         	 7.96744   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000790622	 100       	 31.6207   	 0         	 7.58896   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 86)                                                                                                        	 0.000492104	 100       	 0         	 0         	 13.9808   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 36)                                                                                                        	 0.000420775	 100       	 0         	 0         	 6.84451   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 86, n: 50, r: 2, r2: 1)                             	 0.000361016	 100       	 4.76433   	 0         	 28.5904   	 0.166641  
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000355679	 100       	 0.702881  	 0         	 11.2461   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 36, n: 50, r2: 1)                                                                                                        	 0.000342684	 100       	 0         	 0         	 8.40424   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 86, leftOrthog: 1)                        	 0.000336189	 100       	 127.904   	 0         	 42.5951   	 3.00279   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 86, m: 50, fromLeft: 1)                              	 0.000194923	 100       	 0         	 0         	 35.296    	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 12.0792   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 12.0791   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 7.06554   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 4.75115   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 4.74974   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 4.47788   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 4.24773   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 3.71064   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.258298  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.156121  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.145921  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.118634  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.017882  	 1100      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00461287	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00221387	 4600      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00109722	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000965016	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000863514	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000355679	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23409458182016 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23409249478656 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23409048152192 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23408846825728 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23408645499264 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23408444172800 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23408242846336 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23408041519872 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23407840193408 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23407638866944 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23407437540480 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23407236214016 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23407034887552 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23406833561088 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23406632234624 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23406430908160 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23406229581696 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23406028255232 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23405826928768 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23405625602304 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23405424275840 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23405222949376 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23405021622912 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23404820296448 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23404618969984 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23404417643520 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23404216317056 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23404014990592 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23403813664128 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23403612337664 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23403411011200 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23403209684736 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23403008354176 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23402807027712 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23402605701248 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23402404374784 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23402203048320 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23402001721856 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23401800395392 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23401599068928 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23401397742464 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23401196416000 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23400995089536 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23400793763072 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23400592436608 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23400391110144 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23400189783680 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23399988457216 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23399787130752 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23399585804288 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23399384477824 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23399183151360 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23398981824896 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23398780498432 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23398579171968 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23398377845504 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23398176519040 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23397975192576 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23397773866112 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23397572539648 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23397371213184 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23397169886720 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23396968560256 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23409352521472 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23409345931008 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_TENSORTRAIN_NORMALIZE_PLAIN_QB PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 4350, m: 87)                                                                             	 3.70586   	 600       	 42.7883   	 0         	 0.990288  	 43.208    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 87, m: 4350)                                                                              	 3.54053   	 700       	 12.9325   	 0         	 1.20929   	 10.6943   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 87)                                                                             	 0.400537  	 100       	 38.0134   	 0         	 0.884124  	 42.9956   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 87, m: 2500)                                                                              	 0.31717   	 100       	 11.7937   	 0         	 1.11651   	 10.5629   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 4350, m: 50)                                                                             	 0.295773  	 100       	 29.4708   	 0         	 1.18347   	 24.9019   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 87, n: 50, r2new: 87)	 0.23256   	 700       	 101.317   	 0         	 13.9535   	 7.26102   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4350, r: 87, r2: 87, leftOrthog: 1)                      	 0.162831  	 600       	 242.645   	 0         	 33.9145   	 7.15461   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 87, n: 50, r: 87, r2: 87)                           	 0.129725  	 700       	 355.331   	 0         	 33.0008   	 10.7673   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 87, r1_: 87, n: 50, r2: 87)                         	 0.0933595 	 600       	 423.205   	 0         	 39.3045   	 10.7673   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 87)                                                                               	 0.0497778 	 100       	 3.83036   	 0         	 0.180804  	 21.1852   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 87, n: 50, r2new: 50)	 0.0262692 	 100       	 73.6413   	 0         	 12.6475   	 5.8226    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 37, n: 50, r2: 37)                                                                                                       	 0.0171953 	 800       	 0         	 0         	 50.9536   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 87, r1_: 50, n: 50, r2: 87)                         	 0.0168044 	 100       	 225.209   	 0         	 28.5783   	 7.88043   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 87, n: 50, r: 87, r2: 50)                           	 0.0136173 	 100       	 277.919   	 0         	 35.267    	 7.88043   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 87, r2: 87, leftOrthog: 1)                      	 0.0104004 	 100       	 363.879   	 0         	 51.3546   	 7.08561   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 87, r1_: 87, n: 50, r2: 50)                         	 0.0103856 	 100       	 364.4     	 0         	 34.0911   	 10.689    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4350, r: 50, r2: 50, leftOrthog: 1)                      	 0.0088871 	 100       	 244.737   	 0         	 59.1869   	 4.13498   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 87, m: 50)                                                                                	 0.00825134	 100       	 4.26193   	 0         	 1.09073   	 3.9074    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 87, m: 87, fromLeft: 1)                              	 0.00446579	 800       	 0         	 0         	 21.6946   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 87) 	 0.00233508	 100       	 32.4143   	 0         	 5.57377   	 5.81551   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 87, r2: 87)                            	 0.00126816	 100       	 59.6849   	 0         	 10.2631   	 5.81551   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 87, n: 50, r2new: 1) 	 0.000994626	 100       	 0.874701  	 0         	 6.99921   	 0.124971  
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000955395	 100       	 0.523344  	 0         	 2.09337   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 87)                           	 0.000886095	 100       	 0         	 0         	 7.85469   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000821216	 100       	 30.4427   	 0         	 7.30624   	 4.16667   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 87, leftOrthog: 1)                        	 0.000621722	 100       	 69.967    	 0         	 23.2258   	 3.01247   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 87)                                                                                                        	 0.000500364	 100       	 0         	 0         	 13.9099   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 87, n: 50, r: 2, r2: 1)                             	 0.000429404	 100       	 4.05213   	 0         	 24.3165   	 0.166641  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 37)                                                                                                        	 0.000387113	 100       	 0         	 0         	 7.64635   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000335599	 100       	 0.744937  	 0         	 11.919    	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 37, n: 50, r2: 1)                                                                                                        	 0.000330544	 100       	 0         	 0         	 8.95493   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 87, m: 50, fromLeft: 1)                              	 0.000192917	 100       	 0         	 0         	 36.0777   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 12.5862   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 12.5862   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 7.34629   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 4.97259   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 4.97122   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 4.71731   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 4.45195   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 3.86595   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.262159  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.18274   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.14504   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.121371  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0184133 	 1100      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0046587 	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00255347	 4600      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00177439	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000955395	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000886095	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000335599	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22484561770368 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22484355115008 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22484153788544 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22483952462080 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22483751135616 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22483549809152 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22483348482688 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22483147156224 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22482945829760 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22482744503296 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22482543176832 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22482341850368 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22482140523904 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22481939197440 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22481737870976 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22481536544512 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22481335218048 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22481133891584 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22480932565120 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22480731238656 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22480529912192 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22480328585728 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22480127259264 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22479925932800 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22479724606336 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22479523279872 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22479321953408 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22479120626944 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22478919300480 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22478717974016 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22478516647552 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22478315321088 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22478113990528 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22477912664064 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22477711337600 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22477510011136 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22477308684672 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22477107358208 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22476906031744 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22476704705280 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22476503378816 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22476302052352 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22476100725888 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22475899399424 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22475698072960 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22475496746496 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22475295420032 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22475094093568 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22474892767104 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22474691440640 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22474490114176 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22474288787712 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22474087461248 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22473886134784 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22473684808320 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22473483481856 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22473282155392 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22473080828928 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22472879502464 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22472678176000 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22472476849536 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22472275523072 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22472074196608 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22484456109824 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22484449519360 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_TENSORTRAIN_NORMALIZE_PLAIN_QB PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 4400, m: 88)                                                                             	 3.63093   	 600       	 45.1946   	 0         	 1.03409   	 43.7047   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 88, m: 4400)                                                                              	 3.51346   	 700       	 13.4867   	 0         	 1.24678   	 10.8173   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 88)                                                                             	 0.38018   	 100       	 40.9776   	 0         	 0.942357  	 43.4841   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 4400, m: 50)                                                                             	 0.312164  	 100       	 28.2437   	 0         	 1.13415   	 24.903    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 88, m: 2500)                                                                              	 0.306902  	 100       	 12.4684   	 0         	 1.16736   	 10.6808   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 88, n: 50, r2new: 88)	 0.252119  	 700       	 96.3635   	 0         	 13.1526   	 7.3266    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 88, n: 50, r: 88, r2: 88)                           	 0.133356  	 700       	 357.711   	 0         	 32.8443   	 10.8911   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4400, r: 88, r2: 88, leftOrthog: 1)                      	 0.091684  	 600       	 445.97    	 0         	 61.625    	 7.23684   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 88, r1_: 88, n: 50, r2: 88)                         	 0.0868651 	 600       	 470.71    	 0         	 43.2198   	 10.8911   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 88)                                                                               	 0.0509775 	 100       	 3.77944   	 0         	 0.178118  	 21.2188   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 88, n: 50, r2new: 50)	 0.0287324 	 100       	 68.6334   	 0         	 11.7387   	 5.84677   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 88, r1_: 50, n: 50, r2: 88)                         	 0.0186453 	 100       	 207.667   	 0         	 26.2415   	 7.91367   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 38, n: 50, r2: 38)                                                                                                       	 0.0180496 	 800       	 0         	 0         	 51.2013   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 88, n: 50, r: 88, r2: 50)                           	 0.0139862 	 100       	 276.845   	 0         	 34.9832   	 7.91367   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 88, r1_: 88, n: 50, r2: 50)                         	 0.0102825 	 100       	 376.563   	 0         	 34.8355   	 10.8097   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4400, r: 50, r2: 50, leftOrthog: 1)                      	 0.00892186	 100       	 246.585   	 0         	 59.6288   	 4.13534   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 88, m: 50)                                                                                	 0.00838983	 100       	 4.25117   	 0         	 1.08226   	 3.92804   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 88, r2: 88, leftOrthog: 1)                      	 0.00586017	 100       	 660.732   	 0         	 92.2141   	 7.16519   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 88, m: 88, fromLeft: 1)                              	 0.00462136	 800       	 0         	 0         	 21.4489   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 88) 	 0.00224009	 100       	 34.5701   	 0         	 5.90834   	 5.85106   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 88, r2: 88)                            	 0.00120197	 100       	 64.4276   	 0         	 11.0113   	 5.85106   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 88, n: 50, r2new: 1) 	 0.00106216	 100       	 0.8285    	 0         	 6.62951   	 0.124972  
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.00097094	 100       	 0.514965  	 0         	 2.05986   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 88)                           	 0.000889683	 100       	 0         	 0         	 7.91293   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000788927	 100       	 31.6886   	 0         	 7.60527   	 4.16667   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 88, leftOrthog: 1)                        	 0.000595567	 100       	 73.8792   	 0         	 24.4473   	 3.02198   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 88)                                                                                                        	 0.000522209	 100       	 0         	 0         	 13.4812   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 88, n: 50, r: 2, r2: 1)                             	 0.000444567	 100       	 3.95891   	 0         	 23.757    	 0.166641  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 38)                                                                                                        	 0.000393213	 100       	 0         	 0         	 7.73118   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000340612	 100       	 0.733973  	 0         	 11.7436   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 38, n: 50, r2: 1)                                                                                                        	 0.000336551	 100       	 0         	 0         	 9.03281   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 88, m: 50, fromLeft: 1)                              	 0.000240639	 100       	 0         	 0         	 29.2554   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 12.7712   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 12.7712   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 7.55407   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 4.92199   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 4.92058   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 4.56288   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 4.37426   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 3.82875   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.284153  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.148989  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.116582  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.107062  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0193015 	 1100      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.004862  	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00252783	 4600      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00187937	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.00097094	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000889683	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000340612	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23375368779648 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23375158175744 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23374956849280 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23374755522816 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23374554196352 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23374352869888 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23374151543424 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23373950216960 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23373748890496 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23373547564032 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23373346237568 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23373144911104 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23372943584640 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23372742258176 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23372540931712 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23372339605248 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23372138278784 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23371936952320 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23371735625856 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23371534299392 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23371332972928 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23371131646464 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23370930320000 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23370728993536 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23370527667072 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23370326340608 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23370125014144 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23369923687680 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23369722361216 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23369521034752 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23369319708288 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23369118381824 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23368917051264 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23368715724800 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23368514398336 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23368313071872 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23368111745408 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23367910418944 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23367709092480 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23367507766016 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23367306439552 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23367105113088 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23366903786624 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23366702460160 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23366501133696 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23366299807232 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23366098480768 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23365897154304 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23365695827840 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23365494501376 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23365293174912 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23365091848448 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23364890521984 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23364689195520 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23364487869056 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23364286542592 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23364085216128 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23363883889664 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23363682563200 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23363481236736 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23363279910272 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23363078583808 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23362877257344 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23375263119104 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23375256528640 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_TENSORTRAIN_NORMALIZE_PLAIN_QB PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 89, m: 4450)                                                                              	 3.63659   	 700       	 13.4793   	 0         	 1.23209   	 10.9402   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 4450, m: 89)                                                                             	 3.30256   	 600       	 51.4014   	 0         	 1.16289   	 44.2014   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 89)                                                                             	 0.412314  	 100       	 38.6502   	 0         	 0.878962  	 43.9725   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 89, m: 2500)                                                                              	 0.31505   	 100       	 12.4218   	 0         	 1.15032   	 10.7986   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 4450, m: 50)                                                                             	 0.271042  	 100       	 32.8977   	 0         	 1.32098   	 24.9041   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 89, n: 50, r2new: 89)	 0.24227   	 700       	 103.4     	 0         	 13.9849   	 7.39373   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 89, n: 50, r: 89, r2: 89)                           	 0.142751  	 700       	 345.691   	 0         	 31.3841   	 11.0149   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 89, r1_: 89, n: 50, r2: 89)                         	 0.0985372 	 600       	 429.261   	 0         	 38.9711   	 11.0149   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4450, r: 89, r2: 89, leftOrthog: 1)                      	 0.0921656 	 600       	 458.936   	 0         	 62.7041   	 7.31908   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 89)                                                                               	 0.0513038 	 100       	 3.79439   	 0         	 0.178544  	 21.2518   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 89, n: 50, r2new: 50)	 0.0282789 	 100       	 71.0953   	 0         	 12.108    	 5.87179   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 39, n: 50, r2: 39)                                                                                                       	 0.0188607 	 800       	 0         	 0         	 51.6121   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 89, r1_: 50, n: 50, r2: 89)                         	 0.0165748 	 100       	 238.948   	 0         	 30.0698   	 7.94643   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 89, n: 50, r: 89, r2: 50)                           	 0.0151751 	 100       	 260.986   	 0         	 32.8432   	 7.94643   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 89, r1_: 89, n: 50, r2: 50)                         	 0.01158   	 100       	 342.011   	 0         	 31.2898   	 10.9304   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 89, r2: 89, leftOrthog: 1)                      	 0.0106678 	 100       	 371.258   	 0         	 51.2452   	 7.24473   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4450, r: 50, r2: 50, leftOrthog: 1)                      	 0.00923123	 100       	 241.03    	 0         	 58.2805   	 4.13569   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 89, m: 50)                                                                                	 0.008611  	 100       	 4.20005   	 0         	 1.06376   	 3.94832   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 89, m: 89, fromLeft: 1)                              	 0.00496302	 800       	 0         	 0         	 20.4288   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 89) 	 0.00255624	 100       	 30.9869   	 0         	 5.2643    	 5.88624   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 89)                           	 0.00118313	 100       	 0         	 0         	 6.01796   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 89, r2: 89)                            	 0.00118115	 100       	 67.0618   	 0         	 11.393    	 5.88624   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 89, n: 50, r2new: 1) 	 0.00106863	 100       	 0.832839  	 0         	 6.66421   	 0.124972  
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000854155	 100       	 0.585374  	 0         	 2.3415    	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000837851	 100       	 29.8382   	 0         	 7.16118   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 89)                                                                                                        	 0.000500884	 100       	 0         	 0         	 14.2149   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 89, n: 50, r: 2, r2: 1)                             	 0.000410204	 100       	 4.3393    	 0         	 26.0397   	 0.166642  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 39)                                                                                                        	 0.000405979	 100       	 0         	 0         	 7.68513   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 89, leftOrthog: 1)                        	 0.000338993	 100       	 131.271   	 0         	 43.3047   	 3.03134   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 39, n: 50, r2: 1)                                                                                                        	 0.000338665	 100       	 0         	 0         	 9.21264   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000331768	 100       	 0.753539  	 0         	 12.0566   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 89, m: 50, fromLeft: 1)                              	 0.000197056	 100       	 0         	 0         	 36.1319   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 11.8349   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 11.8349   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 7.2634    	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 4.29337   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 4.2921    	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 4.15169   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 4.03722   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 3.96026   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.274174  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.159518  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.12753   	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.112404  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0201062 	 1100      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00516008	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00232963	 4600      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.0013273 	 4600      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.00118313	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000854155	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000331768	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22391375419264 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22391140902912 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22390939576448 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22390738249984 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22390536923520 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22390335597056 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22390134270592 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22389932944128 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22389731617664 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22389530291200 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22389328964736 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22389127638272 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22388926311808 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22388724985344 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22388523658880 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22388322332416 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22388121005952 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22387919679488 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22387718353024 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22387517026560 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22387315700096 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22387114373632 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22386913047168 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22386711720704 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22386510394240 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22386309067776 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22386107741312 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22385906414848 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22385705088384 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22385503761920 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22385302435456 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22385101108992 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22384899778432 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22384698451968 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22384497125504 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22384295799040 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22384094472576 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22383893146112 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22383691819648 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22383490493184 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22383289166720 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22383087840256 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22382886513792 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22382685187328 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22382483860864 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22382282534400 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22382081207936 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22381879881472 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22381678555008 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22381477228544 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22381275902080 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22381074575616 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22380873249152 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22380671922688 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22380470596224 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22380269269760 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22380067943296 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22379866616832 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22379665290368 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22379463963904 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22379262637440 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22379061310976 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22378859984512 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22391269758720 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22391263168256 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_TENSORTRAIN_NORMALIZE_PLAIN_QB PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 4500, m: 90)                                                                             	 4.07587   	 600       	 43.0689   	 0         	 0.963553  	 44.6981   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 90, m: 4500)                                                                              	 3.73302   	 700       	 13.5788   	 0         	 1.22739   	 11.0631   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 90)                                                                             	 0.402867  	 100       	 40.4531   	 0         	 0.909859  	 44.4608   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 90, m: 2500)                                                                              	 0.314809  	 100       	 12.7106   	 0         	 1.16436   	 10.9163   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 4500, m: 50)                                                                             	 0.300189  	 100       	 30.0366   	 0         	 1.20604   	 24.9052   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 90, n: 50, r2new: 90)	 0.226191  	 700       	 114.195   	 0         	 15.3028   	 7.46238   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 90, n: 50, r: 90, r2: 90)                           	 0.13686   	 700       	 372.863   	 0         	 33.4748   	 11.1386   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4500, r: 90, r2: 90, leftOrthog: 1)                      	 0.0978337 	 600       	 447.085   	 0         	 60.4062   	 7.40132   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 90, r1_: 90, n: 50, r2: 90)                         	 0.0947031 	 600       	 461.864   	 0         	 41.4652   	 11.1386   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 90)                                                                               	 0.0522845 	 100       	 3.76147   	 0         	 0.176726  	 21.2843   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 90, n: 50, r2new: 50)	 0.0280384 	 100       	 73.114    	 0         	 12.3973   	 5.89758   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 40, n: 50, r2: 40)                                                                                                       	 0.019571  	 800       	 0         	 0         	 52.3223   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 90, r1_: 50, n: 50, r2: 90)                         	 0.0176903 	 100       	 228.939   	 0         	 28.6936   	 7.97872   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 90, n: 50, r: 90, r2: 50)                           	 0.0140156 	 100       	 288.963   	 0         	 36.2167   	 7.97872   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4500, r: 50, r2: 50, leftOrthog: 1)                      	 0.0122777 	 100       	 183.258   	 0         	 44.3078   	 4.13603   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 90, r2: 90, leftOrthog: 1)                      	 0.0114651 	 100       	 353.247   	 0         	 48.23     	 7.32422   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 90, r1_: 90, n: 50, r2: 50)                         	 0.0103771 	 100       	 390.283   	 0         	 35.3163   	 11.0511   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 90, m: 50)                                                                                	 0.00837382	 100       	 4.37872   	 0         	 1.10344   	 3.96825   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 90, m: 90, fromLeft: 1)                              	 0.00479368	 800       	 0         	 0         	 21.6285   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 90) 	 0.00234097	 100       	 34.601    	 0         	 5.84372   	 5.92105   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 90, r2: 90)                            	 0.00128017	 100       	 63.273    	 0         	 10.6861   	 5.92105   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 90, n: 50, r2new: 1) 	 0.000924693	 100       	 0.973296  	 0         	 7.7881    	 0.124972  
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 90)                           	 0.000908673	 100       	 0         	 0         	 7.92364   	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000863075	 100       	 0.579324  	 0         	 2.3173    	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000799604	 100       	 31.2655   	 0         	 7.50371   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 90)                                                                                                        	 0.00053478	 100       	 0         	 0         	 13.4635   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 90, leftOrthog: 1)                        	 0.000414671	 100       	 108.52    	 0         	 35.6909   	 3.04054   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 40)                                                                                                        	 0.000391726	 100       	 0         	 0         	 8.16898   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 90, n: 50, r: 2, r2: 1)                             	 0.000386848	 100       	 4.65299   	 0         	 27.9221   	 0.166642  
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000334229	 100       	 0.74799   	 0         	 11.9678   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 40, n: 50, r2: 1)                                                                                                        	 0.000332696	 100       	 0         	 0         	 9.61839   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 90, m: 50, fromLeft: 1)                              	 0.000198953	 100       	 0         	 0         	 36.1895   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 13.4325   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 13.4324   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 7.79212   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 5.3784    	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 5.37712   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 5.05612   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 4.83121   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 4.0562    	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.257495  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.152543  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.12357   	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.121991  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0208302 	 1100      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00499264	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00230267	 4600      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00106202	 4600      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000908673	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000863075	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000334229	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22403279521664 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22403086280704 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22402884954240 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22402683627776 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22402482301312 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22402280974848 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22402079648384 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22401878321920 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22401676995456 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22401475668992 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22401274342528 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22401073016064 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22400871689600 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22400670363136 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22400469036672 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22400267710208 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22400066383744 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22399865057280 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22399663730816 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22399462404352 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22399261077888 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22399059751424 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22398858424960 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22398657098496 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22398455772032 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22398254445568 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22398053119104 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22397851792640 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22397650466176 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22397449139712 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22397247813248 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22397046486784 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22396845156224 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22396643829760 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22396442503296 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22396241176832 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22396039850368 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22395838523904 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22395637197440 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22395435870976 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22395234544512 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22395033218048 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22394831891584 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22394630565120 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22394429238656 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22394227912192 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22394026585728 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22393825259264 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22393623932800 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22393422606336 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22393221279872 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22393019953408 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22392818626944 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22392617300480 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22392415974016 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22392214647552 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22392013321088 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22391811994624 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22391610668160 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22391409341696 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22391208015232 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22391006688768 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22390805362304 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22403173861120 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22403167270656 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_TENSORTRAIN_NORMALIZE_PLAIN_QB PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 91, m: 4550)                                                                              	 3.85574   	 700       	 13.5897   	 0         	 1.21487   	 11.1861   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 4550, m: 91)                                                                             	 3.64428   	 600       	 49.7931   	 0         	 1.10174   	 45.1948   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 91)                                                                             	 0.433187  	 100       	 38.4649   	 0         	 0.855746  	 44.949    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 91, m: 2500)                                                                              	 0.32534   	 100       	 12.5723   	 0         	 1.13941   	 11.034    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 4550, m: 50)                                                                             	 0.28051   	 100       	 32.5004   	 0         	 1.30491   	 24.9062   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 91, n: 50, r2new: 91)	 0.255015  	 700       	 104.437   	 0         	 13.8648   	 7.53252   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 91, n: 50, r: 91, r2: 91)                           	 0.148732  	 700       	 354.665   	 0         	 31.4911   	 11.2624   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4550, r: 91, r2: 91, leftOrthog: 1)                      	 0.111276  	 600       	 406.327   	 0         	 54.296    	 7.48355   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 91, r1_: 91, n: 50, r2: 91)                         	 0.102737  	 600       	 440.098   	 0         	 39.0768   	 11.2624   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 91)                                                                               	 0.0566281 	 100       	 3.50827   	 0         	 0.164583  	 21.3162   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 91, n: 50, r2new: 50)	 0.0280602 	 100       	 74.5005   	 0         	 12.5758   	 5.92411   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 41, n: 50, r2: 41)                                                                                                       	 0.0211155 	 800       	 0         	 0         	 50.9502   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 91, r1_: 50, n: 50, r2: 91)                         	 0.0178447 	 100       	 232.03    	 0         	 28.9655   	 8.01056   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 91, n: 50, r: 91, r2: 50)                           	 0.015093  	 100       	 274.333   	 0         	 34.2464   	 8.01056   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4550, r: 50, r2: 50, leftOrthog: 1)                      	 0.014352  	 100       	 158.515   	 0         	 38.3223   	 4.13636   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 91, r1_: 91, n: 50, r2: 50)                         	 0.0113291 	 100       	 365.475   	 0         	 32.7144   	 11.1717   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 91, r2: 91, leftOrthog: 1)                      	 0.0112487 	 100       	 368.089   	 0         	 49.717    	 7.40367   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 91, m: 50)                                                                                	 0.00851214	 100       	 4.36631   	 0         	 1.09491   	 3.98783   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 91, m: 91, fromLeft: 1)                              	 0.00532847	 800       	 0         	 0         	 19.8925   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 91) 	 0.00238377	 100       	 34.7391   	 0         	 5.83311   	 5.9555    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 91, r2: 91)                            	 0.00128382	 100       	 64.503    	 0         	 10.8308   	 5.9555    
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 91, n: 50, r2new: 1) 	 0.000989883	 100       	 0.919301  	 0         	 7.35602   	 0.124973  
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 91)                           	 0.000929562	 100       	 0         	 0         	 7.83165   	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000858307	 100       	 0.582542  	 0         	 2.33017   	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000804244	 100       	 31.0851   	 0         	 7.46042   	 4.16667   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 91, leftOrthog: 1)                        	 0.000711231	 100       	 63.9736   	 0         	 20.9777   	 3.0496    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 91)                                                                                                        	 0.000506133	 100       	 0         	 0         	 14.3836   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 41)                                                                                                        	 0.000413114	 100       	 0         	 0         	 7.9397    	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 91, n: 50, r: 2, r2: 1)                             	 0.000402188	 100       	 4.52525   	 0         	 27.1555   	 0.166642  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 41, n: 50, r2: 1)                                                                                                        	 0.000342456	 100       	 0         	 0         	 9.57787   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000330825	 100       	 0.755687  	 0         	 12.091    	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 91, m: 50, fromLeft: 1)                              	 0.000203728	 100       	 0         	 0         	 35.7339   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 12.7632   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 12.7632   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 7.72378   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 4.74388   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 4.74262   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 4.55984   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 4.4146    	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 4.18959   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.286448  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.165511  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.137587  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.132715  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0223772 	 1100      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0055322 	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.0024332 	 4600      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00153711	 4600      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000929562	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000858307	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000330825	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22851528148864 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22851306383360 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22851105056896 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22850903730432 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22850702403968 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22850501077504 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22850299751040 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22850098424576 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22849897098112 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22849695771648 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22849494445184 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22849293118720 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22849091792256 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22848890465792 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22848689139328 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22848487812864 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22848286486400 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22848085159936 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22847883833472 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22847682507008 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22847481180544 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22847279854080 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22847078527616 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22846877201152 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22846675874688 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22846474548224 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22846273221760 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22846071895296 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22845870568832 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22845669242368 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22845467915904 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22845266589440 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22845065258880 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22844863932416 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22844662605952 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22844461279488 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22844259953024 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22844058626560 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22843857300096 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22843655973632 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22843454647168 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22843253320704 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22843051994240 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22842850667776 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22842649341312 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22842448014848 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22842246688384 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22842045361920 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22841844035456 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22841642708992 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22841441382528 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22841240056064 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22841038729600 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22840837403136 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22840636076672 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22840434750208 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22840233423744 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22840032097280 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22839830770816 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22839629444352 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22839428117888 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22839226791424 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22839025464960 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22851422488320 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22851415897856 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_TENSORTRAIN_NORMALIZE_PLAIN_QB PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 4600, m: 92)                                                                             	 4.13146   	 600       	 45.3855   	 0         	 0.993303  	 45.6915   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 92, m: 4600)                                                                              	 3.90118   	 700       	 13.8791   	 0         	 1.22726   	 11.309    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 92)                                                                             	 0.418821  	 100       	 40.6661   	 0         	 0.895     	 45.437    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 92, m: 2500)                                                                              	 0.321882  	 100       	 12.9864   	 0         	 1.16454   	 11.1515   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 4600, m: 50)                                                                             	 0.32039   	 100       	 28.767    	 0         	 1.15497   	 24.9072   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 92, n: 50, r2new: 92)	 0.260137  	 700       	 105.56    	 0         	 13.8821   	 7.60408   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4600, r: 92, r2: 92, leftOrthog: 1)                      	 0.157342  	 600       	 296.941   	 0         	 39.2479   	 7.56579   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 92, n: 50, r: 92, r2: 92)                           	 0.149983  	 700       	 363.43    	 0         	 31.9186   	 11.3861   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 92, r1_: 92, n: 50, r2: 92)                         	 0.0971836 	 600       	 480.753   	 0         	 42.2226   	 11.3861   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 92)                                                                               	 0.054542  	 100       	 3.67912   	 0         	 0.172344  	 21.3475   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 92, n: 50, r2new: 50)	 0.0370917 	 100       	 57.4792   	 0         	 9.65823   	 5.95132   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 42, n: 50, r2: 42)                                                                                                       	 0.0227489 	 800       	 0         	 0         	 49.627    	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 92, r1_: 50, n: 50, r2: 92)                         	 0.0176062 	 100       	 240.37    	 0         	 29.8895   	 8.04196   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 92, n: 50, r: 92, r2: 50)                           	 0.0154047 	 100       	 274.722   	 0         	 34.1611   	 8.04196   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 92, r1_: 92, n: 50, r2: 50)                         	 0.0110486 	 100       	 383.035   	 0         	 33.9202   	 11.2922   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4600, r: 50, r2: 50, leftOrthog: 1)                      	 0.00968938	 100       	 237.373   	 0         	 57.3824   	 4.13669   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 92, r2: 92, leftOrthog: 1)                      	 0.00965866	 100       	 438.156   	 0         	 58.5529   	 7.48308   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 92, m: 50)                                                                                	 0.00887384	 100       	 4.24468   	 0         	 1.05929   	 4.00709   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 92, m: 92, fromLeft: 1)                              	 0.00518601	 800       	 0         	 0         	 20.8907   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 92) 	 0.00233578	 100       	 36.2363   	 0         	 6.04988   	 5.98958   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 92, r2: 92)                            	 0.00126645	 100       	 66.8323   	 0         	 11.1581   	 5.98958   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 92, n: 50, r2new: 1) 	 0.00118561	 100       	 0.775973  	 0         	 6.20913   	 0.124973  
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000938606	 100       	 0.532705  	 0         	 2.13082   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 92)                           	 0.000894795	 100       	 0         	 0         	 8.22535   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000801441	 100       	 31.1938   	 0         	 7.48651   	 4.16667   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 92, leftOrthog: 1)                        	 0.000676908	 100       	 67.9561   	 0         	 22.2187   	 3.05851   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 92, n: 50, r: 2, r2: 1)                             	 0.000542638	 100       	 3.39084   	 0         	 20.348    	 0.166643  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 92)                                                                                                        	 0.000495954	 100       	 0         	 0         	 14.8401   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 42)                                                                                                        	 0.000396315	 100       	 0         	 0         	 8.4781    	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000343892	 100       	 0.726972  	 0         	 11.6316   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 42, n: 50, r2: 1)                                                                                                        	 0.00033017	 100       	 0         	 0         	 10.1766   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 92, m: 50, fromLeft: 1)                              	 0.000203525	 100       	 0         	 0         	 36.1626   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 13.9301   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 13.93     	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 8.11535   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 5.50244   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 5.50105   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 5.20357   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 4.92521   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 4.23193   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.30075   	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.177367  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.167196  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.12664   	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0239713 	 1100      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00538953	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00236876	 4600      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.0016326 	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000938606	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000894795	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000343892	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22469335635840 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22469121402880 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22468920076416 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22468718749952 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22468517423488 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22468316097024 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22468114770560 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22467913444096 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22467712117632 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22467510791168 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22467309464704 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22467108138240 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22466906811776 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22466705485312 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22466504158848 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22466302832384 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22466101505920 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22465900179456 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22465698852992 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22465497526528 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22465296200064 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22465094873600 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22464893547136 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22464692220672 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22464490894208 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22464289567744 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22464088241280 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22463886914816 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22463685588352 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22463484261888 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22463282935424 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22463081608960 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22462880278400 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22462678951936 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22462477625472 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22462276299008 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22462074972544 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22461873646080 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22461672319616 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22461470993152 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22461269666688 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22461068340224 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22460867013760 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22460665687296 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22460464360832 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22460263034368 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22460061707904 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22459860381440 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22459659054976 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22459457728512 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22459256402048 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22459055075584 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22458853749120 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22458652422656 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22458451096192 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22458249769728 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22458048443264 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22457847116800 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22457645790336 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22457444463872 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22457243137408 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22457041810944 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22456840484480 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22469229975296 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22469223384832 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_TENSORTRAIN_NORMALIZE_PLAIN_QB PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 4650, m: 93)                                                                             	 4.39862   	 600       	 44.034    	 0         	 0.953362  	 46.1882   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 93, m: 4650)                                                                              	 4.01267   	 700       	 13.9383   	 0         	 1.21924   	 11.432    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 93)                                                                             	 0.420901  	 100       	 41.3523   	 0         	 0.900433  	 45.9249   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 4650, m: 50)                                                                             	 0.344008  	 100       	 27.0827   	 0         	 1.0873    	 24.9082   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 93, m: 2500)                                                                              	 0.340656  	 100       	 12.5372   	 0         	 1.11254   	 11.269    
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 93, n: 50, r2new: 93)	 0.283409  	 700       	 99.8979   	 0         	 13.0125   	 7.67705   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 93, n: 50, r: 93, r2: 93)                           	 0.162057  	 700       	 347.439   	 0         	 30.1861   	 11.5099   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 93, r1_: 93, n: 50, r2: 93)                         	 0.104402  	 600       	 462.267   	 0         	 40.1626   	 11.5099   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4650, r: 93, r2: 93, leftOrthog: 1)                      	 0.101028  	 600       	 477.704   	 0         	 62.461    	 7.64803   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 93)                                                                               	 0.0528494 	 100       	 3.8348    	 0         	 0.179378  	 21.3783   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 93, n: 50, r2new: 50)	 0.0319044 	 100       	 68.1568   	 0         	 11.3991   	 5.97916   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 43, n: 50, r2: 43)                                                                                                       	 0.0242481 	 800       	 0         	 0         	 48.8023   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 93, r1_: 50, n: 50, r2: 93)                         	 0.0170562 	 100       	 253.545   	 0         	 31.4068   	 8.07292   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 93, n: 50, r: 93, r2: 50)                           	 0.0165386 	 100       	 261.48    	 0         	 32.3898   	 8.07292   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 93, r1_: 93, n: 50, r2: 50)                         	 0.011685  	 100       	 370.091   	 0         	 32.4279   	 11.4127   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 93, m: 50)                                                                                	 0.00889245	 100       	 4.29202   	 0         	 1.06607   	 4.02601   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 93, r2: 93, leftOrthog: 1)                      	 0.00833153	 100       	 519.052   	 0         	 68.6355   	 7.56245   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4650, r: 50, r2: 50, leftOrthog: 1)                      	 0.00757102	 100       	 307.092   	 0         	 74.2304   	 4.13701   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 93, m: 93, fromLeft: 1)                              	 0.00633358	 800       	 0         	 0         	 17.4794   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 93) 	 0.00222109	 100       	 38.9403   	 0         	 6.46492   	 6.02332   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 93, n: 50, r2new: 1) 	 0.00123264	 100       	 0.754479  	 0         	 6.03713   	 0.124973  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 93, r2: 93)                            	 0.00118819	 100       	 72.7914   	 0         	 12.0849   	 6.02332   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000985742	 100       	 0.507232  	 0         	 2.02893   	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000885628	 100       	 28.2286   	 0         	 6.77485   	 4.16667   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 93)                           	 0.000878512	 100       	 0         	 0         	 8.46887   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 93, n: 50, r: 2, r2: 1)                             	 0.000620698	 100       	 2.99663   	 0         	 17.9823   	 0.166643  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 93)                                                                                                        	 0.000511472	 100       	 0         	 0         	 14.5463   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 43)                                                                                                        	 0.000397393	 100       	 0         	 0         	 8.65642   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 93, leftOrthog: 1)                        	 0.000396538	 100       	 117.265   	 0         	 38.2309   	 3.06728   
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000333447	 100       	 0.749744  	 0         	 11.9959   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 43, n: 50, r2: 1)                                                                                                        	 0.00032536	 100       	 0         	 0         	 10.5729   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 93, m: 50, fromLeft: 1)                              	 0.000223521	 100       	 0         	 0         	 33.2855   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 14.5609   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 14.5606   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 8.39732   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 5.83723   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 5.8358    	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 5.52647   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 5.21638   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 4.36222   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.318767  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.180405  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.134028  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.117327  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0254823 	 1100      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0065571 	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00230587	 4600      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00217123	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000985742	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000878512	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000333447	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23432751556480 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23432536254464 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23432334928000 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23432133601536 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23431932275072 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23431730948608 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23431529622144 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23431328295680 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23431126969216 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23430925642752 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23430724316288 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23430522989824 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23430321663360 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23430120336896 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23429919010432 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23429717683968 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23429516357504 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23429315031040 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23429113704576 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23428912378112 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23428711051648 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23428509725184 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23428308398720 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23428107072256 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23427905745792 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23427704419328 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23427503092864 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23427301766400 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23427100439936 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23426899113472 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23426697787008 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23426496460544 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23426295129984 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23426093803520 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23425892477056 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23425691150592 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23425489824128 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23425288497664 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23425087171200 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23424885844736 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23424684518272 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23424483191808 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23424281865344 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23424080538880 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23423879212416 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23423677885952 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23423476559488 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23423275233024 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23423073906560 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23422872580096 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23422671253632 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23422469927168 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23422268600704 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23422067274240 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23421865947776 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23421664621312 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23421463294848 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23421261968384 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23421060641920 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23420859315456 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23420657988992 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23420456662528 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23420255336064 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23432645895936 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23432639305472 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_TENSORTRAIN_NORMALIZE_PLAIN_QB PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 94, m: 4700)                                                                              	 4.05272   	 700       	 14.2505   	 0         	 1.23329   	 11.5549   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 4700, m: 94)                                                                             	 3.91201   	 600       	 51.1258   	 0         	 1.09513   	 46.6849   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 94)                                                                             	 0.443189  	 100       	 40.1245   	 0         	 0.864516  	 46.4127   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 94, m: 2500)                                                                              	 0.324154  	 100       	 13.4585   	 0         	 1.18198   	 11.3864   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 4700, m: 50)                                                                             	 0.289178  	 100       	 32.5635   	 0         	 1.30729   	 24.9092   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 94, n: 50, r2new: 94)	 0.267623  	 700       	 109.067   	 0         	 14.0707   	 7.75137   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 94, n: 50, r: 94, r2: 94)                           	 0.154626  	 700       	 376.011   	 0         	 32.3209   	 11.6337   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 94, r1_: 94, n: 50, r2: 94)                         	 0.106561  	 600       	 467.669   	 0         	 40.1996   	 11.6337   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4700, r: 94, r2: 94, leftOrthog: 1)                      	 0.103126  	 600       	 483.245   	 0         	 62.5134   	 7.73026   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 94)                                                                               	 0.0552004 	 100       	 3.7077    	 0         	 0.173187  	 21.4086   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 94, n: 50, r2new: 50)	 0.0289385 	 100       	 76.6454   	 0         	 12.7581   	 6.00758   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 44, n: 50, r2: 44)                                                                                                       	 0.0241194 	 800       	 0         	 0         	 51.3711   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 94, r1_: 50, n: 50, r2: 94)                         	 0.0183765 	 100       	 240.416   	 0         	 29.6684   	 8.10345   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 94, n: 50, r: 94, r2: 50)                           	 0.014676  	 100       	 301.036   	 0         	 37.1491   	 8.10345   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4700, r: 50, r2: 50, leftOrthog: 1)                      	 0.0134633 	 100       	 174.548   	 0         	 42.1887   	 4.13732   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 94, r2: 94, leftOrthog: 1)                      	 0.0125246 	 100       	 352.745   	 0         	 46.1601   	 7.64178   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 94, r1_: 94, n: 50, r2: 50)                         	 0.011465  	 100       	 385.348   	 0         	 33.4122   	 11.5332   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 94, m: 50)                                                                                	 0.00870137	 100       	 4.44374   	 0         	 1.09868   	 4.04462   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 94, m: 94, fromLeft: 1)                              	 0.00532505	 800       	 0         	 0         	 21.2394   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 94) 	 0.00281077	 100       	 31.4362   	 0         	 5.19032   	 6.0567    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 94, r2: 94)                            	 0.00172196	 100       	 51.3137   	 0         	 8.47222   	 6.0567    
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 94, n: 50, r2new: 1) 	 0.00123001	 100       	 0.764223  	 0         	 6.11508   	 0.124973  
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 94)                           	 0.000918621	 100       	 0         	 0         	 8.18618   	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.00089931	 100       	 0.555982  	 0         	 2.22393   	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000799161	 100       	 31.2828   	 0         	 7.50787   	 4.16667   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 94, n: 50, r: 2, r2: 1)                             	 0.000606815	 100       	 3.09814   	 0         	 18.5915   	 0.166643  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 94)                                                                                                        	 0.000511103	 100       	 0         	 0         	 14.7133   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 44)                                                                                                        	 0.000390028	 100       	 0         	 0         	 9.02499   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 94, leftOrthog: 1)                        	 0.000359708	 100       	 130.662   	 0         	 42.4789   	 3.07592   
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000340227	 100       	 0.734804  	 0         	 11.7569   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 44, n: 50, r2: 1)                                                                                                        	 0.000330713	 100       	 0         	 0         	 10.6437   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 94, m: 50, fromLeft: 1)                              	 0.000241605	 100       	 0         	 0         	 31.1252   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 13.5475   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 13.5475   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 8.1583    	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 5.08359   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 5.08226   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 4.87161   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 4.69957   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 4.38558   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.300603  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.17163   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.137201  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.129473  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0253513 	 1100      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00556666	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00230518	 4600      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00113133	 4600      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000918621	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.00089931	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000340227	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23022355494784 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23022165551104 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23021964224640 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23021762898176 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23021561571712 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23021360245248 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23021158918784 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23020957592320 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23020756265856 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23020554939392 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23020353612928 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23020152286464 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23019950960000 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23019749633536 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23019548307072 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23019346980608 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23019145654144 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23018944327680 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23018743001216 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23018541674752 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23018340348288 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23018139021824 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23017937695360 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23017736368896 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23017535042432 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23017333715968 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23017132389504 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23016931063040 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23016729736576 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23016528410112 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23016327083648 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23016125757184 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23015924426624 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23015723100160 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23015521773696 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23015320447232 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23015119120768 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23014917794304 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23014716467840 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23014515141376 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23014313814912 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23014112488448 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23013911161984 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23013709835520 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23013508509056 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23013307182592 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23013105856128 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23012904529664 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23012703203200 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23012501876736 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23012300550272 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23012099223808 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23011897897344 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23011696570880 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23011495244416 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23011293917952 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23011092591488 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23010891265024 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23010689938560 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23010488612096 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23010287285632 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23010085959168 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23009884632704 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23022249834240 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23022243243776 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_TENSORTRAIN_NORMALIZE_PLAIN_QB PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 4750, m: 95)                                                                             	 4.45544   	 600       	 46.3379   	 0         	 0.98212   	 47.1816   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 95, m: 4750)                                                                              	 4.14067   	 700       	 14.3977   	 0         	 1.23291   	 11.6778   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 95)                                                                             	 0.446628  	 100       	 40.6699   	 0         	 0.867156  	 46.9003   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 95, m: 2500)                                                                              	 0.339265  	 100       	 13.1323   	 0         	 1.14157   	 11.5037   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 4750, m: 50)                                                                             	 0.326252  	 100       	 29.1697   	 0         	 1.171     	 24.9101   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 95, n: 50, r2new: 95)	 0.3045    	 700       	 98.8219   	 0         	 12.6258   	 7.82701   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 95, n: 50, r: 95, r2: 95)                           	 0.166291  	 700       	 360.91    	 0         	 30.6963   	 11.7574   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4750, r: 95, r2: 95, leftOrthog: 1)                      	 0.157968  	 600       	 325.652   	 0         	 41.6834   	 7.8125    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 95, r1_: 95, n: 50, r2: 95)                         	 0.112628  	 600       	 456.746   	 0         	 38.8475   	 11.7574   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 95)                                                                               	 0.0545128 	 100       	 3.79116   	 0         	 0.176839  	 21.4385   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 95, n: 50, r2new: 50)	 0.0413555 	 100       	 54.7085   	 0         	 9.06288   	 6.03655   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 45, n: 50, r2: 45)                                                                                                       	 0.0267245 	 800       	 0         	 0         	 48.4949   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 95, n: 50, r: 95, r2: 50)                           	 0.01943   	 100       	 232.244   	 0         	 28.5538   	 8.13356   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 95, r1_: 50, n: 50, r2: 95)                         	 0.018119  	 100       	 249.047   	 0         	 30.6197   	 8.13356   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 95, r1_: 95, n: 50, r2: 50)                         	 0.0118613 	 100       	 380.438   	 0         	 32.6456   	 11.6536   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4750, r: 50, r2: 50, leftOrthog: 1)                      	 0.0108038 	 100       	 219.83    	 0         	 53.1295   	 4.13763   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 95, r2: 95, leftOrthog: 1)                      	 0.00966888	 100       	 466.704   	 0         	 60.4455   	 7.72107   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 95, m: 50)                                                                                	 0.00904113	 100       	 4.33205   	 0         	 1.06624   	 4.06293   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 95, m: 95, fromLeft: 1)                              	 0.00550904	 800       	 0         	 0         	 20.9692   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 95) 	 0.0023434 	 100       	 38.5124   	 0         	 6.32414   	 6.08974   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 95, n: 50, r2new: 1) 	 0.00140718	 100       	 0.675107  	 0         	 5.40199   	 0.124974  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 95, r2: 95)                            	 0.00129673	 100       	 69.5984   	 0         	 11.4288   	 6.08974   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.00103181	 100       	 0.484587  	 0         	 1.93835   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 95)                           	 0.000888393	 100       	 0         	 0         	 8.55477   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000851407	 100       	 29.3632   	 0         	 7.04716   	 4.16667   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 95, leftOrthog: 1)                        	 0.000644418	 100       	 73.7099   	 0         	 23.8975   	 3.08442   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 95, n: 50, r: 2, r2: 1)                             	 0.000560585	 100       	 3.38932   	 0         	 20.3388   	 0.166643  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 95)                                                                                                        	 0.00050844	 100       	 0         	 0         	 14.9477   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 45)                                                                                                        	 0.000437175	 100       	 0         	 0         	 8.23469   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000329931	 100       	 0.757734  	 0         	 12.1237   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 45, n: 50, r2: 1)                                                                                                        	 0.000328194	 100       	 0         	 0         	 10.9691   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 95, m: 50, fromLeft: 1)                              	 0.000196746	 100       	 0         	 0         	 38.6285   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 14.9554   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 14.9554   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 8.67389   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 5.92084   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 5.91938   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 5.61822   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 5.28283   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 4.48898   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.349606  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.187579  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.179085  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.14346   	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0279983 	 1100      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00570579	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00258804	 4600      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00230708	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.00103181	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000888393	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000329931	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22422621620096 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22422413633536 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22422212307072 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22422010980608 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22421809654144 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22421608327680 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22421407001216 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22421205674752 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22421004348288 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22420803021824 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22420601695360 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22420400368896 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22420199042432 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22419997715968 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22419796389504 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22419595063040 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22419393736576 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22419192410112 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22418991083648 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22418789757184 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22418588430720 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22418387104256 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22418185777792 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22417984451328 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22417783124864 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22417581798400 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22417380471936 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22417179145472 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22416977819008 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22416776492544 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22416575166080 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22416373839616 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22416172509056 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22415971182592 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22415769856128 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22415568529664 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22415367203200 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22415165876736 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22414964550272 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22414763223808 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22414561897344 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22414360570880 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22414159244416 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22413957917952 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22413756591488 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22413555265024 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22413353938560 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22413152612096 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22412951285632 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22412749959168 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22412548632704 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22412347306240 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22412145979776 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22411944653312 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22411743326848 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22411542000384 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22411340673920 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22411139347456 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22410938020992 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22410736694528 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22410535368064 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22410334041600 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22410132715136 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22422515959552 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22422509369088 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_TENSORTRAIN_NORMALIZE_PLAIN_QB PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 4800, m: 96)                                                                             	 4.52954   	 600       	 47.0345   	 0         	 0.986497  	 47.6783   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 96, m: 4800)                                                                              	 4.24595   	 700       	 14.4888   	 0         	 1.22778   	 11.8008   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 96)                                                                             	 0.447266  	 100       	 41.4741   	 0         	 0.875206  	 47.3879   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 4800, m: 50)                                                                             	 0.344516  	 100       	 27.9136   	 0         	 1.12053   	 24.9111   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 96, m: 2500)                                                                              	 0.344413  	 100       	 13.208    	 0         	 1.13657   	 11.621    
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 96, n: 50, r2new: 96)	 0.294161  	 700       	 105.451   	 0         	 13.3416   	 7.90393   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4800, r: 96, r2: 96, leftOrthog: 1)                      	 0.189226  	 600       	 280.533   	 0         	 35.5342   	 7.89474   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 96, n: 50, r: 96, r2: 96)                           	 0.16675   	 700       	 371.404   	 0         	 31.2598   	 11.8812   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 96, r1_: 96, n: 50, r2: 96)                         	 0.111828  	 600       	 474.695   	 0         	 39.9535   	 11.8812   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 96)                                                                               	 0.0547239 	 100       	 3.81308   	 0         	 0.177619  	 21.4678   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 96, n: 50, r2new: 50)	 0.0332126 	 100       	 69.4918   	 0         	 11.4559   	 6.06602   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 46, n: 50, r2: 46)                                                                                                       	 0.0262601 	 800       	 0         	 0         	 51.5702   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 96, n: 50, r: 96, r2: 50)                           	 0.0182875 	 100       	 251.976   	 0         	 30.867    	 8.16327   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 96, r1_: 50, n: 50, r2: 96)                         	 0.0178886 	 100       	 257.594   	 0         	 31.5552   	 8.16327   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 96, r1_: 96, n: 50, r2: 50)                         	 0.0128764 	 100       	 357.864   	 0         	 30.3945   	 11.7739   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 96, r2: 96, leftOrthog: 1)                      	 0.0110082 	 100       	 418.598   	 0         	 53.6643   	 7.80031   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4800, r: 50, r2: 50, leftOrthog: 1)                      	 0.00973764	 100       	 246.466   	 0         	 59.5627   	 4.13793   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 96, m: 50)                                                                                	 0.00894592	 100       	 4.43404   	 0         	 1.08653   	 4.08093   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 96, m: 96, fromLeft: 1)                              	 0.00687614	 800       	 0         	 0         	 17.1557   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 96) 	 0.00233344	 100       	 39.4953   	 0         	 6.4509    	 6.12245   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 96, n: 50, r2new: 1) 	 0.00131215	 100       	 0.731624  	 0         	 5.85421   	 0.124974  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 96, r2: 96)                            	 0.00126803	 100       	 72.6796   	 0         	 11.871    	 6.12245   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000906868	 100       	 0.551348  	 0         	 2.20539   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 96)                           	 0.000890895	 100       	 0         	 0         	 8.62054   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000822833	 100       	 30.3828   	 0         	 7.29188   	 4.16667   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 96, n: 50, r: 2, r2: 1)                             	 0.00066798	 100       	 2.87434   	 0         	 17.2484   	 0.166644  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 96)                                                                                                        	 0.000501109	 100       	 0         	 0         	 15.326    	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 96, leftOrthog: 1)                        	 0.000459087	 100       	 104.555   	 0         	 33.8062   	 3.09278   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 46)                                                                                                        	 0.000423966	 100       	 0         	 0         	 8.67994   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 46, n: 50, r2: 1)                                                                                                        	 0.000379555	 100       	 0         	 0         	 9.69556   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000340315	 100       	 0.734614  	 0         	 11.7538   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 96, m: 50, fromLeft: 1)                              	 0.000201925	 100       	 0         	 0         	 38.0339   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 14.9448   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 14.9447   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 8.61248   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 5.99203   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 5.9907    	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 5.72156   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 5.37604   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 4.59931   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.331019  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.210431  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.186973  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.143416  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0275647 	 1100      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00707807	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00242878	 4600      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00188687	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000906868	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000890895	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000340315	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22432288765824 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22432077309952 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22431875983488 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22431674657024 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22431473330560 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22431272004096 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22431070677632 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22430869351168 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22430668024704 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22430466698240 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22430265371776 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22430064045312 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22429862718848 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22429661392384 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22429460065920 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22429258739456 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22429057412992 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22428856086528 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22428654760064 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22428453433600 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22428252107136 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22428050780672 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22427849454208 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22427648127744 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22427446801280 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22427245474816 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22427044148352 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22426842821888 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22426641495424 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22426440168960 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22426238842496 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22426037516032 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22425836185472 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22425634859008 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22425433532544 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22425232206080 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22425030879616 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22424829553152 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22424628226688 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22424426900224 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22424225573760 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22424024247296 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22423822920832 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22423621594368 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22423420267904 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22423218941440 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22423017614976 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22422816288512 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22422614962048 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22422413635584 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22422212309120 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22422010982656 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22421809656192 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22421608329728 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22421407003264 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22421205676800 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22421004350336 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22420803023872 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22420601697408 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22420400370944 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22420199044480 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22419997718016 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22419796391552 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22432183105280 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22432176514816 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_TENSORTRAIN_NORMALIZE_PLAIN_QB PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 4850, m: 97)                                                                             	 4.99617   	 600       	 43.9881   	 0         	 0.91309   	 48.175    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 97, m: 4850)                                                                              	 4.47531   	 700       	 14.1803   	 0         	 1.18925   	 11.9237   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 97)                                                                             	 0.435357  	 100       	 43.5038   	 0         	 0.908691  	 47.8753   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 97, n: 50, r2new: 97)	 0.360341  	 700       	 88.733    	 0         	 11.1165   	 7.98209   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 97, m: 2500)                                                                              	 0.356572  	 100       	 13.0231   	 0         	 1.10947   	 11.7381   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 4850, m: 50)                                                                             	 0.317352  	 100       	 30.6179   	 0         	 1.22905   	 24.912    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 97, n: 50, r: 97, r2: 97)                           	 0.248403  	 700       	 257.192   	 0         	 21.4238   	 12.005    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4850, r: 97, r2: 97, leftOrthog: 1)                      	 0.119251  	 600       	 459.205   	 0         	 57.5663   	 7.97697   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 97, r1_: 97, n: 50, r2: 97)                         	 0.0906383 	 600       	 604.164   	 0         	 50.3262   	 12.005    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 97)                                                                               	 0.0551197 	 100       	 3.82198   	 0         	 0.177795  	 21.4966   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 97, n: 50, r2new: 50)	 0.0333105 	 100       	 70.6833   	 0         	 11.5951   	 6.09595   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 47, n: 50, r2: 47)                                                                                                       	 0.028854  	 800       	 0         	 0         	 48.997    	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 97, r1_: 50, n: 50, r2: 97)                         	 0.0182888 	 100       	 257.234   	 0         	 31.3985   	 8.19257   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 97, n: 50, r: 97, r2: 50)                           	 0.0159428 	 100       	 295.086   	 0         	 36.0188   	 8.19257   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4850, r: 50, r2: 50, leftOrthog: 1)                      	 0.0118629 	 100       	 204.419   	 0         	 49.3978   	 4.13823   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 97, r2: 97, leftOrthog: 1)                      	 0.0115695 	 100       	 406.631   	 0         	 51.6061   	 7.87952   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 97, r1_: 97, n: 50, r2: 50)                         	 0.0101193 	 100       	 464.905   	 0         	 39.0865   	 11.8943   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 97, m: 50)                                                                                	 0.00927371	 100       	 4.33123   	 0         	 1.05675   	 4.09863   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 97, m: 97, fromLeft: 1)                              	 0.00565905	 800       	 0         	 0         	 21.2819   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 97) 	 0.002418  	 100       	 38.9123   	 0         	 6.32225   	 6.15482   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 97, n: 50, r2new: 1) 	 0.00142031	 100       	 0.682949  	 0         	 5.46471   	 0.124974  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 97, r2: 97)                            	 0.00119483	 100       	 78.7473   	 0         	 12.7944   	 6.15482   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 97)                           	 0.0010616 	 100       	 0         	 0         	 7.30973   	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.00104555	 100       	 0.478215  	 0         	 1.91286   	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000864795	 100       	 28.9086   	 0         	 6.93806   	 4.16667   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 97, n: 50, r: 2, r2: 1)                             	 0.000718197	 100       	 2.70121   	 0         	 16.2095   	 0.166644  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 97)                                                                                                        	 0.000511111	 100       	 0         	 0         	 15.1826   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 47)                                                                                                        	 0.000422799	 100       	 0         	 0         	 8.89311   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 97, leftOrthog: 1)                        	 0.000408963	 100       	 118.593   	 0         	 38.2431   	 3.10102   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 47, n: 50, r2: 1)                                                                                                        	 0.000341279	 100       	 0         	 0         	 11.0174   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000336201	 100       	 0.743603  	 0         	 11.8976   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 97, m: 50, fromLeft: 1)                              	 0.000214615	 100       	 0         	 0         	 36.1578   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 17.0199   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 17.0198   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 10.1273   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 6.48695   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 6.48546   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 6.14071   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 5.80399   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 4.84116   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.397489  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.266258  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.143092  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.119911  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0301292 	 1100      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00587367	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00259985	 4600      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00139824	 4600      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.0010616 	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.00104555	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000336201	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23031276066688 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23031091030016 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23030889703552 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23030688377088 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23030487050624 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23030285724160 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23030084397696 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23029883071232 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23029681744768 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23029480418304 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23029279091840 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23029077765376 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23028876438912 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23028675112448 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23028473785984 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23028272459520 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23028071133056 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23027869806592 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23027668480128 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23027467153664 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23027265827200 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23027064500736 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23026863174272 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23026661847808 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23026460521344 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23026259194880 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23026057868416 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23025856541952 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23025655215488 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23025453889024 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23025252562560 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23025051236096 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23024849905536 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23024648579072 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23024447252608 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23024245926144 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23024044599680 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23023843273216 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23023641946752 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23023440620288 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23023239293824 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23023037967360 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23022836640896 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23022635314432 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23022433987968 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23022232661504 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23022031335040 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23021830008576 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23021628682112 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23021427355648 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23021226029184 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23021024702720 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23020823376256 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23020622049792 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23020420723328 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23020219396864 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23020018070400 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23019816743936 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23019615417472 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23019414091008 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23019212764544 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23019011438080 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23018810111616 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23031170406144 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23031163815680 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_TENSORTRAIN_NORMALIZE_PLAIN_QB PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 4900, m: 98)                                                                             	 4.95167   	 600       	 45.7702   	 0         	 0.940388  	 48.6717   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 98, m: 4900)                                                                              	 4.52348   	 700       	 14.4677   	 0         	 1.20097   	 12.0466   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 98)                                                                             	 0.427283  	 100       	 45.2475   	 0         	 0.93559   	 48.3626   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 98, n: 50, r2new: 98)	 0.389028  	 700       	 84.7123   	 0         	 10.5083   	 8.06146   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 98, m: 2500)                                                                              	 0.361417  	 100       	 13.113    	 0         	 1.1061    	 11.8552   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 4900, m: 50)                                                                             	 0.313287  	 100       	 31.3344   	 0         	 1.25776   	 24.9129   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 98, n: 50, r: 98, r2: 98)                           	 0.252375  	 700       	 261.054   	 0         	 21.5236   	 12.1287   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4900, r: 98, r2: 98, leftOrthog: 1)                      	 0.108668  	 600       	 519.669   	 0         	 64.4813   	 8.05921   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 98, r1_: 98, n: 50, r2: 98)                         	 0.0932959 	 600       	 605.294   	 0         	 49.9059   	 12.1287   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 98)                                                                               	 0.054662  	 100       	 3.89057   	 0         	 0.180747  	 21.525    
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 98, n: 50, r2new: 50)	 0.0321158 	 100       	 74.7918   	 0         	 12.2083   	 6.1263    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 48, n: 50, r2: 48)                                                                                                       	 0.0279353 	 800       	 0         	 0         	 52.7848   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 98, r1_: 50, n: 50, r2: 98)                         	 0.017049  	 100       	 281.659   	 0         	 34.259    	 8.22148   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 98, n: 50, r: 98, r2: 50)                           	 0.0150657 	 100       	 318.736   	 0         	 38.7688   	 8.22148   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 98, r2: 98, leftOrthog: 1)                      	 0.0109755 	 100       	 437.521   	 0         	 54.974    	 7.95868   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 98, r1_: 98, n: 50, r2: 50)                         	 0.0099893 	 100       	 480.714   	 0         	 40.0111   	 12.0145   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 98, m: 50)                                                                                	 0.00908027	 100       	 4.47857   	 0         	 1.08807   	 4.11605   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4900, r: 50, r2: 50, leftOrthog: 1)                      	 0.00882035	 100       	 277.767   	 0         	 67.1175   	 4.13851   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 98, m: 98, fromLeft: 1)                              	 0.00575895	 800       	 0         	 0         	 21.3461   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 98) 	 0.00221399	 100       	 43.3787   	 0         	 7.01141   	 6.18687   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 98, r2: 98)                            	 0.00119573	 100       	 80.3189   	 0         	 12.9822   	 6.18687   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 98, n: 50, r2new: 1) 	 0.00112814	 100       	 0.868689  	 0         	 6.95093   	 0.124974  
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000904211	 100       	 0.552968  	 0         	 2.21187   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 98)                           	 0.000840049	 100       	 0         	 0         	 9.33279   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000798856	 100       	 31.2948   	 0         	 7.51074   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 98)                                                                                                        	 0.000519682	 100       	 0         	 0         	 15.0861   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 98, n: 50, r: 2, r2: 1)                             	 0.000494236	 100       	 3.96572   	 0         	 23.7975   	 0.166644  
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 98, leftOrthog: 1)                        	 0.000438578	 100       	 111.725   	 0         	 35.9343   	 3.10914   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 48)                                                                                                        	 0.000394602	 100       	 0         	 0         	 9.73132   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 48, n: 50, r2: 1)                                                                                                        	 0.000334982	 100       	 0         	 0         	 11.4633   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.00033286	 100       	 0.751067  	 0         	 12.0171   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 98, m: 50, fromLeft: 1)                              	 0.00019551	 100       	 0         	 0         	 40.1003   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 16.5984   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 16.5984   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 9.77188   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 6.39849   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 6.39715   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 5.97128   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 5.7469    	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 4.89398   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.424486  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.269131  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.128903  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.121133  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0291846 	 1100      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00595446	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00265315	 4600      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00223522	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000904211	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000840049	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.00033286	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22419307149184 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22419125299200 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22418923972736 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22418722646272 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22418521319808 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22418319993344 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22418118666880 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22417917340416 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22417716013952 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22417514687488 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22417313361024 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22417112034560 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22416910708096 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22416709381632 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22416508055168 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22416306728704 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22416105402240 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22415904075776 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22415702749312 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22415501422848 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22415300096384 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22415098769920 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22414897443456 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22414696116992 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22414494790528 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22414293464064 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22414092137600 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22413890811136 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22413689484672 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22413488158208 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22413286831744 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22413085505280 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22412884174720 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22412682848256 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22412481521792 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22412280195328 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22412078868864 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22411877542400 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22411676215936 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22411474889472 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22411273563008 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22411072236544 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22410870910080 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22410669583616 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22410468257152 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22410266930688 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22410065604224 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22409864277760 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22409662951296 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22409461624832 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22409260298368 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22409058971904 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22408857645440 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22408656318976 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22408454992512 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22408253666048 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22408052339584 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22407851013120 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22407649686656 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22407448360192 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22407247033728 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22407045707264 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22406844380800 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22419201488640 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22419194898176 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_TENSORTRAIN_NORMALIZE_PLAIN_QB PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 4950, m: 99)                                                                             	 5.11736   	 600       	 45.6579   	 0         	 0.928604  	 49.1683   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 99, m: 4950)                                                                              	 4.71189   	 700       	 14.3187   	 0         	 1.1766    	 12.1696   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 99)                                                                             	 0.443565  	 100       	 44.4836   	 0         	 0.910621  	 48.8497   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 99, n: 50, r2new: 99)	 0.394475  	 700       	 86.099    	 0         	 10.5747   	 8.142     
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 99, m: 2500)                                                                              	 0.369626  	 100       	 13.083    	 0         	 1.09278   	 11.9722   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 4950, m: 50)                                                                             	 0.321023  	 100       	 30.8908   	 0         	 1.23991   	 24.9137   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 99, n: 50, r: 99, r2: 99)                           	 0.272923  	 700       	 248.864   	 0         	 20.3114   	 12.2525   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4950, r: 99, r2: 99, leftOrthog: 1)                      	 0.172169  	 600       	 338.144   	 0         	 41.5337   	 8.14145   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 99, r1_: 99, n: 50, r2: 99)                         	 0.0971488 	 600       	 599.266   	 0         	 48.9098   	 12.2525   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 99)                                                                               	 0.0564332 	 100       	 3.80391   	 0         	 0.176492  	 21.5529   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 99, n: 50, r2new: 50)	 0.0325159 	 100       	 75.3631   	 0         	 12.2402   	 6.15704   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 49, n: 50, r2: 49)                                                                                                       	 0.0306154 	 800       	 0         	 0         	 50.1917   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 99, r1_: 50, n: 50, r2: 99)                         	 0.0205772 	 100       	 238.151   	 0         	 28.8668   	 8.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 99, n: 50, r: 99, r2: 50)                           	 0.0169064 	 100       	 289.861   	 0         	 35.1347   	 8.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 99, r1_: 99, n: 50, r2: 50)                         	 0.0112112 	 100       	 437.106   	 0         	 36.021    	 12.1347   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 99, r2: 99, leftOrthog: 1)                      	 0.0100653 	 100       	 486.87    	 0         	 60.5725   	 8.0378    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 99, m: 50)                                                                                	 0.00944797	 100       	 4.35719   	 0         	 1.05419   	 4.13319   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4950, r: 50, r2: 50, leftOrthog: 1)                      	 0.00805468	 100       	 307.275   	 0         	 74.2425   	 4.1388    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 99, m: 99, fromLeft: 1)                              	 0.00607236	 800       	 0         	 0         	 20.6597   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 99) 	 0.00233344	 100       	 42.0023   	 0         	 6.75431   	 6.21859   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 99, r2: 99)                            	 0.00129501	 100       	 75.6828   	 0         	 12.1704   	 6.21859   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 99, n: 50, r2new: 1) 	 0.0012827 	 100       	 0.77181   	 0         	 6.17573   	 0.124975  
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000937446	 100       	 0.533364  	 0         	 2.13346   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 99)                           	 0.000884016	 100       	 0         	 0         	 8.95911   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000864912	 100       	 28.9047   	 0         	 6.93712   	 4.16667   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 99, n: 50, r: 2, r2: 1)                             	 0.000638324	 100       	 3.10187   	 0         	 18.6137   	 0.166644  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 99)                                                                                                        	 0.000500794	 100       	 0         	 0         	 15.8149   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 49)                                                                                                        	 0.000457554	 100       	 0         	 0         	 8.56729   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 99, leftOrthog: 1)                        	 0.000374185	 100       	 132.288   	 0         	 42.4389   	 3.11713   
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000338169	 100       	 0.739275  	 0         	 11.8284   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 49, n: 50, r2: 1)                                                                                                        	 0.000336821	 100       	 0         	 0         	 11.6382   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 99, m: 50, fromLeft: 1)                              	 0.000216497	 100       	 0         	 0         	 36.5825   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 16.8742   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 16.8742   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 9.87012   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 6.56817   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 6.5668    	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 6.2422    	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 5.93838   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 5.09096   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.430607  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.291763  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.190663  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.129802  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0319106 	 1100      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00628885	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00249267	 4600      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00161562	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000937446	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000884016	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000338169	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22861552056192 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22861372712960 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22861171386496 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22860970060032 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22860768733568 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22860567407104 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22860366080640 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22860164754176 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22859963427712 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22859762101248 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22859560774784 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22859359448320 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22859158121856 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22858956795392 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22858755468928 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22858554142464 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22858352816000 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22858151489536 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22857950163072 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22857748836608 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22857547510144 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22857346183680 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22857144857216 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22856943530752 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22856742204288 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22856540877824 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22856339551360 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22856138224896 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22855936898432 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22855735571968 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22855534245504 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22855332919040 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22855131588480 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22854930262016 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22854728935552 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22854527609088 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22854326282624 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22854124956160 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22853923629696 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22853722303232 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22853520976768 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22853319650304 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22853118323840 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22852916997376 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22852715670912 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22852514344448 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22852313017984 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22852111691520 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22851910365056 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22851709038592 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22851507712128 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22851306385664 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22851105059200 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22850903732736 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22850702406272 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22850501079808 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22850299753344 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22850098426880 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22849897100416 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22849695773952 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22849494447488 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22849293121024 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22849091794560 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22861446395648 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22861267719936 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_TENSORTRAIN_NORMALIZE_PLAIN_QB PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 100, m: 5000)                                                                               	 4.80457   	 700       	 14.4723   	 0         	 1.17733   	 12.2925   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 5000, m: 100)                                                                              	 4.41589   	 600       	 54.5303   	 0         	 1.09796   	 49.665    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 100)                                                                              	 0.443798  	 100       	 45.3659   	 0         	 0.919517  	 49.3367   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 100, n: 50, r2new: 100)	 0.400438  	 700       	 87.4043   	 0         	 10.6284   	 8.22368   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 100, m: 2500)                                                                               	 0.361044  	 100       	 13.6641   	 0         	 1.13028   	 12.0891   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 5000, m: 50)                                                                               	 0.298125  	 100       	 33.5988   	 0         	 1.34856   	 24.9146   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 100, n: 50, r: 100, r2: 100)                          	 0.289672  	 700       	 241.653   	 0         	 19.5255   	 12.3762   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5000, r: 100, r2: 100, leftOrthog: 1)                      	 0.146375  	 600       	 409.907   	 0         	 49.8447   	 8.22368   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 100, r1_: 100, n: 50, r2: 100)                        	 0.0939981 	 600       	 638.311   	 0         	 51.5755   	 12.3762   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 100)                                                                                	 0.0551942 	 100       	 3.92553   	 0         	 0.181903  	 21.5803   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 100, n: 50, r2new: 50) 	 0.0337362 	 100       	 74.1043   	 0         	 11.9753   	 6.18812   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 50)                                                                                                         	 0.0297289 	 800       	 0         	 0         	 53.8196   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 100, r1_: 50, n: 50, r2: 100)                         	 0.0230894 	 100       	 216.549   	 0         	 26.1591   	 8.27815   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 100, n: 50, r: 100, r2: 50)                           	 0.0171101 	 100       	 292.225   	 0         	 35.3007   	 8.27815   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 100, r1_: 100, n: 50, r2: 50)                         	 0.0110758 	 100       	 451.436   	 0         	 36.8372   	 12.2549   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5000, r: 50, r2: 50, leftOrthog: 1)                        	 0.0103514 	 100       	 241.513   	 0         	 58.3496   	 4.13907   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 100, r2: 100, leftOrthog: 1)                      	 0.00954855	 100       	 523.64    	 0         	 64.5124   	 8.11688   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 100, m: 50)                                                                                 	 0.00909393	 100       	 4.5818    	 0         	 1.10403   	 4.15006   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 100, m: 100, fromLeft: 1)                              	 0.00613636	 800       	 0         	 0         	 20.8593   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 100)  	 0.00229311	 100       	 43.609    	 0         	 6.97743   	 6.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 100, n: 50, r2new: 1)  	 0.00128145	 100       	 0.780367  	 0         	 6.24419   	 0.124975  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 100, r2: 100)                            	 0.00125501	 100       	 79.6809   	 0         	 12.7489   	 6.25      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000937417	 100       	 0.533381  	 0         	 2.13352   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 100)                            	 0.000862437	 100       	 0         	 0         	 9.27604   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000782237	 100       	 31.9596   	 0         	 7.67031   	 4.16667   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 100, n: 50, r: 2, r2: 1)                              	 0.000659669	 100       	 3.03182   	 0         	 18.1934   	 0.166644  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 100)                                                                                                         	 0.000495197	 100       	 0         	 0         	 16.1552   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 100, leftOrthog: 1)                         	 0.000471717	 100       	 105.996   	 0         	 33.9186   	 3.125     
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                                          	 0.000469367	 100       	 0         	 0         	 8.52212   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000349914	 100       	 0.714461  	 0         	 11.4314   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                          	 0.000338782	 100       	 0         	 0         	 11.807    	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 100, m: 50, fromLeft: 1)                               	 0.000195483	 100       	 0         	 0         	 40.9243   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 15.2806   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 15.2806   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 9.30133   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 5.53834   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 5.53697   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 5.3844    	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 5.21301   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 5.17471   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.437749  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.308697  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.166746  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.128946  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0310323 	 1100      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00633185	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00228584	 4600      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00228436	 4400      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000937417	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000862437	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000349914	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23251782301568 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23251543648256 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23251342321792 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23251140995328 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23250939668864 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23250738342400 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23250537015936 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23250335689472 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23250134363008 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23249933036544 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23249731710080 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23249530383616 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23249329057152 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23249127730688 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23248926404224 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23248725077760 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23248523751296 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23248322424832 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23248121098368 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23247919771904 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23247718445440 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23247517118976 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23247315792512 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23247114466048 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23246913139584 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23246711813120 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23246510486656 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23246309160192 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23246107833728 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23245906507264 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23245705180800 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23245503854336 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23245302523776 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23245101197312 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23244899870848 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23244698544384 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23244497217920 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23244295891456 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23244094564992 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23243893238528 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23243691912064 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23243490585600 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23243289259136 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23243087932672 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23242886606208 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23242685279744 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23242483953280 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23242282626816 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23242081300352 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23241879973888 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23241678647424 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23241477320960 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23241275994496 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23241074668032 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23240873341568 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23240672015104 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23240470688640 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23240269362176 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23240068035712 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23239866709248 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23239665382784 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23239464056320 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23239262729856 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23251676641024 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23251670050560 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_TENSORTRAIN_NORMALIZE_PLAIN_QB PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 5050, m: 101)                                                                              	 5.04451   	 600       	 49.1814   	 0         	 0.980457  	 50.1617   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 101, m: 5050)                                                                               	 4.94806   	 700       	 14.4785   	 0         	 1.16616   	 12.4154   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 101, n: 50, r2new: 101)	 0.447414  	 700       	 80.6056   	 0         	 9.70395   	 8.30647   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 101)                                                                              	 0.441086  	 100       	 46.5654   	 0         	 0.934606  	 49.8236   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 101, m: 2500)                                                                               	 0.371103  	 100       	 13.5591   	 0         	 1.11085   	 12.206    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 5050, m: 50)                                                                               	 0.320465  	 100       	 31.5688   	 0         	 1.26704   	 24.9154   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5050, r: 101, r2: 101, leftOrthog: 1)                      	 0.299459  	 600       	 206.433   	 0         	 24.8537   	 8.30592   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 101, n: 50, r: 101, r2: 101)                          	 0.281125  	 700       	 256.544   	 0         	 20.5235   	 12.5      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 101, r1_: 101, n: 50, r2: 101)                        	 0.0906683 	 600       	 681.804   	 0         	 54.5443   	 12.5      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 101)                                                                                	 0.0543601 	 100       	 4.02256   	 0         	 0.186166  	 21.6074   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 51, n: 50, r2: 51)                                                                                                         	 0.0366635 	 800       	 0         	 0         	 45.4032   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 101, n: 50, r2new: 50) 	 0.0336255 	 100       	 75.8501   	 0         	 12.1955   	 6.21952   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 101, r1_: 50, n: 50, r2: 101)                         	 0.0217228 	 100       	 234.799   	 0         	 28.2689   	 8.30592   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 101, n: 50, r: 101, r2: 50)                           	 0.0174654 	 100       	 292.035   	 0         	 35.1599   	 8.30592   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 101, r2: 101, leftOrthog: 1)                      	 0.0114989 	 100       	 443.564   	 0         	 54.1201   	 8.19592   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5050, r: 50, r2: 50, leftOrthog: 1)                        	 0.0112621 	 100       	 224.203   	 0         	 54.1638   	 4.13934   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 101, r1_: 101, n: 50, r2: 50)                         	 0.010969  	 100       	 464.991   	 0         	 37.5749   	 12.375    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 101, m: 50)                                                                                 	 0.00940578	 100       	 4.48305   	 0         	 1.07593   	 4.16666   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 101, m: 101, fromLeft: 1)                              	 0.00623427	 800       	 0         	 0         	 20.9444   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 101)  	 0.00238629	 100       	 42.7484   	 0         	 6.80589   	 6.28109   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 101, r2: 101)                            	 0.00133892	 100       	 76.188    	 0         	 12.1297   	 6.28109   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 101, n: 50, r2new: 1)  	 0.00113107	 100       	 0.892961  	 0         	 7.1451    	 0.124975  
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000890092	 100       	 0.56174   	 0         	 2.24696   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 101)                            	 0.00086491	 100       	 0         	 0         	 9.34201   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000815505	 100       	 30.6559   	 0         	 7.3574    	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 101)                                                                                                         	 0.000501756	 100       	 0         	 0         	 16.1034   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 101, leftOrthog: 1)                         	 0.000464889	 100       	 108.628   	 0         	 34.6749   	 3.13275   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 101, n: 50, r: 2, r2: 1)                              	 0.000451275	 100       	 4.47621   	 0         	 26.8608   	 0.166645  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 51)                                                                                                          	 0.000410216	 100       	 0         	 0         	 9.94598   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000357589	 100       	 0.699127  	 0         	 11.186    	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 51, n: 50, r2: 1)                                                                                                          	 0.000332682	 100       	 0         	 0         	 12.264    	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 101, m: 50, fromLeft: 1)                               	 0.000225056	 100       	 0         	 0         	 35.9022   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 16.8472   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 16.8471   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 9.83974   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 6.50729   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 6.50594   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 6.25109   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 5.86042   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 5.32857   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.484557  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.322685  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.300381  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.124176  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0379082 	 1100      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00645932	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00270385	 4600      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00264159	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000890092	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.00086491	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000357589	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23184042977152 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23183830804480 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23183629478016 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23183428151552 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23183226825088 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23183025498624 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23182824172160 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23182622845696 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23182421519232 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23182220192768 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23182018866304 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23181817539840 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23181616213376 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23181414886912 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23181213560448 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23181012233984 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23180810907520 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23180609581056 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23180408254592 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23180206928128 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23180005601664 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23179804275200 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23179602948736 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23179401622272 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23179200295808 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23178998969344 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23178797642880 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23178596316416 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23178394989952 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23178193663488 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23177992337024 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23177791010560 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23177589680000 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23177388353536 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23177187027072 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23176985700608 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23176784374144 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23176583047680 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23176381721216 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23176180394752 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23175979068288 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23175777741824 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23175576415360 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23175375088896 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23175173762432 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23174972435968 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23174771109504 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23174569783040 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23174368456576 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23174167130112 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23173965803648 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23173764477184 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23173563150720 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23173361824256 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23173160497792 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23172959171328 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23172757844864 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23172556518400 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23172355191936 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23172153865472 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23171952539008 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23171751212544 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23171549886080 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23183937316608 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23183930726144 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_TENSORTRAIN_NORMALIZE_PLAIN_QB PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 102, m: 5100)                                                                               	 5.00091   	 700       	 14.7552   	 0         	 1.1768    	 12.5384   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 5100, m: 102)                                                                              	 4.61582   	 600       	 55.3616   	 0         	 1.09284   	 50.6584   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 102)                                                                              	 0.449228  	 100       	 46.6345   	 0         	 0.926935  	 50.3104   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 102, n: 50, r2new: 102)	 0.424558  	 700       	 87.5183   	 0         	 10.4309   	 8.39032   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 102, m: 2500)                                                                               	 0.364637  	 100       	 14.0722   	 0         	 1.14197   	 12.3228   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 5100, m: 50)                                                                               	 0.306209  	 100       	 33.3651   	 0         	 1.33909   	 24.9163   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 102, n: 50, r: 102, r2: 102)                          	 0.298728  	 700       	 248.67    	 0         	 19.6985   	 12.6238   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5100, r: 102, r2: 102, leftOrthog: 1)                      	 0.184161  	 600       	 345.743   	 0         	 41.218    	 8.38816   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 102, r1_: 102, n: 50, r2: 102)                        	 0.0973954 	 600       	 653.752   	 0         	 51.7874   	 12.6238   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 102)                                                                                	 0.0573648 	 100       	 3.84673   	 0         	 0.17781   	 21.634    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 52, n: 50, r2: 52)                                                                                                         	 0.0366766 	 800       	 0         	 0         	 47.1843   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 102, n: 50, r2new: 50) 	 0.0344256 	 100       	 75.5834   	 0         	 12.091    	 6.2512    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 102, r1_: 50, n: 50, r2: 102)                         	 0.0201893 	 100       	 257.662   	 0         	 30.9194   	 8.33333   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 102, n: 50, r: 102, r2: 50)                           	 0.0175601 	 100       	 296.24    	 0         	 35.5488   	 8.33333   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 102, r1_: 102, n: 50, r2: 50)                         	 0.0110016 	 100       	 472.839   	 0         	 37.8419   	 12.4951   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 102, r2: 102, leftOrthog: 1)                      	 0.009791  	 100       	 531.304   	 0         	 64.2066   	 8.27492   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 102, m: 50)                                                                                 	 0.00951659	 100       	 4.48339   	 0         	 1.07181   	 4.183     
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5100, r: 50, r2: 50, leftOrthog: 1)                        	 0.00911649	 100       	 279.713   	 0         	 67.5698   	 4.13961   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 102, m: 102, fromLeft: 1)                              	 0.00710636	 800       	 0         	 0         	 18.7397   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 102)  	 0.00279662	 100       	 37.202    	 0         	 5.89397   	 6.31188   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 102, r2: 102)                            	 0.00167957	 100       	 61.9444   	 0         	 9.81393   	 6.31188   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 102, n: 50, r2new: 1)  	 0.00114974	 100       	 0.887156  	 0         	 7.09864   	 0.124975  
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 102)                            	 0.000935735	 100       	 0         	 0         	 8.72042   	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000899757	 100       	 0.555706  	 0         	 2.22282   	 0.25      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 102, leftOrthog: 1)                         	 0.000782634	 100       	 65.1646   	 0         	 20.7504   	 3.14039   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000765525	 100       	 32.6573   	 0         	 7.83776   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 102)                                                                                                         	 0.000495164	 100       	 0         	 0         	 16.4794   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 102, n: 50, r: 2, r2: 1)                              	 0.000448227	 100       	 4.55127   	 0         	 27.3112   	 0.166645  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 52)                                                                                                          	 0.000413415	 100       	 0         	 0         	 10.0625   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 52, n: 50, r2: 1)                                                                                                          	 0.000346151	 100       	 0         	 0         	 12.0179   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000336829	 100       	 0.742216  	 0         	 11.8755   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 102, m: 50, fromLeft: 1)                               	 0.000239758	 100       	 0         	 0         	 34.0343   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 16.0628   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 16.0627   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 9.78986   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 5.80432   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 5.80299   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 5.63446   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 5.42862   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 5.37506   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.46293   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.318416  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.203852  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.129352  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0379313 	 1100      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00734612	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.0026257 	 4600      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00227853	 4600      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000935735	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000899757	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000336829	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23366266877824 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23366031370240 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23365830043776 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23365628717312 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23365427390848 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23365226064384 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23365024737920 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23364823411456 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23364622084992 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23364420758528 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23364219432064 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23364018105600 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23363816779136 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23363615452672 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23363414126208 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23363212799744 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23363011473280 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23362810146816 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23362608820352 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23362407493888 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23362206167424 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23362004840960 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23361803514496 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23361602188032 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23361400861568 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23361199535104 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23360998208640 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23360796882176 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23360595555712 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23360394229248 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23360192902784 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23359991576320 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23359790245760 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23359588919296 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23359387592832 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23359186266368 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23358984939904 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23358783613440 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23358582286976 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23358380960512 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23358179634048 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23357978307584 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23357776981120 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23357575654656 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23357374328192 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23357173001728 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23356971675264 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23356770348800 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23356569022336 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23356367695872 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23356166369408 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23355965042944 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23355763716480 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23355562390016 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23355361063552 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23355159737088 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23354958410624 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23354757084160 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23354555757696 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23354354431232 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23354153104768 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23353951778304 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23353750451840 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23366161217280 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23366154626816 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_TENSORTRAIN_NORMALIZE_PLAIN_QB PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 5150, m: 103)                                                                              	 5.96779   	 600       	 44.0915   	 0         	 0.861917  	 51.1551   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 103, m: 5150)                                                                               	 5.17803   	 700       	 14.6737   	 0         	 1.15894   	 12.6613   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 103)                                                                              	 0.53773   	 100       	 39.7294   	 0         	 0.78212   	 50.7971   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 103, n: 50, r2new: 103)	 0.42881   	 700       	 89.2654   	 0         	 10.5325   	 8.47522   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 103, m: 2500)                                                                               	 0.382871  	 100       	 13.6643   	 0         	 1.09846   	 12.4394   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 5150, m: 50)                                                                               	 0.329611  	 100       	 31.2995   	 0         	 1.25615   	 24.9171   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 103, n: 50, r: 103, r2: 103)                          	 0.292836  	 700       	 261.207   	 0         	 20.4908   	 12.7475   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5150, r: 103, r2: 103, leftOrthog: 1)                      	 0.140395  	 600       	 466.994   	 0         	 55.1325   	 8.47039   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 103, r1_: 103, n: 50, r2: 103)                        	 0.0970849 	 600       	 675.323   	 0         	 52.9768   	 12.7475   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 103)                                                                                	 0.0584203 	 100       	 3.81146   	 0         	 0.175966  	 21.6602   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 53, n: 50, r2: 53)                                                                                                         	 0.0383189 	 800       	 0         	 0         	 46.9157   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 103, n: 50, r2new: 50) 	 0.034088  	 100       	 77.872    	 0         	 12.3938   	 6.28314   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 103, r1_: 50, n: 50, r2: 103)                         	 0.0203388 	 100       	 260.807   	 0         	 31.1956   	 8.36039   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 103, n: 50, r: 103, r2: 50)                           	 0.0169894 	 100       	 312.223   	 0         	 37.3455   	 8.36039   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5150, r: 50, r2: 50, leftOrthog: 1)                        	 0.0115352 	 100       	 223.23    	 0         	 53.9221   	 4.13987   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 103, r2: 103, leftOrthog: 1)                      	 0.0114978 	 100       	 461.351   	 0         	 55.226    	 8.35388   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 103, r1_: 103, n: 50, r2: 50)                         	 0.0111108 	 100       	 477.42    	 0         	 37.845    	 12.6151   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 103, m: 50)                                                                                 	 0.00957404	 100       	 4.50871   	 0         	 1.07374   	 4.19909   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 103, m: 103, fromLeft: 1)                              	 0.00685404	 800       	 0         	 0         	 19.8124   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 103)  	 0.00250946	 100       	 42.2761   	 0         	 6.66567   	 6.34236   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 103, n: 50, r2new: 1)  	 0.00147501	 100       	 0.6983    	 0         	 5.58749   	 0.124976  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 103, r2: 103)                            	 0.00139535	 100       	 76.0312   	 0         	 11.9878   	 6.34236   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 103)                            	 0.000927145	 100       	 0         	 0         	 8.8875    	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 103, leftOrthog: 1)                         	 0.000906052	 100       	 56.84     	 0         	 18.0564   	 3.14792   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000891604	 100       	 0.560787  	 0         	 2.24315   	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.00082542	 100       	 30.2876   	 0         	 7.26903   	 4.16667   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 103, n: 50, r: 2, r2: 1)                              	 0.000751672	 100       	 2.74056   	 0         	 16.4455   	 0.166645  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 103)                                                                                                         	 0.000534779	 100       	 0         	 0         	 15.4082   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 53)                                                                                                          	 0.000434787	 100       	 0         	 0         	 9.7519    	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 53, n: 50, r2: 1)                                                                                                          	 0.000366228	 100       	 0         	 0         	 11.5775   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000347039	 100       	 0.72038   	 0         	 11.5261   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 103, m: 50, fromLeft: 1)                               	 0.000281546	 100       	 0         	 0         	 29.267    	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 18.636    	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 18.6359   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 10.5945   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 7.5621    	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 7.56075   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 7.29158   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 6.89355   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 5.57048   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.466882  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.311972  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.164334  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.12936   	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0396547 	 1100      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00713558	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00243133	 4600      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00226484	 4600      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000927145	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000891604	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000347039	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23058476132224 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23058270119936 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23058068793472 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23057867467008 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23057666140544 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23057464814080 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23057263487616 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23057062161152 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23056860834688 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23056659508224 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23056458181760 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23056256855296 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23056055528832 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23055854202368 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23055652875904 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23055451549440 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23055250222976 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23055048896512 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23054847570048 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23054646243584 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23054444917120 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23054243590656 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23054042264192 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23053840937728 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23053639611264 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23053438284800 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23053236958336 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23053035631872 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23052834305408 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23052632978944 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23052431652480 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23052230326016 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23052028995456 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23051827668992 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23051626342528 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23051425016064 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23051223689600 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23051022363136 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23050821036672 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23050619710208 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23050418383744 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23050217057280 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23050015730816 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23049814404352 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23049613077888 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23049411751424 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23049210424960 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23049009098496 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23048807772032 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23048606445568 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23048405119104 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23048203792640 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23048002466176 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23047801139712 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23047599813248 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23047398486784 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23047197160320 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23046995833856 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23046794507392 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23046593180928 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23046391854464 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23046190528000 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23045989201536 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23058370471680 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23058363881216 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_TENSORTRAIN_NORMALIZE_PLAIN_QB PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 104, m: 5200)                                                                               	 5.20292   	 700       	 15.033    	 0         	 1.1759    	 12.7843   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 5200, m: 104)                                                                              	 4.75924   	 600       	 56.9139   	 0         	 1.10188   	 51.6518   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 104)                                                                              	 0.529344  	 100       	 41.149    	 0         	 0.802382  	 51.2836   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 104, n: 50, r2new: 104)	 0.432878  	 700       	 91.0846   	 0         	 10.6393   	 8.56112   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 104, m: 2500)                                                                               	 0.373781  	 100       	 14.2678   	 0         	 1.13632   	 12.5561   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 5200, m: 50)                                                                               	 0.315644  	 100       	 33.0013   	 0         	 1.3244    	 24.9179   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 104, n: 50, r: 104, r2: 104)                          	 0.310295  	 700       	 253.76    	 0         	 19.7152   	 12.8713   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5200, r: 104, r2: 104, leftOrthog: 1)                      	 0.168698  	 600       	 400.075   	 0         	 46.778    	 8.55263   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 104, r1_: 104, n: 50, r2: 104)                        	 0.0971167 	 600       	 694.956   	 0         	 53.9927   	 12.8713   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 104)                                                                                	 0.0571028 	 100       	 3.93443   	 0         	 0.181427  	 21.686    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 54, n: 50, r2: 54)                                                                                                         	 0.0384357 	 800       	 0         	 0         	 48.5549   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 104, n: 50, r2new: 50) 	 0.0375794 	 100       	 72.0608   	 0         	 11.4105   	 6.3153    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 104, r1_: 50, n: 50, r2: 104)                         	 0.0208089 	 100       	 259.889   	 0         	 30.9868   	 8.3871    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 104, n: 50, r: 104, r2: 50)                           	 0.0189159 	 100       	 285.897   	 0         	 34.0877   	 8.3871    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 104, r2: 104, leftOrthog: 1)                      	 0.0110368 	 100       	 489.999   	 0         	 58.1064   	 8.4328    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 104, r1_: 104, n: 50, r2: 50)                         	 0.0108985 	 100       	 496.216   	 0         	 38.9644   	 12.7351   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 104, m: 50)                                                                                 	 0.00945247	 100       	 4.6196    	 0         	 1.09601   	 4.21492   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5200, r: 50, r2: 50, leftOrthog: 1)                        	 0.00864982	 100       	 300.584   	 0         	 72.6027   	 4.14013   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 104, m: 104, fromLeft: 1)                              	 0.00650047	 800       	 0         	 0         	 21.2977   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 104)  	 0.00235071	 100       	 46.0117   	 0         	 7.2203    	 6.37255   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 104, r2: 104)                            	 0.00129246	 100       	 83.6852   	 0         	 13.1321   	 6.37255   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 104, n: 50, r2new: 1)  	 0.00112058	 100       	 0.928087  	 0         	 7.42613   	 0.124976  
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000886526	 100       	 0.563999  	 0         	 2.256     	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 104)                            	 0.00087391	 100       	 0         	 0         	 9.52043   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000775627	 100       	 32.232    	 0         	 7.73568   	 4.16667   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 104, leftOrthog: 1)                         	 0.00058064	 100       	 89.5564   	 0         	 28.3825   	 3.15534   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 104)                                                                                                         	 0.000487565	 100       	 0         	 0         	 17.0644   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 54)                                                                                                          	 0.000449496	 100       	 0         	 0         	 9.61076   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 104, n: 50, r: 2, r2: 1)                              	 0.000444196	 100       	 4.68262   	 0         	 28.0993   	 0.166645  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 54, n: 50, r2: 1)                                                                                                          	 0.000368312	 100       	 0         	 0         	 11.7292   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000331952	 100       	 0.753121  	 0         	 12.0499   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 104, m: 50, fromLeft: 1)                               	 0.000226477	 100       	 0         	 0         	 36.7366   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 16.3516   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 16.3516   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 9.84969   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 6.02073   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 6.01939   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 5.8523    	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 5.66133   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 5.58615   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.473928  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.330948  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.188965  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.1296    	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0397411 	 1100      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00672695	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00248295	 4600      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00226754	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000886526	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.00087391	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000331952	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22936349284224 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22936131987456 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22935930660992 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22935729334528 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22935528008064 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22935326681600 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22935125355136 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22934924028672 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22934722702208 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22934521375744 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22934320049280 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22934118722816 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22933917396352 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22933716069888 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22933514743424 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22933313416960 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22933112090496 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22932910764032 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22932709437568 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22932508111104 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22932306784640 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22932105458176 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22931904131712 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22931702805248 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22931501478784 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22931300152320 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22931098825856 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22930897499392 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22930696172928 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22930494846464 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22930293520000 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22930092193536 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22929890862976 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22929689536512 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22929488210048 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22929286883584 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22929085557120 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22928884230656 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22928682904192 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22928481577728 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22928280251264 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22928078924800 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22927877598336 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22927676271872 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22927474945408 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22927273618944 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22927072292480 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22926870966016 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22926669639552 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22926468313088 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22926266986624 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22926065660160 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22925864333696 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22925663007232 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22925461680768 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22925260354304 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22925059027840 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22924857701376 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22924656374912 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22924455048448 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22924253721984 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22924052395520 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22923851069056 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22936243623680 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22936237033216 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_TENSORTRAIN_NORMALIZE_PLAIN_QB PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 5250, m: 105)                                                                              	 6.13712   	 600       	 45.4214   	 0         	 0.870999  	 52.1485   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 105, m: 5250)                                                                               	 5.32766   	 700       	 15.1086   	 0         	 1.17056   	 12.9072   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 105)                                                                              	 0.549299  	 100       	 40.423    	 0         	 0.78082   	 51.77     
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 105, n: 50, r2new: 105)	 0.463564  	 700       	 87.6011   	 0         	 10.1296   	 8.648     
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 105, m: 2500)                                                                               	 0.402142  	 100       	 13.5159   	 0         	 1.06655   	 12.6726   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 5250, m: 50)                                                                               	 0.338014  	 100       	 31.1131   	 0         	 1.24859   	 24.9186   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 105, n: 50, r: 105, r2: 105)                          	 0.306439  	 700       	 264.436   	 0         	 20.349    	 12.995    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5250, r: 105, r2: 105, leftOrthog: 1)                      	 0.219811  	 600       	 315.987   	 0         	 36.5943   	 8.63487   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 105, r1_: 105, n: 50, r2: 105)                        	 0.0962619 	 600       	 721.547   	 0         	 55.5248   	 12.995    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 105)                                                                                	 0.0586544 	 100       	 3.86444   	 0         	 0.177992  	 21.7114   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 55, n: 50, r2: 55)                                                                                                         	 0.0437636 	 800       	 0         	 0         	 44.2377   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 105, n: 50, r2new: 50) 	 0.0430658 	 100       	 64.1461   	 0         	 10.1055   	 6.34766   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 105, r1_: 50, n: 50, r2: 105)                         	 0.0234011 	 100       	 235.566   	 0         	 27.9986   	 8.41346   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 105, n: 50, r: 105, r2: 50)                           	 0.0169934 	 100       	 324.39    	 0         	 38.5561   	 8.41346   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 105, r2: 105, leftOrthog: 1)                      	 0.0164909 	 100       	 334.275   	 0         	 39.2725   	 8.51167   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5250, r: 50, r2: 50, leftOrthog: 1)                        	 0.011983  	 100       	 219.061   	 0         	 52.9085   	 4.14038   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 105, r1_: 105, n: 50, r2: 50)                         	 0.011614  	 100       	 474.641   	 0         	 36.9226   	 12.855    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 105, m: 50)                                                                                 	 0.0102961 	 100       	 4.28966   	 0         	 1.01398   	 4.23052   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 105, m: 105, fromLeft: 1)                              	 0.00685731	 800       	 0         	 0         	 20.5795   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 105)  	 0.00241263	 100       	 45.6969   	 0         	 7.13742   	 6.40244   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 105, r2: 105)                            	 0.00133563	 100       	 82.5453   	 0         	 12.8928   	 6.40244   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 105, n: 50, r2new: 1)  	 0.001153  	 100       	 0.910672  	 0         	 7.28676   	 0.124976  
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000913427	 100       	 0.547389  	 0         	 2.18956   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 105)                            	 0.000884946	 100       	 0         	 0         	 9.4921    	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000824478	 100       	 30.3222   	 0         	 7.27733   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 105)                                                                                                         	 0.000529045	 100       	 0         	 0         	 15.8777   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 105, n: 50, r: 2, r2: 1)                              	 0.000493905	 100       	 4.25183   	 0         	 25.5142   	 0.166646  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 55)                                                                                                          	 0.000428456	 100       	 0         	 0         	 10.2694   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 105, leftOrthog: 1)                         	 0.00037918	 100       	 138.457   	 0         	 43.7787   	 3.16265   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 55, n: 50, r2: 1)                                                                                                          	 0.000356591	 100       	 0         	 0         	 12.3391   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000346679	 100       	 0.721128  	 0         	 11.5381   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 105, m: 50, fromLeft: 1)                               	 0.000248386	 100       	 0         	 0         	 33.8183   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 19.1046   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 19.1045   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 10.7457   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 7.83405   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 7.83267   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 7.56611   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 7.08308   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 5.74009   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.510196  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.325262  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.248665  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.132102  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0450777 	 1100      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0071057 	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00268403	 4600      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00258869	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000913427	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000884946	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000346679	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22576179943296 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22575958714368 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22575757387904 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22575556061440 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22575354734976 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22575153408512 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22574952082048 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22574750755584 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22574549429120 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22574348102656 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22574146776192 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22573945449728 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22573744123264 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22573542796800 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22573341470336 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22573140143872 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22572938817408 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22572737490944 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22572536164480 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22572334838016 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22572133511552 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22571932185088 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22571730858624 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22571529532160 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22571328205696 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22571126879232 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22570925552768 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22570724226304 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22570522899840 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22570321573376 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22570120246912 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22569918920448 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22569717589888 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22569516263424 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22569314936960 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22569113610496 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22568912284032 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22568710957568 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22568509631104 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22568308304640 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22568106978176 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22567905651712 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22567704325248 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22567502998784 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22567301672320 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22567100345856 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22566899019392 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22566697692928 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22566496366464 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22566295040000 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22566093713536 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22565892387072 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22565691060608 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22565489734144 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22565288407680 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22565087081216 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22564885754752 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22564684428288 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22564483101824 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22564281775360 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22564080448896 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22563879122432 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22563677795968 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22576074282752 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22576067692288 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_TENSORTRAIN_NORMALIZE_PLAIN_QB PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 5300, m: 106)                                                                              	 5.99444   	 600       	 47.8438   	 0         	 0.908796  	 52.6452   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 106, m: 5300)                                                                               	 5.31801   	 700       	 15.5726   	 0         	 1.19512   	 13.0301   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 106)                                                                              	 0.566641  	 100       	 39.9385   	 0         	 0.764282  	 52.2562   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 106, n: 50, r2new: 106)	 0.467279  	 700       	 89.4949   	 0         	 10.2446   	 8.73583   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 106, m: 2500)                                                                               	 0.39275   	 100       	 14.1021   	 0         	 1.10267   	 12.789    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 5300, m: 50)                                                                               	 0.335821  	 100       	 31.614    	 0         	 1.26865   	 24.9194   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 106, n: 50, r: 106, r2: 106)                          	 0.305266  	 700       	 273.109   	 0         	 20.8182   	 13.1188   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5300, r: 106, r2: 106, leftOrthog: 1)                      	 0.272803  	 600       	 261.95    	 0         	 30.0502   	 8.71711   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 106, r1_: 106, n: 50, r2: 106)                        	 0.0972931 	 600       	 734.491   	 0         	 55.9876   	 13.1188   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 106)                                                                                	 0.0566699 	 100       	 4.03507   	 0         	 0.185637  	 21.7364   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 106, n: 50, r2new: 50) 	 0.0510619 	 100       	 55.1879   	 0         	 8.64989   	 6.38018   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 56, n: 50, r2: 56)                                                                                                         	 0.0411643 	 800       	 0         	 0         	 48.7568   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 106, r1_: 50, n: 50, r2: 106)                         	 0.022426  	 100       	 250.513   	 0         	 29.6834   	 8.43949   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 106, n: 50, r: 106, r2: 50)                           	 0.0190413 	 100       	 295.044   	 0         	 34.9599   	 8.43949   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 106, r2: 106, leftOrthog: 1)                      	 0.0116272 	 100       	 483.177   	 0         	 56.2455   	 8.59051   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 106, r1_: 106, n: 50, r2: 50)                         	 0.0112847 	 100       	 497.842   	 0         	 38.3695   	 12.9749   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 106, m: 50)                                                                                 	 0.0102223 	 100       	 4.36955   	 0         	 1.02913   	 4.24587   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5300, r: 50, r2: 50, leftOrthog: 1)                        	 0.0100484 	 100       	 263.724   	 0         	 63.6919   	 4.14062   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 106, m: 106, fromLeft: 1)                              	 0.0073693 	 800       	 0         	 0         	 19.5162   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 106)  	 0.00238193	 100       	 47.1719   	 0         	 7.33389   	 6.43204   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 106, r2: 106)                            	 0.00131526	 100       	 85.4279   	 0         	 13.2816   	 6.43204   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 106, n: 50, r2new: 1)  	 0.00119927	 100       	 0.883872  	 0         	 7.07231   	 0.124976  
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000985906	 100       	 0.507148  	 0         	 2.02859   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 106)                            	 0.00088519	 100       	 0         	 0         	 9.57986   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000865498	 100       	 28.8851   	 0         	 6.93243   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 106)                                                                                                         	 0.000517171	 100       	 0         	 0         	 16.3969   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 106, n: 50, r: 2, r2: 1)                              	 0.000472686	 100       	 4.48501   	 0         	 26.9134   	 0.166646  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 56)                                                                                                          	 0.000457696	 100       	 0         	 0         	 9.78816   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 106, leftOrthog: 1)                         	 0.000446068	 100       	 118.816   	 0         	 37.4831   	 3.16986   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 56, n: 50, r2: 1)                                                                                                          	 0.000364093	 100       	 0         	 0         	 12.3045   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000339617	 100       	 0.736123  	 0         	 11.778    	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 106, m: 50, fromLeft: 1)                               	 0.000229478	 100       	 0         	 0         	 36.9534   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 19.0674   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 19.0673   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 10.8104   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 7.73219   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 7.73073   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 7.40808   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 6.95357   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 5.72098   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.521923  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.326096  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.294925  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.131869  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0425033 	 1100      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00759878	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00311228	 4600      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00242197	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000985906	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.00088519	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000339617	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23151229212544 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23151014569984 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23150813243520 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23150611917056 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23150410590592 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23150209264128 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23150007937664 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23149806611200 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23149605284736 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23149403958272 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23149202631808 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23149001305344 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23148799978880 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23148598652416 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23148397325952 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23148195999488 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23147994673024 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23147793346560 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23147592020096 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23147390693632 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23147189367168 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23146988040704 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23146786714240 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23146585387776 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23146384061312 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23146182734848 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23145981408384 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23145780081920 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23145578755456 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23145377428992 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23145176102528 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23144974776064 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23144773445504 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23144572119040 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23144370792576 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23144169466112 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23143968139648 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23143766813184 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23143565486720 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23143364160256 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23143162833792 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23142961507328 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23142760180864 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23142558854400 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23142357527936 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23142156201472 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23141954875008 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23141753548544 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23141552222080 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23141350895616 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23141149569152 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23140948242688 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23140746916224 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23140545589760 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23140344263296 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23140142936832 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23139941610368 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23139740283904 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23139538957440 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23139337630976 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23139136304512 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23138934978048 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23138733651584 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23151123552000 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23151116961536 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_TENSORTRAIN_NORMALIZE_PLAIN_QB PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 5350, m: 107)                                                                              	 6.18673   	 600       	 47.6811   	 0         	 0.897241  	 53.1419   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 107, m: 5350)                                                                               	 5.54435   	 700       	 15.3636   	 0         	 1.16806   	 13.1531   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 107)                                                                              	 0.56556   	 100       	 40.7761   	 0         	 0.773118  	 52.7424   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 107, n: 50, r2new: 107)	 0.480215  	 700       	 89.6683   	 0         	 10.1612   	 8.82458   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 107, m: 2500)                                                                               	 0.400556  	 100       	 14.0875   	 0         	 1.0916    	 12.9054   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 5350, m: 50)                                                                               	 0.346491  	 100       	 30.9291   	 0         	 1.24113   	 24.9202   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 107, n: 50, r: 107, r2: 107)                          	 0.319009  	 700       	 268.811   	 0         	 20.299    	 13.2426   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5350, r: 107, r2: 107, leftOrthog: 1)                      	 0.300071  	 600       	 244.951   	 0         	 27.8374   	 8.79934   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 107, r1_: 107, n: 50, r2: 107)                        	 0.0986086 	 600       	 745.397   	 0         	 56.2879   	 13.2426   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 107)                                                                                	 0.0576763 	 100       	 3.99933   	 0         	 0.183784  	 21.761    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 57, n: 50, r2: 57)                                                                                                         	 0.0502175 	 800       	 0         	 0         	 41.4071   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 107, n: 50, r2new: 50) 	 0.036185  	 100       	 79.439    	 0         	 12.3875   	 6.41286   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 107, r1_: 50, n: 50, r2: 107)                         	 0.0242208 	 100       	 236.347   	 0         	 27.9198   	 8.46519   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 107, n: 50, r: 107, r2: 50)                           	 0.0180636 	 100       	 316.907   	 0         	 37.4365   	 8.46519   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 107, r2: 107, leftOrthog: 1)                      	 0.0178337 	 100       	 320.994   	 0         	 37.0265   	 8.6693    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5350, r: 50, r2: 50, leftOrthog: 1)                        	 0.0150826 	 100       	 177.357   	 0         	 42.8309   	 4.14087   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 107, r1_: 107, n: 50, r2: 50)                         	 0.0116997 	 100       	 489.286   	 0         	 37.365    	 13.0948   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 107, m: 50)                                                                                 	 0.00999414	 100       	 4.51931   	 0         	 1.06062   	 4.261     
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 107, m: 107, fromLeft: 1)                              	 0.00688474	 800       	 0         	 0         	 21.2858   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 107)  	 0.00233268	 100       	 49.0809   	 0         	 7.59608   	 6.46135   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 107, r2: 107)                            	 0.00130637	 100       	 87.6399   	 0         	 13.5637   	 6.46135   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 107, n: 50, r2new: 1)  	 0.00114394	 100       	 0.935367  	 0         	 7.48433   	 0.124977  
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000891021	 100       	 0.561154  	 0         	 2.24462   	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000838563	 100       	 29.8129   	 0         	 7.1551    	 4.16667   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 107)                            	 0.000836114	 100       	 0         	 0         	 10.2378   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 107)                                                                                                         	 0.000507595	 100       	 0         	 0         	 16.8638   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 107, n: 50, r: 2, r2: 1)                              	 0.000479687	 100       	 4.46124   	 0         	 26.7708   	 0.166646  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 57)                                                                                                          	 0.000431515	 100       	 0         	 0         	 10.5674   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 107, leftOrthog: 1)                         	 0.000367583	 100       	 145.545   	 0         	 45.8128   	 3.17696   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 57, n: 50, r2: 1)                                                                                                          	 0.000351263	 100       	 0         	 0         	 12.9817   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000343615	 100       	 0.727558  	 0         	 11.6409   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 107, m: 50, fromLeft: 1)                               	 0.000238351	 100       	 0         	 0         	 35.9134   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 19.5356   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 19.5355   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 11.0298   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 7.96789   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 7.9665    	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 7.68314   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 7.15646   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 5.9549    	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.519876  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.338859  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.333354  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.135368  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0515079 	 1100      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00712309	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00279301	 4600      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00269494	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000891021	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000836114	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000343615	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23261510309760 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23261274433536 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23261073107072 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23260871780608 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23260670454144 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23260469127680 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23260267801216 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23260066474752 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23259865148288 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23259663821824 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23259462495360 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23259261168896 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23259059842432 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23258858515968 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23258657189504 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23258455863040 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23258254536576 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23258053210112 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23257851883648 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23257650557184 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23257449230720 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23257247904256 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23257046577792 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23256845251328 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23256643924864 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23256442598400 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23256241271936 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23256039945472 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23255838619008 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23255637292544 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23255435966080 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23255234639616 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23255033309056 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23254831982592 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23254630656128 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23254429329664 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23254228003200 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23254026676736 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23253825350272 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23253624023808 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23253422697344 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23253221370880 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23253020044416 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23252818717952 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23252617391488 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23252416065024 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23252214738560 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23252013412096 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23251812085632 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23251610759168 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23251409432704 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23251208106240 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23251006779776 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23250805453312 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23250604126848 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23250402800384 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23250201473920 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23250000147456 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23249798820992 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23249597494528 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23249396168064 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23249194841600 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23248993515136 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23261404649216 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23261398058752 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_TENSORTRAIN_NORMALIZE_PLAIN_QB PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 5400, m: 108)                                                                              	 6.47369   	 600       	 46.8572   	 0         	 0.873571  	 53.6386   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 108, m: 5400)                                                                               	 5.56799   	 700       	 15.7313   	 0         	 1.18494   	 13.276    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 108)                                                                              	 0.574922  	 100       	 40.8681   	 0         	 0.767787  	 53.2284   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 108, n: 50, r2new: 108)	 0.479935  	 700       	 92.3704   	 0         	 10.3621   	 8.91422   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 108, m: 2500)                                                                               	 0.391576  	 100       	 14.6792   	 0         	 1.12728   	 13.0217   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 5400, m: 50)                                                                               	 0.348796  	 100       	 31.0115   	 0         	 1.2444    	 24.9209   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 108, n: 50, r: 108, r2: 108)                          	 0.306125  	 700       	 288.052   	 0         	 21.5505   	 13.3663   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5400, r: 108, r2: 108, leftOrthog: 1)                      	 0.152602  	 600       	 495.294   	 0         	 55.7665   	 8.88158   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 108, r1_: 108, n: 50, r2: 108)                        	 0.103212  	 600       	 732.308   	 0         	 54.7875   	 13.3663   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 108)                                                                                	 0.0580467 	 100       	 4.00827   	 0         	 0.18399   	 21.7853   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 108, n: 50, r2new: 50) 	 0.0492902 	 100       	 59.4845   	 0         	 9.22861   	 6.44566   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 58, n: 50, r2: 58)                                                                                                         	 0.0482452 	 800       	 0         	 0         	 44.6254   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 108, r1_: 50, n: 50, r2: 108)                         	 0.0253221 	 100       	 230.313   	 0         	 27.1257   	 8.49057   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5400, r: 50, r2: 50, leftOrthog: 1)                        	 0.020916  	 100       	 129.088   	 0         	 31.1724   	 4.1411    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 108, n: 50, r: 108, r2: 50)                           	 0.0193322 	 100       	 301.673   	 0         	 35.5303   	 8.49057   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 108, r2: 108, leftOrthog: 1)                      	 0.0182776 	 100       	 319.079   	 0         	 36.4743   	 8.74806   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 108, r1_: 108, n: 50, r2: 50)                         	 0.0113054 	 100       	 515.862   	 0         	 39.0374   	 13.2146   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 108, m: 50)                                                                                 	 0.0102782 	 100       	 4.44304   	 0         	 1.03909   	 4.2759    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 108, m: 108, fromLeft: 1)                              	 0.00713772	 800       	 0         	 0         	 20.9169   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 108)  	 0.00233788	 100       	 49.8914   	 0         	 7.68698   	 6.49038   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 108, n: 50, r2new: 1)  	 0.00153291	 100       	 0.704543  	 0         	 5.63739   	 0.124977  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 108, r2: 108)                            	 0.00130661	 100       	 89.269    	 0         	 13.754    	 6.49038   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.00101228	 100       	 0.493936  	 0         	 1.97574   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 108)                            	 0.000861035	 100       	 0         	 0         	 10.0344   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 108, n: 50, r: 2, r2: 1)                              	 0.000850805	 100       	 2.53877   	 0         	 15.2345   	 0.166646  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000799876	 100       	 31.2548   	 0         	 7.50116   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 108)                                                                                                         	 0.000479939	 100       	 0         	 0         	 18.0023   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 58)                                                                                                          	 0.000414406	 100       	 0         	 0         	 11.1967   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 108, leftOrthog: 1)                         	 0.00036794	 100       	 146.763   	 0         	 46.0945   	 3.18396   
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000331071	 100       	 0.755125  	 0         	 12.082    	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 58, n: 50, r2: 1)                                                                                                          	 0.000330981	 100       	 0         	 0         	 14.0189   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 108, m: 50, fromLeft: 1)                               	 0.00021819	 100       	 0         	 0         	 39.5985   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 19.8986   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 19.8985   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 11.0431   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 8.31311   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 8.31164   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 7.94366   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 7.45545   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 5.96985   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.533096  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.327615  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.192163  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.140639  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0494705 	 1100      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00735591	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00415409	 4600      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00258608	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.00101228	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000861035	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000331071	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22691389478784 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22691184633856 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22690983307392 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22690781980928 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22690580654464 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22690379328000 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22690178001536 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22689976675072 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22689775348608 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22689574022144 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22689372695680 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22689171369216 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22688970042752 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22688768716288 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22688567389824 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22688366063360 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22688164736896 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22687963410432 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22687762083968 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22687560757504 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22687359431040 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22687158104576 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22686956778112 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22686755451648 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22686554125184 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22686352798720 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22686151472256 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22685950145792 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22685748819328 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22685547492864 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22685346166400 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22685144839936 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22684943509376 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22684742182912 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22684540856448 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22684339529984 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22684138203520 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22683936877056 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22683735550592 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22683534224128 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22683332897664 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22683131571200 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22682930244736 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22682728918272 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22682527591808 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22682326265344 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22682124938880 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22681923612416 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22681722285952 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22681520959488 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22681319633024 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22681118306560 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22680916980096 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22680715653632 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22680514327168 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22680313000704 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22680111674240 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22679910347776 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22679709021312 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22679507694848 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22679306368384 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22679105041920 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22678903715456 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22691283818240 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22691277227776 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_TENSORTRAIN_NORMALIZE_PLAIN_QB PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 5450, m: 109)                                                                              	 6.82155   	 600       	 45.7144   	 0         	 0.844446  	 54.1353   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 109, m: 5450)                                                                               	 5.74208   	 700       	 15.6821   	 0         	 1.17039   	 13.3989   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 109)                                                                              	 0.590402  	 100       	 40.5396   	 0         	 0.754726  	 53.7143   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 109, n: 50, r2new: 109)	 0.473928  	 700       	 96.2911   	 0         	 10.6934   	 9.00473   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 109, m: 2500)                                                                               	 0.414442  	 100       	 14.1254   	 0         	 1.07516   	 13.1379   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 5450, m: 50)                                                                               	 0.358479  	 100       	 30.4528   	 0         	 1.22194   	 24.9216   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 109, n: 50, r: 109, r2: 109)                          	 0.322425  	 700       	 281.157   	 0         	 20.8417   	 13.4901   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5450, r: 109, r2: 109, leftOrthog: 1)                      	 0.19747   	 600       	 393.487   	 0         	 43.8973   	 8.96382   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 109, r1_: 109, n: 50, r2: 109)                        	 0.101642  	 600       	 764.469   	 0         	 56.6689   	 13.4901   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 109)                                                                                	 0.0590927 	 100       	 3.97116   	 0         	 0.182087  	 21.8092   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 59, n: 50, r2: 59)                                                                                                         	 0.0475835 	 800       	 0         	 0         	 46.8196   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 109, n: 50, r2new: 50) 	 0.037869  	 100       	 78.9696   	 0         	 12.1894   	 6.47855   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 109, r1_: 50, n: 50, r2: 109)                         	 0.0259048 	 100       	 229.32    	 0         	 26.9294   	 8.51562   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 109, n: 50, r: 109, r2: 50)                           	 0.0191593 	 100       	 310.059   	 0         	 36.4106   	 8.51562   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 109, r2: 109, leftOrthog: 1)                      	 0.0148979 	 100       	 398.748   	 0         	 45.1748   	 8.82677   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5450, r: 50, r2: 50, leftOrthog: 1)                        	 0.012957  	 100       	 210.31    	 0         	 50.7832   	 4.14134   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 109, r1_: 109, n: 50, r2: 50)                         	 0.0115752 	 100       	 513.208   	 0         	 38.4878   	 13.3343   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 109, m: 50)                                                                                 	 0.0105947 	 100       	 4.35752   	 0         	 1.0156    	 4.29058   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 109, m: 109, fromLeft: 1)                              	 0.00735056	 800       	 0         	 0         	 20.6891   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 109)  	 0.00248665	 100       	 47.7791   	 0         	 7.32905   	 6.51914   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 109, r2: 109)                            	 0.00141199	 100       	 84.1434   	 0         	 12.9071   	 6.51914   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 109, n: 50, r2new: 1)  	 0.00123623	 100       	 0.881717  	 0         	 7.05503   	 0.124977  
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000979785	 100       	 0.510316  	 0         	 2.04126   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 109)                            	 0.000884464	 100       	 0         	 0         	 9.85908   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000865793	 100       	 28.8753   	 0         	 6.93006   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 109)                                                                                                         	 0.000518676	 100       	 0         	 0         	 16.812    	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 109, n: 50, r: 2, r2: 1)                              	 0.000500327	 100       	 4.35715   	 0         	 26.1461   	 0.166646  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 59)                                                                                                          	 0.000479906	 100       	 0         	 0         	 9.83526   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 109, leftOrthog: 1)                         	 0.000400304	 100       	 136.147   	 0         	 42.6676   	 3.19087   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 59, n: 50, r2: 1)                                                                                                          	 0.000356112	 100       	 0         	 0         	 13.2543   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000351337	 100       	 0.711568  	 0         	 11.3851   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 109, m: 50, fromLeft: 1)                               	 0.000238796	 100       	 0         	 0         	 36.5165   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 20.8566   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 20.8565   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 11.66     	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 8.67436   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 8.67289   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 8.36173   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 7.82952   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 6.16712   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.51552   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.343496  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.225725  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.139987  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0489382 	 1100      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00758936	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00259651	 4600      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00224562	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000979785	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000884464	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000351337	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22758797748096 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22758561933312 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22758360606848 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22758159280384 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22757957953920 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22757756627456 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22757555300992 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22757353974528 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22757152648064 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22756951321600 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22756749995136 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22756548668672 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22756347342208 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22756146015744 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22755944689280 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22755743362816 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22755542036352 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22755340709888 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22755139383424 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22754938056960 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22754736730496 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22754535404032 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22754334077568 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22754132751104 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22753931424640 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22753730098176 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22753528771712 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22753327445248 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22753126118784 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22752924792320 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22752723465856 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22752522139392 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22752320808832 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22752119482368 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22751918155904 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22751716829440 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22751515502976 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22751314176512 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22751112850048 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22750911523584 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22750710197120 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22750508870656 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22750307544192 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22750106217728 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22749904891264 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22749703564800 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22749502238336 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22749300911872 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22749099585408 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22748898258944 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22748696932480 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22748495606016 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22748294279552 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22748092953088 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22747891626624 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22747690300160 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22747488973696 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22747287647232 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22747086320768 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22746884994304 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22746683667840 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22746482341376 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22746281014912 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22758692087552 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22758685497088 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_TENSORTRAIN_NORMALIZE_PLAIN_QB PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 5500, m: 110)                                                                              	 6.16691   	 600       	 51.9717   	 0         	 0.951305  	 54.632    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 110, m: 5500)                                                                               	 5.81066   	 700       	 15.9274   	 0         	 1.1779    	 13.5219   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 110)                                                                              	 0.590535  	 100       	 41.2803   	 0         	 0.761629  	 54.2001   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 110, n: 50, r2new: 110)	 0.516664  	 700       	 90.9101   	 0         	 9.99442   	 9.09609   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 110, m: 2500)                                                                               	 0.4003    	 100       	 14.892    	 0         	 1.12358   	 13.2541   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 5500, m: 50)                                                                               	 0.353919  	 100       	 31.1277   	 0         	 1.24899   	 24.9223   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 110, n: 50, r: 110, r2: 110)                          	 0.344713  	 700       	 270.283   	 0         	 19.8535   	 13.6139   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5500, r: 110, r2: 110, leftOrthog: 1)                      	 0.321021  	 600       	 248.769   	 0         	 27.5003   	 9.04605   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 110, r1_: 110, n: 50, r2: 110)                        	 0.105776  	 600       	 754.991   	 0         	 55.4575   	 13.6139   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 110)                                                                                	 0.0596922 	 100       	 3.96478   	 0         	 0.181598  	 21.8327   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 60, n: 50, r2: 60)                                                                                                         	 0.0529494 	 800       	 0         	 0         	 43.5132   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 110, n: 50, r2new: 50) 	 0.0476455 	 100       	 64.0144   	 0         	 9.83093   	 6.51153   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 110, r1_: 50, n: 50, r2: 110)                         	 0.0234144 	 100       	 258.388   	 0         	 30.2549   	 8.54037   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 110, n: 50, r: 110, r2: 50)                           	 0.0192348 	 100       	 314.535   	 0         	 36.8292   	 8.54037   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 110, r2: 110, leftOrthog: 1)                      	 0.0155087 	 100       	 390.103   	 0         	 43.805    	 8.90544   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5500, r: 50, r2: 50, leftOrthog: 1)                        	 0.0136777 	 100       	 201.057   	 0         	 48.5461   	 4.14157   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 110, r1_: 110, n: 50, r2: 50)                         	 0.0117094 	 100       	 516.677   	 0         	 38.4032   	 13.454    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 110, m: 50)                                                                                 	 0.0104142 	 100       	 4.48104   	 0         	 1.04088   	 4.30504   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 110, m: 110, fromLeft: 1)                              	 0.0075805 	 800       	 0         	 0         	 20.4314   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 110)  	 0.00241088	 100       	 50.1892   	 0         	 7.66526   	 6.54762   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 110, n: 50, r2new: 1)  	 0.00159246	 100       	 0.690755  	 0         	 5.52704   	 0.124977  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 110, r2: 110)                            	 0.00135114	 100       	 89.5541   	 0         	 13.6773   	 6.54762   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000889283	 100       	 0.562251  	 0         	 2.249     	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 110, n: 50, r: 2, r2: 1)                              	 0.000881525	 100       	 2.49568   	 0         	 14.9759   	 0.166646  
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 110)                            	 0.000870029	 100       	 0         	 0         	 10.1146   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.00082098	 100       	 30.4514   	 0         	 7.30834   	 4.16667   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 110, leftOrthog: 1)                         	 0.000712182	 100       	 77.2275   	 0         	 24.1511   	 3.19767   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 110)                                                                                                         	 0.000517529	 100       	 0         	 0         	 17.0039   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 60)                                                                                                          	 0.000438602	 100       	 0         	 0         	 10.9439   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 60, n: 50, r2: 1)                                                                                                          	 0.000369246	 100       	 0         	 0         	 12.9995   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000333695	 100       	 0.749187  	 0         	 11.987    	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 110, m: 50, fromLeft: 1)                               	 0.000231701	 100       	 0         	 0         	 37.98     	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 19.6883   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 19.6882   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 11.1904   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 7.89072   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 7.88936   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 7.63689   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 7.17105   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 6.22137   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.568313  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.36618   	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.35092   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.141721  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0542748 	 1100      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0078122 	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00327927	 4600      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.0029826 	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000889283	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000870029	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000333695	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23320861525888 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23320665778176 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23320464451712 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23320263125248 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23320061798784 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23319860472320 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23319659145856 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23319457819392 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23319256492928 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23319055166464 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23318853840000 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23318652513536 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23318451187072 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23318249860608 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23318048534144 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23317847207680 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23317645881216 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23317444554752 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23317243228288 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23317041901824 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23316840575360 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23316639248896 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23316437922432 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23316236595968 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23316035269504 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23315833943040 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23315632616576 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23315431290112 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23315229963648 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23315028637184 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23314827310720 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23314625984256 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23314424653696 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23314223327232 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23314022000768 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23313820674304 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23313619347840 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23313418021376 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23313216694912 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23313015368448 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23312814041984 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23312612715520 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23312411389056 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23312210062592 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23312008736128 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23311807409664 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23311606083200 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23311404756736 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23311203430272 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23311002103808 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23310800777344 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23310599450880 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23310398124416 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23310196797952 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23309995471488 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23309794145024 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23309592818560 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23309391492096 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23309190165632 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23308988839168 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23308787512704 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23308586186240 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23308384859776 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23320755865344 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23320749274880 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_TENSORTRAIN_NORMALIZE_PLAIN_QB PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 5550, m: 111)                                                                              	 6.87729   	 600       	 47.886    	 0         	 0.86862   	 55.1287   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 111, m: 5550)                                                                               	 5.95547   	 700       	 15.9678   	 0         	 1.17025   	 13.6448   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 111)                                                                              	 0.593777  	 100       	 41.8075   	 0         	 0.764505  	 54.6857   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 111, n: 50, r2new: 111)	 0.481438  	 700       	 100.402   	 0         	 10.9272   	 9.18825   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 111, m: 2500)                                                                               	 0.412813  	 100       	 14.7024   	 0         	 1.09964   	 13.3702   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 5550, m: 50)                                                                               	 0.346962  	 100       	 32.04     	 0         	 1.28556   	 24.923    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 111, n: 50, r: 111, r2: 111)                          	 0.335814  	 700       	 285.081   	 0         	 20.7519   	 13.7376   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5550, r: 111, r2: 111, leftOrthog: 1)                      	 0.208217  	 600       	 394.097   	 0         	 43.1732   	 9.12829   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 111, r1_: 111, n: 50, r2: 111)                        	 0.107651  	 600       	 762.259   	 0         	 55.487    	 13.7376   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 111)                                                                                	 0.0564405 	 100       	 4.22864   	 0         	 0.193478  	 21.8559   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 61, n: 50, r2: 61)                                                                                                         	 0.0539375 	 800       	 0         	 0         	 44.1518   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 111, n: 50, r2new: 50) 	 0.0464746 	 100       	 66.9291   	 0         	 10.2267   	 6.54456   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 111, r1_: 50, n: 50, r2: 111)                         	 0.0281144 	 100       	 219.123   	 0         	 25.5841   	 8.56481   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 111, n: 50, r: 111, r2: 50)                           	 0.0196884 	 100       	 312.9     	 0         	 36.5332   	 8.56481   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5550, r: 50, r2: 50, leftOrthog: 1)                        	 0.0159704 	 100       	 173.759   	 0         	 41.9525   	 4.14179   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 111, r2: 111, leftOrthog: 1)                      	 0.0153795 	 100       	 400.566   	 0         	 44.5862   	 8.98407   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 111, r1_: 111, n: 50, r2: 50)                         	 0.0117447 	 100       	 524.532   	 0         	 38.6434   	 13.5737   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 111, m: 50)                                                                                 	 0.010275  	 100       	 4.59043   	 0         	 1.06277   	 4.31929   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 111, m: 111, fromLeft: 1)                              	 0.00768992	 800       	 0         	 0         	 20.5085   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 111)  	 0.00255865	 100       	 48.1543   	 0         	 7.32293   	 6.57583   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 111, n: 50, r2new: 1)  	 0.00152719	 100       	 0.726824  	 0         	 5.81564   	 0.124977  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 111, r2: 111)                            	 0.00149091	 100       	 82.6408   	 0         	 12.5674   	 6.57583   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000890987	 100       	 0.561175  	 0         	 2.2447    	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 111)                            	 0.000885834	 100       	 0         	 0         	 10.0245   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 111, n: 50, r: 2, r2: 1)                              	 0.000846439	 100       	 2.62275   	 0         	 15.7384   	 0.166647  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000796109	 100       	 31.4027   	 0         	 7.53666   	 4.16667   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 111, leftOrthog: 1)                         	 0.000775058	 100       	 71.6075   	 0         	 22.3467   	 3.20439   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 111)                                                                                                         	 0.000499223	 100       	 0         	 0         	 17.7876   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 61)                                                                                                          	 0.00042039	 100       	 0         	 0         	 11.6083   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 61, n: 50, r2: 1)                                                                                                          	 0.00035717	 100       	 0         	 0         	 13.663    	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.00034143	 100       	 0.732215  	 0         	 11.7154   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 111, m: 50, fromLeft: 1)                               	 0.000225054	 100       	 0         	 0         	 39.4572   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 21.1383   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 21.1382   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 11.9464   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 8.6458    	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 8.64445   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 8.36715   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 7.87447   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 6.37856   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.531999  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.357839  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.240342  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.148306  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0552143 	 1100      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00791497	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00249325	 4600      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00205365	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000890987	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000885834	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.00034143	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22543872108416 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22543679350784 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22543478024320 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22543276697856 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22543075371392 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22542874044928 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22542672718464 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22542471392000 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22542270065536 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22542068739072 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22541867412608 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22541666086144 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22541464759680 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22541263433216 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22541062106752 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22540860780288 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22540659453824 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22540458127360 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22540256800896 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22540055474432 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22539854147968 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22539652821504 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22539451495040 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22539250168576 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22539048842112 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22538847515648 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22538646189184 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22538444862720 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22538243536256 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22538042209792 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22537840883328 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22537639556864 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22537438226304 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22537236899840 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22537035573376 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22536834246912 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22536632920448 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22536431593984 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22536230267520 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22536028941056 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22535827614592 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22535626288128 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22535424961664 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22535223635200 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22535022308736 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22534820982272 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22534619655808 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22534418329344 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22534217002880 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22534015676416 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22533814349952 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22533613023488 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22533411697024 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22533210370560 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22533009044096 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22532807717632 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22532606391168 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22532405064704 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22532203738240 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22532002411776 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22531801085312 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22531599758848 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22531398432384 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22543766447872 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22543759857408 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_TENSORTRAIN_NORMALIZE_PLAIN_QB PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 5600, m: 112)                                                                              	 6.54527   	 600       	 51.6872   	 0         	 0.929201  	 55.6254   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 112, m: 5600)                                                                               	 6.17476   	 700       	 15.8207   	 0         	 1.14912   	 13.7678   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 112)                                                                              	 0.612197  	 100       	 41.2863   	 0         	 0.748329  	 55.1713   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 112, n: 50, r2new: 112)	 0.512374  	 700       	 97.0715   	 0         	 10.4589   	 9.28121   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 112, m: 2500)                                                                               	 0.408946  	 100       	 15.1079   	 0         	 1.12026   	 13.4861   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 112, n: 50, r: 112, r2: 112)                          	 0.356084  	 700       	 276.185   	 0         	 19.9248   	 13.8614   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 5600, m: 50)                                                                               	 0.354772  	 100       	 31.6166   	 0         	 1.26853   	 24.9237   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5600, r: 112, r2: 112, leftOrthog: 1)                      	 0.256375  	 600       	 328.799   	 0         	 35.6982   	 9.21053   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 112, r1_: 112, n: 50, r2: 112)                        	 0.111186  	 600       	 758.15    	 0         	 54.6951   	 13.8614   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 112)                                                                                	 0.058593  	 100       	 4.10743   	 0         	 0.187736  	 21.8788   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 62, n: 50, r2: 62)                                                                                                         	 0.0580041 	 800       	 0         	 0         	 42.4136   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 112, n: 50, r2new: 50) 	 0.0403477 	 100       	 78.6166   	 0         	 11.9521   	 6.57764   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 112, r1_: 50, n: 50, r2: 112)                         	 0.0276191 	 100       	 227.09    	 0         	 26.4397   	 8.58896   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 112, n: 50, r: 112, r2: 50)                           	 0.0204376 	 100       	 306.885   	 0         	 35.7302   	 8.58896   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 112, r2: 112, leftOrthog: 1)                      	 0.0186551 	 100       	 336.208   	 0         	 37.0981   	 9.06266   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5600, r: 50, r2: 50, leftOrthog: 1)                        	 0.0134127 	 100       	 208.758   	 0         	 50.4001   	 4.14201   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 112, r1_: 112, n: 50, r2: 50)                         	 0.0119348 	 100       	 525.52    	 0         	 38.378    	 13.6933   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 112, m: 50)                                                                                 	 0.0105656 	 100       	 4.51149   	 0         	 1.04111   	 4.33333   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 112, m: 112, fromLeft: 1)                              	 0.00834316	 800       	 0         	 0         	 19.2449   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 112)  	 0.00249053	 100       	 50.3669   	 0         	 7.62698   	 6.60377   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 112, r2: 112)                            	 0.00144792	 100       	 86.6345   	 0         	 13.1189   	 6.60377   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 112, n: 50, r2new: 1)  	 0.00121294	 100       	 0.923375  	 0         	 7.38832   	 0.124978  
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000870983	 100       	 0.574064  	 0         	 2.29626   	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000851047	 100       	 29.3756   	 0         	 7.05014   	 4.16667   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 112)                            	 0.000844939	 100       	 0         	 0         	 10.6043   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 112, leftOrthog: 1)                         	 0.000600952	 100       	 93.1855   	 0         	 29.0206   	 3.21101   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 112, n: 50, r: 2, r2: 1)                              	 0.00052292	 100       	 4.28364   	 0         	 25.7049   	 0.166647  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 112)                                                                                                         	 0.000497515	 100       	 0         	 0         	 18.0095   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 62)                                                                                                          	 0.000443364	 100       	 0         	 0         	 11.1872   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 62, n: 50, r2: 1)                                                                                                          	 0.000367524	 100       	 0         	 0         	 13.4957   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000339382	 100       	 0.736633  	 0         	 11.7861   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 112, m: 50, fromLeft: 1)                               	 0.000220337	 100       	 0         	 0         	 40.665    	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 20.4466   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 20.4465   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 11.6062   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 8.25807   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 8.25674   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 7.99628   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 7.57083   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 6.59427   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.556426  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.378492  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.289043  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.151591  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0593125 	 1100      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0085635 	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00274865	 4600      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00260388	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000870983	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000844939	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000339382	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22793938843520 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22793726978048 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22793525651584 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22793324325120 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22793122998656 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22792921672192 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22792720345728 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22792519019264 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22792317692800 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22792116366336 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22791915039872 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22791713713408 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22791512386944 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22791311060480 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22791109734016 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22790908407552 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22790707081088 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22790505754624 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22790304428160 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22790103101696 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22789901775232 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22789700448768 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22789499122304 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22789297795840 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22789096469376 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22788895142912 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22788693816448 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22788492489984 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22788291163520 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22788089837056 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22787888510592 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22787687184128 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22787485853568 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22787284527104 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22787083200640 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22786881874176 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22786680547712 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22786479221248 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22786277894784 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22786076568320 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22785875241856 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22785673915392 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22785472588928 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22785271262464 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22785069936000 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22784868609536 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22784667283072 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22784465956608 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22784264630144 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22784063303680 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22783861977216 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22783660650752 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22783459324288 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22783257997824 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22783056671360 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22782855344896 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22782654018432 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22782452691968 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22782251365504 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22782050039040 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22781848712576 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22781647386112 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22781446059648 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22793833182976 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22793826592512 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_TENSORTRAIN_NORMALIZE_PLAIN_QB PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 5650, m: 113)                                                                              	 7.31209   	 600       	 47.5171   	 0         	 0.846673  	 56.1221   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 113, m: 5650)                                                                               	 6.27383   	 700       	 15.9917   	 0         	 1.15126   	 13.8907   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 113)                                                                              	 0.631695  	 100       	 40.7323   	 0         	 0.731849  	 55.6567   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 113, n: 50, r2new: 113)	 0.543905  	 700       	 94.0786   	 0         	 10.0351   	 9.37494   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 113, m: 2500)                                                                               	 0.436134  	 100       	 14.4183   	 0         	 1.06001   	 13.6021   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 5650, m: 50)                                                                               	 0.363702  	 100       	 31.1152   	 0         	 1.24838   	 24.9244   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 113, n: 50, r: 113, r2: 113)                          	 0.358468  	 700       	 281.762   	 0         	 20.1472   	 13.9851   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5650, r: 113, r2: 113, leftOrthog: 1)                      	 0.285343  	 600       	 303.402   	 0         	 32.6493   	 9.29276   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 113, r1_: 113, n: 50, r2: 113)                        	 0.106474  	 600       	 813.101   	 0         	 58.1404   	 13.9851   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 63, n: 50, r2: 63)                                                                                                         	 0.0606964 	 800       	 0         	 0         	 41.8503   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 113)                                                                                	 0.0595941 	 100       	 4.07199   	 0         	 0.185924  	 21.9013   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 113, n: 50, r2new: 50) 	 0.0369621 	 100       	 87.5086   	 0         	 13.2373   	 6.61073   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 113, r1_: 50, n: 50, r2: 113)                         	 0.0259807 	 100       	 245.741   	 0         	 28.532    	 8.6128    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 113, r2: 113, leftOrthog: 1)                      	 0.0226343 	 100       	 282.072   	 0         	 30.8572   	 9.14121   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 113, n: 50, r: 113, r2: 50)                           	 0.018186  	 100       	 351.067   	 0         	 40.761    	 8.6128    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5650, r: 50, r2: 50, leftOrthog: 1)                        	 0.0139928 	 100       	 201.889   	 0         	 48.7393   	 4.14223   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 113, r1_: 113, n: 50, r2: 50)                         	 0.0121798 	 100       	 524.186   	 0         	 37.9492   	 13.8128   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 113, m: 50)                                                                                 	 0.011159  	 100       	 4.31641   	 0         	 0.992924  	 4.34717   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 113, m: 113, fromLeft: 1)                              	 0.00792924	 800       	 0         	 0         	 20.6127   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 113)  	 0.00249318	 100       	 51.2158   	 0         	 7.72315   	 6.63146   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 113, n: 50, r2new: 1)  	 0.00167193	 100       	 0.675866  	 0         	 5.40789   	 0.124978  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 113, r2: 113)                            	 0.00139932	 100       	 91.2517   	 0         	 13.7604   	 6.63146   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.00107815	 100       	 0.463757  	 0         	 1.85503   	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 113, n: 50, r: 2, r2: 1)                              	 0.000900444	 100       	 2.50987   	 0         	 15.061    	 0.166647  
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 113)                            	 0.000880674	 100       	 0         	 0         	 10.2649   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000834325	 100       	 29.9643   	 0         	 7.19144   	 4.16667   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 113, leftOrthog: 1)                         	 0.00068564	 100       	 82.4048   	 0         	 25.6111   	 3.21754   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 113)                                                                                                         	 0.000509801	 100       	 0         	 0         	 17.7324   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 63)                                                                                                          	 0.000487767	 100       	 0         	 0         	 10.3328   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 63, n: 50, r2: 1)                                                                                                          	 0.000373889	 100       	 0         	 0         	 13.4799   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000337437	 100       	 0.740879  	 0         	 11.8541   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 113, m: 50, fromLeft: 1)                               	 0.00027255	 100       	 0         	 0         	 33.1682   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 22.4979   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 22.4978   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 12.6565   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 9.22049   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 9.21893   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 8.92877   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 8.36708   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 6.72112   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.585032  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.378954  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.322656  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.145468  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0620678 	 1100      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00820179	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00292738	 4600      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00214095	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.00107815	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000880674	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000337437	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22542266431360 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22542068738048 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22541867411584 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22541666085120 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22541464758656 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22541263432192 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22541062105728 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22540860779264 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22540659452800 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22540458126336 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22540256799872 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22540055473408 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22539854146944 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22539652820480 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22539451494016 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22539250167552 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22539048841088 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22538847514624 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22538646188160 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22538444861696 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22538243535232 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22538042208768 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22537840882304 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22537639555840 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22537438229376 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22537236902912 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22537035576448 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22536834249984 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22536632923520 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22536431597056 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22536230270592 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22536028944128 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22535827613568 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22535626287104 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22535424960640 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22535223634176 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22535022307712 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22534820981248 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22534619654784 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22534418328320 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22534217001856 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22534015675392 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22533814348928 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22533613022464 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22533411696000 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22533210369536 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22533009043072 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22532807716608 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22532606390144 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22532405063680 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22532203737216 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22532002410752 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22531801084288 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22531599757824 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22531398431360 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22531197104896 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22530995778432 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22530794451968 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22530593125504 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22530391799040 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22530190472576 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22529989146112 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22529787819648 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22542160770816 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22542154180352 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_TENSORTRAIN_NORMALIZE_PLAIN_QB PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 5700, m: 114)                                                                              	 7.58571   	 600       	 47.03     	 0         	 0.830642  	 56.6188   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 114, m: 5700)                                                                               	 6.28618   	 700       	 16.3878   	 0         	 1.16942   	 14.0136   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 114)                                                                              	 0.6332    	 100       	 41.3606   	 0         	 0.736715  	 56.1419   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 114, n: 50, r2new: 114)	 0.530941  	 700       	 99.1374   	 0         	 10.4692   	 9.46941   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 114, m: 2500)                                                                               	 0.423728  	 100       	 15.1022   	 0         	 1.10091   	 13.7179   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 5700, m: 50)                                                                               	 0.369432  	 100       	 30.9033   	 0         	 1.23985   	 24.925    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 114, n: 50, r: 114, r2: 114)                          	 0.355812  	 700       	 291.469   	 0         	 20.6585   	 14.1089   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5700, r: 114, r2: 114, leftOrthog: 1)                      	 0.300197  	 600       	 296.115   	 0         	 31.5856   	 9.375     
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 114, r1_: 114, n: 50, r2: 114)                        	 0.110983  	 600       	 800.956   	 0         	 56.7695   	 14.1089   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 64, n: 50, r2: 64)                                                                                                         	 0.0617795 	 800       	 0         	 0         	 42.4322   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 114)                                                                                	 0.0611381 	 100       	 4.00187   	 0         	 0.182538  	 21.9235   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 114, n: 50, r2new: 50) 	 0.0377367 	 100       	 87.3951   	 0         	 13.1543   	 6.64384   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 114, r1_: 50, n: 50, r2: 114)                         	 0.028358  	 100       	 229.142   	 0         	 26.5322   	 8.63636   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 114, n: 50, r: 114, r2: 50)                           	 0.0199165 	 100       	 326.263   	 0         	 37.7778   	 8.63636   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 114, r2: 114, leftOrthog: 1)                      	 0.0161123 	 100       	 403.295   	 0         	 43.7427   	 9.21972   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5700, r: 50, r2: 50, leftOrthog: 1)                        	 0.01444   	 100       	 197.368   	 0         	 47.6454   	 4.14244   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 114, r1_: 114, n: 50, r2: 50)                         	 0.0121586 	 100       	 534.437   	 0         	 38.3595   	 13.9323   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 114, m: 50)                                                                                 	 0.0112723 	 100       	 4.31735   	 0         	 0.990035  	 4.36081   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 114, m: 114, fromLeft: 1)                              	 0.00893618	 800       	 0         	 0         	 18.6152   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 114)  	 0.00259668	 100       	 50.0485   	 0         	 7.51605   	 6.65888   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 114, n: 50, r2new: 1)  	 0.00157056	 100       	 0.725856  	 0         	 5.80787   	 0.124978  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 114, r2: 114)                            	 0.00155581	 100       	 83.5319   	 0         	 12.5444   	 6.65888   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 114, n: 50, r: 2, r2: 1)                              	 0.000891368	 100       	 2.55787   	 0         	 15.349    	 0.166647  
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000877638	 100       	 0.569711  	 0         	 2.27884   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 114)                            	 0.000861534	 100       	 0         	 0         	 10.5858   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000820224	 100       	 30.4795   	 0         	 7.31507   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 114)                                                                                                         	 0.000505614	 100       	 0         	 0         	 18.0375   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 114, leftOrthog: 1)                         	 0.000464048	 100       	 122.832   	 0         	 38.0995   	 3.22398   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 64)                                                                                                          	 0.000455662	 100       	 0         	 0         	 11.2364   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 64, n: 50, r2: 1)                                                                                                          	 0.000356621	 100       	 0         	 0         	 14.357    	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000354544	 100       	 0.705131  	 0         	 11.2821   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 114, m: 50, fromLeft: 1)                               	 0.000283429	 100       	 0         	 0         	 32.1774   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 22.6428   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 22.6427   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 12.4507   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 9.60251   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 9.60112   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 9.24874   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 8.64948   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 6.72118   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.572845  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.378176  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.331213  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.15232   	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0630974 	 1100      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00921961	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00258385	 4600      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00245572	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000877638	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000861534	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000354544	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22890569602944 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22890363742208 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22890162415744 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22889961089280 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22889759762816 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22889558436352 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22889357109888 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22889155783424 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22888954456960 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22888753130496 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22888551804032 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22888350477568 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22888149151104 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22887947824640 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22887746498176 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22887545171712 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22887343845248 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22887142518784 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22886941192320 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22886739865856 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22886538539392 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22886337212928 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22886135886464 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22885934560000 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22885733233536 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22885531907072 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22885330580608 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22885129254144 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22884927927680 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22884726601216 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22884525274752 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22884323948288 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22884122617728 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22883921291264 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22883719964800 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22883518638336 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22883317311872 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22883115985408 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22882914658944 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22882713332480 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22882512006016 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22882310679552 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22882109353088 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22881908026624 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22881706700160 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22881505373696 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22881304047232 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22881102720768 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22880901394304 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22880700067840 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22880498741376 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22880297414912 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22880096088448 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22879894761984 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22879693435520 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22879492109056 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22879290782592 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22879089456128 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22878888129664 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22878686803200 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22878485476736 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22878284150272 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22878082823808 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22890463942400 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22890457351936 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_TENSORTRAIN_NORMALIZE_PLAIN_QB PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 5750, m: 115)                                                                              	 7.94075   	 600       	 46.1199   	 0         	 0.807484  	 57.1155   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 115, m: 5750)                                                                               	 6.45899   	 700       	 16.3728   	 0         	 1.15819   	 14.1366   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 115)                                                                              	 0.66118   	 100       	 40.3109   	 0         	 0.711866  	 56.6271   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 115, n: 50, r2new: 115)	 0.544764  	 700       	 99.3756   	 0         	 10.3899   	 9.56461   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 115, m: 2500)                                                                               	 0.43779   	 100       	 14.8727   	 0         	 1.07511   	 13.8336   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5750, r: 115, r2: 115, leftOrthog: 1)                      	 0.432434  	 600       	 211.021   	 0         	 22.3132   	 9.45724   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 5750, m: 50)                                                                               	 0.370275  	 100       	 31.103    	 0         	 1.24783   	 24.9257   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 115, n: 50, r: 115, r2: 115)                          	 0.364582  	 700       	 292.009   	 0         	 20.5168   	 14.2327   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 115, r1_: 115, n: 50, r2: 115)                        	 0.110187  	 600       	 828.159   	 0         	 58.1872   	 14.2327   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 65, n: 50, r2: 65)                                                                                                         	 0.0683848 	 800       	 0         	 0         	 39.541    	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 115)                                                                                	 0.0577219 	 100       	 4.27336   	 0         	 0.194727  	 21.9454   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 115, n: 50, r2new: 50) 	 0.0419956 	 100       	 80.068    	 0         	 11.9917   	 6.67693   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 115, r1_: 50, n: 50, r2: 115)                         	 0.0311692 	 100       	 212.149   	 0         	 24.4986   	 8.65964   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 115, n: 50, r: 115, r2: 50)                           	 0.0210488 	 100       	 314.152   	 0         	 36.2777   	 8.65964   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 115, r2: 115, leftOrthog: 1)                      	 0.0179471 	 100       	 368.444   	 0         	 39.6254   	 9.29819   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5750, r: 50, r2: 50, leftOrthog: 1)                        	 0.0172331 	 100       	 166.83    	 0         	 40.2714   	 4.14265   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 115, r1_: 115, n: 50, r2: 50)                         	 0.0122888 	 100       	 538.09    	 0         	 38.2933   	 14.0518   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 115, m: 50)                                                                                 	 0.0109346 	 100       	 4.49641   	 0         	 1.02793   	 4.37425   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 115, m: 115, fromLeft: 1)                              	 0.00815546	 800       	 0         	 0         	 20.7566   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 115)  	 0.00265398	 100       	 49.8307   	 0         	 7.45295   	 6.68605   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 115, r2: 115)                            	 0.0015844 	 100       	 83.47     	 0         	 12.4842   	 6.68605   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 115, n: 50, r2new: 1)  	 0.00156321	 100       	 0.735665  	 0         	 5.88634   	 0.124978  
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000898535	 100       	 0.556461  	 0         	 2.22585   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 115)                            	 0.000880974	 100       	 0         	 0         	 10.443    	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 115, n: 50, r: 2, r2: 1)                              	 0.000836262	 100       	 2.75033   	 0         	 16.5039   	 0.166647  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000791667	 100       	 31.5789   	 0         	 7.57894   	 4.16667   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 115, leftOrthog: 1)                         	 0.000769065	 100       	 74.7661   	 0         	 23.145    	 3.23034   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 115)                                                                                                         	 0.000509575	 100       	 0         	 0         	 18.0543   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 65)                                                                                                          	 0.000444564	 100       	 0         	 0         	 11.6969   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 65, n: 50, r2: 1)                                                                                                          	 0.000386409	 100       	 0         	 0         	 13.4572   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000339391	 100       	 0.736614  	 0         	 11.7858   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 115, m: 50, fromLeft: 1)                               	 0.000266528	 100       	 0         	 0         	 34.5179   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 23.5054   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 23.5054   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 12.7653   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 10.1225   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 10.1211   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 9.78478   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 9.02993   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 6.90771   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.590977  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.468383  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.388051  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.154437  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0697253 	 1100      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00842199	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00279059	 4600      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00261845	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000898535	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000880974	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000339391	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22586193123200 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22585957935104 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22585756608640 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22585555282176 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22585353955712 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22585152629248 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22584951302784 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22584749976320 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22584548649856 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22584347323392 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22584145996928 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22583944670464 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22583743344000 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22583542017536 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22583340691072 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22583139364608 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22582938038144 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22582736711680 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22582535385216 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22582334058752 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22582132732288 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22581931405824 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22581730079360 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22581528752896 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22581327426432 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22581126099968 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22580924773504 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22580723447040 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22580522120576 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22580320794112 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22580119467648 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22579918141184 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22579716810624 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22579515484160 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22579314157696 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22579112831232 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22578911504768 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22578710178304 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22578508851840 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22578307525376 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22578106198912 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22577904872448 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22577703545984 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22577502219520 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22577300893056 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22577099566592 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22576898240128 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22576696913664 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22576495587200 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22576294260736 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22576092934272 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22575891607808 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22575690281344 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22575488954880 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22575287628416 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22575086301952 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22574884975488 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22574683649024 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22574482322560 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22574280996096 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22574079669632 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22573878343168 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22573677016704 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22586087462656 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22586080872192 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_TENSORTRAIN_NORMALIZE_PLAIN_QB PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 5800, m: 116)                                                                              	 7.10208   	 600       	 52.923    	 0         	 0.918607  	 57.6122   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 116, m: 5800)                                                                               	 6.55803   	 700       	 16.5498   	 0         	 1.16062   	 14.2595   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 116)                                                                              	 0.654768  	 100       	 41.4194   	 0         	 0.72523   	 57.1121   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 116, n: 50, r2new: 116)	 0.554104  	 700       	 100.47    	 0         	 10.4001   	 9.6605    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 116, m: 2500)                                                                               	 0.419705  	 100       	 15.7824   	 0         	 1.13141   	 13.9493   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5800, r: 116, r2: 116, leftOrthog: 1)                      	 0.415899  	 600       	 225.184   	 0         	 23.6055   	 9.53947   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 116, n: 50, r: 116, r2: 116)                          	 0.385799  	 700       	 283.212   	 0         	 19.7272   	 14.3564   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 5800, m: 50)                                                                               	 0.361506  	 100       	 32.1341   	 0         	 1.28916   	 24.9263   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 116, r1_: 116, n: 50, r2: 116)                        	 0.108204  	 600       	 865.533   	 0         	 60.2889   	 14.3564   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 66, n: 50, r2: 66)                                                                                                         	 0.0692442 	 800       	 0         	 0         	 40.261    	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 116)                                                                                	 0.0602091 	 100       	 4.13005   	 0         	 0.188011  	 21.967    
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 116, n: 50, r2new: 50) 	 0.0467842 	 100       	 73.2726   	 0         	 10.9199   	 6.70999   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 116, r1_: 50, n: 50, r2: 116)                         	 0.0303386 	 100       	 221.764   	 0         	 25.5411   	 8.68263   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 116, n: 50, r: 116, r2: 50)                           	 0.0213271 	 100       	 315.466   	 0         	 36.333    	 8.68263   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 116, r2: 116, leftOrthog: 1)                      	 0.0144855 	 100       	 464.464   	 0         	 49.5342   	 9.37662   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5800, r: 50, r2: 50, leftOrthog: 1)                        	 0.0142197 	 100       	 203.943   	 0         	 49.2275   	 4.14286   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 116, r1_: 116, n: 50, r2: 50)                         	 0.0124981 	 100       	 538.32    	 0         	 37.9868   	 14.1712   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 116, m: 50)                                                                                 	 0.010956  	 100       	 4.53328   	 0         	 1.03322   	 4.38751   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 116, m: 116, fromLeft: 1)                              	 0.00825884	 800       	 0         	 0         	 20.8548   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 116)  	 0.00258421	 100       	 52.07     	 0         	 7.75663   	 6.71296   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 116, r2: 116)                            	 0.00149649	 100       	 89.9173   	 0         	 13.3946   	 6.71296   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 116, n: 50, r2new: 1)  	 0.00132712	 100       	 0.87407   	 0         	 6.99376   	 0.124978  
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000972537	 100       	 0.514119  	 0         	 2.05648   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 116)                            	 0.000918821	 100       	 0         	 0         	 10.0999   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000786935	 100       	 31.7688   	 0         	 7.62452   	 4.16667   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 116, leftOrthog: 1)                         	 0.000613813	 100       	 94.4913   	 0         	 29.1946   	 3.23661   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 116, n: 50, r: 2, r2: 1)                              	 0.00059905	 100       	 3.8728    	 0         	 23.2395   	 0.166648  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 116)                                                                                                         	 0.000532589	 100       	 0         	 0         	 17.4243   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 66)                                                                                                          	 0.000443079	 100       	 0         	 0         	 11.9166   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 66, n: 50, r2: 1)                                                                                                          	 0.000358945	 100       	 0         	 0         	 14.7098   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000340917	 100       	 0.733316  	 0         	 11.7331   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 116, m: 50, fromLeft: 1)                               	 0.00028211	 100       	 0         	 0         	 32.895    	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 22.0422   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 22.0421   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 12.3788   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 9.01504   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 9.01359   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 8.72857   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 8.17857   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 6.9887    	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.6048    	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.445218  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.409221  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.151827  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0705788 	 1100      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00854095	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.0031297 	 4600      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00311365	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000972537	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000918821	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000340917	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22393679632256 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22393489713152 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22393288386688 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22393087060224 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22392885733760 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22392684407296 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22392483080832 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22392281754368 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22392080427904 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22391879101440 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22391677774976 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22391476448512 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22391275122048 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22391073795584 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22390872469120 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22390671142656 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22390469816192 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22390268489728 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22390067163264 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22389865836800 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22389664510336 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22389463183872 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22389261857408 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22389060530944 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22388859204480 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22388657878016 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22388456551552 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22388255225088 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22388053898624 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22387852572160 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22387651245696 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22387449919232 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22387248588672 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22387047262208 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22386845935744 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22386644609280 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22386443282816 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22386241956352 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22386040629888 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22385839303424 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22385637976960 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22385436650496 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22385235324032 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22385033997568 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22384832671104 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22384631344640 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22384430018176 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22384228691712 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22384027365248 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22383826038784 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22383624712320 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22383423385856 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22383222059392 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22383020732928 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22382819406464 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22382618080000 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22382416753536 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22382215427072 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22382014100608 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22381812774144 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22381611447680 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22381410121216 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22381208794752 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22393573971712 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22393567381248 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_TENSORTRAIN_NORMALIZE_PLAIN_QB PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 5850, m: 117)                                                                              	 8.56124   	 600       	 45.0482   	 0         	 0.775237  	 58.1089   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 117, m: 5850)                                                                               	 6.62096   	 700       	 16.8201   	 0         	 1.16949   	 14.3824   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 117)                                                                              	 0.680627  	 100       	 40.5384   	 0         	 0.703829  	 57.597    
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 117, n: 50, r2new: 117)	 0.541676  	 700       	 105.672   	 0         	 10.8303   	 9.75708   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 117, m: 2500)                                                                               	 0.445827  	 100       	 15.1129   	 0         	 1.07451   	 14.0649   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 117, n: 50, r: 117, r2: 117)                          	 0.36935   	 700       	 303.541   	 0         	 20.9625   	 14.4802   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 5850, m: 50)                                                                               	 0.365958  	 100       	 32.0164   	 0         	 1.28441   	 24.927    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5850, r: 117, r2: 117, leftOrthog: 1)                      	 0.321671  	 600       	 298.742   	 0         	 31.0488   	 9.62171   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 117, r1_: 117, n: 50, r2: 117)                        	 0.119286  	 600       	 805.597   	 0         	 55.6344   	 14.4802   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 67, n: 50, r2: 67)                                                                                                         	 0.0663185 	 800       	 0         	 0         	 43.3206   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 117)                                                                                	 0.0609624 	 100       	 4.11182   	 0         	 0.187     	 21.9883   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 117, n: 50, r2new: 50) 	 0.0480094 	 100       	 72.7878   	 0         	 10.7945   	 6.74301   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 117, r1_: 50, n: 50, r2: 117)                         	 0.0265558 	 100       	 257.741   	 0         	 29.6071   	 8.70536   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 117, n: 50, r: 117, r2: 50)                           	 0.020277  	 100       	 337.55    	 0         	 38.775    	 8.70536   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 117, r2: 117, leftOrthog: 1)                      	 0.0178479 	 100       	 383.49    	 0         	 40.5594   	 9.455     
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5850, r: 50, r2: 50, leftOrthog: 1)                        	 0.0132461 	 100       	 220.82    	 0         	 53.2988   	 4.14306   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 117, r1_: 117, n: 50, r2: 50)                         	 0.0124283 	 100       	 550.719   	 0         	 38.5371   	 14.2906   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 117, m: 50)                                                                                 	 0.0116509 	 100       	 4.30581   	 0         	 0.978464  	 4.40058   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 117, m: 117, fromLeft: 1)                              	 0.00858066	 800       	 0         	 0         	 20.4202   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 117)  	 0.00264374	 100       	 51.7789   	 0         	 7.68275   	 6.73963   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 117, n: 50, r2new: 1)  	 0.00176699	 100       	 0.662144  	 0         	 5.29806   	 0.124979  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 117, r2: 117)                            	 0.00154408	 100       	 88.6546   	 0         	 13.1542   	 6.73963   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.00102587	 100       	 0.487391  	 0         	 1.94956   	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 117, n: 50, r: 2, r2: 1)                              	 0.000977634	 100       	 2.39353   	 0         	 14.3628   	 0.166648  
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 117)                            	 0.000918844	 100       	 0         	 0         	 10.1867   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000846716	 100       	 29.5258   	 0         	 7.0862    	 4.16667   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 117, leftOrthog: 1)                         	 0.00066498	 100       	 87.9726   	 0         	 27.1286   	 3.24279   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 117)                                                                                                         	 0.000511201	 100       	 0         	 0         	 18.3098   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 67)                                                                                                          	 0.00046618	 100       	 0         	 0         	 11.4977   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 67, n: 50, r2: 1)                                                                                                          	 0.000378334	 100       	 0         	 0         	 14.1674   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000351835	 100       	 0.71056   	 0         	 11.369    	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 117, m: 50, fromLeft: 1)                               	 0.000281528	 100       	 0         	 0         	 33.2471   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 24.8975   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 24.8974   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 13.5237   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 10.7635   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 10.7619   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 10.3605   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 9.66879   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 7.07844   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.594096  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.392149  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.35343   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.159117  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0676742 	 1100      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00886219	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00249986	 4600      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00154829	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.00102587	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000918844	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000351835	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23203785041792 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23203560810496 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23203359484032 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23203158157568 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23202956831104 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23202755504640 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23202554178176 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23202352851712 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23202151525248 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23201950198784 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23201748872320 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23201547545856 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23201346219392 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23201144892928 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23200943566464 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23200742240000 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23200540913536 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23200339587072 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23200138260608 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23199936934144 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23199735607680 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23199534281216 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23199332954752 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23199131628288 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23198930301824 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23198728975360 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23198527648896 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23198326322432 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23198124995968 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23197923669504 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23197722343040 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23197521016576 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23197319686016 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23197118359552 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23196917033088 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23196715706624 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23196514380160 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23196313053696 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23196111727232 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23195910400768 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23195709074304 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23195507747840 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23195306421376 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23195105094912 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23194903768448 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23194702441984 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23194501115520 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23194299789056 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23194098462592 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23193897136128 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23193695809664 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23193494483200 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23193293156736 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23193091830272 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23192890503808 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23192689177344 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23192487850880 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23192286524416 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23192085197952 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23191883871488 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23191682545024 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23191481218560 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23191279892096 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23203679381248 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23203672790784 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_TENSORTRAIN_NORMALIZE_PLAIN_QB PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 118, m: 5900)                                                                               	 6.99029   	 700       	 16.3435   	 0         	 1.12672   	 14.5054   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 5900, m: 118)                                                                              	 6.60812   	 600       	 59.8721   	 0         	 1.02161   	 58.6056   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 118)                                                                              	 0.681365  	 100       	 41.1924   	 0         	 0.709214  	 58.0818   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 118, n: 50, r2new: 118)	 0.569279  	 700       	 103.366   	 0         	 10.4894   	 9.85432   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5900, r: 118, r2: 118, leftOrthog: 1)                      	 0.436529  	 600       	 225.831   	 0         	 23.2721   	 9.70395   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 118, m: 2500)                                                                               	 0.435093  	 100       	 15.7494   	 0         	 1.11064   	 14.1804   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 118, n: 50, r: 118, r2: 118)                          	 0.408061  	 700       	 281.851   	 0         	 19.2996   	 14.604    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 5900, m: 50)                                                                               	 0.380436  	 100       	 31.0609   	 0         	 1.24604   	 24.9276   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 118, r1_: 118, n: 50, r2: 118)                        	 0.11559   	 600       	 852.859   	 0         	 58.3992   	 14.604    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 68, n: 50, r2: 68)                                                                                                         	 0.0821937 	 800       	 0         	 0         	 36.0047   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 118)                                                                                	 0.0616812 	 100       	 4.09634   	 0         	 0.186118  	 22.0093   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 118, n: 50, r2new: 50) 	 0.048045  	 100       	 74.1388   	 0         	 10.9414   	 6.77599   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 118, r1_: 50, n: 50, r2: 118)                         	 0.0351235 	 100       	 198.215   	 0         	 22.7107   	 8.72781   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 118, n: 50, r: 118, r2: 50)                           	 0.0193987 	 100       	 358.889   	 0         	 41.1202   	 8.72781   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5900, r: 50, r2: 50, leftOrthog: 1)                        	 0.0150122 	 100       	 196.507   	 0         	 47.428    	 4.14326   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 118, r2: 118, leftOrthog: 1)                      	 0.0144808 	 100       	 480.773   	 0         	 50.4307   	 9.53335   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 118, m: 50)                                                                                 	 0.0120732 	 100       	 4.19663   	 0         	 0.950868  	 4.41347   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 118, r1_: 118, n: 50, r2: 50)                         	 0.011353  	 100       	 613.231   	 0         	 42.5561   	 14.4099   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 118, m: 118, fromLeft: 1)                              	 0.0094811 	 800       	 0         	 0         	 18.7982   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 118)  	 0.00267436	 100       	 52.0647   	 0         	 7.69499   	 6.76606   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 118, n: 50, r2new: 1)  	 0.00147747	 100       	 0.798663  	 0         	 6.39039   	 0.124979  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 118, r2: 118)                            	 0.00147338	 100       	 94.5037   	 0         	 13.9673   	 6.76606   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.00105331	 100       	 0.474694  	 0         	 1.89878   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 118)                            	 0.000979031	 100       	 0         	 0         	 9.64219   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000857507	 100       	 29.1543   	 0         	 6.99703   	 4.16667   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 118, n: 50, r: 2, r2: 1)                              	 0.000626493	 100       	 3.767     	 0         	 22.6046   	 0.166648  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 118)                                                                                                         	 0.00051991	 100       	 0         	 0         	 18.157    	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 68)                                                                                                          	 0.00044233	 100       	 0         	 0         	 12.2985   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 118, leftOrthog: 1)                         	 0.000429997	 100       	 137.21    	 0         	 42.2329   	 3.2489    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 68, n: 50, r2: 1)                                                                                                          	 0.000373048	 100       	 0         	 0         	 14.5826   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000356165	 100       	 0.701922  	 0         	 11.2307   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 118, m: 50, fromLeft: 1)                               	 0.000322323	 100       	 0         	 0         	 29.2874   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 22.144    	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 22.1438   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 12.9929   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 8.52689   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 8.52532   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 8.20142   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 7.7316    	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 7.43746   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.621475  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.466452  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.429559  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.162924  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.083529  	 1100      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00980342	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00542286	 4600      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00377465	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.00105331	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000979031	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000356165	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23175951583104 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23175777740800 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23175576414336 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23175375087872 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23175173761408 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23174972434944 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23174771108480 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23174569782016 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23174368455552 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23174167129088 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23173965802624 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23173764476160 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23173563149696 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23173361823232 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23173160496768 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23172959170304 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23172757843840 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23172556517376 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23172355190912 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23172153864448 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23171952537984 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23171751211520 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23171549885056 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23171348558592 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23171147232128 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23170945905664 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23170744579200 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23170543252736 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23170341926272 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23170140599808 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23169939273344 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23169737946880 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23169536616320 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23169335289856 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23169133963392 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23168932636928 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23168731310464 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23168529984000 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23168328657536 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23168127331072 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23167926004608 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23167724678144 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23167523351680 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23167322025216 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23167120698752 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23166919372288 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23166718045824 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23166516719360 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23166315392896 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23166114066432 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23165912739968 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23165711413504 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23165510087040 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23165308760576 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23165107434112 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23164906107648 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23164704781184 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23164503454720 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23164302128256 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23164100801792 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23163899475328 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23163698148864 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23163496822400 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23175672878848 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23175667332864 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_TENSORTRAIN_NORMALIZE_PLAIN_QB PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 119, m: 5950)                                                                               	 7.1733    	 700       	 16.3348   	 0         	 1.11666   	 14.6283   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 5950, m: 119)                                                                              	 6.98777   	 600       	 58.0709   	 0         	 0.982548  	 59.1023   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 119)                                                                              	 0.689212  	 100       	 41.4193   	 0         	 0.70722   	 58.5664   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 119, n: 50, r2new: 119)	 0.577491  	 700       	 104.736   	 0         	 10.5239   	 9.9522    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5950, r: 119, r2: 119, leftOrthog: 1)                      	 0.553424  	 600       	 182.698   	 0         	 18.669    	 9.78618   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 119, m: 2500)                                                                               	 0.463006  	 100       	 15.0498   	 0         	 1.05274   	 14.2959   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 119, n: 50, r: 119, r2: 119)                          	 0.410375  	 700       	 287.447   	 0         	 19.5174   	 14.7277   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 5950, m: 50)                                                                               	 0.364441  	 100       	 32.6985   	 0         	 1.31171   	 24.9282   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 119, r1_: 119, n: 50, r2: 119)                        	 0.111876  	 600       	 903.761   	 0         	 61.3646   	 14.7277   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 69, n: 50, r2: 69)                                                                                                         	 0.0845275 	 800       	 0         	 0         	 36.0479   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 119)                                                                                	 0.0625012 	 100       	 4.07459   	 0         	 0.184957  	 22.03     
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 119, n: 50, r2new: 50) 	 0.0503538 	 100       	 72.0999   	 0         	 10.5891   	 6.80889   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 119, r1_: 50, n: 50, r2: 119)                         	 0.0255604 	 100       	 277.01    	 0         	 31.6583   	 8.75      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 119, n: 50, r: 119, r2: 50)                           	 0.0222873 	 100       	 317.692   	 0         	 36.3077   	 8.75      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 119, r2: 119, leftOrthog: 1)                      	 0.0193569 	 100       	 365.787   	 0         	 38.0566   	 9.61166   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5950, r: 50, r2: 50, leftOrthog: 1)                        	 0.0154768 	 100       	 192.223   	 0         	 46.392    	 4.14345   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 119, r1_: 119, n: 50, r2: 50)                         	 0.0122005 	 100       	 580.344   	 0         	 39.9433   	 14.5292   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 119, m: 50)                                                                                 	 0.0118108 	 100       	 4.33219   	 0         	 0.978767  	 4.42618   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 119, m: 119, fromLeft: 1)                              	 0.00860863	 800       	 0         	 0         	 21.0557   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 119)  	 0.00260351	 100       	 54.3919   	 0         	 8.00794   	 6.79224   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 119, n: 50, r2new: 1)  	 0.00170409	 100       	 0.69832   	 0         	 5.5875    	 0.124979  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 119, r2: 119)                            	 0.00150081	 100       	 94.356    	 0         	 13.8917   	 6.79224   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.00100467	 100       	 0.497675  	 0         	 1.9907    	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 119, n: 50, r: 2, r2: 1)                              	 0.000901539	 100       	 2.63993   	 0         	 15.8414   	 0.166648  
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 119)                            	 0.000899416	 100       	 0         	 0         	 10.5846   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000787293	 100       	 31.7544   	 0         	 7.62105   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 119)                                                                                                         	 0.000504395	 100       	 0         	 0         	 18.8741   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 119, leftOrthog: 1)                         	 0.000484019	 100       	 122.929   	 0         	 37.7671   	 3.25492   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 69)                                                                                                          	 0.000440706	 100       	 0         	 0         	 12.5254   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 69, n: 50, r2: 1)                                                                                                          	 0.000360974	 100       	 0         	 0         	 15.292    	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000338129	 100       	 0.739363  	 0         	 11.8298   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 119, m: 50, fromLeft: 1)                               	 0.000286714	 100       	 0         	 0         	 33.2038   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 23.2099   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 23.2098   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 13.5285   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 9.03582   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 9.03432   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 8.70166   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 8.10393   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 7.64812   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.632153  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.588742  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.435064  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.150425  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0858336 	 1100      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00889535	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00455674	 4600      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00415916	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.00100467	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000899416	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000338129	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22844313704320 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22844125734912 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22843924408448 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22843723081984 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22843521755520 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22843320429056 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22843119102592 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22842917776128 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22842716449664 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22842515123200 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22842313796736 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22842112470272 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22841911143808 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22841709817344 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22841508490880 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22841307164416 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22841105837952 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22840904511488 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22840703185024 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22840501858560 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22840300532096 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22840099205632 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22839897879168 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22839696552704 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22839495226240 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22839293899776 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22839092573312 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22838891246848 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22838689920384 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22838488593920 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22838287267456 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22838085940992 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22837884610432 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22837683283968 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22837481957504 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22837280631040 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22837079304576 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22836877978112 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22836676651648 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22836475325184 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22836273998720 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22836072672256 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22835871345792 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22835670019328 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22835468692864 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22835267366400 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22835066039936 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22834864713472 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22834663387008 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22834462060544 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22834260734080 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22834059407616 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22833858081152 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22833656754688 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22833455428224 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22833254101760 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22833052775296 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22832851448832 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22832650122368 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22832448795904 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22832247469440 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22832046142976 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22831844816512 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22844208043776 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22844201453312 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_TENSORTRAIN_NORMALIZE_PLAIN_QB PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 6000, m: 120)                                                                              	 7.3502    	 600       	 56.611    	 0         	 0.949865  	 59.599    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 120, m: 6000)                                                                               	 7.18405   	 700       	 16.725    	 0         	 1.1338    	 14.7513   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 120)                                                                              	 0.683237  	 100       	 42.4895   	 0         	 0.71954   	 59.051    
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 120, n: 50, r2new: 120)	 0.588936  	 700       	 105.546   	 0         	 10.5014   	 10.0507   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 120, m: 2500)                                                                               	 0.437089  	 100       	 16.2091   	 0         	 1.12475   	 14.4112   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 120, n: 50, r: 120, r2: 120)                          	 0.415933  	 700       	 290.816   	 0         	 19.5816   	 14.8515   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 6000, m: 50)                                                                               	 0.393974  	 100       	 30.5012   	 0         	 1.22353   	 24.9288   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6000, r: 120, r2: 120, leftOrthog: 1)                      	 0.357647  	 600       	 289.895   	 0         	 29.376    	 9.86842   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 120, r1_: 120, n: 50, r2: 120)                        	 0.116415  	 600       	 890.604   	 0         	 59.9673   	 14.8515   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 70, n: 50, r2: 70)                                                                                                         	 0.0883881 	 800       	 0         	 0         	 35.4799   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 120)                                                                                	 0.0651345 	 100       	 3.94057   	 0         	 0.178707  	 22.0504   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 120, n: 50, r2new: 50) 	 0.0468319 	 100       	 79.0059   	 0         	 11.5477   	 6.84172   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 120, r1_: 50, n: 50, r2: 120)                         	 0.0302767 	 100       	 237.807   	 0         	 27.11     	 8.77193   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 120, n: 50, r: 120, r2: 50)                           	 0.0226005 	 100       	 318.577   	 0         	 36.3178   	 8.77193   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 120, r2: 120, leftOrthog: 1)                      	 0.0221729 	 100       	 324.72    	 0         	 33.5112   	 9.68992   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6000, r: 50, r2: 50, leftOrthog: 1)                        	 0.0157151 	 100       	 190.9     	 0         	 46.0705   	 4.14365   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 120, r1_: 120, n: 50, r2: 50)                         	 0.0121499 	 100       	 592.599   	 0         	 40.4548   	 14.6484   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 120, m: 50)                                                                                 	 0.0118673 	 100       	 4.3537    	 0         	 0.980847  	 4.43871   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 120, m: 120, fromLeft: 1)                              	 0.00901261	 800       	 0         	 0         	 20.4514   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 120)  	 0.00275431	 100       	 52.2817   	 0         	 7.66798   	 6.81818   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 120, r2: 120)                            	 0.00165668	 100       	 86.9208   	 0         	 12.7484   	 6.81818   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 120, n: 50, r2new: 1)  	 0.00141321	 100       	 0.849129  	 0         	 6.79416   	 0.124979  
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.00109082	 100       	 0.458372  	 0         	 1.83349   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 120)                            	 0.000915212	 100       	 0         	 0         	 10.4894   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000888464	 100       	 28.1385   	 0         	 6.75323   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 70)                                                                                                          	 0.000735577	 100       	 0         	 0         	 7.61307   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 120, n: 50, r: 2, r2: 1)                              	 0.000687431	 100       	 3.49126   	 0         	 20.9499   	 0.166648  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 120)                                                                                                         	 0.000516947	 100       	 0         	 0         	 18.5706   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 120, leftOrthog: 1)                         	 0.000423205	 100       	 141.775   	 0         	 43.4777   	 3.26087   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 70, n: 50, r2: 1)                                                                                                          	 0.000378468	 100       	 0         	 0         	 14.7965   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000349236	 100       	 0.715848  	 0         	 11.4536   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 120, m: 50, fromLeft: 1)                               	 0.000292767	 100       	 0         	 0         	 32.7906   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 23.0854   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 23.0853   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 13.1644   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 9.25936   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 9.25771   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 8.95702   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 8.49255   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 7.63301   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.639935  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.440878  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.395958  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.15973   	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0900191 	 1100      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00930537	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00395374	 4600      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00327292	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.00109082	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000915212	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000349236	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23281165887360 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23280937330688 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23280736004224 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23280534677760 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23280333351296 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23280132024832 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23279930698368 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23279729371904 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23279528045440 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23279326718976 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23279125392512 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23278924066048 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23278722739584 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23278521413120 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23278320086656 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23278118760192 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23277917433728 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23277716107264 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23277514780800 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23277313454336 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23277112127872 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23276910801408 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23276709474944 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23276508148480 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23276306822016 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23276105495552 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23275904169088 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23275702842624 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23275501516160 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23275300189696 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23275098863232 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23274897536768 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23274696206208 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23274494879744 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23274293553280 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23274092226816 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23273890900352 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23273689573888 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23273488247424 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23273286920960 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23273085594496 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23272884268032 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23272682941568 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23272481615104 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23272280288640 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23272078962176 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23271877635712 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23271676309248 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23271474982784 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23271273656320 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23271072329856 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23270871003392 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23270669676928 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23270468350464 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23270267024000 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23270065697536 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23269864371072 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23269663044608 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23269461718144 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23269260391680 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23269059065216 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23268857738752 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23268656412288 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23281060226816 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23281053636352 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_TENSORTRAIN_NORMALIZE_PLAIN_QB PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 6050, m: 121)                                                                              	 9.19667   	 600       	 46.3855   	 0         	 0.77186   	 60.0957   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 121, m: 6050)                                                                               	 7.05876   	 700       	 17.451    	 0         	 1.17324   	 14.8742   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 121)                                                                              	 0.721318  	 100       	 40.9226   	 0         	 0.687366  	 59.5354   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 121, n: 50, r2new: 121)	 0.570327  	 700       	 111.992   	 0         	 11.0339   	 10.1498   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 121, m: 2500)                                                                               	 0.463069  	 100       	 15.5536   	 0         	 1.0707    	 14.5265   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 121, n: 50, r: 121, r2: 121)                          	 0.389673  	 700       	 318.24    	 0         	 21.251    	 14.9752   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 6050, m: 50)                                                                               	 0.382582  	 100       	 31.6707   	 0         	 1.27042   	 24.9294   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6050, r: 121, r2: 121, leftOrthog: 1)                      	 0.297616  	 600       	 357.151   	 0         	 35.8922   	 9.95066   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 121, r1_: 121, n: 50, r2: 121)                        	 0.126346  	 600       	 841.29    	 0         	 56.1787   	 14.9752   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 71, n: 50, r2: 71)                                                                                                         	 0.0760861 	 800       	 0         	 0         	 42.4025   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 121)                                                                                	 0.0631111 	 100       	 4.09859   	 0         	 0.185704  	 22.0705   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 121, n: 50, r2new: 50) 	 0.0412712 	 100       	 91.3592   	 0         	 13.2897   	 6.87445   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 121, r1_: 50, n: 50, r2: 121)                         	 0.0272744 	 100       	 268.402   	 0         	 30.5224   	 8.7936    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 121, n: 50, r: 121, r2: 50)                           	 0.0216117 	 100       	 338.729   	 0         	 38.5199   	 8.7936    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 121, r2: 121, leftOrthog: 1)                      	 0.0141013 	 100       	 519.137   	 0         	 53.1459   	 9.76815   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6050, r: 50, r2: 50, leftOrthog: 1)                        	 0.0128185 	 100       	 235.987   	 0         	 56.9488   	 4.14384   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 121, r1_: 121, n: 50, r2: 50)                         	 0.0126034 	 100       	 580.837   	 0         	 39.3318   	 14.7676   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 121, m: 50)                                                                                 	 0.0119092 	 100       	 4.38035   	 0         	 0.98411   	 4.45108   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 121, m: 121, fromLeft: 1)                              	 0.00912541	 800       	 0         	 0         	 20.5366   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 121)  	 0.00277157	 100       	 52.8256   	 0         	 7.71865   	 6.84389   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 121, r2: 121)                            	 0.00161585	 100       	 90.6086   	 0         	 13.2393   	 6.84389   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 121, n: 50, r2new: 1)  	 0.00139087	 100       	 0.869962  	 0         	 6.96084   	 0.124979  
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.00101328	 100       	 0.493447  	 0         	 1.97379   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 121)                            	 0.00096479	 100       	 0         	 0         	 10.0333   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 121, leftOrthog: 1)                         	 0.000869422	 100       	 69.5865   	 0         	 21.3015   	 3.26674   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000846622	 100       	 29.5291   	 0         	 7.08699   	 4.16667   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 121, n: 50, r: 2, r2: 1)                              	 0.000673199	 100       	 3.59478   	 0         	 21.571    	 0.166648  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 121)                                                                                                         	 0.000545189	 100       	 0         	 0         	 17.7553   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 71)                                                                                                          	 0.000478791	 100       	 0         	 0         	 11.8632   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 71, n: 50, r2: 1)                                                                                                          	 0.000409712	 100       	 0         	 0         	 13.8634   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000357488	 100       	 0.699324  	 0         	 11.1892   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 121, m: 50, fromLeft: 1)                               	 0.000290426	 100       	 0         	 0         	 33.3303   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 26.4456   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 26.4456   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 14.3312   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 11.4802   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 11.4786   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 11.0372   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 10.3637   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 7.53374   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.61576   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.413573  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.325405  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.16707   	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0775198 	 1100      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00941584	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00243849	 4600      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00207644	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.00101328	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.00096479	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000357488	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22973839333248 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22973645842432 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22973444515968 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22973243189504 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22973041863040 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22972840536576 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22972639210112 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22972437883648 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22972236557184 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22972035230720 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22971833904256 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22971632577792 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22971431251328 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22971229924864 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22971028598400 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22970827271936 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22970625945472 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22970424619008 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22970223292544 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22970021966080 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22969820639616 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22969619313152 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22969417986688 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22969216660224 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22969015333760 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22968814007296 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22968612680832 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22968411354368 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22968210027904 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22968008701440 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22967807374976 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22967606048512 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22967404717952 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22967203391488 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22967002065024 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22966800738560 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22966599412096 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22966398085632 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22966196759168 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22965995432704 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22965794106240 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22965592779776 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22965391453312 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22965190126848 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22964988800384 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22964787473920 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22964586147456 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22964384820992 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22964183494528 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22963982168064 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22963780841600 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22963579515136 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22963378188672 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22963176862208 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22962975535744 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22962774209280 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22962572882816 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22962371556352 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22962170229888 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22961968903424 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22961767576960 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22961566250496 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22961364924032 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22973733672704 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22973727082240 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_TENSORTRAIN_NORMALIZE_PLAIN_QB PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 6100, m: 122)                                                                              	 9.38465   	 600       	 46.5927   	 0         	 0.768952  	 60.5924   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 122, m: 6100)                                                                               	 7.19837   	 700       	 17.5404   	 0         	 1.16958   	 14.9971   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 122)                                                                              	 0.724584  	 100       	 41.4171   	 0         	 0.690058  	 60.0196   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 122, n: 50, r2new: 122)	 0.583271  	 700       	 112.506   	 0         	 10.9767   	 10.2495   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 122, m: 2500)                                                                               	 0.456758  	 100       	 16.0281   	 0         	 1.09468   	 14.6417   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 122, n: 50, r: 122, r2: 122)                          	 0.400086  	 700       	 317.705   	 0         	 21.0414   	 15.099    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 6100, m: 50)                                                                               	 0.394003  	 100       	 31.0066   	 0         	 1.24375   	 24.9299   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6100, r: 122, r2: 122, leftOrthog: 1)                      	 0.247814  	 600       	 439.648   	 0         	 43.8206   	 10.0329   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 122, r1_: 122, n: 50, r2: 122)                        	 0.126925  	 600       	 858.385   	 0         	 56.8504   	 15.099    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 72, n: 50, r2: 72)                                                                                                         	 0.0823289 	 800       	 0         	 0         	 40.2989   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 122)                                                                                	 0.0645131 	 100       	 4.04053   	 0         	 0.182909  	 22.0904   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 122, n: 50, r2new: 50) 	 0.0471576 	 100       	 81.4716   	 0         	 11.7954   	 6.90709   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 122, r1_: 50, n: 50, r2: 122)                         	 0.0277913 	 100       	 267.782   	 0         	 30.3779   	 8.81503   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 122, n: 50, r: 122, r2: 50)                           	 0.0224551 	 100       	 331.417   	 0         	 37.5969   	 8.81503   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 122, r2: 122, leftOrthog: 1)                      	 0.0180618 	 100       	 412.03    	 0         	 41.846    	 9.84633   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6100, r: 50, r2: 50, leftOrthog: 1)                        	 0.0142771 	 100       	 213.629   	 0         	 51.5511   	 4.14402   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 122, r1_: 122, n: 50, r2: 50)                         	 0.0123759 	 100       	 601.33    	 0         	 40.3936   	 14.8868   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 122, m: 50)                                                                                 	 0.0121862 	 100       	 4.32183   	 0         	 0.96831   	 4.46327   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 122, m: 122, fromLeft: 1)                              	 0.0099064 	 800       	 0         	 0         	 19.2315   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 122)  	 0.00272112	 100       	 54.698    	 0         	 7.9626    	 6.86937   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 122, n: 50, r2new: 1)  	 0.00176692	 100       	 0.690466  	 0         	 5.52463   	 0.12498   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 122, r2: 122)                            	 0.00166554	 100       	 89.3645   	 0         	 13.0091   	 6.86937   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.00106956	 100       	 0.467481  	 0         	 1.86992   	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 122, n: 50, r: 2, r2: 1)                              	 0.000993268	 100       	 2.45654   	 0         	 14.7408   	 0.166648  
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 122)                            	 0.000865098	 100       	 0         	 0         	 11.282    	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 122, leftOrthog: 1)                         	 0.000832122	 100       	 73.3066   	 0         	 22.4006   	 3.27253   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000807207	 100       	 30.971    	 0         	 7.43304   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 122)                                                                                                         	 0.000593665	 100       	 0         	 0         	 16.4402   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 72)                                                                                                          	 0.000441469	 100       	 0         	 0         	 13.0473   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 72, n: 50, r2: 1)                                                                                                          	 0.000367941	 100       	 0         	 0         	 15.6547   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.00036083	 100       	 0.692847  	 0         	 11.0856   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 122, m: 50, fromLeft: 1)                               	 0.000282192	 100       	 0         	 0         	 34.5864   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 26.62     	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 26.6199   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 14.3213   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 11.6534   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 11.6517   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 11.2131   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 10.5678   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 7.66731   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.634916  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.4252    	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.280985  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.1679    	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0837319 	 1100      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0101886 	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00254575	 4600      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00243283	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.00106956	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000865098	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.00036083	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23066129176448 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23065920530432 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23065719203968 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23065517877504 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23065316551040 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23065115224576 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23064913898112 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23064712571648 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23064511245184 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23064309918720 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23064108592256 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23063907265792 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23063705939328 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23063504612864 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23063303286400 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23063101959936 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23062900633472 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23062699307008 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23062497980544 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23062296654080 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23062095327616 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23061894001152 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23061692674688 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23061491348224 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23061290021760 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23061088695296 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23060887368832 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23060686042368 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23060484715904 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23060283389440 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23060082062976 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23059880736512 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23059679405952 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23059478079488 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23059276753024 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23059075426560 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23058874100096 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23058672773632 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23058471447168 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23058270120704 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23058068794240 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23057867467776 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23057666141312 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23057464814848 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23057263488384 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23057062161920 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23056860835456 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23056659508992 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23056458182528 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23056256856064 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23056055529600 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23055854203136 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23055652876672 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23055451550208 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23055250223744 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23055048897280 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23054847570816 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23054646244352 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23054444917888 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23054243591424 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23054042264960 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23053840938496 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23053639612032 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23066023515904 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23066016925440 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_TENSORTRAIN_NORMALIZE_PLAIN_QB PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 6150, m: 123)                                                                              	 8.91978   	 600       	 50.2363   	 0         	 0.822344  	 61.0891   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 123, m: 6150)                                                                               	 7.53517   	 700       	 17.1718   	 0         	 1.13569   	 15.1201   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 123)                                                                              	 0.739279  	 100       	 41.2647   	 0         	 0.682018  	 60.5038   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 123, n: 50, r2new: 123)	 0.598488  	 700       	 112.63    	 0         	 10.8824   	 10.3498   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 123, m: 2500)                                                                               	 0.482069  	 100       	 15.4344   	 0         	 1.04591   	 14.7569   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 123, n: 50, r: 123, r2: 123)                          	 0.414725  	 700       	 314.089   	 0         	 20.6329   	 15.2228   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 6150, m: 50)                                                                               	 0.402431  	 100       	 30.6057   	 0         	 1.22764   	 24.9305   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6150, r: 123, r2: 123, leftOrthog: 1)                      	 0.239214  	 600       	 466.746   	 0         	 46.1434   	 10.1151   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 123, r1_: 123, n: 50, r2: 123)                        	 0.124894  	 600       	 893.972   	 0         	 58.726    	 15.2228   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 73, n: 50, r2: 73)                                                                                                         	 0.0923024 	 800       	 0         	 0         	 36.9498   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 123)                                                                                	 0.0634462 	 100       	 4.13999   	 0         	 0.187245  	 22.11     
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 123, n: 50, r2new: 50) 	 0.044619  	 100       	 87.7318   	 0         	 12.6422   	 6.93962   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 123, r1_: 50, n: 50, r2: 123)                         	 0.033304  	 100       	 227.135   	 0         	 25.705    	 8.83621   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 123, n: 50, r: 123, r2: 50)                           	 0.0216482 	 100       	 349.429   	 0         	 39.5452   	 8.83621   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 123, r2: 123, leftOrthog: 1)                      	 0.0156178 	 100       	 484.35    	 0         	 48.8036   	 9.92448   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6150, r: 50, r2: 50, leftOrthog: 1)                        	 0.0142817 	 100       	 215.311   	 0         	 51.9547   	 4.1442    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 123, m: 50)                                                                                 	 0.0120918 	 100       	 4.39693   	 0         	 0.982487  	 4.4753    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 123, r1_: 123, n: 50, r2: 50)                         	 0.0118661 	 100       	 637.49    	 0         	 42.4828   	 15.0059   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 123, m: 123, fromLeft: 1)                              	 0.00974847	 800       	 0         	 0         	 19.8648   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 123)  	 0.00281632	 100       	 53.719    	 0         	 7.79144   	 6.89462   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 123, n: 50, r2new: 1)  	 0.00202476	 100       	 0.607481  	 0         	 4.86064   	 0.12498   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 123, r2: 123)                            	 0.00168149	 100       	 89.9736   	 0         	 13.0498   	 6.89462   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 123, n: 50, r: 2, r2: 1)                              	 0.00113663	 100       	 2.1643    	 0         	 12.9872   	 0.166649  
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.00104766	 100       	 0.477253  	 0         	 1.90901   	 0.25      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 123, leftOrthog: 1)                         	 0.000939952	 100       	 65.4289   	 0         	 19.9585   	 3.27825   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 123)                            	 0.000924631	 100       	 0         	 0         	 10.6421   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000815299	 100       	 30.6636   	 0         	 7.35926   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 123)                                                                                                         	 0.000533653	 100       	 0         	 0         	 18.4389   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 73)                                                                                                          	 0.000448509	 100       	 0         	 0         	 13.0209   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 73, n: 50, r2: 1)                                                                                                          	 0.000375326	 100       	 0         	 0         	 15.5598   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000351107	 100       	 0.712034  	 0         	 11.3925   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 123, m: 50, fromLeft: 1)                               	 0.000295709	 100       	 0         	 0         	 33.276    	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 26.4711   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 26.471    	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 14.8137   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 10.99     	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 10.9884   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 10.6306   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 10.1249   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 8.02933   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.647948  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.439191  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.270053  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.17088   	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0936599 	 1100      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0100442 	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00284043	 4600      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00223506	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.00104766	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000924631	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000351107	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23271549212544 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23271340763136 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23271139436672 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23270938110208 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23270736783744 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23270535457280 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23270334130816 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23270132804352 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23269931477888 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23269730151424 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23269528824960 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23269327498496 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23269126172032 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23268924845568 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23268723519104 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23268522192640 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23268320866176 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23268119539712 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23267918213248 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23267716886784 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23267515560320 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23267314233856 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23267112907392 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23266911580928 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23266710254464 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23266508928000 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23266307601536 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23266106275072 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23265904948608 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23265703622144 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23265502295680 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23265300969216 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23265099638656 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23264898312192 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23264696985728 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23264495659264 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23264294332800 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23264093006336 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23263891679872 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23263690353408 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23263489026944 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23263287700480 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23263086374016 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23262885047552 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23262683721088 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23262482394624 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23262281068160 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23262079741696 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23261878415232 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23261677088768 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23261475762304 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23261274435840 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23261073109376 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23260871782912 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23260670456448 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23260469129984 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23260267803520 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23260066477056 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23259865150592 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23259663824128 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23259462497664 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23259261171200 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23259059844736 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23271443552000 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23271436961536 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_TENSORTRAIN_NORMALIZE_PLAIN_QB PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 6200, m: 124)                                                                              	 8.39136   	 600       	 54.7128   	 0         	 0.888399  	 61.5858   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 124, m: 6200)                                                                               	 7.67696   	 700       	 17.2691   	 0         	 1.13292   	 15.243    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 124)                                                                              	 0.740305  	 100       	 41.883    	 0         	 0.686744  	 60.9878   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 124, n: 50, r2new: 124)	 0.632256  	 700       	 109.499   	 0         	 10.4778   	 10.4506   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 124, m: 2500)                                                                               	 0.47531   	 100       	 15.9073   	 0         	 1.06962   	 14.8719   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 124, n: 50, r: 124, r2: 124)                          	 0.44818   	 700       	 297.79    	 0         	 19.4044   	 15.3465   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6200, r: 124, r2: 124, leftOrthog: 1)                      	 0.410662  	 600       	 278.568   	 0         	 27.3177   	 10.1974   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 6200, m: 50)                                                                               	 0.402736  	 100       	 30.8308   	 0         	 1.23664   	 24.9311   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 124, r1_: 124, n: 50, r2: 124)                        	 0.127566  	 600       	 896.77    	 0         	 58.4347   	 15.3465   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 74, n: 50, r2: 74)                                                                                                         	 0.100884  	 800       	 0         	 0         	 34.7392   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 124)                                                                                	 0.064619  	 100       	 4.0958    	 0         	 0.185085  	 22.1293   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 124, r1_: 50, n: 50, r2: 124)                         	 0.0449424 	 100       	 171.064   	 0         	 19.3136   	 8.85714   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 124, n: 50, r2new: 50) 	 0.0403805 	 100       	 98.7606   	 0         	 14.1653   	 6.97203   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 124, n: 50, r: 124, r2: 50)                           	 0.0199123 	 100       	 386.092   	 0         	 43.5911   	 8.85714   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 124, r2: 124, leftOrthog: 1)                      	 0.0198637 	 100       	 387.037   	 0         	 38.6937   	 10.0026   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6200, r: 50, r2: 50, leftOrthog: 1)                        	 0.0127745 	 100       	 242.671   	 0         	 58.5541   	 4.14439   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 124, m: 50)                                                                                 	 0.0123292 	 100       	 4.35279   	 0         	 0.970051  	 4.48717   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 124, r1_: 124, n: 50, r2: 50)                         	 0.0123183 	 100       	 624.11    	 0         	 41.2637   	 15.1249   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 124, m: 124, fromLeft: 1)                              	 0.00985606	 800       	 0         	 0         	 19.9687   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 124)  	 0.00276671	 100       	 55.575    	 0         	 8.03148   	 6.91964   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 124, r2: 124)                            	 0.00158608	 100       	 96.9436   	 0         	 14.0099   	 6.91964   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 124, n: 50, r2new: 1)  	 0.00148516	 100       	 0.834926  	 0         	 6.68049   	 0.12498   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000980437	 100       	 0.509977  	 0         	 2.03991   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 124)                            	 0.00096336	 100       	 0         	 0         	 10.2973   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.00082518	 100       	 30.2964   	 0         	 7.27114   	 4.16667   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 124, n: 50, r: 2, r2: 1)                              	 0.000745323	 100       	 3.32742   	 0         	 19.9666   	 0.166649  
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 124, leftOrthog: 1)                         	 0.000628953	 100       	 98.5765   	 0         	 30.0181   	 3.2839    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 124)                                                                                                         	 0.000534145	 100       	 0         	 0         	 18.5717   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 74)                                                                                                          	 0.000463205	 100       	 0         	 0         	 12.7805   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 74, n: 50, r2: 1)                                                                                                          	 0.000405172	 100       	 0         	 0         	 14.6111   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000334449	 100       	 0.747498  	 0         	 11.96     	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 124, m: 50, fromLeft: 1)                               	 0.000306601	 100       	 0         	 0         	 32.3548   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 25.4716   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 25.4715   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 14.2729   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 10.4834   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 10.4819   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 10.1492   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 9.59902   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 8.1646    	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.676889  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.470424  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.443929  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.185652  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.102287  	 1100      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0101627 	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00394316	 4600      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00351314	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000980437	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.00096336	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000334449	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23284377548672 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23284158556160 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23283957229696 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23283755903232 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23283554576768 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23283353250304 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23283151923840 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23282950597376 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23282749270912 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23282547944448 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23282346617984 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23282145291520 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23281943965056 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23281742638592 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23281541312128 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23281339985664 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23281138659200 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23280937332736 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23280736006272 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23280534679808 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23280333353344 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23280132026880 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23279930700416 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23279729373952 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23279528047488 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23279326721024 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23279125394560 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23278924068096 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23278722741632 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23278521415168 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23278320088704 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23278118762240 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23277917431680 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23277716105216 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23277514778752 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23277313452288 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23277112125824 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23276910799360 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23276709472896 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23276508146432 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23276306819968 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23276105493504 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23275904167040 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23275702840576 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23275501514112 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23275300187648 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23275098861184 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23274897534720 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23274696208256 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23274494881792 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23274293555328 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23274092228864 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23273890902400 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23273689575936 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23273488249472 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23273286923008 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23273085596544 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23272884270080 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23272682943616 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23272481617152 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23272280290688 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23272078964224 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23271877637760 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23284271888128 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23284265297664 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_TENSORTRAIN_NORMALIZE_PLAIN_QB PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 6250, m: 125)                                                                              	 8.8746    	 600       	 52.9953   	 0         	 0.853627  	 62.0825   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 125, m: 6250)                                                                               	 7.82707   	 700       	 17.351    	 0         	 1.12918   	 15.3659   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 125)                                                                              	 0.742814  	 100       	 42.4204   	 0         	 0.690079  	 61.4717   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 125, n: 50, r2new: 125)	 0.658662  	 700       	 107.937   	 0         	 10.2291   	 10.5519   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 125, m: 2500)                                                                               	 0.484839  	 100       	 15.845    	 0         	 1.05726   	 14.9869   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 125, n: 50, r: 125, r2: 125)                          	 0.445066  	 700       	 307.188   	 0         	 19.8566   	 15.4703   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 6250, m: 50)                                                                               	 0.422788  	 100       	 29.605    	 0         	 1.18745   	 24.9316   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6250, r: 125, r2: 125, leftOrthog: 1)                      	 0.360373  	 600       	 325.184   	 0         	 31.6339   	 10.2796   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 125, r1_: 125, n: 50, r2: 125)                        	 0.142401  	 600       	 822.941   	 0         	 53.1949   	 15.4703   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 75, n: 50, r2: 75)                                                                                                         	 0.111624  	 800       	 0         	 0         	 32.2512   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 125)                                                                                	 0.0654525 	 100       	 4.0742    	 0         	 0.18395   	 22.1484   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 125, n: 50, r2new: 50) 	 0.0461924 	 100       	 87.9474   	 0         	 12.5562   	 7.00431   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 125, r1_: 50, n: 50, r2: 125)                         	 0.033082  	 100       	 236.155   	 0         	 26.6005   	 8.87784   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 125, r2: 125, leftOrthog: 1)                      	 0.0265195 	 100       	 294.595   	 0         	 29.2238   	 10.0806   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6250, r: 50, r2: 50, leftOrthog: 1)                        	 0.0239241 	 100       	 130.621   	 0         	 31.5163   	 4.14456   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 125, n: 50, r: 125, r2: 50)                           	 0.0229505 	 100       	 340.406   	 0         	 38.3433   	 8.87784   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 125, r1_: 125, n: 50, r2: 50)                         	 0.0131169 	 100       	 595.605   	 0         	 39.0717   	 15.2439   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 125, m: 50)                                                                                 	 0.0127194 	 100       	 4.25859   	 0         	 0.946587  	 4.49889   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 125, m: 125, fromLeft: 1)                              	 0.00976435	 800       	 0         	 0         	 20.4827   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 125)  	 0.00280111	 100       	 55.7815   	 0         	 8.03254   	 6.94444   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 125, r2: 125)                            	 0.00169002	 100       	 92.4545   	 0         	 13.3135   	 6.94444   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 125, n: 50, r2new: 1)  	 0.00152375	 100       	 0.820345  	 0         	 6.56381   	 0.12498   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000976316	 100       	 0.512129  	 0         	 2.04852   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 125)                            	 0.000906959	 100       	 0         	 0         	 11.0259   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000828443	 100       	 30.1771   	 0         	 7.2425    	 4.16667   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 125, n: 50, r: 2, r2: 1)                              	 0.000719378	 100       	 3.47522   	 0         	 20.8536   	 0.166649  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 125)                                                                                                         	 0.000535366	 100       	 0         	 0         	 18.6788   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 75)                                                                                                          	 0.000472041	 100       	 0         	 0         	 12.7108   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 125, leftOrthog: 1)                         	 0.000416171	 100       	 150.179   	 0         	 45.6543   	 3.28947   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 75, n: 50, r2: 1)                                                                                                          	 0.000399154	 100       	 0         	 0         	 15.0318   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000336903	 100       	 0.742053  	 0         	 11.8729   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 125, m: 50, fromLeft: 1)                               	 0.000301611	 100       	 0         	 0         	 33.1553   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 26.5834   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 26.5833   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 14.8022   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 11.0436   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 11.0421   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 10.6754   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 10.1057   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 8.32463   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.709179  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.470426  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.411233  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.189428  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.11303   	 1100      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.010066  	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00399   	 4600      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00325358	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000976316	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000906959	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000336903	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23409584449408 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23409383696384 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23409182369920 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23408981043456 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23408779716992 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23408578390528 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23408377064064 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23408175737600 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23407974411136 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23407773084672 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23407571758208 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23407370431744 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23407169105280 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23406967778816 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23406766452352 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23406565125888 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23406363799424 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23406162472960 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23405961146496 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23405759820032 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23405558493568 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23405357167104 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23405155840640 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23404954514176 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23404753187712 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23404551861248 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23404350534784 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23404149208320 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23403947881856 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23403746555392 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23403545228928 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23403343902464 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23403142571904 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23402941245440 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23402739918976 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23402538592512 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23402337266048 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23402135939584 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23401934613120 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23401733286656 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23401531960192 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23401330633728 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23401129307264 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23400927980800 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23400726654336 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23400525327872 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23400324001408 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23400122674944 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23399921348480 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23399720022016 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23399518695552 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23399317369088 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23399116042624 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23398914716160 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23398713389696 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23398512063232 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23398310736768 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23398109410304 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23397908083840 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23397706757376 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23397505430912 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23397304104448 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23397102777984 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23409478788864 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23409472198400 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_TENSORTRAIN_NORMALIZE_PLAIN_QB PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 6300, m: 126)                                                                              	 9.55985   	 600       	 50.3868   	 0         	 0.805169  	 62.5792   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 126, m: 6300)                                                                               	 7.79549   	 700       	 17.8427   	 0         	 1.15197   	 15.4889   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 126)                                                                              	 0.754327  	 100       	 42.4468   	 0         	 0.685116  	 61.9555   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 126, n: 50, r2new: 126)	 0.624626  	 700       	 116.861   	 0         	 10.9689   	 10.6538   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 126, m: 2500)                                                                               	 0.486907  	 100       	 16.029    	 0         	 1.0614    	 15.1018   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 126, n: 50, r: 126, r2: 126)                          	 0.430556  	 700       	 325.222   	 0         	 20.8555   	 15.5941   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 6300, m: 50)                                                                               	 0.397925  	 100       	 31.7061   	 0         	 1.2717    	 24.9322   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6300, r: 126, r2: 126, leftOrthog: 1)                      	 0.305082  	 600       	 393.411   	 0         	 37.9673   	 10.3618   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 126, r1_: 126, n: 50, r2: 126)                        	 0.140955  	 600       	 851.493   	 0         	 54.6037   	 15.5941   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 76, n: 50, r2: 76)                                                                                                         	 0.105658  	 800       	 0         	 0         	 34.987    	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 126)                                                                                	 0.0637645 	 100       	 4.21342   	 0         	 0.190074  	 22.1672   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 126, n: 50, r2new: 50) 	 0.0476418 	 100       	 86.8565   	 0         	 12.3438   	 7.03646   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 126, r1_: 50, n: 50, r2: 126)                         	 0.0312532 	 100       	 253.99    	 0         	 28.5437   	 8.89831   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 126, n: 50, r: 126, r2: 50)                           	 0.0236371 	 100       	 335.828   	 0         	 37.7406   	 8.89831   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 126, r2: 126, leftOrthog: 1)                      	 0.0155818 	 100       	 509.44    	 0         	 50.1483   	 10.1587   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 126, r1_: 126, n: 50, r2: 50)                         	 0.0137988 	 100       	 575.269   	 0         	 37.4455   	 15.3629   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 126, m: 50)                                                                                 	 0.0125429 	 100       	 4.35836   	 0         	 0.966282  	 4.51045   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6300, r: 50, r2: 50, leftOrthog: 1)                        	 0.0119108 	 100       	 264.465   	 0         	 63.8074   	 4.14474   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 126, m: 126, fromLeft: 1)                              	 0.00999005	 800       	 0         	 0         	 20.3415   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 126)  	 0.00273673	 100       	 58.0108   	 0         	 8.32409   	 6.96903   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 126, n: 50, r2new: 1)  	 0.00168643	 100       	 0.747142  	 0         	 5.97809   	 0.12498   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 126, r2: 126)                            	 0.00160729	 100       	 98.7751   	 0         	 14.1734   	 6.96903   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 126, leftOrthog: 1)                         	 0.00106354	 100       	 59.2362   	 0         	 17.9777   	 3.29498   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000986599	 100       	 25.3396   	 0         	 6.0815    	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000955018	 100       	 0.52355   	 0         	 2.0942    	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 126)                            	 0.000930187	 100       	 0         	 0         	 10.8365   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 126, n: 50, r: 2, r2: 1)                              	 0.000905006	 100       	 2.78451   	 0         	 16.7088   	 0.166649  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 126)                                                                                                         	 0.000534276	 100       	 0         	 0         	 18.8667   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 76)                                                                                                          	 0.000459513	 100       	 0         	 0         	 13.2314   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 76, n: 50, r2: 1)                                                                                                          	 0.00039979	 100       	 0         	 0         	 15.208    	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000385507	 100       	 0.648497  	 0         	 10.3759   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 126, m: 50, fromLeft: 1)                               	 0.000306637	 100       	 0         	 0         	 32.8727   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 27.7205   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 27.7204   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 15.2019   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 11.82     	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 11.8185   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 11.4153   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 10.7759   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 8.29494   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.676691  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.456705  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.333638  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.186994  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.107051  	 1100      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0102967 	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00249514	 4600      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00200304	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000955018	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000930187	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000385507	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22999440775040 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22999214319616 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22999012993152 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22998811666688 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22998610340224 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22998409013760 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22998207687296 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22998006360832 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22997805034368 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22997603707904 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22997402381440 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22997201054976 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22996999728512 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22996798402048 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22996597075584 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22996395749120 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22996194422656 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22995993096192 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22995791769728 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22995590443264 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22995389116800 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22995187790336 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22994986463872 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22994785137408 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22994583810944 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22994382484480 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22994181158016 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22993979831552 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22993778505088 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22993577178624 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22993375852160 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22993174525696 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22992973195136 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22992771868672 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22992570542208 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22992369215744 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22992167889280 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22991966562816 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22991765236352 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22991563909888 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22991362583424 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22991161256960 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22990959930496 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22990758604032 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22990557277568 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22990355951104 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22990154624640 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22989953298176 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22989751971712 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22989550645248 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22989349318784 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22989147992320 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22988946665856 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22988745339392 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22988544012928 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22988342686464 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22988141360000 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22987940033536 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22987738707072 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22987537380608 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22987336054144 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22987134727680 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22986933401216 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22999335114496 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22999328524032 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_TENSORTRAIN_NORMALIZE_PLAIN_QB PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 6350, m: 127)                                                                              	 10.1166   	 600       	 48.7566   	 0         	 0.772983  	 63.0759   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 127, m: 6350)                                                                               	 7.95544   	 700       	 17.9036   	 0         	 1.1468    	 15.6118   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 127)                                                                              	 0.786144  	 100       	 41.3806   	 0         	 0.662734  	 62.4392   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 127, n: 50, r2new: 127)	 0.649326  	 700       	 115.402   	 0         	 10.7289   	 10.7562   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 127, m: 2500)                                                                               	 0.491892  	 100       	 16.1172   	 0         	 1.05919   	 15.2166   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 127, n: 50, r: 127, r2: 127)                          	 0.43288   	 700       	 331.24    	 0         	 21.0741   	 15.7178   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 6350, m: 50)                                                                               	 0.41582   	 100       	 30.5821   	 0         	 1.22659   	 24.9327   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6350, r: 127, r2: 127, leftOrthog: 1)                      	 0.251976  	 600       	 487.756   	 0         	 46.7017   	 10.4441   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 127, r1_: 127, n: 50, r2: 127)                        	 0.140674  	 600       	 873.669   	 0         	 55.5846   	 15.7178   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 77, n: 50, r2: 77)                                                                                                         	 0.105797  	 800       	 0         	 0         	 35.8664   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 127)                                                                                	 0.0640576 	 100       	 4.22536   	 0         	 0.190454  	 22.1858   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 127, n: 50, r2new: 50) 	 0.0437144 	 100       	 96.4099   	 0         	 13.6394   	 7.06846   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 127, r1_: 50, n: 50, r2: 127)                         	 0.0307671 	 100       	 262.115   	 0         	 29.3898   	 8.91854   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 127, n: 50, r: 127, r2: 50)                           	 0.0216113 	 100       	 373.16    	 0         	 41.841    	 8.91854   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6350, r: 50, r2: 50, leftOrthog: 1)                        	 0.0196838 	 100       	 161.3     	 0         	 38.9152   	 4.14491   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 127, r2: 127, leftOrthog: 1)                      	 0.0192771 	 100       	 418.346   	 0         	 40.8674   	 10.2367   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 127, r1_: 127, n: 50, r2: 50)                         	 0.0133114 	 100       	 605.833   	 0         	 39.132    	 15.4818   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 127, m: 50)                                                                                 	 0.0123787 	 100       	 4.45658   	 0         	 0.985565  	 4.52185   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 127, m: 127, fromLeft: 1)                              	 0.0104141 	 800       	 0         	 0         	 19.8241   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 127)  	 0.00282593	 100       	 57.0751   	 0         	 8.16129   	 6.99339   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 127, r2: 127)                            	 0.00174785	 100       	 92.2791   	 0         	 13.1952   	 6.99339   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 127, n: 50, r2new: 1)  	 0.00153879	 100       	 0.825325  	 0         	 6.60364   	 0.12498   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.00108441	 100       	 0.46108   	 0         	 1.84432   	 0.25      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 127, leftOrthog: 1)                         	 0.0010306 	 100       	 61.6147   	 0         	 18.6688   	 3.30042   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 127)                            	 0.000867209	 100       	 0         	 0         	 11.7157   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000859347	 100       	 29.0919   	 0         	 6.98205   	 4.16667   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 127, n: 50, r: 2, r2: 1)                              	 0.000829219	 100       	 3.06312   	 0         	 18.3807   	 0.166649  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 127)                                                                                                         	 0.000505291	 100       	 0         	 0         	 20.1072   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 77)                                                                                                          	 0.000459639	 100       	 0         	 0         	 13.4018   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 77, n: 50, r2: 1)                                                                                                          	 0.000402084	 100       	 0         	 0         	 15.3202   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000343545	 100       	 0.727707  	 0         	 11.6433   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 127, m: 50, fromLeft: 1)                               	 0.000304867	 100       	 0         	 0         	 33.326    	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 28.9842   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 28.9841   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 15.7901   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 12.4897   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 12.488    	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 12.0644   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 11.3826   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 8.45971   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.697405  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.457068  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.291968  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.185612  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.107164  	 1100      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.010719  	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00248256	 4600      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00198035	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.00108441	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000867209	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000343545	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22675764103040 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22675548268544 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22675346942080 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22675145615616 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22674944289152 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22674742962688 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22674541636224 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22674340309760 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22674138983296 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22673937656832 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22673736330368 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22673535003904 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22673333677440 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22673132350976 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22672931024512 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22672729698048 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22672528371584 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22672327045120 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22672125718656 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22671924392192 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22671723065728 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22671521739264 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22671320412800 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22671119086336 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22670917759872 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22670716433408 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22670515106944 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22670313780480 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22670112454016 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22669911127552 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22669709801088 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22669508474624 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22669307144064 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22669105817600 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22668904491136 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22668703164672 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22668501838208 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22668300511744 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22668099185280 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22667897858816 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22667696532352 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22667495205888 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22667293879424 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22667092552960 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22666891226496 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22666689900032 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22666488573568 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22666287247104 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22666085920640 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22665884594176 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22665683267712 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22665481941248 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22665280614784 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22665079288320 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22664877961856 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22664676635392 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22664475308928 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22664273982464 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22664072656000 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22663871329536 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22663670003072 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22663468676608 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22663267350144 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22675658442496 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22675651852032 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_TENSORTRAIN_NORMALIZE_PLAIN_QB PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 6400, m: 128)                                                                              	 9.49235   	 600       	 53.2001   	 0         	 0.83684   	 63.5726   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 128, m: 6400)                                                                               	 8.62743   	 700       	 16.9021   	 0         	 1.07419   	 15.7348   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 128)                                                                              	 0.777083  	 100       	 42.5278   	 0         	 0.675873  	 62.9227   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 128, n: 50, r2new: 128)	 0.690866  	 700       	 111.328   	 0         	 10.2521   	 10.8591   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 128, m: 2500)                                                                               	 0.508863  	 100       	 15.8239   	 0         	 1.03212   	 15.3314   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 128, n: 50, r: 128, r2: 128)                          	 0.491897  	 700       	 298.438   	 0         	 18.8389   	 15.8416   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6400, r: 128, r2: 128, leftOrthog: 1)                      	 0.470588  	 600       	 267.387   	 0         	 25.4018   	 10.5263   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 6400, m: 50)                                                                               	 0.441573  	 100       	 29.025    	 0         	 1.16411   	 24.9332   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 128, r1_: 128, n: 50, r2: 128)                        	 0.145203  	 600       	 866.576   	 0         	 54.7026   	 15.8416   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 78, n: 50, r2: 78)                                                                                                         	 0.120228  	 800       	 0         	 0         	 32.3864   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 128)                                                                                	 0.0676863 	 100       	 4.02839   	 0         	 0.181425  	 22.2041   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 128, n: 50, r2new: 50) 	 0.0551508 	 100       	 77.823    	 0         	 10.9605   	 7.10032   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 128, m: 128, fromLeft: 1)                              	 0.045422  	 800       	 0         	 0         	 4.61704   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 128, r1_: 50, n: 50, r2: 128)                         	 0.0334317 	 100       	 245.037   	 0         	 27.4135   	 8.93855   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 128, n: 50, r: 128, r2: 50)                           	 0.0261493 	 100       	 313.278   	 0         	 35.048    	 8.93855   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 128, r2: 128, leftOrthog: 1)                      	 0.0242324 	 100       	 338.06    	 0         	 32.7749   	 10.3146   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6400, r: 50, r2: 50, leftOrthog: 1)                        	 0.0228606 	 100       	 139.979   	 0         	 33.7699   	 4.14508   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 128, m: 50)                                                                                 	 0.0127296 	 100       	 4.37302   	 0         	 0.964684  	 4.53311   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 128, r1_: 128, n: 50, r2: 50)                         	 0.0124593 	 100       	 657.502   	 0         	 42.1459   	 15.6006   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 128)  	 0.00279331	 100       	 58.6544   	 0         	 8.35825   	 7.01754   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 128, n: 50, r2new: 1)  	 0.00171675	 100       	 0.745597  	 0         	 5.9657    	 0.12498   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 128, r2: 128)                            	 0.0016805 	 100       	 97.495    	 0         	 13.893    	 7.01754   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 128, leftOrthog: 1)                         	 0.00101882	 100       	 62.818    	 0         	 19.0024   	 3.30579   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.00101776	 100       	 0.491277  	 0         	 1.96511   	 0.25      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 128, m: 50, fromLeft: 1)                               	 0.000898421	 100       	 0         	 0         	 11.3978   	 0         
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 128)                            	 0.000894289	 100       	 0         	 0         	 11.4504   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000831964	 100       	 30.0494   	 0         	 7.21185   	 4.16667   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 128, n: 50, r: 2, r2: 1)                              	 0.000802958	 100       	 3.18821   	 0         	 19.1313   	 0.166649  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 128)                                                                                                         	 0.000518702	 100       	 0         	 0         	 19.7416   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 78)                                                                                                          	 0.000444367	 100       	 0         	 0         	 14.0424   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 78, n: 50, r2: 1)                                                                                                          	 0.000418116	 100       	 0         	 0         	 14.9241   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000357941	 100       	 0.698439  	 0         	 11.175    	 0.0625    
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 29.1723   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 29.1722   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 16.5878   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 11.7944   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 11.7928   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 11.4255   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 10.7787   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 9.14903   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.750526  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.520529  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.5187    	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.191926  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.121609  	 1100      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0463204 	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00482598	 4600      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00344459	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.00101776	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000894289	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000357941	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23084708300672 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23084509685760 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23084308359296 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23084107032832 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23083905706368 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23083704379904 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23083503053440 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23083301726976 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23083100400512 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23082899074048 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23082697747584 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23082496421120 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23082295094656 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23082093768192 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23081892441728 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23081691115264 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23081489788800 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23081288462336 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23081087135872 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23080885809408 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23080684482944 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23080483156480 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23080281830016 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23080080503552 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23079879177088 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23079677850624 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23079476524160 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23079275197696 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23079073871232 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23078872544768 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23078671218304 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23078469891840 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23078268561280 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23078067234816 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23077865908352 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23077664581888 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23077463255424 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23077261928960 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23077060602496 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23076859276032 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23076657949568 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23076456623104 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23076255296640 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23076053970176 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23075852643712 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23075651317248 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23075449990784 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23075248664320 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23075047337856 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23074846011392 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23074644684928 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23074443358464 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23074242032000 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23074040705536 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23073839379072 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23073638052608 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23073436726144 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23073235399680 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23073034073216 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23072832746752 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23072631420288 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23072430093824 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23072228767360 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23084602640128 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23084596049664 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_TENSORTRAIN_NORMALIZE_PLAIN_QB PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 129, m: 6450)                                                                               	 8.34715   	 700       	 17.8823   	 0         	 1.12767   	 15.8577   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 6450, m: 129)                                                                              	 8.16409   	 600       	 63.3167   	 0         	 0.988252  	 64.0693   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 129, n: 50, r2new: 129)	 0.670166  	 700       	 117.779   	 0         	 10.7438   	 10.9624   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 129)                                                                              	 0.664967  	 100       	 50.481    	 0         	 0.796154  	 63.4061   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 129, m: 2500)                                                                               	 0.519112  	 100       	 15.7526   	 0         	 1.01985   	 15.4461   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6450, r: 129, r2: 129, leftOrthog: 1)                      	 0.483014  	 600       	 266.662   	 0         	 25.1365   	 10.6086   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 129, n: 50, r: 129, r2: 129)                          	 0.463757  	 700       	 324.024   	 0         	 20.2954   	 15.9653   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 6450, m: 50)                                                                               	 0.402921  	 100       	 32.0576   	 0         	 1.28571   	 24.9337   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 129, r1_: 129, n: 50, r2: 129)                        	 0.191474  	 600       	 672.682   	 0         	 42.1339   	 15.9653   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 79, n: 50, r2: 79)                                                                                                         	 0.103664  	 800       	 0         	 0         	 38.5307   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 129)                                                                                	 0.0683927 	 100       	 4.01602   	 0         	 0.180721  	 22.2222   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 129, n: 50, r2new: 50) 	 0.0557617 	 100       	 78.3782   	 0         	 10.9896   	 7.13202   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 129, r1_: 50, n: 50, r2: 129)                         	 0.039859  	 100       	 208.748   	 0         	 23.3021   	 8.95833   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 129, n: 50, r: 129, r2: 50)                           	 0.0246224 	 100       	 337.924   	 0         	 37.7217   	 8.95833   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 129, r2: 129, leftOrthog: 1)                      	 0.0187991 	 100       	 442.602   	 0         	 42.5886   	 10.3925   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 129, m: 50)                                                                                 	 0.0173977 	 100       	 3.22839   	 0         	 0.710437  	 4.54422   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 129, r1_: 129, n: 50, r2: 50)                         	 0.0134121 	 100       	 620.374   	 0         	 39.4654   	 15.7194   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6450, r: 50, r2: 50, leftOrthog: 1)                        	 0.0119117 	 100       	 270.742   	 0         	 65.3139   	 4.14524   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 129, m: 129, fromLeft: 1)                              	 0.0107713 	 800       	 0         	 0         	 19.7752   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 129)  	 0.00292612	 100       	 56.8704   	 0         	 8.07648   	 7.04148   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 129, r2: 129)                            	 0.00186264	 100       	 89.341    	 0         	 12.6878   	 7.04148   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 129, n: 50, r2new: 1)  	 0.00182703	 100       	 0.706064  	 0         	 5.64939   	 0.124981  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 129, n: 50, r: 2, r2: 1)                              	 0.00101992	 100       	 2.5296    	 0         	 15.1792   	 0.166649  
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000948575	 100       	 0.527106  	 0         	 2.10843   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 129)                            	 0.000872344	 100       	 0         	 0         	 11.8302   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000841801	 100       	 29.6982   	 0         	 7.12758   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 129)                                                                                                         	 0.000520217	 100       	 0         	 0         	 19.8379   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 129, leftOrthog: 1)                         	 0.000475773	 100       	 135.569   	 0         	 40.9439   	 3.31109   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 79)                                                                                                          	 0.000457945	 100       	 0         	 0         	 13.8008   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 79, n: 50, r2: 1)                                                                                                          	 0.000437404	 100       	 0         	 0         	 14.4489   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000351199	 100       	 0.711847  	 0         	 11.3896   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 129, m: 50, fromLeft: 1)                               	 0.000299229	 100       	 0         	 0         	 34.4886   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 27.5573   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 27.5572   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 16.2193   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 10.5662   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 10.5647   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 10.1346   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 9.30037   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 8.88366   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.730681  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.5142    	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.491262  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.245587  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.105079  	 1100      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0110706 	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.0031853 	 4600      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00290382	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000948575	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000872344	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000351199	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22822583543680 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22822382462976 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22822181136512 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22821979810048 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22821778483584 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22821577157120 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22821375830656 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22821174504192 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22820973177728 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22820771851264 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22820570524800 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22820369198336 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22820167871872 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22819966545408 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22819765218944 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22819563892480 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22819362566016 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22819161239552 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22818959913088 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22818758586624 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22818557260160 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22818355933696 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22818154607232 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22817953280768 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22817751954304 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22817550627840 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22817349301376 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22817147974912 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22816946648448 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22816745321984 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22816543995520 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22816342669056 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22816141338496 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22815940012032 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22815738685568 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22815537359104 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22815336032640 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22815134706176 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22814933379712 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22814732053248 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22814530726784 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22814329400320 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22814128073856 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22813926747392 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22813725420928 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22813524094464 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22813322768000 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22813121441536 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22812920115072 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22812718788608 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22812517462144 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22812316135680 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22812114809216 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22811913482752 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22811712156288 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22811510829824 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22811309503360 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22811108176896 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22810906850432 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22810705523968 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22810504197504 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22810302871040 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22810101544576 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22822477883136 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22822471292672 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_TENSORTRAIN_NORMALIZE_PLAIN_QB PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 6500, m: 130)                                                                              	 8.45165   	 600       	 62.5958   	 0         	 0.969484  	 64.566    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 130, m: 6500)                                                                               	 8.4323    	 700       	 18.1166   	 0         	 1.13366   	 15.9806   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 130, n: 50, r2new: 130)	 0.681619  	 700       	 118.82    	 0         	 10.7371   	 11.0663   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 130)                                                                              	 0.660126  	 100       	 51.6461   	 0         	 0.808367  	 63.8894   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 130, m: 2500)                                                                               	 0.516711  	 100       	 16.07     	 0         	 1.03273   	 15.5606   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 130, n: 50, r: 130, r2: 130)                          	 0.464337  	 700       	 331.204   	 0         	 20.5856   	 16.0891   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 6500, m: 50)                                                                               	 0.435924  	 100       	 29.86     	 0         	 1.19755   	 24.9342   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6500, r: 130, r2: 130, leftOrthog: 1)                      	 0.35982   	 600       	 366.35    	 0         	 34.2678   	 10.6908   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 130, r1_: 130, n: 50, r2: 130)                        	 0.187359  	 600       	 703.569   	 0         	 43.7295   	 16.0891   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 80, n: 50, r2: 80)                                                                                                         	 0.121011  	 800       	 0         	 0         	 33.8481   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 130)                                                                                	 0.0669282 	 100       	 4.13378   	 0         	 0.185871  	 22.2401   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 130, n: 50, r2new: 50) 	 0.0592884 	 100       	 75.0569   	 0         	 10.4776   	 7.16355   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 130, r1_: 50, n: 50, r2: 130)                         	 0.0396695 	 100       	 213.01    	 0         	 23.7261   	 8.9779    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 130, n: 50, r: 130, r2: 50)                           	 0.0241756 	 100       	 349.526   	 0         	 38.9318   	 8.9779    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 130, r2: 130, leftOrthog: 1)                      	 0.0208816 	 100       	 404.662   	 0         	 38.6484   	 10.4704   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 130, m: 50)                                                                                 	 0.0175608 	 100       	 3.22687   	 0         	 0.708394  	 4.55519   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6500, r: 50, r2: 50, leftOrthog: 1)                        	 0.0139863 	 100       	 232.371   	 0         	 56.055    	 4.14541   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 130, r1_: 130, n: 50, r2: 50)                         	 0.013915  	 100       	 607.259   	 0         	 38.3414   	 15.8382   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 130, m: 130, fromLeft: 1)                              	 0.0106733 	 800       	 0         	 0         	 20.2674   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 130)  	 0.00280519	 100       	 60.2455   	 0         	 8.52706   	 7.06522   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 130, n: 50, r2new: 1)  	 0.00199701	 100       	 0.650972  	 0         	 5.20858   	 0.124981  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 130, r2: 130)                            	 0.00170093	 100       	 99.3575   	 0         	 14.0629   	 7.06522   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 130, n: 50, r: 2, r2: 1)                              	 0.00115663	 100       	 2.2479    	 0         	 13.4888   	 0.16665   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.00106611	 100       	 0.468994  	 0         	 1.87598   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 130)                            	 0.000880602	 100       	 0         	 0         	 11.8101   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000836824	 100       	 29.8749   	 0         	 7.16997   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 130)                                                                                                         	 0.000529185	 100       	 0         	 0         	 19.6529   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 80)                                                                                                          	 0.000463055	 100       	 0         	 0         	 13.8213   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 130, leftOrthog: 1)                         	 0.000462207	 100       	 140.63    	 0         	 42.4052   	 3.31633   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 80, n: 50, r2: 1)                                                                                                          	 0.000414989	 100       	 0         	 0         	 15.4221   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000345864	 100       	 0.722827  	 0         	 11.5652   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 130, m: 50, fromLeft: 1)                               	 0.000299483	 100       	 0         	 0         	 34.7265   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 27.8983   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 27.8982   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 16.2658   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 10.8613   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 10.8596   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 10.4125   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 9.61463   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 8.96658   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.74571   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.49137   	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.39515   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.24178   	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.122418  	 1100      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0109728 	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00911024	 4600      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00290538	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.00106611	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000880602	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000345864	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23142251677568 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23142021982208 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23141820655744 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23141619329280 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23141418002816 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23141216676352 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23141015349888 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23140814023424 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23140612696960 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23140411370496 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23140210044032 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23140008717568 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23139807391104 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23139606064640 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23139404738176 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23139203411712 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23139002085248 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23138800758784 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23138599432320 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23138398105856 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23138196779392 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23137995452928 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23137794126464 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23137592800000 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23137391473536 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23137190147072 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23136988820608 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23136787494144 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23136586167680 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23136384841216 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23136183514752 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23135982188288 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23135780857728 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23135579531264 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23135378204800 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23135176878336 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23134975551872 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23134774225408 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23134572898944 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23134371572480 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23134170246016 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23133968919552 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23133767593088 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23133566266624 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23133364940160 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23133163613696 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23132962287232 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23132760960768 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23132559634304 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23132358307840 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23132156981376 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23131955654912 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23131754328448 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23131553001984 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23131351675520 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23131150349056 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23130949022592 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23130747696128 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23130546369664 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23130345043200 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23130143716736 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23129942390272 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23129741063808 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23142146017024 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23142139426560 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_TENSORTRAIN_NORMALIZE_PLAIN_QB PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 6550, m: 131)                                                                              	 8.76331   	 600       	 61.7735   	 0         	 0.949445  	 65.0627   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 131, m: 6550)                                                                               	 8.6681    	 700       	 18.0336   	 0         	 1.11985   	 16.1036   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 131, n: 50, r2new: 131)	 0.722617  	 700       	 114.984   	 0         	 10.2935   	 11.1705   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 131)                                                                              	 0.683729  	 100       	 50.6367   	 0         	 0.786619  	 64.3726   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 131, m: 2500)                                                                               	 0.526374  	 100       	 16.0164   	 0         	 1.02177   	 15.6752   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 131, n: 50, r: 131, r2: 131)                          	 0.48491   	 700       	 324.527   	 0         	 20.0166   	 16.2129   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 6550, m: 50)                                                                               	 0.445086  	 100       	 29.4699   	 0         	 1.18188   	 24.9347   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6550, r: 131, r2: 131, leftOrthog: 1)                      	 0.415721  	 600       	 324.461   	 0         	 30.1179   	 10.773    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 131, r1_: 131, n: 50, r2: 131)                        	 0.187801  	 600       	 718.236   	 0         	 44.3003   	 16.2129   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 81, n: 50, r2: 81)                                                                                                         	 0.0855392 	 800       	 0         	 0         	 49.0891   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 131)                                                                                	 0.0682801 	 100       	 4.08123   	 0         	 0.183362  	 22.2577   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 131, n: 50, r2new: 50) 	 0.065679  	 100       	 68.9794   	 0         	 9.58723   	 7.19492   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 131, r1_: 50, n: 50, r2: 131)                         	 0.0381493 	 100       	 224.919   	 0         	 24.9986   	 8.99725   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 131, r2: 131, leftOrthog: 1)                      	 0.0340002 	 100       	 252.366   	 0         	 23.9251   	 10.5482   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 131, n: 50, r: 131, r2: 50)                           	 0.024291  	 100       	 353.238   	 0         	 39.2606   	 8.99725   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 131, m: 50)                                                                                 	 0.0178736 	 100       	 3.19839   	 0         	 0.700475  	 4.56602   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6550, r: 50, r2: 50, leftOrthog: 1)                        	 0.0162745 	 100       	 201.235   	 0         	 48.5422   	 4.14557   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 131, r1_: 131, n: 50, r2: 50)                         	 0.0137328 	 100       	 624.817   	 0         	 39.1565   	 15.9569   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 131, m: 131, fromLeft: 1)                              	 0.010946  	 800       	 0         	 0         	 20.0678   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 131)  	 0.00292597	 100       	 58.6506   	 0         	 8.27376   	 7.08874   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 131, r2: 131)                            	 0.00185137	 100       	 92.6933   	 0         	 13.0761   	 7.08874   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 131, n: 50, r2new: 1)  	 0.00151487	 100       	 0.864763  	 0         	 6.91916   	 0.124981  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.00102059	 100       	 24.4955   	 0         	 5.87893   	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.00101639	 100       	 0.491936  	 0         	 1.96774   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 131)                            	 0.000886925	 100       	 0         	 0         	 11.8161   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 131, n: 50, r: 2, r2: 1)                              	 0.000778098	 100       	 3.36719   	 0         	 20.2052   	 0.16665   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 81)                                                                                                          	 0.000649681	 100       	 0         	 0         	 9.97413   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 131)                                                                                                         	 0.000552548	 100       	 0         	 0         	 18.9667   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 131, leftOrthog: 1)                         	 0.000461867	 100       	 141.816   	 0         	 42.6963   	 3.3215    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 81, n: 50, r2: 1)                                                                                                          	 0.000377371	 100       	 0         	 0         	 17.1714   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000355915	 100       	 0.702415  	 0         	 11.2386   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 131, m: 50, fromLeft: 1)                               	 0.00029488	 100       	 0         	 0         	 35.5399   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 28.7951   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 28.7949   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 16.6815   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 11.2901   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 11.2885   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 10.793    	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 9.96041   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 9.21234   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.792737  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.51183   	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.466458  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.240704  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0871188 	 1100      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0112408 	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00336947	 4600      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.0027642 	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.00101639	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000886925	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000355915	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22645297846144 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22645080844288 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22644879517824 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22644678191360 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22644476864896 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22644275538432 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22644074211968 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22643872885504 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22643671559040 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22643470232576 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22643268906112 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22643067579648 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22642866253184 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22642664926720 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22642463600256 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22642262273792 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22642060947328 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22641859620864 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22641658294400 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22641456967936 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22641255641472 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22641054315008 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22640852988544 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22640651662080 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22640450335616 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22640249009152 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22640047682688 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22639846356224 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22639645029760 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22639443703296 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22639242376832 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22639041050368 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22638839719808 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22638638393344 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22638437066880 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22638235740416 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22638034413952 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22637833087488 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22637631761024 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22637430434560 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22637229108096 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22637027781632 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22636826455168 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22636625128704 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22636423802240 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22636222475776 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22636021149312 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22635819822848 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22635618496384 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22635417169920 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22635215843456 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22635014516992 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22634813190528 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22634611864064 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22634410537600 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22634209211136 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22634007884672 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22633806558208 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22633605231744 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22633403905280 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22633202578816 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22633001252352 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22632799925888 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22645192185600 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22645185595136 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_TENSORTRAIN_NORMALIZE_PLAIN_QB PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 6600, m: 132)                                                                              	 9.01982   	 600       	 61.4017   	 0         	 0.936581  	 65.5594   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 132, m: 6600)                                                                               	 8.65925   	 700       	 18.4686   	 0         	 1.13818   	 16.2265   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 132, n: 50, r2new: 132)	 0.705523  	 700       	 120.804   	 0         	 10.7141   	 11.2752   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 132)                                                                              	 0.68659   	 100       	 51.2018   	 0         	 0.789473  	 64.8556   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 132, m: 2500)                                                                               	 0.518711  	 100       	 16.4999   	 0         	 1.04498   	 15.7896   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 132, n: 50, r: 132, r2: 132)                          	 0.480308  	 700       	 335.197   	 0         	 20.5181   	 16.3366   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6600, r: 132, r2: 132, leftOrthog: 1)                      	 0.460201  	 600       	 299.865   	 0         	 27.6239   	 10.8553   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 6600, m: 50)                                                                               	 0.433184  	 100       	 30.5105   	 0         	 1.22359   	 24.9352   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 132, r1_: 132, n: 50, r2: 132)                        	 0.213412  	 600       	 646.627   	 0         	 39.5814   	 16.3366   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 82, n: 50, r2: 82)                                                                                                         	 0.0888643 	 800       	 0         	 0         	 48.4262   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 132)                                                                                	 0.0700046 	 100       	 4.00926   	 0         	 0.179988  	 22.2751   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 132, n: 50, r2new: 50) 	 0.0545233 	 100       	 84.5877   	 0         	 11.7058   	 7.22612   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 132, r1_: 50, n: 50, r2: 132)                         	 0.0436492 	 100       	 199.591   	 0         	 22.1365   	 9.01639   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 132, n: 50, r: 132, r2: 50)                           	 0.0240525 	 100       	 362.208   	 0         	 40.1721   	 9.01639   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 132, r2: 132, leftOrthog: 1)                      	 0.0202271 	 100       	 430.709   	 0         	 40.5336   	 10.626    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 132, m: 50)                                                                                 	 0.0183177 	 100       	 3.14813   	 0         	 0.687858  	 4.57671   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 132, r1_: 132, n: 50, r2: 50)                         	 0.0140145 	 100       	 621.643   	 0         	 38.6699   	 16.0756   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6600, r: 50, r2: 50, leftOrthog: 1)                        	 0.0135571 	 100       	 243.415   	 0         	 58.7147   	 4.14573   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 132, m: 132, fromLeft: 1)                              	 0.0111783 	 800       	 0         	 0         	 19.9519   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 132)  	 0.00280743	 100       	 62.0638   	 0         	 8.72655   	 7.11207   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 132, r2: 132)                            	 0.00169151	 100       	 103.009   	 0         	 14.4837   	 7.11207   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 132, n: 50, r2new: 1)  	 0.0016899 	 100       	 0.781113  	 0         	 6.24985   	 0.124981  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.00102908	 100       	 24.2935   	 0         	 5.83044   	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000964509	 100       	 0.518398  	 0         	 2.07359   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 132)                            	 0.000907523	 100       	 0         	 0         	 11.6361   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 132, n: 50, r: 2, r2: 1)                              	 0.000825292	 100       	 3.19887   	 0         	 19.1951   	 0.16665   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 132, leftOrthog: 1)                         	 0.000546902	 100       	 120.68    	 0         	 36.2771   	 3.32661   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 132)                                                                                                         	 0.000531495	 100       	 0         	 0         	 19.8685   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 82)                                                                                                          	 0.000463767	 100       	 0         	 0         	 14.145    	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 82, n: 50, r2: 1)                                                                                                          	 0.00042293	 100       	 0         	 0         	 15.5108   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000356693	 100       	 0.700883  	 0         	 11.2141   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 132, m: 50, fromLeft: 1)                               	 0.000304881	 100       	 0         	 0         	 34.6365   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 29.1096   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 29.1095   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 16.6341   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 11.6773   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 11.6757   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 11.13     	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 10.2096   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 9.19627   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.764543  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.506878  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.494532  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.272105  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0902825 	 1100      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0114831 	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00528149	 4600      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00285789	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000964509	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000907523	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000356693	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22672109488000 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22671924389888 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22671723063424 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22671521736960 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22671320410496 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22671119084032 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22670917757568 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22670716431104 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22670515104640 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22670313778176 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22670112451712 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22669911125248 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22669709798784 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22669508472320 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22669307145856 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22669105819392 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22668904492928 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22668703166464 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22668501840000 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22668300513536 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22668099187072 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22667897860608 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22667696534144 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22667495207680 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22667293881216 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22667092554752 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22666891228288 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22666689901824 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22666488575360 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22666287248896 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22666085922432 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22665884595968 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22665683265408 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22665481938944 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22665280612480 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22665079286016 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22664877959552 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22664676633088 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22664475306624 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22664273980160 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22664072653696 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22663871327232 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22663670000768 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22663468674304 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22663267347840 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22663066021376 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22662864694912 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22662663368448 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22662462041984 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22662260715520 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22662059389056 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22661858062592 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22661656736128 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22661455409664 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22661254083200 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22661052756736 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22660851430272 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22660650103808 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22660448777344 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22660247450880 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22660046124416 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22659844797952 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22659643471488 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22672003827456 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22671997236992 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_TENSORTRAIN_NORMALIZE_PLAIN_QB PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 133, m: 6650)                                                                               	 9.04597   	 700       	 18.0839   	 0         	 1.10609   	 16.3494   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 6650, m: 133)                                                                              	 8.69268   	 600       	 65.1715   	 0         	 0.986607  	 66.0561   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 133, n: 50, r2new: 133)	 0.720312  	 700       	 121.352   	 0         	 10.6633   	 11.3804   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 133)                                                                              	 0.68256   	 100       	 52.2909   	 0         	 0.800307  	 65.3386   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 133, m: 2500)                                                                               	 0.540172  	 100       	 16.0831   	 0         	 1.01127   	 15.904    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 133, n: 50, r: 133, r2: 133)                          	 0.488152  	 700       	 337.363   	 0         	 20.4954   	 16.4604   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 6650, m: 50)                                                                               	 0.428865  	 100       	 31.0509   	 0         	 1.24524   	 24.9357   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6650, r: 133, r2: 133, leftOrthog: 1)                      	 0.39237   	 600       	 359.758   	 0         	 32.8922   	 10.9375   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 133, r1_: 133, n: 50, r2: 133)                        	 0.197109  	 600       	 716.144   	 0         	 43.5071   	 16.4604   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 83, n: 50, r2: 83)                                                                                                         	 0.0838403 	 800       	 0         	 0         	 52.5876   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 133)                                                                                	 0.0670055 	 100       	 4.21856   	 0         	 0.189238  	 22.2923   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 133, n: 50, r2new: 50) 	 0.0509085 	 100       	 92.2144   	 0         	 12.7067   	 7.25714   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 133, r1_: 50, n: 50, r2: 133)                         	 0.0407664 	 100       	 216.956   	 0         	 24.0119   	 9.03533   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 133, n: 50, r: 133, r2: 50)                           	 0.0247209 	 100       	 357.774   	 0         	 39.5972   	 9.03533   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 133, r2: 133, leftOrthog: 1)                      	 0.0236632 	 100       	 373.766   	 0         	 34.9193   	 10.7037   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 133, m: 50)                                                                                 	 0.0181235 	 100       	 3.20946   	 0         	 0.699645  	 4.58727   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6650, r: 50, r2: 50, leftOrthog: 1)                        	 0.0170853 	 100       	 194.612   	 0         	 46.9409   	 4.14589   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 133, r1_: 133, n: 50, r2: 50)                         	 0.0137321 	 100       	 644.076   	 0         	 39.7719   	 16.1942   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 133, m: 133, fromLeft: 1)                              	 0.011199  	 800       	 0         	 0         	 20.2178   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 133)  	 0.00275664	 100       	 64.1687   	 0         	 8.99326   	 7.13519   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 133, r2: 133)                            	 0.00171114	 100       	 103.376   	 0         	 14.4881   	 7.13519   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 133, n: 50, r2new: 1)  	 0.00164309	 100       	 0.809451  	 0         	 6.47658   	 0.124981  
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.00133676	 100       	 0.374038  	 0         	 1.49615   	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000893345	 100       	 27.9847   	 0         	 6.71633   	 4.16667   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 133, n: 50, r: 2, r2: 1)                              	 0.000856154	 100       	 3.10692   	 0         	 18.6434   	 0.16665   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 133)                            	 0.000845077	 100       	 0         	 0         	 12.5906   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 133)                                                                                                         	 0.000532007	 100       	 0         	 0         	 19.9997   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 133, leftOrthog: 1)                         	 0.000531078	 100       	 125.217   	 0         	 37.5839   	 3.33166   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 83)                                                                                                          	 0.000479022	 100       	 0         	 0         	 13.8616   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000421336	 100       	 0.593351  	 0         	 9.49361   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 83, n: 50, r2: 1)                                                                                                          	 0.000390154	 100       	 0         	 0         	 17.0189   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 133, m: 50, fromLeft: 1)                               	 0.000326295	 100       	 0         	 0         	 32.6085   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 29.3722   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 29.372    	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 17.4087   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 11.1515   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 11.1495   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 10.6753   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 9.87111   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 9.60426   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.77562   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.515441  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.433649  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.252501  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0852415 	 1100      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0115253 	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00455465	 4600      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00309477	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.00133676	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000845077	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000421336	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22392038803328 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22391811991552 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22391610665088 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22391409338624 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22391208012160 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22391006685696 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22390805359232 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22390604032768 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22390402706304 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22390201379840 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22390000053376 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22389798726912 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22389597400448 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22389396073984 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22389194747520 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22388993421056 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22388792094592 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22388590768128 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22388389441664 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22388188115200 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22387986788736 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22387785462272 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22387584135808 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22387382809344 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22387181482880 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22386980156416 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22386778829952 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22386577503488 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22386376177024 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22386174850560 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22385973524096 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22385772197632 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22385570867072 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22385369540608 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22385168214144 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22384966887680 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22384765561216 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22384564234752 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22384362908288 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22384161581824 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22383960255360 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22383758928896 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22383557602432 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22383356275968 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22383154949504 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22382953623040 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22382752296576 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22382550970112 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22382349643648 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22382148317184 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22381946990720 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22381745664256 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22381544337792 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22381343011328 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22381141684864 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22380940358400 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22380739031936 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22380537705472 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22380336379008 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22380135052544 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22379933726080 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22379732399616 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22379531073152 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22391933142784 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22391926552320 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_TENSORTRAIN_NORMALIZE_PLAIN_QB PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 134, m: 6700)                                                                               	 9.31997   	 700       	 17.9512   	 0         	 1.08977   	 16.4724   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 6700, m: 134)                                                                              	 7.03676   	 600       	 82.3376   	 0         	 1.23718   	 66.5528   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 134, n: 50, r2new: 134)	 0.743282  	 700       	 120.594   	 0         	 10.4993   	 11.4859   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 134)                                                                              	 0.657523  	 100       	 55.105    	 0         	 0.837191  	 65.8214   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6700, r: 134, r2: 134, leftOrthog: 1)                      	 0.598821  	 600       	 241.084   	 0         	 21.8775   	 11.0197   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 134, n: 50, r: 134, r2: 134)                          	 0.533849  	 700       	 315.496   	 0         	 19.0239   	 16.5842   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 134, m: 2500)                                                                               	 0.526042  	 100       	 16.7622   	 0         	 1.04644   	 16.0182   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 6700, m: 50)                                                                               	 0.423423  	 100       	 31.6862   	 0         	 1.27069   	 24.9362   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 134, r1_: 134, n: 50, r2: 134)                        	 0.196781  	 600       	 733.638   	 0         	 44.2373   	 16.5842   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 84, n: 50, r2: 84)                                                                                                         	 0.0912515 	 800       	 0         	 0         	 49.4878   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 134)                                                                                	 0.0683508 	 100       	 4.16479   	 0         	 0.186684  	 22.3093   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 134, n: 50, r2new: 50) 	 0.0601744 	 100       	 79.4026   	 0         	 10.895    	 7.28798   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 134, r1_: 50, n: 50, r2: 134)                         	 0.0474454 	 100       	 189.228   	 0         	 20.8998   	 9.05405   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 134, n: 50, r: 134, r2: 50)                           	 0.0267568 	 100       	 335.54    	 0         	 37.0597   	 9.05405   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 134, r2: 134, leftOrthog: 1)                      	 0.0204152 	 100       	 439.77    	 0         	 40.7897   	 10.7814   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 134, m: 50)                                                                                 	 0.017992  	 100       	 3.26071   	 0         	 0.709204  	 4.5977    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 134, r1_: 134, n: 50, r2: 50)                         	 0.0178416 	 100       	 503.207   	 0         	 30.8473   	 16.3128   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6700, r: 50, r2: 50, leftOrthog: 1)                        	 0.0142484 	 100       	 235.113   	 0         	 56.7079   	 4.14604   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 134, m: 134, fromLeft: 1)                              	 0.0113073 	 800       	 0         	 0         	 20.3265   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 134)  	 0.00309812	 100       	 57.9577   	 0         	 8.09678   	 7.15812   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 134, r2: 134)                            	 0.00198883	 100       	 90.2844   	 0         	 12.6129   	 7.15812   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 134, n: 50, r2new: 1)  	 0.00170545	 100       	 0.785716  	 0         	 6.28667   	 0.124981  
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 134, leftOrthog: 1)                         	 0.00140777	 100       	 47.5929   	 0         	 14.2637   	 3.33665   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.00105678	 100       	 0.473136  	 0         	 1.89255   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 134)                            	 0.000920707	 100       	 0         	 0         	 11.6432   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 134, n: 50, r: 2, r2: 1)                              	 0.000875302	 100       	 3.0618    	 0         	 18.3726   	 0.16665   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000779744	 100       	 32.0618   	 0         	 7.69483   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 134)                                                                                                         	 0.000540572	 100       	 0         	 0         	 19.8308   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 84)                                                                                                          	 0.000461163	 100       	 0         	 0         	 14.5719   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 84, n: 50, r2: 1)                                                                                                          	 0.000433517	 100       	 0         	 0         	 15.5011   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000345599	 100       	 0.723382  	 0         	 11.5741   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 134, m: 50, fromLeft: 1)                               	 0.000313821	 100       	 0         	 0         	 34.1596   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 27.0903   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 27.09     	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 16.9029   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 9.864     	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 9.3698    	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 9.36818   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 8.8428    	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 8.18606   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.80826   	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.634893  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.56347   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.262848  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0926868 	 1100      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0116211 	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00636704	 4600      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00397796	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.00105678	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000920707	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000345599	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23298716895104 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23298519853056 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23298318526592 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23298117200128 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23297915873664 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23297714547200 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23297513220736 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23297311894272 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23297110567808 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23296909241344 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23296707914880 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23296506588416 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23296305261952 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23296103935488 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23295902609024 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23295701282560 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23295499956096 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23295298629632 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23295097303168 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23294895976704 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23294694650240 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23294493323776 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23294291997312 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23294090670848 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23293889344384 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23293688017920 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23293486691456 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23293285364992 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23293084038528 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23292882712064 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23292681385600 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23292480059136 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23292278728576 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23292077402112 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23291876075648 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23291674749184 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23291473422720 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23291272096256 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23291070769792 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23290869443328 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23290668116864 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23290466790400 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23290265463936 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23290064137472 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23289862811008 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23289661484544 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23289460158080 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23289258831616 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23289057505152 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23288856178688 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23288654852224 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23288453525760 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23288252199296 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23288050872832 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23287849546368 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23287648219904 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23287446893440 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23287245566976 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23287044240512 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23286842914048 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23286641587584 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23286440261120 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23286238934656 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23298611234560 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23298604644096 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_TENSORTRAIN_NORMALIZE_PLAIN_QB PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 135, m: 6750)                                                                               	 9.21057   	 700       	 18.5741   	 0         	 1.11924   	 16.5953   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 6750, m: 135)                                                                              	 8.20328   	 600       	 72.2221   	 0         	 1.07715   	 67.0495   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 135, n: 50, r2new: 135)	 0.738261  	 700       	 124.483   	 0         	 10.7388   	 11.5919   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 135)                                                                              	 0.704864  	 100       	 52.1775   	 0         	 0.786943  	 66.304    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 135, m: 2500)                                                                               	 0.536788  	 100       	 16.6704   	 0         	 1.03335   	 16.1324   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 135, n: 50, r: 135, r2: 135)                          	 0.509206  	 700       	 338.225   	 0         	 20.2434   	 16.7079   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 6750, m: 50)                                                                               	 0.439355  	 100       	 30.7648   	 0         	 1.23372   	 24.9367   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6750, r: 135, r2: 135, leftOrthog: 1)                      	 0.343521  	 600       	 429.734   	 0         	 38.7079   	 11.102    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 135, r1_: 135, n: 50, r2: 135)                        	 0.190573  	 600       	 774.625   	 0         	 46.3628   	 16.7079   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 85, n: 50, r2: 85)                                                                                                         	 0.0940617 	 800       	 0         	 0         	 49.1592   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 135)                                                                                	 0.069031  	 100       	 4.15272   	 0         	 0.186003  	 22.3261   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 135, n: 50, r2new: 50) 	 0.0504962 	 100       	 96.2943   	 0         	 13.1574   	 7.31863   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 135, r1_: 50, n: 50, r2: 135)                         	 0.0458899 	 100       	 198.573   	 0         	 21.8872   	 9.07258   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 135, n: 50, r: 135, r2: 50)                           	 0.0235577 	 100       	 386.816   	 0         	 42.6357   	 9.07258   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 135, r2: 135, leftOrthog: 1)                      	 0.0206611 	 100       	 441.046   	 0         	 40.6154   	 10.8591   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 135, m: 50)                                                                                 	 0.0185252 	 100       	 3.19384   	 0         	 0.693109  	 4.60799   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6750, r: 50, r2: 50, leftOrthog: 1)                        	 0.0138009 	 100       	 244.55    	 0         	 58.9818   	 4.14619   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 135, r1_: 135, n: 50, r2: 50)                         	 0.013701  	 100       	 665.099   	 0         	 40.4775   	 16.4314   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 135, m: 135, fromLeft: 1)                              	 0.0115959 	 800       	 0         	 0         	 20.1174   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 135)  	 0.00372537	 100       	 48.9214   	 0         	 6.81275   	 7.18085   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 135, r2: 135)                            	 0.00253569	 100       	 71.8739   	 0         	 10.0091   	 7.18085   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 135, n: 50, r2new: 1)  	 0.00192466	 100       	 0.701424  	 0         	 5.61223   	 0.124981  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 135, n: 50, r: 2, r2: 1)                              	 0.00110106	 100       	 2.45219   	 0         	 14.7146   	 0.16665   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 135)                            	 0.000986022	 100       	 0         	 0         	 10.9531   	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.00094289	 100       	 0.530285  	 0         	 2.12114   	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000815616	 100       	 30.6517   	 0         	 7.3564    	 4.16667   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 135, leftOrthog: 1)                         	 0.000660833	 100       	 102.144   	 0         	 30.5675   	 3.34158   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 135)                                                                                                         	 0.000526987	 100       	 0         	 0         	 20.4939   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 85)                                                                                                          	 0.000455772	 100       	 0         	 0         	 14.9197   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 85, n: 50, r2: 1)                                                                                                          	 0.000415213	 100       	 0         	 0         	 16.3771   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000351576	 100       	 0.711084  	 0         	 11.3773   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 135, m: 50, fromLeft: 1)                               	 0.000308362	 100       	 0         	 0         	 35.0238   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 28.7668   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 28.7667   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 17.5128   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 10.421    	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 10.4195   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 10.0178   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 9.76588   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 9.41653   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.794407  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.5364    	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.378644  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.250979  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0954597 	 1100      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0119043 	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00499085	 4600      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00327408	 4600      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000986022	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.00094289	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000351576	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22384831375232 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22384631343104 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22384430016640 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22384228690176 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22384027363712 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22383826037248 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22383624710784 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22383423384320 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22383222057856 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22383020731392 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22382819404928 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22382618078464 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22382416752000 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22382215425536 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22382014099072 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22381812772608 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22381611446144 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22381410119680 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22381208793216 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22381007466752 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22380806140288 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22380604813824 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22380403487360 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22380202160896 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22380000834432 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22379799507968 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22379598181504 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22379396855040 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22379195528576 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22378994202112 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22378792875648 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22378591549184 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22378390218624 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22378188892160 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22377987565696 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22377786239232 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22377584912768 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22377383586304 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22377182259840 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22376980933376 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22376779606912 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22376578280448 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22376376953984 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22376175627520 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22375974301056 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22375772974592 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22375571648128 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22375370321664 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22375168995200 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22374967668736 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22374766342272 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22374565015808 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22374363689344 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22374162362880 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22373961036416 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22373759709952 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22373558383488 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22373357057024 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22373155730560 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22372954404096 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22372753077632 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22372551751168 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22372350424704 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22384725714688 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22384719124224 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_TENSORTRAIN_NORMALIZE_PLAIN_QB PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 136, m: 6800)                                                                               	 9.5359    	 700       	 18.3421   	 0         	 1.09713   	 16.7183   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 6800, m: 136)                                                                              	 7.90877   	 600       	 76.5886   	 0         	 1.13387   	 67.5462   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 136, n: 50, r2new: 136)	 0.787698  	 700       	 119.602   	 0         	 10.2239   	 11.6982   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 136)                                                                              	 0.686085  	 100       	 54.4064   	 0         	 0.81463   	 66.7866   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6800, r: 136, r2: 136, leftOrthog: 1)                      	 0.569825  	 600       	 264.866   	 0         	 23.6821   	 11.1842   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 136, m: 2500)                                                                               	 0.539111  	 100       	 16.8431   	 0         	 1.03672   	 16.2466   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 136, n: 50, r: 136, r2: 136)                          	 0.537416  	 700       	 327.645   	 0         	 19.466    	 16.8317   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 6800, m: 50)                                                                               	 0.418338  	 100       	 32.5494   	 0         	 1.30526   	 24.9371   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 136, r1_: 136, n: 50, r2: 136)                        	 0.18787   	 600       	 803.362   	 0         	 47.7292   	 16.8317   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 86, n: 50, r2: 86)                                                                                                         	 0.0980931 	 800       	 0         	 0         	 48.2546   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 136)                                                                                	 0.0687307 	 100       	 4.19997   	 0         	 0.18798   	 22.3426   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 136, n: 50, r2new: 50) 	 0.0581773 	 100       	 85.0503   	 0         	 11.5729   	 7.3491    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 136, r1_: 50, n: 50, r2: 136)                         	 0.0369566 	 100       	 250.239   	 0         	 27.5263   	 9.09091   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 136, n: 50, r: 136, r2: 50)                           	 0.0263172 	 100       	 351.405   	 0         	 38.6546   	 9.09091   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 136, m: 50)                                                                                 	 0.0187534 	 100       	 3.18165   	 0         	 0.688943  	 4.61816   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 136, r2: 136, leftOrthog: 1)                      	 0.0179883 	 100       	 514.113   	 0         	 47.0081   	 10.9367   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 136, r1_: 136, n: 50, r2: 50)                         	 0.0141477 	 100       	 653.674   	 0         	 39.4973   	 16.5498   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 136, m: 136, fromLeft: 1)                              	 0.0118891 	 800       	 0         	 0         	 19.9132   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6800, r: 50, r2: 50, leftOrthog: 1)                        	 0.0108864 	 100       	 312.318   	 0         	 75.3237   	 4.14634   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 136)  	 0.00286714	 100       	 64.5102   	 0         	 8.95553   	 7.20339   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 136, r2: 136)                            	 0.0017765 	 100       	 104.115   	 0         	 14.4536   	 7.20339   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 136, n: 50, r2new: 1)  	 0.00172622	 100       	 0.787847  	 0         	 6.3037    	 0.124982  
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000986038	 100       	 0.50708   	 0         	 2.02832   	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 136, n: 50, r: 2, r2: 1)                              	 0.000913834	 100       	 2.97647   	 0         	 17.8606   	 0.16665   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 136)                            	 0.000894298	 100       	 0         	 0         	 12.166    	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000836037	 100       	 29.903    	 0         	 7.17672   	 4.16667   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 136, leftOrthog: 1)                         	 0.000723654	 100       	 93.9676   	 0         	 28.0797   	 3.34646   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 136)                                                                                                         	 0.000526307	 100       	 0         	 0         	 20.6723   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 86)                                                                                                          	 0.000464176	 100       	 0         	 0         	 14.822    	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 86, n: 50, r2: 1)                                                                                                          	 0.000395519	 100       	 0         	 0         	 17.3949   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000349727	 100       	 0.714843  	 0         	 11.4375   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 136, m: 50, fromLeft: 1)                               	 0.000316407	 100       	 0         	 0         	 34.3861   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 28.2808   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 28.2807   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 17.1345   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 10.2393   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 10.2377   	 100       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 10.0938   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 9.81126   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 9.08193   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.850469  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.599424  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.566424  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.23981   	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0994791 	 1100      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0122055 	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00652858	 4600      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00405335	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000986038	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000894298	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000349727	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23175397422976 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23175173761024 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23174972434560 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23174771108096 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23174569781632 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23174368455168 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23174167128704 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23173965802240 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23173764475776 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23173563149312 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23173361822848 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23173160496384 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23172959169920 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23172757843456 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23172556516992 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23172355190528 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23172153864064 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23171952537600 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23171751211136 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23171549884672 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23171348558208 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23171147231744 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23170945905280 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23170744578816 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23170543252352 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23170341925888 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23170140599424 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23169939272960 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23169737946496 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23169536620032 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23169335293568 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23169133967104 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23168932636544 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23168731310080 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23168529983616 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23168328657152 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23168127330688 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23167926004224 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23167724677760 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23167523351296 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23167322024832 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23167120698368 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23166919371904 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23166718045440 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23166516718976 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23166315392512 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23166114066048 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23165912739584 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23165711413120 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23165510086656 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23165308760192 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23165107433728 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23164906107264 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23164704780800 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23164503454336 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23164302127872 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23164100801408 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23163899474944 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23163698148480 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23163496822016 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23163295495552 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23163094169088 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23162892842624 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23175291762432 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23175285171968 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_TENSORTRAIN_NORMALIZE_PLAIN_QB PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 137, m: 6850)                                                                               	 9.59877   	 700       	 18.6268   	 0         	 1.10603   	 16.8412   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 6850, m: 137)                                                                              	 8.21626   	 600       	 75.3605   	 0         	 1.10754   	 68.0429   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 137, n: 50, r2new: 137)	 0.777479  	 700       	 124.198   	 0         	 10.5209   	 11.805    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 137)                                                                              	 0.711184  	 100       	 53.2645   	 0         	 0.791813  	 67.269    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 137, m: 2500)                                                                               	 0.559586  	 100       	 16.4641   	 0         	 1.00632   	 16.3606   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 137, n: 50, r: 137, r2: 137)                          	 0.544761  	 700       	 330.41    	 0         	 19.487    	 16.9554   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6850, r: 137, r2: 137, leftOrthog: 1)                      	 0.476264  	 600       	 323.941   	 0         	 28.7527   	 11.2664   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 6850, m: 50)                                                                               	 0.441038  	 100       	 31.1009   	 0         	 1.24715   	 24.9376   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 137, r1_: 137, n: 50, r2: 137)                        	 0.190597  	 600       	 809.463   	 0         	 47.7406   	 16.9554   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 87, n: 50, r2: 87)                                                                                                         	 0.0987059 	 800       	 0         	 0         	 49.0767   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 137)                                                                                	 0.0673598 	 100       	 4.31513   	 0         	 0.192993  	 22.359    
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 137, n: 50, r2new: 50) 	 0.0478236 	 100       	 105.272   	 0         	 14.2658   	 7.37937   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 137, r1_: 50, n: 50, r2: 137)                         	 0.0411755 	 100       	 227.915   	 0         	 25.0207   	 9.10904   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 137, n: 50, r: 137, r2: 50)                           	 0.0263799 	 100       	 355.745   	 0         	 39.054    	 9.10904   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 137, r2: 137, leftOrthog: 1)                      	 0.0212187 	 100       	 442.275   	 0         	 40.1547   	 11.0143   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 137, m: 50)                                                                                 	 0.0189305 	 100       	 3.17829   	 0         	 0.686723  	 4.6282    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6850, r: 50, r2: 50, leftOrthog: 1)                        	 0.0141471 	 100       	 242.099   	 0         	 58.3864   	 4.14649   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 137, r1_: 137, n: 50, r2: 50)                         	 0.0138681 	 100       	 676.696   	 0         	 40.5978   	 16.6683   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 137, m: 137, fromLeft: 1)                              	 0.0119016 	 800       	 0         	 0         	 20.1859   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 137)  	 0.00326624	 100       	 57.4636   	 0         	 7.95262   	 7.22574   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 137, r2: 137)                            	 0.00213295	 100       	 87.9957   	 0         	 12.1781   	 7.22574   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 137, n: 50, r2new: 1)  	 0.00201151	 100       	 0.681082  	 0         	 5.44945   	 0.124982  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 137, n: 50, r: 2, r2: 1)                              	 0.00113794	 100       	 2.40786   	 0         	 14.4486   	 0.16665   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.00107347	 100       	 0.465779  	 0         	 1.86312   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 137)                            	 0.000874631	 100       	 0         	 0         	 12.531    	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000847558	 100       	 29.4965   	 0         	 7.07916   	 4.16667   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 137, leftOrthog: 1)                         	 0.000796436	 100       	 86.0082   	 0         	 25.6643   	 3.35127   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 137)                                                                                                         	 0.000527392	 100       	 0         	 0         	 20.7815   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 87)                                                                                                          	 0.000514106	 100       	 0         	 0         	 13.5381   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 87, n: 50, r2: 1)                                                                                                          	 0.000381512	 100       	 0         	 0         	 18.2432   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000342165	 100       	 0.730642  	 0         	 11.6903   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 137, m: 50, fromLeft: 1)                               	 0.000300232	 100       	 0         	 0         	 36.5051   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 29.3265   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 29.3264   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 17.9106   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 10.5472   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 10.5456   	 100       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 10.1773   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 10.094    	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 9.43585   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.83058   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.574412  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.512426  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.246488  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.100129  	 1100      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0122018 	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00479419	 4600      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00383499	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.00107347	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000874631	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000342165	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23284206794624 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23284024338432 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23283823011968 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23283621685504 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23283420359040 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23283219032576 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23283017706112 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23282816379648 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23282615053184 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23282413726720 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23282212400256 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23282011073792 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23281809747328 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23281608420864 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23281407094400 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23281205767936 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23281004441472 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23280803115008 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23280601788544 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23280400462080 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23280199135616 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23279997809152 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23279796482688 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23279595156224 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23279393829760 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23279192503296 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23278991176832 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23278789850368 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23278588523904 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23278387197440 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23278185870976 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23277984544512 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23277783213952 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23277581887488 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23277380561024 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23277179234560 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23276977908096 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23276776581632 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23276575255168 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23276373928704 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23276172602240 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23275971275776 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23275769949312 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23275568622848 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23275367296384 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23275165969920 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23274964643456 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23274763316992 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23274561990528 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23274360664064 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23274159337600 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23273958011136 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23273756684672 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23273555358208 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23273354031744 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23273152705280 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23272951378816 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23272750052352 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23272548725888 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23272347399424 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23272146072960 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23271944746496 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23271743420032 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23284101134080 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23284094543616 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_TENSORTRAIN_NORMALIZE_PLAIN_QB PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 6900, m: 138)                                                                              	 9.73627   	 600       	 64.9982   	 0         	 0.94833   	 68.5396   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 138, m: 6900)                                                                               	 9.38491   	 700       	 19.4715   	 0         	 1.14781   	 16.9641   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 138, n: 50, r2new: 138)	 0.759111  	 700       	 130.359   	 0         	 10.9434   	 11.9121   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 138)                                                                              	 0.738339  	 100       	 52.0606   	 0         	 0.768408  	 67.7513   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 138, m: 2500)                                                                               	 0.557559  	 100       	 16.7638   	 0         	 1.01755   	 16.4746   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 138, n: 50, r: 138, r2: 138)                          	 0.514199  	 700       	 357.77    	 0         	 20.9477   	 17.0792   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 6900, m: 50)                                                                               	 0.447861  	 100       	 30.8503   	 0         	 1.23708   	 24.938    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6900, r: 138, r2: 138, leftOrthog: 1)                      	 0.416533  	 600       	 378.564   	 0         	 33.3575   	 11.3487   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 138, r1_: 138, n: 50, r2: 138)                        	 0.193674  	 600       	 814.173   	 0         	 47.6704   	 17.0792   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 88, n: 50, r2: 88)                                                                                                         	 0.0918805 	 800       	 0         	 0         	 53.9414   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 138)                                                                                	 0.070663  	 100       	 4.14172   	 0         	 0.185104  	 22.3751   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 138, n: 50, r2new: 50) 	 0.0581533 	 100       	 88.0776   	 0         	 11.8872   	 7.40944   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 138, r1_: 50, n: 50, r2: 138)                         	 0.0426087 	 100       	 223.475   	 0         	 24.4851   	 9.12698   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 138, n: 50, r: 138, r2: 50)                           	 0.0264575 	 100       	 359.897   	 0         	 39.4322   	 9.12698   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 138, r2: 138, leftOrthog: 1)                      	 0.0203793 	 100       	 467.239   	 0         	 42.1247   	 11.0918   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 138, m: 50)                                                                                 	 0.020148  	 100       	 3.01104   	 0         	 0.649195  	 4.63812   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 138, r1_: 138, n: 50, r2: 50)                         	 0.0145777 	 100       	 653.188   	 0         	 38.911    	 16.7867   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 138, m: 138, fromLeft: 1)                              	 0.0122555 	 800       	 0         	 0         	 19.8902   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6900, r: 50, r2: 50, leftOrthog: 1)                        	 0.0116448 	 100       	 296.27    	 0         	 71.4482   	 4.14663   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 138)  	 0.00329933	 100       	 57.7208   	 0         	 7.9638    	 7.2479    
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 138, n: 50, r2new: 1)  	 0.00235895	 100       	 0.585006  	 0         	 4.68073   	 0.124982  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 138, r2: 138)                            	 0.00217302	 100       	 87.6382   	 0         	 12.0915   	 7.2479    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 138, n: 50, r: 2, r2: 1)                              	 0.00144527	 100       	 1.90968   	 0         	 11.4592   	 0.166651  
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.00107678	 100       	 0.464347  	 0         	 1.85739   	 0.25      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 138, leftOrthog: 1)                         	 0.000970954	 100       	 71.0641   	 0         	 21.1751   	 3.35603   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 138)                            	 0.000909085	 100       	 0         	 0         	 12.1441   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000807212	 100       	 30.9708   	 0         	 7.43299   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 138)                                                                                                         	 0.000558122	 100       	 0         	 0         	 19.7806   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 88)                                                                                                          	 0.00049159	 100       	 0         	 0         	 14.3209   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 88, n: 50, r2: 1)                                                                                                          	 0.000388187	 100       	 0         	 0         	 18.1356   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000377613	 100       	 0.662053  	 0         	 10.5929   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 138, m: 50, fromLeft: 1)                               	 0.00032737	 100       	 0         	 0         	 33.7233   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 32.0475   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 32.0474   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 18.6542   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 12.5477   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 12.546    	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 11.9308   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 10.9931   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 9.96262   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.822922  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.544275  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.449528  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.251668  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0933184 	 1100      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0125828 	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.0029989 	 4600      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00264643	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.00107678	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000909085	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000377613	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23367619798912 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23367440656384 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23367239329920 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23367038003456 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23366836676992 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23366635350528 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23366434024064 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23366232697600 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23366031371136 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23365830044672 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23365628718208 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23365427391744 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23365226065280 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23365024738816 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23364823412352 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23364622085888 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23364420759424 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23364219432960 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23364018106496 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23363816780032 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23363615453568 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23363414127104 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23363212800640 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23363011474176 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23362810147712 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23362608821248 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23362407494784 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23362206168320 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23362004841856 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23361803515392 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23361602188928 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23361400862464 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23361199531904 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23360998205440 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23360796878976 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23360595552512 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23360394226048 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23360192899584 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23359991573120 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23359790246656 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23359588920192 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23359387593728 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23359186267264 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23358984940800 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23358783614336 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23358582287872 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23358380961408 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23358179634944 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23357978308480 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23357776982016 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23357575655552 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23357374329088 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23357173002624 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23356971676160 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23356770349696 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23356569023232 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23356367696768 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23356166370304 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23355965043840 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23355763717376 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23355562390912 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23355361064448 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23355159737984 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23367514138368 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23367335257856 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_TENSORTRAIN_NORMALIZE_PLAIN_QB PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 139, m: 6950)                                                                               	 9.53606   	 700       	 19.5825   	 0         	 1.14604   	 17.0871   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 6950, m: 139)                                                                              	 8.44681   	 600       	 76.5611   	 0         	 1.109     	 69.0363   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 139, n: 50, r2new: 139)	 0.78674   	 700       	 128.882   	 0         	 10.7227   	 12.0195   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 139)                                                                              	 0.730334  	 100       	 53.4003   	 0         	 0.782611  	 68.2335   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 139, m: 2500)                                                                               	 0.568164  	 100       	 16.6879   	 0         	 1.00599   	 16.5885   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 139, n: 50, r: 139, r2: 139)                          	 0.545355  	 700       	 344.718   	 0         	 20.0383   	 17.203    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 6950, m: 50)                                                                               	 0.452619  	 100       	 30.747    	 0         	 1.23291   	 24.9385   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6950, r: 139, r2: 139, leftOrthog: 1)                      	 0.335639  	 600       	 480.09    	 0         	 41.9992   	 11.4309   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 139, r1_: 139, n: 50, r2: 139)                        	 0.205065  	 600       	 785.785   	 0         	 45.6773   	 17.203    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 89, n: 50, r2: 89)                                                                                                         	 0.104276  	 800       	 0         	 0         	 48.6158   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 139)                                                                                	 0.0730511 	 100       	 4.0337    	 0         	 0.180148  	 22.3911   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 139, n: 50, r2new: 50) 	 0.0548313 	 100       	 95.0278   	 0         	 12.7737   	 7.43932   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 139, r1_: 50, n: 50, r2: 139)                         	 0.0459416 	 100       	 210.278   	 0         	 22.9944   	 9.14474   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 139, n: 50, r: 139, r2: 50)                           	 0.0266086 	 100       	 363.06    	 0         	 39.7015   	 9.14474   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 139, m: 50)                                                                                 	 0.0203288 	 100       	 3.00887   	 0         	 0.647358  	 4.64792   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 139, r2: 139, leftOrthog: 1)                      	 0.0196908 	 100       	 490.611   	 0         	 43.9248   	 11.1693   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6950, r: 50, r2: 50, leftOrthog: 1)                        	 0.0148927 	 100       	 233.336   	 0         	 56.2691   	 4.14678   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 139, r1_: 139, n: 50, r2: 50)                         	 0.0143258 	 100       	 674.341   	 0         	 39.8899   	 16.905    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 139, m: 139, fromLeft: 1)                              	 0.0123157 	 800       	 0         	 0         	 20.0807   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 139)  	 0.00337362	 100       	 57.2709   	 0         	 7.87783   	 7.26987   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 139, r2: 139)                            	 0.00224607	 100       	 86.0214   	 0         	 11.8326   	 7.26987   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 139, n: 50, r2new: 1)  	 0.00208726	 100       	 0.665943  	 0         	 5.32831   	 0.124982  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 139, n: 50, r: 2, r2: 1)                              	 0.00125502	 100       	 2.21511   	 0         	 13.2919   	 0.166651  
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000994294	 100       	 0.502869  	 0         	 2.01148   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 139)                            	 0.000889408	 100       	 0         	 0         	 12.5027   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000814415	 100       	 30.6969   	 0         	 7.36725   	 4.16667   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 139, leftOrthog: 1)                         	 0.000738634	 100       	 94.0926   	 0         	 27.9976   	 3.36074   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 139)                                                                                                         	 0.000557986	 100       	 0         	 0         	 19.9288   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 89)                                                                                                          	 0.000529182	 100       	 0         	 0         	 13.4547   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 89, n: 50, r2: 1)                                                                                                          	 0.000387131	 100       	 0         	 0         	 18.3917   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000341134	 100       	 0.73285   	 0         	 11.7256   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 139, m: 50, fromLeft: 1)                               	 0.000320678	 100       	 0         	 0         	 34.6765   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 29.8859   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 29.8858   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 18.3688   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 10.6498   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 10.6482   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 10.2507   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 10.1246   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 9.70281   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.847032  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.575464  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.370962  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.266147  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.10575   	 1100      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0126364 	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00401564	 4600      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00315913	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000994294	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000889408	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000341134	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22512891778944 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22512675055616 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22512473729152 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22512272402688 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22512071076224 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22511869749760 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22511668423296 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22511467096832 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22511265770368 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22511064443904 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22510863117440 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22510661790976 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22510460464512 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22510259138048 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22510057811584 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22509856485120 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22509655158656 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22509453832192 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22509252505728 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22509051179264 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22508849852800 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22508648526336 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22508447199872 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22508245873408 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22508044546944 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22507843220480 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22507641894016 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22507440567552 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22507239241088 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22507037914624 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22506836588160 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22506635261696 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22506433931136 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22506232604672 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22506031278208 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22505829951744 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22505628625280 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22505427298816 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22505225972352 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22505024645888 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22504823319424 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22504621992960 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22504420666496 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22504219340032 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22504018013568 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22503816687104 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22503615360640 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22503414034176 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22503212707712 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22503011381248 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22502810054784 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22502608728320 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22502407401856 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22502206075392 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22502004748928 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22501803422464 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22501602096000 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22501400769536 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22501199443072 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22500998116608 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22500796790144 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22500595463680 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22500394137216 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22512786118400 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22512779527936 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_TENSORTRAIN_NORMALIZE_PLAIN_QB PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 140, m: 7000)                                                                               	 10.0073   	 700       	 19.0661   	 0         	 1.10785   	 17.21     
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 7000, m: 140)                                                                              	 9.30109   	 600       	 71.0406   	 0         	 1.02168   	 69.533    
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 140, n: 50, r2new: 140)	 0.805967  	 700       	 128.889   	 0         	 10.6279   	 12.1274   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 140)                                                                              	 0.735042  	 100       	 53.828    	 0         	 0.783345  	 68.7156   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 7000, r: 140, r2: 140, leftOrthog: 1)                      	 0.603497  	 600       	 272.81    	 0         	 23.6955   	 11.5132   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 140, n: 50, r: 140, r2: 140)                          	 0.560628  	 700       	 342.616   	 0         	 19.7738   	 17.3267   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 140, m: 2500)                                                                               	 0.543894  	 100       	 17.6819   	 0         	 1.05865   	 16.7023   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 7000, m: 50)                                                                               	 0.44169   	 100       	 31.7342   	 0         	 1.27248   	 24.9389   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 140, r1_: 140, n: 50, r2: 140)                        	 0.198435  	 600       	 829.694   	 0         	 47.8852   	 17.3267   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 90, n: 50, r2: 90)                                                                                                         	 0.102218  	 800       	 0         	 0         	 50.715    	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 140)                                                                                	 0.0706304 	 100       	 4.20027   	 0         	 0.187455  	 22.4068   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 140, n: 50, r2new: 50) 	 0.0597786 	 100       	 88.6605   	 0         	 11.8705   	 7.469     
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 140, r1_: 50, n: 50, r2: 140)                         	 0.0463727 	 100       	 211.331   	 0         	 23.0653   	 9.1623    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 140, n: 50, r: 140, r2: 50)                           	 0.0271894 	 100       	 360.435   	 0         	 39.3389   	 9.1623    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 140, r2: 140, leftOrthog: 1)                      	 0.0211855 	 100       	 462.58    	 0         	 41.13     	 11.2468   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 140, m: 50)                                                                                 	 0.0200519 	 100       	 3.07535   	 0         	 0.660288  	 4.6576    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 140, r1_: 140, n: 50, r2: 50)                         	 0.0142615 	 100       	 687.167   	 0         	 40.3661   	 17.0233   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 7000, r: 50, r2: 50, leftOrthog: 1)                        	 0.0139769 	 100       	 250.414   	 0         	 60.3854   	 4.14692   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 140, m: 140, fromLeft: 1)                              	 0.0127061 	 800       	 0         	 0         	 19.7448   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 140)  	 0.00332146	 100       	 59.0103   	 0         	 8.09284   	 7.29167   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 140, r2: 140)                            	 0.00222678	 100       	 88.0195   	 0         	 12.0712   	 7.29167   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 140, n: 50, r2new: 1)  	 0.00179825	 100       	 0.778536  	 0         	 6.22917   	 0.124982  
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.00113535	 100       	 0.440393  	 0         	 1.76157   	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 140, n: 50, r: 2, r2: 1)                              	 0.00100747	 100       	 2.77925   	 0         	 16.6771   	 0.166651  
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 140)                            	 0.000903511	 100       	 0         	 0         	 12.3961   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000834875	 100       	 29.9446   	 0         	 7.1867    	 4.16667   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 140, leftOrthog: 1)                         	 0.000795508	 100       	 87.9941   	 0         	 26.1468   	 3.36538   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 140)                                                                                                         	 0.000567681	 100       	 0         	 0         	 19.7294   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 90)                                                                                                          	 0.000478667	 100       	 0         	 0         	 15.0418   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 90, n: 50, r2: 1)                                                                                                          	 0.00040483	 100       	 0         	 0         	 17.7852   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000340062	 100       	 0.73516   	 0         	 11.7626   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 140, m: 50, fromLeft: 1)                               	 0.000312224	 100       	 0         	 0         	 35.8717   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 31.3191   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 31.319    	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 18.467    	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 11.8877   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 11.886    	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 11.4338   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 10.5712   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 10.5484   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.870865  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.639455  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.591052  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.259904  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.103669  	 1100      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0130183 	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.0121326 	 4600      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.0039191 	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.00113535	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000903511	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000340062	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23151040829312 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23150813243392 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23150611916928 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23150410590464 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23150209264000 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23150007937536 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23149806611072 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23149605284608 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23149403958144 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23149202631680 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23149001305216 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23148799978752 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23148598652288 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23148397325824 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23148195999360 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23147994672896 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23147793346432 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23147592019968 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23147390693504 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23147189367040 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23146988040576 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23146786714112 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23146585387648 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23146384061184 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23146182734720 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23145981408256 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23145780081792 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23145578755328 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23145377428864 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23145176102400 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23144974775936 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23144773449472 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23144572118912 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23144370792448 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23144169465984 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23143968139520 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23143766813056 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23143565486592 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23143364160128 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23143162833664 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23142961507200 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23142760180736 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23142558854272 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23142357527808 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23142156201344 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23141954874880 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23141753548416 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23141552221952 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23141350895488 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23141149569024 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23140948242560 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23140746916096 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23140545589632 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23140344263168 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23140142936704 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23139941610240 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23139740283776 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23139538957312 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23139337630848 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23139136304384 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23138934977920 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23138733651456 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23138532324992 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23150935168768 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23150928578304 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_TENSORTRAIN_NORMALIZE_PLAIN_QB PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 141, m: 7050)                                                                               	 10.1301   	 700       	 19.2415   	 0         	 1.11011   	 17.3329   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 7050, m: 141)                                                                              	 8.95002   	 600       	 75.4206   	 0         	 1.07698   	 70.0297   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 141, n: 50, r2new: 141)	 0.80497   	 700       	 132.189   	 0         	 10.8037   	 12.2355   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 141)                                                                              	 0.733059  	 100       	 54.7511   	 0         	 0.791229  	 69.1975   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 7050, r: 141, r2: 141, leftOrthog: 1)                      	 0.581357  	 600       	 289.312   	 0         	 24.9506   	 11.5954   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 141, m: 2500)                                                                               	 0.576593  	 100       	 16.916    	 0         	 1.00594   	 16.8161   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 141, n: 50, r: 141, r2: 141)                          	 0.574912  	 700       	 341.314   	 0         	 19.559    	 17.4505   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 7050, m: 50)                                                                               	 0.460063  	 100       	 30.6842   	 0         	 1.23035   	 24.9393   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 141, r1_: 141, n: 50, r2: 141)                        	 0.208277  	 600       	 807.547   	 0         	 46.2764   	 17.4505   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 91, n: 50, r2: 91)                                                                                                         	 0.114253  	 800       	 0         	 0         	 46.3871   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 141)                                                                                	 0.0756605 	 100       	 3.94746   	 0         	 0.17605   	 22.4224   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 141, n: 50, r2new: 50) 	 0.0531001 	 100       	 101.516   	 0         	 13.5382   	 7.49847   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 141, r1_: 50, n: 50, r2: 141)                         	 0.044166  	 100       	 225.071   	 0         	 24.5184   	 9.17969   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 141, r2: 141, leftOrthog: 1)                      	 0.0261576 	 100       	 380.023   	 0         	 33.5584   	 11.3242   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 141, n: 50, r: 141, r2: 50)                           	 0.0252119 	 100       	 394.278   	 0         	 42.9512   	 9.17969   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 141, m: 50)                                                                                 	 0.0204151 	 100       	 3.04513   	 0         	 0.652458  	 4.66716   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 7050, r: 50, r2: 50, leftOrthog: 1)                        	 0.0168187 	 100       	 209.588   	 0         	 50.539    	 4.14706   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 141, m: 141, fromLeft: 1)                              	 0.0165594 	 800       	 0         	 0         	 15.3675   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 141, r1_: 141, n: 50, r2: 50)                         	 0.0140958 	 100       	 705.21    	 0         	 41.1403   	 17.1416   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 141)  	 0.00353152	 100       	 56.2958   	 0         	 7.69776   	 7.31328   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 141, r2: 141)                            	 0.00242017	 100       	 82.1471   	 0         	 11.2326   	 7.31328   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 141, n: 50, r2new: 1)  	 0.00222871	 100       	 0.632654  	 0         	 5.06195   	 0.124982  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 141, n: 50, r: 2, r2: 1)                              	 0.00132909	 100       	 2.12176   	 0         	 12.7318   	 0.166651  
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.0010376 	 100       	 0.481881  	 0         	 1.92753   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 141)                            	 0.000894971	 100       	 0         	 0         	 12.6038   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000864306	 100       	 28.9249   	 0         	 6.94199   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 141)                                                                                                         	 0.000586611	 100       	 0         	 0         	 19.2291   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 141, leftOrthog: 1)                         	 0.000532142	 100       	 132.483   	 0         	 39.3128   	 3.36998   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 91)                                                                                                          	 0.000471828	 100       	 0         	 0         	 15.4294   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 91, n: 50, r2: 1)                                                                                                          	 0.00041013	 100       	 0         	 0         	 17.7505   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000344962	 100       	 0.724718  	 0         	 11.5955   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 141, m: 50, fromLeft: 1)                               	 0.000341413	 100       	 0         	 0         	 33.0392   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 31.405    	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 31.4049   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 18.9732   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 11.5098   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 11.5081   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 11.0287   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 10.7271   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 10.2188   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.86383   	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.624865  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.603873  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.267403  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.115721  	 1100      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0169009 	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00492716	 4600      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00426785	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.0010376 	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000894971	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000344962	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22808566450048 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22808356710400 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22808155383936 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22807954057472 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22807752731008 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22807551404544 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22807350078080 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22807148751616 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22806947425152 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22806746098688 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22806544772224 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22806343445760 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22806142119296 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22805940792832 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22805739466368 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22805538139904 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22805336813440 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22805135486976 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22804934160512 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22804732834048 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22804531507584 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22804330181120 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22804128854656 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22803927528192 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22803726201728 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22803524875264 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22803323548800 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22803122222336 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22802920895872 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22802719569408 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22802518242944 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22802316916480 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22802115585920 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22801914259456 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22801712932992 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22801511606528 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22801310280064 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22801108953600 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22800907627136 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22800706300672 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22800504974208 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22800303647744 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22800102321280 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22799900994816 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22799699668352 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22799498341888 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22799297015424 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22799095688960 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22798894362496 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22798693036032 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22798491709568 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22798290383104 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22798089056640 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22797887730176 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22797686403712 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22797485077248 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22797283750784 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22797082424320 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22796881097856 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22796679771392 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22796478444928 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22796277118464 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22796075792000 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22808460789504 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22808454199040 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_TENSORTRAIN_NORMALIZE_PLAIN_QB PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 142, m: 7100)                                                                               	 10.3469   	 700       	 19.2419   	 0         	 1.10232   	 17.4559   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 7100, m: 142)                                                                              	 7.95253   	 600       	 86.6994   	 0         	 1.22932   	 70.5264   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 142, n: 50, r2new: 142)	 0.801406  	 700       	 135.989   	 0         	 11.0166   	 12.344    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 7100, r: 142, r2: 142, leftOrthog: 1)                      	 0.739756  	 600       	 232.235   	 0         	 19.8872   	 11.6776   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 142)                                                                              	 0.736661  	 100       	 55.2625   	 0         	 0.793098  	 69.6793   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 142, n: 50, r: 142, r2: 142)                          	 0.596041  	 700       	 336.269   	 0         	 19.1342   	 17.5743   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 142, m: 2500)                                                                               	 0.589608  	 100       	 16.7757   	 0         	 0.990904  	 16.9297   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 7100, m: 50)                                                                               	 0.456416  	 100       	 31.1485   	 0         	 1.24895   	 24.9398   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 142, r1_: 142, n: 50, r2: 142)                        	 0.202601  	 600       	 847.957   	 0         	 48.2499   	 17.5743   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 92, n: 50, r2: 92)                                                                                                         	 0.119188  	 800       	 0         	 0         	 45.4489   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 142)                                                                                	 0.0730406 	 100       	 4.11643   	 0         	 0.18346   	 22.4378   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 142, n: 50, r2new: 50) 	 0.0652048 	 100       	 84.0736   	 0         	 11.1685   	 7.52774   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 142, r1_: 50, n: 50, r2: 142)                         	 0.048598  	 100       	 207.457   	 0         	 22.5573   	 9.19689   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 142, n: 50, r: 142, r2: 50)                           	 0.0276666 	 100       	 364.41    	 0         	 39.6232   	 9.19689   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 142, m: 50)                                                                                 	 0.020362  	 100       	 3.07762   	 0         	 0.658088  	 4.67661   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 142, r2: 142, leftOrthog: 1)                      	 0.0196235 	 100       	 513.771   	 0         	 45.0613   	 11.4016   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 7100, r: 50, r2: 50, leftOrthog: 1)                        	 0.0167027 	 100       	 212.541   	 0         	 51.2493   	 4.1472    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 142, r1_: 142, n: 50, r2: 50)                         	 0.0144694 	 100       	 696.783   	 0         	 40.3702   	 17.2598   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 142, m: 142, fromLeft: 1)                              	 0.0129522 	 800       	 0         	 0         	 19.9271   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 142)  	 0.00329127	 100       	 61.265    	 0         	 8.35275   	 7.33471   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 142, n: 50, r2new: 1)  	 0.0022051 	 100       	 0.643963  	 0         	 5.15243   	 0.124982  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 142, r2: 142)                            	 0.00215178	 100       	 93.7086   	 0         	 12.776    	 7.33471   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 142, n: 50, r: 2, r2: 1)                              	 0.00139856	 100       	 2.03066   	 0         	 12.1851   	 0.166651  
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.00100281	 100       	 0.498601  	 0         	 1.99441   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 142)                            	 0.00090615	 100       	 0         	 0         	 12.5366   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.00079835	 100       	 31.3146   	 0         	 7.5155    	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 142)                                                                                                         	 0.000554613	 100       	 0         	 0         	 20.4828   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 142, leftOrthog: 1)                         	 0.000497762	 100       	 142.638   	 0         	 42.2692   	 3.37452   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 92)                                                                                                          	 0.000485007	 100       	 0         	 0         	 15.175    	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 92, n: 50, r2: 1)                                                                                                          	 0.000397905	 100       	 0         	 0         	 18.4969   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000397293	 100       	 0.629259  	 0         	 10.0681   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 142, m: 50, fromLeft: 1)                               	 0.000326491	 100       	 0         	 0         	 34.7942   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 30.4396   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 30.4395   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 19.0149   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 10.9568   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 10.526    	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 10.5243   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 10.0126   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 9.21865   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.872108  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.77658   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.627258  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.266467  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.120625  	 1100      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0132787 	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00703218	 4600      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00498708	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.00100281	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.00090615	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000397293	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22513901307776 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22513681688576 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22513480362112 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22513279035648 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22513077709184 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22512876382720 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22512675056256 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22512473729792 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22512272403328 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22512071076864 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22511869750400 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22511668423936 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22511467097472 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22511265771008 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22511064444544 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22510863118080 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22510661791616 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22510460465152 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22510259138688 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22510057812224 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22509856485760 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22509655159296 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22509453832832 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22509252506368 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22509051179904 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22508849853440 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22508648526976 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22508447200512 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22508245874048 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22508044547584 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22507843221120 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22507641894656 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22507440564096 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22507239237632 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22507037911168 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22506836584704 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22506635258240 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22506433931776 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22506232605312 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22506031278848 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22505829952384 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22505628625920 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22505427299456 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22505225972992 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22505024646528 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22504823320064 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22504621993600 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22504420667136 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22504219340672 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22504018014208 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22503816687744 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22503615361280 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22503414034816 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22503212708352 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22503011381888 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22502810055424 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22502608728960 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22502407402496 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22502206076032 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22502004749568 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22501803423104 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22501602096640 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22501400770176 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22513795647232 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22513789056768 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_TENSORTRAIN_NORMALIZE_PLAIN_QB PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 7150, m: 143)                                                                              	 10.7286   	 600       	 65.6332   	 0         	 0.92411   	 71.0231   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 143, m: 7150)                                                                               	 10.3986   	 700       	 19.5536   	 0         	 1.11234   	 17.5788   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 143, n: 50, r2new: 143)	 0.838729  	 700       	 133.06    	 0         	 10.6852   	 12.4528   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 143)                                                                              	 0.782213  	 100       	 52.7834   	 0         	 0.752318  	 70.161    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 143, m: 2500)                                                                               	 0.587311  	 100       	 17.0771   	 0         	 1.00198   	 17.0433   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 143, n: 50, r: 143, r2: 143)                          	 0.562838  	 700       	 363.683   	 0         	 20.5494   	 17.698    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 7150, r: 143, r2: 143, leftOrthog: 1)                      	 0.538928  	 600       	 325.558   	 0         	 27.6838   	 11.7599   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 7150, m: 50)                                                                               	 0.482723  	 100       	 29.6582   	 0         	 1.18917   	 24.9402   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 143, r1_: 143, n: 50, r2: 143)                        	 0.203062  	 600       	 864.035   	 0         	 48.821    	 17.698    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 93, n: 50, r2: 93)                                                                                                         	 0.110296  	 800       	 0         	 0         	 50.1865   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 143)                                                                                	 0.0716379 	 100       	 4.22495   	 0         	 0.188169  	 22.453    
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 143, n: 50, r2new: 50) 	 0.0563243 	 100       	 98.9714   	 0         	 13.097    	 7.5568    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 143, r1_: 50, n: 50, r2: 143)                         	 0.0454964 	 100       	 224.732   	 0         	 24.3905   	 9.21392   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 143, n: 50, r: 143, r2: 50)                           	 0.0266262 	 100       	 384.002   	 0         	 41.6763   	 9.21392   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 143, r2: 143, leftOrthog: 1)                      	 0.0264053 	 100       	 387.214   	 0         	 33.7325   	 11.4789   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 143, m: 50)                                                                                 	 0.0209636 	 100       	 3.01316   	 0         	 0.64302   	 4.68595   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 7150, r: 50, r2: 50, leftOrthog: 1)                        	 0.0193034 	 100       	 185.2     	 0         	 44.6553   	 4.14733   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 143, r1_: 143, n: 50, r2: 50)                         	 0.0147579 	 100       	 692.814   	 0         	 39.8673   	 17.378    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 143, m: 143, fromLeft: 1)                              	 0.0131299 	 800       	 0         	 0         	 19.9351   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 143)  	 0.00372475	 100       	 54.9003   	 0         	 7.46337   	 7.35597   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 143, r2: 143)                            	 0.00260004	 100       	 78.6488   	 0         	 10.6918   	 7.35597   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 143, n: 50, r2new: 1)  	 0.00180652	 100       	 0.791578  	 0         	 6.33351   	 0.124983  
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.00107554	 100       	 0.464883  	 0         	 1.85953   	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 143, n: 50, r: 2, r2: 1)                              	 0.000977205	 100       	 2.92671   	 0         	 17.5619   	 0.166651  
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 143)                            	 0.000915099	 100       	 0         	 0         	 12.5014   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000837183	 100       	 29.862    	 0         	 7.16689   	 4.16667   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 143, leftOrthog: 1)                         	 0.000727745	 100       	 98.2487   	 0         	 29.0761   	 3.37902   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 143)                                                                                                         	 0.000533955	 100       	 0         	 0         	 21.425    	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 93)                                                                                                          	 0.000495804	 100       	 0         	 0         	 15.0059   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 93, n: 50, r2: 1)                                                                                                          	 0.000433854	 100       	 0         	 0         	 17.1486   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000369781	 100       	 0.676076  	 0         	 10.8172   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 143, m: 50, fromLeft: 1)                               	 0.00032297	 100       	 0         	 0         	 35.4212   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 34.7908   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 34.7907   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 20.1864   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 13.6533   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 13.6516   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 13.1157   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 12.0651   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 11.0068   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.900584  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.593041  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.585365  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.264153  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.111759  	 1100      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0134529 	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00322374	 4600      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00282106	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.00107554	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000915099	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000369781	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23224056293248 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23223827687424 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23223626360960 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23223425034496 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23223223708032 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23223022381568 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23222821055104 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23222619728640 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23222418402176 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23222217075712 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23222015749248 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23221814422784 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23221613096320 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23221411769856 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23221210443392 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23221009116928 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23220807790464 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23220606464000 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23220405137536 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23220203811072 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23220002484608 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23219801158144 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23219599831680 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23219398505216 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23219197178752 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23218995852288 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23218794525824 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23218593199360 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23218391872896 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23218190546432 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23217989219968 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23217787893504 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23217586562944 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23217385236480 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23217183910016 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23216982583552 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23216781257088 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23216579930624 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23216378604160 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23216177277696 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23215975951232 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23215774624768 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23215573298304 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23215371971840 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23215170645376 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23214969318912 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23214767992448 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23214566665984 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23214365339520 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23214164013056 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23213962686592 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23213761360128 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23213560033664 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23213358707200 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23213157380736 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23212956054272 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23212754727808 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23212553401344 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23212352074880 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23212150748416 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23211949421952 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23211748095488 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23211546769024 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23223950632704 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23223944042240 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_TENSORTRAIN_NORMALIZE_PLAIN_QB PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 144, m: 7200)                                                                               	 10.969    	 700       	 18.9284   	 0         	 1.0693    	 17.7018   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 7200, m: 144)                                                                              	 8.04287   	 600       	 89.399    	 0         	 1.24999   	 71.5198   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 144, n: 50, r2new: 144)	 0.820395  	 700       	 139.283   	 0         	 11.0877   	 12.5619   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 144)                                                                              	 0.740895  	 100       	 56.5129   	 0         	 0.799984  	 70.6426   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 144, n: 50, r: 144, r2: 144)                          	 0.621285  	 700       	 336.43    	 0         	 18.8774   	 17.8218   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 7200, r: 144, r2: 144, leftOrthog: 1)                      	 0.60907   	 600       	 294.152   	 0         	 24.8395   	 11.8421   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 144, m: 2500)                                                                               	 0.581107  	 100       	 17.4992   	 0         	 1.01996   	 17.1569   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 7200, m: 50)                                                                               	 0.475394  	 100       	 30.3258   	 0         	 1.21592   	 24.9406   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 144, r1_: 144, n: 50, r2: 144)                        	 0.206025  	 600       	 869.599   	 0         	 48.7942   	 17.8218   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 94, n: 50, r2: 94)                                                                                                         	 0.115873  	 800       	 0         	 0         	 48.8037   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 144)                                                                                	 0.0739603 	 100       	 4.11933   	 0         	 0.183342  	 22.468    
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 144, n: 50, r2new: 50) 	 0.0527586 	 100       	 107.433   	 0         	 14.1626   	 7.58565   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 144, r1_: 50, n: 50, r2: 144)                         	 0.044486  	 100       	 233.062   	 0         	 25.2484   	 9.23077   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 144, n: 50, r: 144, r2: 50)                           	 0.0319817 	 100       	 324.185   	 0         	 35.1201   	 9.23077   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 144, m: 50)                                                                                 	 0.0209542 	 100       	 3.03838   	 0         	 0.647127  	 4.69518   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 144, m: 144, fromLeft: 1)                              	 0.0157843 	 800       	 0         	 0         	 16.8155   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 144, r2: 144, leftOrthog: 1)                      	 0.015694  	 100       	 660.635   	 0         	 57.167    	 11.5562   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 144, r1_: 144, n: 50, r2: 50)                         	 0.0138533 	 100       	 748.416   	 0         	 42.7761   	 17.4961   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 7200, r: 50, r2: 50, leftOrthog: 1)                        	 0.0121896 	 100       	 295.334   	 0         	 71.2082   	 4.14747   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 144)  	 0.00330706	 100       	 62.7023   	 0         	 8.49964   	 7.37705   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 144, n: 50, r2new: 1)  	 0.00232873	 100       	 0.618364  	 0         	 4.9476    	 0.124983  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 144, r2: 144)                            	 0.00220465	 100       	 94.0556   	 0         	 12.7498   	 7.37705   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 144, n: 50, r: 2, r2: 1)                              	 0.00137477	 100       	 2.0949    	 0         	 12.5706   	 0.166651  
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000950693	 100       	 0.525932  	 0         	 2.10373   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 144)                            	 0.000901417	 100       	 0         	 0         	 12.7799   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000821855	 100       	 30.419    	 0         	 7.30056   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 144)                                                                                                         	 0.00061394	 100       	 0         	 0         	 18.764    	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 144, leftOrthog: 1)                         	 0.000493707	 100       	 145.835   	 0         	 43.1025   	 3.38346   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 94)                                                                                                          	 0.000463979	 100       	 0         	 0         	 16.2076   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 94, n: 50, r2: 1)                                                                                                          	 0.000397428	 100       	 0         	 0         	 18.9217   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000351798	 100       	 0.710635  	 0         	 11.3702   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 144, m: 50, fromLeft: 1)                               	 0.000306063	 100       	 0         	 0         	 37.6393   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 30.9534   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 30.9533   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 19.6667   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 11.571    	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 10.3826   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 10.381    	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 9.97718   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 9.33312   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.878789  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.656846  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.637447  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.265186  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.117348  	 1100      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0160903 	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00574206	 4600      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00531945	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000950693	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000901417	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000351798	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23310945490816 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23310733666304 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23310532339840 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23310331013376 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23310129686912 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23309928360448 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23309727033984 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23309525707520 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23309324381056 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23309123054592 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23308921728128 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23308720401664 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23308519075200 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23308317748736 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23308116422272 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23307915095808 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23307713769344 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23307512442880 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23307311116416 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23307109789952 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23306908463488 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23306707137024 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23306505810560 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23306304484096 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23306103157632 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23305901831168 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23305700504704 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23305499178240 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23305297851776 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23305096525312 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23304895198848 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23304693872384 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23304492541824 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23304291215360 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23304089888896 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23303888562432 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23303687235968 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23303485909504 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23303284583040 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23303083256576 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23302881930112 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23302680603648 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23302479277184 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23302277950720 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23302076624256 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23301875297792 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23301673971328 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23301472644864 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23301271318400 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23301069991936 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23300868665472 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23300667339008 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23300466012544 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23300264686080 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23300063359616 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23299862033152 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23299660706688 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23299459380224 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23299258053760 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23299056727296 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23298855400832 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23298654074368 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23298452747904 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23310839830272 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23310833239808 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_TENSORTRAIN_NORMALIZE_PLAIN_QB PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 145, m: 7250)                                                                               	 10.7963   	 700       	 19.6347   	 0         	 1.10154   	 17.8247   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 7250, m: 145)                                                                              	 9.61585   	 600       	 76.3436   	 0         	 1.06008   	 72.0165   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 145)                                                                              	 0.791363  	 100       	 53.6498   	 0         	 0.754313  	 71.124    
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 145, n: 50, r2new: 145)	 0.720094  	 700       	 162.449   	 0         	 12.8202   	 12.6714   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 145, m: 2500)                                                                               	 0.595319  	 100       	 17.3172   	 0         	 1.00272   	 17.2703   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 7250, r: 145, r2: 145, leftOrthog: 1)                      	 0.500391  	 600       	 365.549   	 0         	 30.6557   	 11.9243   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 7250, m: 50)                                                                               	 0.495639  	 100       	 29.2888   	 0         	 1.17432   	 24.941    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 145, n: 50, r: 145, r2: 145)                          	 0.440621  	 700       	 484.325   	 0         	 26.9886   	 17.9455   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 145, r1_: 145, n: 50, r2: 145)                        	 0.203364  	 600       	 899.458   	 0         	 50.1215   	 17.9455   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 95, n: 50, r2: 95)                                                                                                         	 0.122838  	 800       	 0         	 0         	 47.0211   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 145)                                                                                	 0.0798908 	 100       	 3.83858   	 0         	 0.170733  	 22.4829   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 145, n: 50, r2new: 50) 	 0.054651  	 100       	 105.442   	 0         	 13.8479   	 7.6143    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 145, r1_: 50, n: 50, r2: 145)                         	 0.038473  	 100       	 273.243   	 0         	 29.548    	 9.24745   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 145, n: 50, r: 145, r2: 50)                           	 0.0272031 	 100       	 386.445   	 0         	 41.7893   	 9.24745   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 145, m: 50)                                                                                 	 0.0222237 	 100       	 2.8873    	 0         	 0.613758  	 4.7043    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 145, r2: 145, leftOrthog: 1)                      	 0.0217655 	 100       	 482.989   	 0         	 41.5171   	 11.6335   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 145, r1_: 145, n: 50, r2: 50)                         	 0.0147432 	 100       	 713.041   	 0         	 40.4811   	 17.6142   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 7250, r: 50, r2: 50, leftOrthog: 1)                        	 0.0136078 	 100       	 266.391   	 0         	 64.2278   	 4.1476    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 145, m: 145, fromLeft: 1)                              	 0.0135667 	 800       	 0         	 0         	 19.8368   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 145)  	 0.0082603 	 100       	 25.4531   	 0         	 3.44055   	 7.39796   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 145)                            	 0.00618452	 100       	 0         	 0         	 1.87565   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 145, n: 50, r2new: 1)  	 0.00196941	 100       	 0.736261  	 0         	 5.8909    	 0.124983  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 145, r2: 145)                            	 0.001874  	 100       	 112.193   	 0         	 15.1654   	 7.39796   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 145, n: 50, r: 2, r2: 1)                              	 0.00114792	 100       	 2.52631   	 0         	 15.1592   	 0.166651  
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000973602	 100       	 0.513557  	 0         	 2.05423   	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000811854	 100       	 30.7937   	 0         	 7.39049   	 4.16667   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 145, leftOrthog: 1)                         	 0.00064041	 100       	 113.209   	 0         	 33.4161   	 3.38785   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 145)                                                                                                         	 0.000571726	 100       	 0         	 0         	 20.2894   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 95)                                                                                                          	 0.000496625	 100       	 0         	 0         	 15.3033   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 95, n: 50, r2: 1)                                                                                                          	 0.000428525	 100       	 0         	 0         	 17.7353   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 145, m: 50, fromLeft: 1)                               	 0.000360303	 100       	 0         	 0         	 32.1951   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000359159	 100       	 0.696071  	 0         	 11.1371   	 0.0625    
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 33.5932   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 33.5931   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 20.5489   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 12.2154   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 12.2138   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 11.7397   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 11.4138   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 10.9827   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.784975  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.536404  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.470846  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.257392  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.124335  	 1100      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.013927  	 900       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.00618452	 100       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00418261	 4600      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00366905	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000973602	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000359159	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23114253252480 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23114037585920 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23113836259456 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23113634932992 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23113433606528 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23113232280064 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23113030953600 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23112829627136 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23112628300672 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23112426974208 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23112225647744 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23112024321280 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23111822994816 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23111621668352 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23111420341888 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23111219015424 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23111017688960 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23110816362496 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23110615036032 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23110413709568 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23110212383104 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23110011056640 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23109809730176 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23109608403712 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23109407077248 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23109205750784 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23109004424320 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23108803097856 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23108601771392 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23108400444928 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23108199118464 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23107997792000 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23107796461440 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23107595134976 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23107393808512 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23107192482048 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23106991155584 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23106789829120 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23106588502656 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23106387176192 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23106185849728 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23105984523264 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23105783196800 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23105581870336 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23105380543872 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23105179217408 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23104977890944 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23104776564480 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23104575238016 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23104373911552 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23104172585088 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23103971258624 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23103769932160 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23103568605696 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23103367279232 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23103165952768 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23102964626304 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23102763299840 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23102561973376 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23102360646912 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23102159320448 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23101957993984 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23101756667520 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23114147591936 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23114141001472 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_TENSORTRAIN_NORMALIZE_PLAIN_QB PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 7300, m: 146)                                                                              	 11.0537   	 600       	 67.7963   	 0         	 0.934951  	 72.5132   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 146, m: 7300)                                                                               	 10.9192   	 700       	 19.8181   	 0         	 1.10422   	 17.9476   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 146)                                                                              	 0.811114  	 100       	 53.0714   	 0         	 0.741165  	 71.6053   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 146, n: 50, r2new: 146)	 0.7133    	 700       	 167.864   	 0         	 13.1338   	 12.7811   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 146, m: 2500)                                                                               	 0.588326  	 100       	 17.7632   	 0         	 1.02183   	 17.3837   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 7300, r: 146, r2: 146, leftOrthog: 1)                      	 0.556789  	 600       	 335.366   	 0         	 27.9319   	 12.0066   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 7300, m: 50)                                                                               	 0.496097  	 100       	 29.4633   	 0         	 1.1813    	 24.9414   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 146, n: 50, r: 146, r2: 146)                          	 0.445675  	 700       	 488.808   	 0         	 27.0518   	 18.0693   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 146, r1_: 146, n: 50, r2: 146)                        	 0.205113  	 600       	 910.366   	 0         	 50.3819   	 18.0693   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 96, n: 50, r2: 96)                                                                                                         	 0.108521  	 800       	 0         	 0         	 54.3513   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 146)                                                                                	 0.0789377 	 100       	 3.91026   	 0         	 0.173808  	 22.4976   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 146, n: 50, r2new: 50) 	 0.0495243 	 100       	 118.285   	 0         	 15.4768   	 7.64273   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 146, r2: 146, leftOrthog: 1)                      	 0.0385204 	 100       	 276.685   	 0         	 23.6266   	 11.7107   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 146, r1_: 50, n: 50, r2: 146)                         	 0.0371812 	 100       	 286.65    	 0         	 30.9425   	 9.26396   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 146, n: 50, r: 146, r2: 50)                           	 0.0272312 	 100       	 391.389   	 0         	 42.2486   	 9.26396   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 7300, r: 50, r2: 50, leftOrthog: 1)                        	 0.0217723 	 100       	 167.644   	 0         	 40.4184   	 4.14773   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 146, m: 50)                                                                                 	 0.0217309 	 100       	 2.97579   	 0         	 0.631358  	 4.71331   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 146, m: 146, fromLeft: 1)                              	 0.0159233 	 800       	 0         	 0         	 17.1349   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 146, r1_: 146, n: 50, r2: 50)                         	 0.015241  	 100       	 699.296   	 0         	 39.4365   	 17.7322   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 146)  	 0.0034158 	 100       	 62.4041   	 0         	 8.41173   	 7.4187    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 146, r2: 146)                            	 0.00225727	 100       	 94.4325   	 0         	 12.729    	 7.4187    
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 146, n: 50, r2new: 1)  	 0.00213119	 100       	 0.685063  	 0         	 5.48125   	 0.124983  
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 146, leftOrthog: 1)                         	 0.00122967	 100       	 59.3657   	 0         	 17.5007   	 3.39219   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 146, n: 50, r: 2, r2: 1)                              	 0.0012219 	 100       	 2.38973   	 0         	 14.3397   	 0.166651  
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.00109395	 100       	 0.457061  	 0         	 1.82824   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 146)                            	 0.000948032	 100       	 0         	 0         	 12.3203   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000849602	 100       	 29.4255   	 0         	 7.06213   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 146)                                                                                                         	 0.00056163	 100       	 0         	 0         	 20.7966   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 96)                                                                                                          	 0.000482431	 100       	 0         	 0         	 15.9194   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 96, n: 50, r2: 1)                                                                                                          	 0.00042268	 100       	 0         	 0         	 18.1698   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000389225	 100       	 0.642302  	 0         	 10.2768   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 146, m: 50, fromLeft: 1)                               	 0.000345275	 100       	 0         	 0         	 33.8281   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 36.0322   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 36.0321   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 21.037    	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 14.197    	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 14.1953   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 13.5594   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 12.4399   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 11.5292   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.768371  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.618311  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.476385  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.258385  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.109987  	 1100      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0162686 	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00349052	 4600      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00290697	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.00109395	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000948032	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000389225	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22918226405248 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22918012594176 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22917811267712 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22917609941248 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22917408614784 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22917207288320 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22917005961856 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22916804635392 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22916603308928 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22916401982464 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22916200656000 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22915999329536 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22915798003072 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22915596676608 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22915395350144 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22915194023680 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22914992697216 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22914791370752 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22914590044288 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22914388717824 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22914187391360 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22913986064896 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22913784738432 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22913583411968 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22913382085504 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22913180759040 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22912979432576 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22912778106112 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22912576779648 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22912375453184 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22912174126720 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22911972800256 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22911771469696 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22911570143232 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22911368816768 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22911167490304 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22910966163840 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22910764837376 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22910563510912 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22910362184448 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22910160857984 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22909959531520 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22909758205056 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22909556878592 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22909355552128 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22909154225664 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22908952899200 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22908751572736 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22908550246272 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22908348919808 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22908147593344 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22907946266880 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22907744940416 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22907543613952 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22907342287488 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22907140961024 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22906939634560 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22906738308096 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22906536981632 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22906335655168 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22906134328704 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22905933002240 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22905731675776 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22918120744704 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22918114154240 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_TENSORTRAIN_NORMALIZE_PLAIN_QB PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 147, m: 7350)                                                                               	 11.3231   	 700       	 19.5066   	 0         	 1.07947   	 18.0706   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 7350, m: 147)                                                                              	 9.02219   	 600       	 84.7806   	 0         	 1.16122   	 73.0099   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 7350, r: 147, r2: 147, leftOrthog: 1)                      	 0.805239  	 600       	 236.689   	 0         	 19.5792   	 12.0888   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 147)                                                                              	 0.791471  	 100       	 55.1398   	 0         	 0.764911  	 72.0865   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 147, n: 50, r2new: 147)	 0.748748  	 700       	 163.665   	 0         	 12.6959   	 12.8911   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 147, m: 2500)                                                                               	 0.631283  	 100       	 16.7797   	 0         	 0.959007  	 17.4969   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 147, n: 50, r: 147, r2: 147)                          	 0.512877  	 700       	 433.547   	 0         	 23.8304   	 18.1931   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 7350, m: 50)                                                                               	 0.469248  	 100       	 31.3623   	 0         	 1.25742   	 24.9418   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 147, r1_: 147, n: 50, r2: 147)                        	 0.209003  	 600       	 911.906   	 0         	 50.1238   	 18.1931   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 97, n: 50, r2: 97)                                                                                                         	 0.126921  	 800       	 0         	 0         	 47.445    	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 147)                                                                                	 0.0882961 	 100       	 3.51846   	 0         	 0.156292  	 22.5121   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 147, n: 50, r2new: 50) 	 0.0522587 	 100       	 113.943   	 0         	 14.8538   	 7.67095   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 147, r1_: 50, n: 50, r2: 147)                         	 0.045831  	 100       	 235.747   	 0         	 25.4029   	 9.2803    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 147, n: 50, r: 147, r2: 50)                           	 0.0295073 	 100       	 366.163   	 0         	 39.456    	 9.2803    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 147, m: 50)                                                                                 	 0.0220474 	 100       	 2.95576   	 0         	 0.625925  	 4.72222   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 147, r2: 147, leftOrthog: 1)                      	 0.0179181 	 100       	 602.994   	 0         	 51.1536   	 11.7879   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 147, r1_: 147, n: 50, r2: 50)                         	 0.0156149 	 100       	 691.936   	 0         	 38.7635   	 17.8502   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 147, m: 147, fromLeft: 1)                              	 0.0143806 	 800       	 0         	 0         	 19.2339   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 7350, r: 50, r2: 50, leftOrthog: 1)                        	 0.0130561 	 100       	 281.478   	 0         	 67.8611   	 4.14786   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 147)  	 0.00365413	 100       	 59.1359   	 0         	 7.94915   	 7.43927   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 147, r2: 147)                            	 0.00251766	 100       	 85.8296   	 0         	 11.5374   	 7.43927   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 147, n: 50, r2new: 1)  	 0.0024901 	 100       	 0.590337  	 0         	 4.72333   	 0.124983  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 147, n: 50, r: 2, r2: 1)                              	 0.00152773	 100       	 1.92442   	 0         	 11.5476   	 0.166652  
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 147, leftOrthog: 1)                         	 0.00127025	 100       	 57.8625   	 0         	 17.036    	 3.39649   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.00110445	 100       	 0.452716  	 0         	 1.81086   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 147)                            	 0.000912234	 100       	 0         	 0         	 12.8914   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000903808	 100       	 27.6607   	 0         	 6.63858   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 147)                                                                                                         	 0.000549491	 100       	 0         	 0         	 21.4016   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 97)                                                                                                          	 0.000493929	 100       	 0         	 0         	 15.7108   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 97, n: 50, r2: 1)                                                                                                          	 0.000413423	 100       	 0         	 0         	 18.7701   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000351002	 100       	 0.712247  	 0         	 11.3959   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 147, m: 50, fromLeft: 1)                               	 0.000344689	 100       	 0         	 0         	 34.1177   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 33.6459   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 33.6457   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 20.9952   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 11.9764   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 11.8076   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 11.8059   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 11.2721   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 10.3712   	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.837483  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.807151  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.54643   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.271353  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.128378  	 1100      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0147253 	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00754302	 4600      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00520736	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.00110445	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000912234	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000351002	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22406321072000 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22406106179584 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22405904853120 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22405703526656 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22405502200192 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22405300873728 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22405099547264 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22404898220800 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22404696894336 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22404495567872 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22404294241408 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22404092914944 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22403891588480 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22403690262016 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22403488935552 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22403287609088 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22403086282624 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22402884956160 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22402683629696 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22402482303232 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22402280976768 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22402079650304 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22401878323840 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22401676997376 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22401475670912 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22401274344448 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22401073017984 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22400871691520 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22400670365056 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22400469038592 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22400267712128 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22400066385664 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22399865055104 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22399663728640 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22399462402176 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22399261075712 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22399059749248 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22398858422784 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22398657096320 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22398455769856 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22398254443392 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22398053116928 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22397851790464 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22397650464000 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22397449137536 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22397247811072 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22397046484608 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22396845158144 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22396643831680 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22396442505216 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22396241178752 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22396039852288 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22395838525824 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22395637199360 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22395435872896 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22395234546432 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22395033219968 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22394831893504 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22394630567040 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22394429240576 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22394227914112 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22394026587648 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22393825261184 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22406215411456 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22406208820992 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_TENSORTRAIN_NORMALIZE_PLAIN_QB PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 148, m: 7400)                                                                               	 11.3345   	 700       	 19.8874   	 0         	 1.0931    	 18.1935   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 7400, m: 148)                                                                              	 9.10274   	 600       	 85.757    	 0         	 1.16666   	 73.5066   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 7400, r: 148, r2: 148, leftOrthog: 1)                      	 0.901753  	 600       	 215.699   	 0         	 17.7223   	 12.1711   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 148)                                                                              	 0.791527  	 100       	 55.8922   	 0         	 0.770209  	 72.5676   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 148, n: 50, r2new: 148)	 0.711057  	 700       	 176.354   	 0         	 13.5642   	 13.0014   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 148, m: 2500)                                                                               	 0.597861  	 100       	 17.9571   	 0         	 1.0197    	 17.6102   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 7400, m: 50)                                                                               	 0.494871  	 100       	 29.9405   	 0         	 1.20039   	 24.9422   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 148, n: 50, r: 148, r2: 148)                          	 0.490896  	 700       	 462.268   	 0         	 25.2373   	 18.3168   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 148, r1_: 148, n: 50, r2: 148)                        	 0.220983  	 600       	 880.192   	 0         	 48.0537   	 18.3168   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 98, n: 50, r2: 98)                                                                                                         	 0.135993  	 800       	 0         	 0         	 45.1975   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 148)                                                                                	 0.0817135 	 100       	 3.82638   	 0         	 0.169862  	 22.5264   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 148, n: 50, r2new: 50) 	 0.0560566 	 100       	 107.962   	 0         	 14.023    	 7.69896   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 148, r1_: 50, n: 50, r2: 148)                         	 0.0461724 	 100       	 237.198   	 0         	 25.5148   	 9.29648   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 148, n: 50, r: 148, r2: 50)                           	 0.0300263 	 100       	 364.747   	 0         	 39.2349   	 9.29648   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 148, m: 50)                                                                                 	 0.0225118 	 100       	 2.91698   	 0         	 0.616565  	 4.73102   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 148, r2: 148, leftOrthog: 1)                      	 0.0169846 	 100       	 644.819   	 0         	 54.346    	 11.8651   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 148, r1_: 148, n: 50, r2: 50)                         	 0.0153576 	 100       	 713.131   	 0         	 39.6886   	 17.9681   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 148, m: 148, fromLeft: 1)                              	 0.014183  	 800       	 0         	 0         	 19.7681   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 7400, r: 50, r2: 50, leftOrthog: 1)                        	 0.0137213 	 100       	 269.654   	 0         	 65.0085   	 4.14798   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 148)  	 0.00367609	 100       	 59.585    	 0         	 7.98762   	 7.45968   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 148, r2: 148)                            	 0.00257072	 100       	 85.2056   	 0         	 11.4222   	 7.45968   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 148, n: 50, r2new: 1)  	 0.00234012	 100       	 0.632447  	 0         	 5.06026   	 0.124983  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 148, n: 50, r: 2, r2: 1)                              	 0.00140457	 100       	 2.10741   	 0         	 12.6456   	 0.166652  
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.00098403	 100       	 0.508115  	 0         	 2.03246   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 148)                            	 0.000909142	 100       	 0         	 0         	 13.0233   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 148, leftOrthog: 1)                         	 0.000839094	 100       	 88.1904   	 0         	 25.9327   	 3.40074   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000823786	 100       	 30.3477   	 0         	 7.28344   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 148)                                                                                                         	 0.000555048	 100       	 0         	 0         	 21.3315   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 98)                                                                                                          	 0.000475122	 100       	 0         	 0         	 16.501    	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 98, n: 50, r2: 1)                                                                                                          	 0.000429146	 100       	 0         	 0         	 18.2688   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.00035548	 100       	 0.703274  	 0         	 11.2524   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 148, m: 50, fromLeft: 1)                               	 0.000310709	 100       	 0         	 0         	 38.1064   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 33.5559   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 33.5557   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 20.7282   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 12.0259   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 12.0242   	 100       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 11.9548   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 11.4259   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 10.4709   	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.933298  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.77313   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.524897  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.283337  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.137453  	 1100      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0144937 	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00619917	 4600      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00533607	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.00098403	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000909142	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.00035548	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22371810858880 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22371612223488 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22371410897024 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22371209570560 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22371008244096 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22370806917632 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22370605591168 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22370404264704 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22370202938240 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22370001611776 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22369800285312 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22369598958848 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22369397632384 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22369196305920 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22368994979456 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22368793652992 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22368592326528 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22368391000064 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22368189673600 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22367988347136 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22367787020672 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22367585694208 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22367384367744 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22367183041280 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22366981714816 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22366780388352 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22366579061888 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22366377735424 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22366176408960 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22365975082496 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22365773756032 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22365572429568 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22365371099008 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22365169772544 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22364968446080 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22364767119616 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22364565793152 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22364364466688 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22364163140224 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22363961813760 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22363760487296 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22363559160832 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22363357834368 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22363156507904 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22362955181440 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22362753854976 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22362552528512 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22362351202048 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22362149875584 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22361948549120 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22361747222656 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22361545896192 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22361344569728 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22361143243264 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22360941916800 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22360740590336 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22360539263872 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22360337937408 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22360136610944 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22359935284480 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22359733958016 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22359532631552 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22359331305088 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22371705198336 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22371698607872 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_TENSORTRAIN_NORMALIZE_PLAIN_QB PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 7450, m: 149)                                                                              	 11.2919   	 600       	 70.5418   	 0         	 0.953225  	 74.0033   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 149, m: 7450)                                                                               	 11.1834   	 700       	 20.5673   	 0         	 1.12289   	 18.3164   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 149)                                                                              	 0.819092  	 100       	 54.7473   	 0         	 0.749464  	 73.0486   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 149, n: 50, r2new: 149)	 0.709756  	 700       	 180.766   	 0         	 13.7863   	 13.112    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 7450, r: 149, r2: 149, leftOrthog: 1)                      	 0.698286  	 600       	 284.235   	 0         	 23.1966   	 12.2533   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 149, m: 2500)                                                                               	 0.634128  	 100       	 17.1574   	 0         	 0.968069  	 17.7233   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 7450, m: 50)                                                                               	 0.499448  	 100       	 29.8663   	 0         	 1.1974    	 24.9426   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 149, n: 50, r: 149, r2: 149)                          	 0.459731  	 700       	 503.678   	 0         	 27.3135   	 18.4406   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 149, r1_: 149, n: 50, r2: 149)                        	 0.220217  	 600       	 901.279   	 0         	 48.8747   	 18.4406   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 99, n: 50, r2: 99)                                                                                                         	 0.132324  	 800       	 0         	 0         	 47.4036   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 149)                                                                                	 0.081772  	 100       	 3.8481    	 0         	 0.170719  	 22.5406   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 149, n: 50, r2new: 50) 	 0.0666486 	 100       	 92.2825   	 0         	 11.9432   	 7.72676   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 149, r1_: 50, n: 50, r2: 149)                         	 0.0437449 	 100       	 253.755   	 0         	 27.2489   	 9.3125    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 149, n: 50, r: 149, r2: 50)                           	 0.0280659 	 100       	 395.515   	 0         	 42.4715   	 9.3125    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 149, r2: 149, leftOrthog: 1)                      	 0.0260826 	 100       	 425.59    	 0         	 35.6376   	 11.9422   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 149, m: 50)                                                                                 	 0.0230245 	 100       	 2.87374   	 0         	 0.60631   	 4.73973   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 7450, r: 50, r2: 50, leftOrthog: 1)                        	 0.0207186 	 100       	 179.79    	 0         	 43.3427   	 4.14811   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 149, r1_: 149, n: 50, r2: 50)                         	 0.0154525 	 100       	 718.364   	 0         	 39.7193   	 18.086    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 149, m: 149, fromLeft: 1)                              	 0.0142686 	 800       	 0         	 0         	 19.916    	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 149)  	 0.00326458	 100       	 68.0056   	 0         	 9.09176   	 7.47992   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 149, n: 50, r2new: 1)  	 0.00297597	 100       	 0.500677  	 0         	 4.00596   	 0.124983  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 149, r2: 149)                            	 0.00212301	 100       	 104.573   	 0         	 13.9806   	 7.47992   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 149, n: 50, r: 2, r2: 1)                              	 0.00199381	 100       	 1.49463   	 0         	 8.96856   	 0.166652  
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 149, leftOrthog: 1)                         	 0.00119183	 100       	 62.5088   	 0         	 18.3583   	 3.40494   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.00104077	 100       	 0.480415  	 0         	 1.92166   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 149)                            	 0.000910792	 100       	 0         	 0         	 13.0875   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000859142	 100       	 29.0988   	 0         	 6.98371   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 149)                                                                                                         	 0.000565947	 100       	 0         	 0         	 21.062    	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 99)                                                                                                          	 0.0005497 	 100       	 0         	 0         	 14.4079   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 99, n: 50, r2: 1)                                                                                                          	 0.000435585	 100       	 0         	 0         	 18.1824   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000376593	 100       	 0.663847  	 0         	 10.6215   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 149, m: 50, fromLeft: 1)                               	 0.000309492	 100       	 0         	 0         	 38.5147   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 37.1574   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 37.1573   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 21.8855   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 14.4321   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 14.4304   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 13.8418   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 12.6923   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 11.8406   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.782645  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.746279  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.491914  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.280273  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.133875  	 1100      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0145781 	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00564885	 4600      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00385935	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.00104077	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000910792	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000376593	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22593816598400 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22593608345600 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22593407019136 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22593205692672 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22593004366208 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22592803039744 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22592601713280 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22592400386816 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22592199060352 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22591997733888 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22591796407424 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22591595080960 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22591393754496 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22591192428032 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22590991101568 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22590789775104 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22590588448640 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22590387122176 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22590185795712 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22589984469248 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22589783142784 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22589581816320 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22589380489856 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22589179163392 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22588977836928 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22588776510464 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22588575184000 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22588373857536 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22588172531072 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22587971204608 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22587769878144 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22587568551680 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22587367221120 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22587165894656 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22586964568192 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22586763241728 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22586561915264 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22586360588800 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22586159262336 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22585957935872 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22585756609408 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22585555282944 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22585353956480 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22585152630016 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22584951303552 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22584749977088 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22584548650624 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22584347324160 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22584145997696 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22583944671232 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22583743344768 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22583542018304 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22583340691840 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22583139365376 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22582938038912 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22582736712448 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22582535385984 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22582334059520 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22582132733056 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22581931406592 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22581730080128 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22581528753664 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22581327427200 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22593710937856 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22593704347392 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_TENSORTRAIN_NORMALIZE_PLAIN_QB PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 150, m: 7500)                                                                               	 11.5061   	 700       	 20.3958   	 0         	 1.1061    	 18.4394   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 7500, m: 150)                                                                              	 10.0807   	 600       	 80.6194   	 0         	 1.08214   	 74.5      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 2500, m: 150)                                                                              	 0.81537   	 100       	 55.7416   	 0         	 0.758086  	 73.5294   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 150, n: 50, r2new: 150)	 0.740004  	 700       	 177.364   	 0         	 13.4134   	 13.2228   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 7500, r: 150, r2: 150, leftOrthog: 1)                      	 0.732248  	 600       	 276.546   	 0         	 22.4186   	 12.3355   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 150, m: 2500)                                                                               	 0.626184  	 100       	 17.6066   	 0         	 0.987121  	 17.8363   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 150, n: 50, r: 150, r2: 150)                          	 0.51438   	 700       	 459.291   	 0         	 24.7405   	 18.5644   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 7500, m: 50)                                                                               	 0.488847  	 100       	 30.7185   	 0         	 1.23155   	 24.943    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 150, r1_: 150, n: 50, r2: 150)                        	 0.217807  	 600       	 929.72    	 0         	 50.0809   	 18.5644   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 100, n: 50, r2: 100)                                                                                                       	 0.134116  	 800       	 0         	 0         	 47.7198   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 150)                                                                                	 0.0819144 	 100       	 3.86582   	 0         	 0.171398  	 22.5546   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 150, n: 50, r2new: 50) 	 0.053637  	 100       	 116.524   	 0         	 15.0269   	 7.75434   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 150, r1_: 50, n: 50, r2: 150)                         	 0.0443845 	 100       	 253.467   	 0         	 27.1717   	 9.32836   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 150, n: 50, r: 150, r2: 50)                           	 0.0303993 	 100       	 370.075   	 0         	 39.672    	 9.32836   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 7500, r: 50, r2: 50, leftOrthog: 1)                        	 0.0297042 	 100       	 126.245   	 0         	 30.4334   	 4.14823   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 150, r2: 150, leftOrthog: 1)                      	 0.0236044 	 100       	 476.607   	 0         	 39.6537   	 12.0192   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 150, m: 50)                                                                                 	 0.0227451 	 100       	 2.93103   	 0         	 0.617275  	 4.74833   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 150, r1_: 150, n: 50, r2: 50)                         	 0.0154248 	 100       	 729.343   	 0         	 40.0652   	 18.2039   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 150, m: 150, fromLeft: 1)                              	 0.0145044 	 800       	 0         	 0         	 19.856    	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 150)  	 0.0035941 	 100       	 62.6027   	 0         	 8.34702   	 7.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 150, r2: 150)                            	 0.00251397	 100       	 89.4998   	 0         	 11.9333   	 7.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 150, n: 50, r2new: 1)  	 0.00241652	 100       	 0.620728  	 0         	 4.96648   	 0.124983  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 150, n: 50, r: 2, r2: 1)                              	 0.00152126	 100       	 1.97205   	 0         	 11.8333   	 0.166652  
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 150, leftOrthog: 1)                         	 0.00116739	 100       	 64.2459   	 0         	 18.8455   	 3.40909   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.00112727	 100       	 0.443549  	 0         	 1.7742    	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 150)                            	 0.00090257	 100       	 0         	 0         	 13.2954   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000793692	 100       	 31.4984   	 0         	 7.55961   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 150)                                                                                                         	 0.000544079	 100       	 0         	 0         	 22.0556   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 100)                                                                                                         	 0.00047444	 100       	 0         	 0         	 16.862    	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 100, n: 50, r2: 1)                                                                                                         	 0.000406875	 100       	 0         	 0         	 19.6621   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000336572	 100       	 0.742783  	 0         	 11.8845   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 150, m: 50, fromLeft: 1)                               	 0.00032201	 100       	 0         	 0         	 37.2659   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 35.1747   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 35.1746   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 21.3916   	 900       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 12.9359   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 12.9341   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 12.3843   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 12.155    	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 11.4668   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.799652  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.786724  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.548814  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.27841   	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.135542  	 1100      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0148264 	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00549954	 4600      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00463274	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.00112727	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.00090257	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000336572	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
