[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23349952317312 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23349723916288 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23349522589824 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23349321263360 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23349119936896 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23348918610432 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23348717283968 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23348515957504 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23348314631040 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23348113304576 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23347911978112 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23347710651648 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23347509325184 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23347307998720 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23347106672256 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23346905345792 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23346704019328 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23346502692864 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23346301366400 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23346100039936 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23345898713472 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23345697387008 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23345496060544 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23345294734080 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23345093407616 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23344892081152 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23344690754688 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23344489428224 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23344288101760 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23344086775296 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23343885448832 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23343684122368 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23343482791808 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23343281465344 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23343080138880 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23342878812416 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23342677485952 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23342476159488 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23342274833024 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23342073506560 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23341872180096 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23341670853632 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23341469527168 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23341268200704 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23341066874240 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23340865547776 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23340664221312 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23340462894848 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23340261568384 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23340060241920 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23339858915456 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23339657588992 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23339456262528 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23339254936064 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23339053609600 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23338852283136 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23338650956672 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23338449630208 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23338248303744 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23338046977280 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23337845650816 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23337644324352 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23337442997888 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23349846656768 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23349840066304 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2550, cols: 51, reductionFactor: 37, colBlockingSize: 12)                                	 0.31202   	 1300      	 56.7614   	 0         	 4.42142   	 12.8378   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 51, m: 51)                                                                               	 0.28787   	 700       	 3.01057   	 0         	 0.152786  	 19.7045   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2550, m: 51)                                                                       	 0.0832331 	 700       	 0         	 0         	 17.4998   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 51, n: 50, r2new: 51)	 0.0817915 	 700       	 109.163   	 0         	 17.6439   	 6.18697   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 51, m: 2550)                                                                                	 0.0641022 	 700       	 0         	 0         	 22.7225   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2550, r: 51, r2: 51, leftOrthog: 1)                      	 0.0579239 	 600       	 137.405   	 0         	 32.7618   	 4.19408   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2550, Xcols: 51, r: 51, streamingCols: 0)                                 	 0.0544325 	 700       	 85.2944   	 0         	 26.8928   	 3.17164   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 51, n: 50, r: 51, r2: 51)                           	 0.0541677 	 700       	 171.423   	 0         	 27.1587   	 6.31188   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 51, reductionFactor: 37, colBlockingSize: 12)                                	 0.0497909 	 200       	 53.6503   	 0         	 4.18072   	 12.8328   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 51)                                                                               	 0.0396439 	 100       	 2.99331   	 0         	 0.154374  	 19.39     
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 51, m: 51)                                                                                	 0.0379324 	 900       	 4.19644   	 0         	 1.49078   	 2.81494   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                               	 0.0368236 	 100       	 3.16826   	 0         	 0.164025  	 19.3157   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2550, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                	 0.0278745 	 100       	 46.9769   	 0         	 3.731     	 12.591    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 51, r1_: 51, n: 50, r2: 51)                         	 0.0131762 	 600       	 604.046   	 0         	 95.6999   	 6.31188   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 51, n: 50, r2new: 50)	 0.00787709	 100       	 158.751   	 0         	 25.908    	 6.1275    
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 51, r: 51, streamingCols: 0)                                 	 0.00773868	 100       	 84.026    	 0         	 26.4955   	 3.17133   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 51, reductionFactor: 37, colBlockingSize: 12)                                  	 0.00737912	 200       	 7.24015   	 0         	 1.11688   	 6.48247   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 51, r2: 51, leftOrthog: 1)                      	 0.00732303	 100       	 177.591   	 0         	 42.3543   	 4.19298   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2550, r: 50, r2: 50, leftOrthog: 1)                      	 0.00706136	 100       	 180.56    	 0         	 43.9009   	 4.1129    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 51, n: 50, r: 51, r2: 50)                           	 0.00456247	 100       	 285.043   	 0         	 45.6069   	 6.25      
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 51)                                                                       	 0.00352802	 100       	 0         	 0         	 57.8229   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 1)                                                                                                         	 0.00328488	 1000      	 0         	 0         	 0.24354   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 51, m: 2500)                                                                                	 0.00289375	 100       	 0         	 0         	 70.4968   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 51, r1_: 50, n: 50, r2: 51)                         	 0.0024976 	 100       	 520.699   	 0         	 83.3118   	 6.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 51, r1_: 51, n: 50, r2: 50)                         	 0.00229869	 100       	 565.757   	 0         	 89.6514   	 6.31063   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 51, r: 50, streamingCols: 0)                                   	 0.00167443	 100       	 7.46524   	 0         	 2.9861    	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 51) 	 0.0014692 	 100       	 17.7035   	 0         	 4.19331   	 4.22185   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 51, m: 51, fromLeft: 1)                              	 0.00145951	 800       	 0         	 0         	 22.8109   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 51, leftOrthog: 1)                        	 0.00133357	 100       	 19.1216   	 0         	 7.58865   	 2.51976   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 51, n: 50, r2new: 1) 	 0.000895806	 100       	 0.56932   	 0         	 4.55634   	 0.124951  
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000811978	 100       	 0.61578   	 0         	 2.46312   	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 51, r2: 51)                            	 0.000720451	 100       	 36.1024   	 0         	 8.55131   	 4.22185   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000710102	 100       	 35.2062   	 0         	 8.44949   	 4.16667   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 51)                           	 0.000581431	 100       	 0         	 0         	 7.01717   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                  	 0.000501923	 100       	 0         	 0         	 7.96935   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 51)                                                                                                        	 0.000454732	 100       	 0         	 0         	 8.97232   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 51, n: 50, r: 2, r2: 1)                             	 0.000394361	 100       	 2.58646   	 0         	 15.5228   	 0.166623  
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000344379	 100       	 0.725944  	 0         	 11.6151   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 51)                                                                         	 0.000321777	 100       	 0         	 0         	 12.6796   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 51, m: 50, fromLeft: 1)                              	 0.000182265	 100       	 0         	 0         	 22.385    	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 1.39353   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 1.3935    	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 0.813421  	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 0.812184  	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 0.753345  	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 0.475754  	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 0.397065  	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.364338  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.199437  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.198628  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.0920336 	 1000      
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.0870829 	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.0736419 	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.0674979 	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.0638456 	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.0598449 	 1000      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.0379324 	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.0186826 	 900       
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.0108756 	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00491151	 6400      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.00373962	 1100      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00164177	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00124098	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000811978	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000581431	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000344379	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22532135389056 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22531935299584 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22531733973120 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22531532646656 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22531331320192 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22531129993728 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22530928667264 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22530727340800 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22530526014336 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22530324687872 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22530123361408 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22529922034944 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22529720708480 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22529519382016 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22529318055552 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22529116729088 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22528915402624 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22528714076160 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22528512749696 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22528311423232 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22528110096768 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22527908770304 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22527707443840 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22527506117376 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22527304790912 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22527103464448 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22526902137984 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22526700811520 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22526499485056 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22526298158592 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22526096832128 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22525895505664 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22525694175104 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22525492848640 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22525291522176 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22525090195712 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22524888869248 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22524687542784 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22524486216320 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22524284889856 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22524083563392 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22523882236928 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22523680910464 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22523479584000 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22523278257536 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22523076931072 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22522875604608 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22522674278144 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22522472951680 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22522271625216 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22522070298752 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22521868972288 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22521667645824 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22521466319360 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22521264992896 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22521063666432 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22520862339968 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22520661013504 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22520459687040 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22520258360576 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22520057034112 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22519855707648 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22519654381184 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22532029728512 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22532023138048 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2600, cols: 52, reductionFactor: 37, colBlockingSize: 12)                                	 0.323363  	 1300      	 58.0557   	 0         	 4.43527   	 13.0896   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 52, m: 52)                                                                               	 0.268794  	 700       	 3.41763   	 0         	 0.170087  	 20.0934   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2600, m: 52)                                                                       	 0.0779546 	 700       	 0         	 0         	 19.4246   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 52, m: 2600)                                                                                	 0.0697685 	 700       	 0         	 0         	 21.7038   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2600, r: 52, r2: 52, leftOrthog: 1)                      	 0.0615777 	 600       	 137.005   	 0         	 32.0382   	 4.27632   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2600, Xcols: 52, r: 52, streamingCols: 0)                                 	 0.0571107 	 700       	 86.1709   	 0         	 26.6467   	 3.23383   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 52, n: 50, r2new: 52)	 0.0547571 	 700       	 166.454   	 0         	 26.9076   	 6.18615   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 52, reductionFactor: 37, colBlockingSize: 12)                                	 0.0505875 	 200       	 54.8965   	 0         	 4.19721   	 13.0793   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 52)                                                                               	 0.039637  	 100       	 3.04429   	 0         	 0.15642   	 19.4624   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                               	 0.0376228 	 100       	 3.10096   	 0         	 0.160541  	 19.3157   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 52, m: 52)                                                                                	 0.0368435 	 900       	 4.5796    	 0         	 1.59542   	 2.87047   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 52, n: 50, r: 52, r2: 52)                           	 0.0347041 	 700       	 283.614   	 0         	 44.0693   	 6.43564   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2600, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                	 0.0231051 	 100       	 57.7852   	 0         	 4.58772   	 12.5956   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 52, r1_: 52, n: 50, r2: 52)                         	 0.0136449 	 600       	 618.287   	 0         	 96.0723   	 6.43564   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2600, r: 50, r2: 50, leftOrthog: 1)                      	 0.00817016	 100       	 159.116   	 0         	 38.6773   	 4.11392   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 52, r2: 52, leftOrthog: 1)                      	 0.00809857	 100       	 166.943   	 0         	 39.0595   	 4.27407   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 52, r: 52, streamingCols: 0)                                 	 0.00802287	 100       	 84.2591   	 0         	 26.0607   	 3.23319   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 52, n: 50, r2new: 50)	 0.00781456	 100       	 160.214   	 0         	 26.3918   	 6.0706    
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 52, reductionFactor: 37, colBlockingSize: 12)                                  	 0.00702577	 200       	 7.90541   	 0         	 1.2079    	 6.54478   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 52, n: 50, r: 52, r2: 50)                           	 0.00486758	 100       	 277.756   	 0         	 44.0136   	 6.31068   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 52)                                                                       	 0.00431605	 100       	 0         	 0         	 48.1922   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 52, m: 2500)                                                                                	 0.00409408	 100       	 0         	 0         	 50.8051   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 52, r1_: 50, n: 50, r2: 52)                         	 0.0027914 	 100       	 484.345   	 0         	 76.7501   	 6.31068   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 2, n: 50, r2: 2)                                                                                                         	 0.00270401	 800       	 0         	 0         	 0.946742  	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 52, r1_: 52, n: 50, r2: 50)                         	 0.00230687	 100       	 586.074   	 0         	 91.103    	 6.4331    
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 52, r: 50, streamingCols: 0)                                   	 0.00166653	 100       	 7.50062   	 0         	 3.00025   	 2.5       
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 52, m: 52, fromLeft: 1)                              	 0.00153042	 800       	 0         	 0         	 22.6154   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 52) 	 0.00145748	 100       	 18.5526   	 0         	 4.33844   	 4.27632   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 52, leftOrthog: 1)                        	 0.0013856 	 100       	 18.7644   	 0         	 7.3903    	 2.53906   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 52, n: 50, r2new: 1) 	 0.000937208	 100       	 0.554839  	 0         	 4.44042   	 0.124952  
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000802823	 100       	 0.622802  	 0         	 2.49121   	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 52, r2: 52)                            	 0.000719  	 100       	 37.6078   	 0         	 8.79444   	 4.27632   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000689952	 100       	 36.2344   	 0         	 8.69626   	 4.16667   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 52)                           	 0.000582385	 100       	 0         	 0         	 7.14304   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                  	 0.000491664	 100       	 0         	 0         	 8.13564   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 52)                                                                                                        	 0.000454974	 100       	 0         	 0         	 9.14338   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 52, n: 50, r: 2, r2: 1)                             	 0.000407237	 100       	 2.5538    	 0         	 15.3267   	 0.166624  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 2)                                                                                                         	 0.000373293	 100       	 0         	 0         	 0.428618  	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 52)                                                                         	 0.000332546	 100       	 0         	 0         	 12.5095   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.00032985	 100       	 0.75792   	 0         	 12.1267   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 2, n: 50, r2: 1)                                                                                                         	 0.000319155	 100       	 0         	 0         	 0.501324  	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 52, m: 50, fromLeft: 1)                              	 0.000185874	 100       	 0         	 0         	 22.3808   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 1.3674    	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 1.36737   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 0.804709  	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 0.803495  	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 0.744329  	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 0.487391  	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 0.404081  	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.346054  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.205679  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.199454  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.0826032 	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.079232  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.0743543 	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.0668001 	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.0649663 	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.0406979 	 1000      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.0368435 	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.0194331 	 900       
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.00798413	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00500493	 6400      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.00385143	 1100      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0017163 	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00095145	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000802823	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000582385	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.00032985	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23157777643392 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23157591238656 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23157389912192 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23157188585728 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23156987259264 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23156785932800 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23156584606336 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23156383279872 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23156181953408 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23155980626944 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23155779300480 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23155577974016 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23155376647552 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23155175321088 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23154973994624 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23154772668160 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23154571341696 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23154370015232 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23154168688768 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23153967362304 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23153766035840 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23153564709376 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23153363382912 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23153162056448 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23152960729984 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23152759403520 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23152558077056 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23152356750592 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23152155424128 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23151954097664 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23151752771200 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23151551444736 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23151350114176 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23151148787712 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23150947461248 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23150746134784 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23150544808320 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23150343481856 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23150142155392 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23149940828928 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23149739502464 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23149538176000 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23149336849536 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23149135523072 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23148934196608 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23148732870144 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23148531543680 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23148330217216 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23148128890752 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23147927564288 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23147726237824 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23147524911360 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23147323584896 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23147122258432 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23146920931968 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23146719605504 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23146518279040 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23146316952576 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23146115626112 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23145914299648 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23145712973184 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23145511646720 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23145310320256 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23157671982848 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23157665392384 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2650, cols: 53, reductionFactor: 37, colBlockingSize: 12)                                	 0.347995  	 1300      	 57.1189   	 0         	 4.28136   	 13.3413   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 53, m: 53)                                                                               	 0.280395  	 700       	 3.4689    	 0         	 0.169361  	 20.4823   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2650, r: 53, r2: 53, leftOrthog: 1)                      	 0.0840453 	 600       	 106.283   	 0         	 24.385    	 4.35855   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2650, m: 53)                                                                       	 0.0793952 	 700       	 0         	 0         	 19.8128   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 53, m: 2650)                                                                                	 0.068059  	 700       	 0         	 0         	 23.1129   	 0         
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2650, Xcols: 53, r: 53, streamingCols: 0)                                 	 0.0602029 	 700       	 86.5523   	 0         	 26.2596   	 3.29602   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 53, n: 50, r2new: 53)	 0.0525026 	 700       	 177.294   	 0         	 28.6609   	 6.18592   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 53, reductionFactor: 37, colBlockingSize: 12)                                	 0.0515398 	 200       	 55.9746   	 0         	 4.20053   	 13.3256   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 53)                                                                               	 0.0415854 	 100       	 2.94976   	 0         	 0.151015  	 19.5329   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 53, m: 53)                                                                                	 0.041196  	 900       	 4.33663   	 0         	 1.48209   	 2.92603   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                               	 0.0376096 	 100       	 3.10204   	 0         	 0.160597  	 19.3157   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 53, n: 50, r: 53, r2: 53)                           	 0.031942  	 700       	 326.26    	 0         	 49.7392   	 6.55941   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2650, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                	 0.0237443 	 100       	 57.3111   	 0         	 4.54847   	 12.6001   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 53, r1_: 53, n: 50, r2: 53)                         	 0.0138101 	 600       	 646.82    	 0         	 98.6095   	 6.55941   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2650, r: 50, r2: 50, leftOrthog: 1)                      	 0.0109199 	 100       	 121.338   	 0         	 29.4874   	 4.11491   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 53, r: 53, streamingCols: 0)                                 	 0.00825473	 100       	 85.0724   	 0         	 25.8184   	 3.29504   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 53, n: 50, r2new: 50)	 0.00798257	 100       	 157.155   	 0         	 26.1169   	 6.01736   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 53, r2: 53, leftOrthog: 1)                      	 0.0076421 	 100       	 183.784   	 0         	 42.1997   	 4.35511   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 53, reductionFactor: 37, colBlockingSize: 12)                                  	 0.00673228	 200       	 8.57041   	 0         	 1.29739   	 6.60588   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 53, n: 50, r: 53, r2: 50)                           	 0.00470054	 100       	 298.795   	 0         	 46.9052   	 6.37019   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 53, m: 2500)                                                                                	 0.00409018	 100       	 0         	 0         	 51.8314   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 53)                                                                       	 0.00323264	 100       	 0         	 0         	 65.5811   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 53, r1_: 50, n: 50, r2: 53)                         	 0.00291057	 100       	 482.552   	 0         	 75.7515   	 6.37019   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 3, n: 50, r2: 3)                                                                                                         	 0.00270456	 800       	 0         	 0         	 2.12974   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 53, r1_: 53, n: 50, r2: 50)                         	 0.00257542	 100       	 545.348   	 0         	 83.1893   	 6.55551   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 53) 	 0.00164845	 100       	 17.0403   	 0         	 3.93534   	 4.33007   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 53, r: 50, streamingCols: 0)                                   	 0.00164472	 100       	 7.60008   	 0         	 3.04003   	 2.5       
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 53, m: 53, fromLeft: 1)                              	 0.0015747 	 800       	 0         	 0         	 22.833    	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 53, leftOrthog: 1)                        	 0.00148109	 100       	 17.8922   	 0         	 6.99484   	 2.55792   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 53, n: 50, r2new: 1) 	 0.00106322	 100       	 0.498487  	 0         	 3.9894    	 0.124953  
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000782418	 100       	 0.639045  	 0         	 2.55618   	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 53, r2: 53)                            	 0.000761585	 100       	 36.8836   	 0         	 8.51802   	 4.33007   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 53)                           	 0.00074259	 100       	 0         	 0         	 5.70975   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000738483	 100       	 33.8532   	 0         	 8.12476   	 4.16667   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 53, n: 50, r: 2, r2: 1)                             	 0.000542285	 100       	 1.95469   	 0         	 11.7311   	 0.166625  
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                  	 0.000500493	 100       	 0         	 0         	 7.99212   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 53)                                                                                                        	 0.000450431	 100       	 0         	 0         	 9.41321   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 3)                                                                                                         	 0.000378717	 100       	 0         	 0         	 0.633719  	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 53)                                                                         	 0.000369052	 100       	 0         	 0         	 11.4889   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000330488	 100       	 0.756457  	 0         	 12.1033   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 3, n: 50, r2: 1)                                                                                                         	 0.000320984	 100       	 0         	 0         	 0.747701  	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 53, m: 50, fromLeft: 1)                              	 0.000188637	 100       	 0         	 0         	 22.477    	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 1.44728   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 1.44725   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 0.871866  	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 0.870669  	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 0.806983  	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 0.504653  	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 0.430012  	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.35959   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.216064  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.214968  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.104088  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.0829969 	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.0726497 	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.0701023 	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.0631969 	 1000      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.041196  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.0379464 	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.0200345 	 900       
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.00955451	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00552338	 6400      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.00385469	 1100      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00176334	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.000916251	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000782418	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.00074259	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000330488	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22611786426240 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22611593521152 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22611392194688 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22611190868224 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22610989541760 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22610788215296 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22610586888832 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22610385562368 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22610184235904 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22609982909440 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22609781582976 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22609580256512 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22609378930048 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22609177603584 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22608976277120 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22608774950656 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22608573624192 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22608372297728 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22608170971264 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22607969644800 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22607768318336 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22607566991872 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22607365665408 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22607164338944 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22606963012480 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22606761686016 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22606560359552 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22606359033088 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22606157706624 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22605956380160 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22605755053696 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22605553727232 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22605352396672 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22605151070208 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22604949743744 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22604748417280 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22604547090816 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22604345764352 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22604144437888 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22603943111424 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22603741784960 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22603540458496 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22603339132032 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22603137805568 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22602936479104 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22602735152640 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22602533826176 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22602332499712 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22602131173248 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22601929846784 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22601728520320 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22601527193856 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22601325867392 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22601124540928 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22600923214464 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22600721888000 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22600520561536 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22600319235072 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22600117908608 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22599916582144 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22599715255680 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22599513929216 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22599312602752 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22611680765696 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22611674175232 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2700, cols: 54, reductionFactor: 37, colBlockingSize: 12)                                	 0.34347   	 1300      	 61.2094   	 0         	 4.50301   	 13.593    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 54, m: 54)                                                                               	 0.282456  	 700       	 3.64221   	 0         	 0.174509  	 20.8712   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2700, m: 54)                                                                       	 0.0815691 	 700       	 0         	 0         	 20.0193   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 54, m: 2700)                                                                                	 0.0698528 	 700       	 0         	 0         	 23.3772   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 54, n: 50, r2new: 54)	 0.0607242 	 700       	 156.618   	 0         	 25.3159   	 6.18652   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2700, r: 54, r2: 54, leftOrthog: 1)                      	 0.0604828 	 600       	 156.207   	 0         	 35.1755   	 4.44079   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2700, Xcols: 54, r: 54, streamingCols: 0)                                 	 0.0601423 	 700       	 91.6366   	 0         	 27.2873   	 3.35821   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 54, reductionFactor: 37, colBlockingSize: 12)                                	 0.0527474 	 200       	 56.7765   	 0         	 4.18344   	 13.5717   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 54)                                                                               	 0.0413858 	 100       	 3.01231   	 0         	 0.153676  	 19.6017   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 54, m: 54)                                                                                	 0.0398286 	 900       	 4.74425   	 0         	 1.59118   	 2.9816    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 54, n: 50, r: 54, r2: 54)                           	 0.0398149 	 700       	 276.843   	 0         	 41.4239   	 6.68317   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                               	 0.0390549 	 100       	 2.98725   	 0         	 0.154654  	 19.3157   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2700, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                	 0.0234079 	 100       	 59.2316   	 0         	 4.69927   	 12.6044   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 54, r1_: 54, n: 50, r2: 54)                         	 0.0138761 	 600       	 680.87    	 0         	 101.878   	 6.68317   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2700, r: 50, r2: 50, leftOrthog: 1)                      	 0.00941705	 100       	 143.357   	 0         	 34.8304   	 4.11585   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 54, r: 54, streamingCols: 0)                                 	 0.00825547	 100       	 88.3051   	 0         	 26.3058   	 3.35687   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 54, n: 50, r2new: 50)	 0.00798234	 100       	 157.598   	 0         	 26.4083   	 5.96774   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 54, r2: 54, leftOrthog: 1)                      	 0.0079342 	 100       	 183.761   	 0         	 41.4239   	 4.43612   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 54, reductionFactor: 37, colBlockingSize: 12)                                  	 0.00770204	 200       	 7.77667   	 0         	 1.16665   	 6.6658    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 54, n: 50, r: 54, r2: 50)                           	 0.00498385	 100       	 292.545   	 0         	 45.507    	 6.42857   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 54, m: 2500)                                                                                	 0.00378973	 100       	 0         	 0         	 56.9961   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 54)                                                                       	 0.00317236	 100       	 0         	 0         	 68.0881   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 54, r1_: 50, n: 50, r2: 54)                         	 0.00287255	 100       	 507.563   	 0         	 78.9543   	 6.42857   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 4, n: 50, r2: 4)                                                                                                         	 0.00265983	 800       	 0         	 0         	 3.84987   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 54, r1_: 54, n: 50, r2: 50)                         	 0.00243814	 100       	 597.997   	 0         	 89.549    	 6.67788   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 54) 	 0.00165225	 100       	 17.6487   	 0         	 4.02651   	 4.38312   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 54, m: 54, fromLeft: 1)                              	 0.00158755	 800       	 0         	 0         	 23.5109   	 0         
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 54, r: 50, streamingCols: 0)                                   	 0.00155136	 100       	 8.05743   	 0         	 3.22297   	 2.5       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 54, leftOrthog: 1)                        	 0.00140654	 100       	 19.1961   	 0         	 7.45093   	 2.57634   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 54, n: 50, r2new: 1) 	 0.000987663	 100       	 0.546745  	 0         	 4.37558   	 0.124954  
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000882942	 100       	 0.566289  	 0         	 2.26515   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 54)                           	 0.000751219	 100       	 0         	 0         	 5.75065   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 54, r2: 54)                            	 0.000750697	 100       	 38.8439   	 0         	 8.86216   	 4.38312   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000713654	 100       	 35.031    	 0         	 8.40744   	 4.16667   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                  	 0.000499785	 100       	 0         	 0         	 8.00344   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 54, n: 50, r: 2, r2: 1)                             	 0.000469781	 100       	 2.29894   	 0         	 13.7971   	 0.166626  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 54)                                                                                                        	 0.000455772	 100       	 0         	 0         	 9.47842   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 4)                                                                                                         	 0.000396595	 100       	 0         	 0         	 0.806868  	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 54)                                                                         	 0.000334831	 100       	 0         	 0         	 12.902    	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000325885	 100       	 0.767142  	 0         	 12.2743   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 4, n: 50, r2: 1)                                                                                                         	 0.00031689	 100       	 0         	 0         	 1.00981   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 54, m: 50, fromLeft: 1)                              	 0.000194157	 100       	 0         	 0         	 22.25     	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 1.42963   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 1.42959   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 0.840274  	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 0.838987  	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 0.776588  	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 0.511001  	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 0.427327  	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.362897  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.219826  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.208686  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.0850763 	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.0792406 	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.0741423 	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.0713464 	 1000      
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.0699492 	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.0460192 	 1000      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.0398286 	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.0199005 	 900       
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.00896562	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.0047742 	 6400      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.00382909	 1100      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00178171	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.000956042	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000882942	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000751219	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000325885	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23217576720256 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23217385236480 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23217183910016 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23216982583552 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23216781257088 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23216579930624 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23216378604160 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23216177277696 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23215975951232 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23215774624768 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23215573298304 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23215371971840 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23215170645376 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23214969318912 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23214767992448 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23214566665984 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23214365339520 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23214164013056 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23213962686592 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23213761360128 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23213560033664 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23213358707200 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23213157380736 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23212956054272 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23212754727808 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23212553401344 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23212352074880 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23212150748416 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23211949421952 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23211748095488 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23211546769024 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23211345442560 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23211144112000 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23210942785536 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23210741459072 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23210540132608 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23210338806144 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23210137479680 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23209936153216 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23209734826752 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23209533500288 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23209332173824 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23209130847360 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23208929520896 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23208728194432 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23208526867968 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23208325541504 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23208124215040 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23207922888576 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23207721562112 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23207520235648 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23207318909184 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23207117582720 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23206916256256 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23206714929792 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23206513603328 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23206312276864 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23206110950400 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23205909623936 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23205708297472 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23205506971008 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23205305644544 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23205104318080 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23217471059712 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23217464469248 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2750, cols: 55, reductionFactor: 37, colBlockingSize: 12)                                	 0.351623  	 1300      	 63.1737   	 0         	 4.56302   	 13.8447   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 55, m: 55)                                                                               	 0.300135  	 700       	 3.62165   	 0         	 0.17035   	 21.26     
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2750, r: 55, r2: 55, leftOrthog: 1)                      	 0.0971787 	 600       	 102.723   	 0         	 22.7112   	 4.52303   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 55, m: 2750)                                                                                	 0.0758396 	 700       	 0         	 0         	 22.3366   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2750, m: 55)                                                                       	 0.0640237 	 700       	 0         	 0         	 26.459    	 0         
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2750, Xcols: 55, r: 55, streamingCols: 0)                                 	 0.0632733 	 700       	 92.0314   	 0         	 26.9066   	 3.4204    
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 55, reductionFactor: 37, colBlockingSize: 12)                                	 0.0558201 	 200       	 55.6566   	 0         	 4.02794   	 13.8176   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 55, n: 50, r2new: 55)	 0.0555066 	 700       	 175.137   	 0         	 28.3019   	 6.18817   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 55)                                                                               	 0.0458851 	 100       	 2.76052   	 0         	 0.140351  	 19.6687   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 55, m: 55)                                                                                	 0.0430378 	 900       	 4.63892   	 0         	 1.5274    	 3.03713   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                               	 0.0386335 	 100       	 3.01983   	 0         	 0.156341  	 19.3157   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 55, n: 50, r: 55, r2: 55)                           	 0.034472  	 700       	 337.846   	 0         	 49.6327   	 6.80693   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2750, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                	 0.0239001 	 100       	 59.0861   	 0         	 4.68617   	 12.6086   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 55, r1_: 55, n: 50, r2: 55)                         	 0.0150052 	 600       	 665.268   	 0         	 97.7339   	 6.80693   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2750, r: 50, r2: 50, leftOrthog: 1)                      	 0.0111656 	 100       	 123.146   	 0         	 29.9133   	 4.11677   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 55, n: 50, r2new: 50)	 0.00854087	 100       	 147.819   	 0         	 24.9623   	 5.92167   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 55, r: 55, streamingCols: 0)                                 	 0.00847826	 100       	 89.1987   	 0         	 26.0914   	 3.4187    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 55, r2: 55, leftOrthog: 1)                      	 0.00781526	 100       	 193.532   	 0         	 42.8444   	 4.51708   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 55, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0077928 	 200       	 7.9734    	 0         	 1.18571   	 6.72458   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 55, n: 50, r: 55, r2: 50)                           	 0.00516876	 100       	 292.623   	 0         	 45.1172   	 6.48585   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 55, m: 2500)                                                                                	 0.00362815	 100       	 0         	 0         	 60.637    	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 55)                                                                       	 0.00332473	 100       	 0         	 0         	 66.1707   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 5, n: 50, r2: 5)                                                                                                         	 0.00265327	 800       	 0         	 0         	 6.0303    	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 55, r1_: 55, n: 50, r2: 50)                         	 0.00255494	 100       	 591.99    	 0         	 87.0548   	 6.8002    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 55, r1_: 50, n: 50, r2: 55)                         	 0.00250145	 100       	 604.649   	 0         	 93.2259   	 6.48585   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 55) 	 0.00171944	 100       	 17.5929   	 0         	 3.96641   	 4.43548   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 55, m: 55, fromLeft: 1)                              	 0.00163864	 800       	 0         	 0         	 23.6293   	 0         
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 55, r: 50, streamingCols: 0)                                   	 0.00160722	 100       	 7.77742   	 0         	 3.11097   	 2.5       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 55, leftOrthog: 1)                        	 0.00155912	 100       	 17.6382   	 0         	 6.79872   	 2.59434   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 55, n: 50, r2new: 1) 	 0.00104425	 100       	 0.526693  	 0         	 4.21508   	 0.124955  
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000802358	 100       	 0.623163  	 0         	 2.49265   	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 55, r2: 55)                            	 0.000802332	 100       	 37.7026   	 0         	 8.50022   	 4.43548   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 55)                           	 0.000757686	 100       	 0         	 0         	 5.80715   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000755194	 100       	 33.1041   	 0         	 7.94498   	 4.16667   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 55, n: 50, r: 2, r2: 1)                             	 0.000538944	 100       	 2.04103   	 0         	 12.2491   	 0.166626  
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                  	 0.00049696	 100       	 0         	 0         	 8.04894   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 55)                                                                                                        	 0.000462845	 100       	 0         	 0         	 9.50642   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 5)                                                                                                         	 0.000391988	 100       	 0         	 0         	 1.02044   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 5, n: 50, r2: 1)                                                                                                         	 0.000333305	 100       	 0         	 0         	 1.2001    	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000331706	 100       	 0.753679  	 0         	 12.0589   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 55)                                                                         	 0.000329058	 100       	 0         	 0         	 13.3715   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 55, m: 50, fromLeft: 1)                              	 0.000194162	 100       	 0         	 0         	 22.6615   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 1.49935   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 1.49932   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 0.918122  	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 0.916901  	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 0.849464  	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 0.507644  	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 0.439136  	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.384654  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.224503  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.215636  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.117719  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.0799647 	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.0733587 	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.0676775 	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.0668112 	 1000      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.0430378 	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.0409821 	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.0208168 	 900       
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.0062089 	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00579866	 6400      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0038414 	 1100      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00183281	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.000902556	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000802358	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000757686	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000331706	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23150478055296 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23150276372480 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23150075046016 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23149873719552 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23149672393088 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23149471066624 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23149269740160 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23149068413696 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23148867087232 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23148665760768 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23148464434304 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23148263107840 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23148061781376 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23147860454912 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23147659128448 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23147457801984 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23147256475520 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23147055149056 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23146853822592 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23146652496128 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23146451169664 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23146249843200 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23146048516736 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23145847190272 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23145645863808 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23145444537344 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23145243210880 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23145041884416 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23144840557952 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23144639231488 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23144437905024 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23144236578560 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23144035248000 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23143833921536 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23143632595072 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23143431268608 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23143229942144 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23143028615680 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23142827289216 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23142625962752 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23142424636288 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23142223309824 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23142021983360 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23141820656896 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23141619330432 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23141418003968 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23141216677504 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23141015351040 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23140814024576 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23140612698112 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23140411371648 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23140210045184 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23140008718720 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23139807392256 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23139606065792 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23139404739328 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23139203412864 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23139002086400 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23138800759936 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23138599433472 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23138398107008 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23138196780544 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23137995454080 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23150372394752 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23150365804288 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2800, cols: 56, reductionFactor: 37, colBlockingSize: 12)                                	 0.362101  	 1300      	 64.7529   	 0         	 4.59356   	 14.0964   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 56, m: 56)                                                                               	 0.301139  	 700       	 3.81006   	 0         	 0.175993  	 21.6489   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2800, r: 56, r2: 56, leftOrthog: 1)                      	 0.138506  	 600       	 76.076    	 0         	 16.5194   	 4.60526   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2800, m: 56)                                                                       	 0.0750584 	 700       	 0         	 0         	 23.3972   	 0         
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2800, Xcols: 56, r: 56, streamingCols: 0)                                 	 0.0639438 	 700       	 96.1244   	 0         	 27.6014   	 3.48259   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 56, m: 2800)                                                                                	 0.0637667 	 700       	 0         	 0         	 27.5404   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 56, reductionFactor: 37, colBlockingSize: 12)                                	 0.0565578 	 200       	 56.9463   	 0         	 4.04927   	 14.0634   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 56, n: 50, r2new: 56)	 0.053176  	 700       	 186.948   	 0         	 30.1964   	 6.19106   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 56)                                                                               	 0.0419075 	 100       	 3.07025   	 0         	 0.155581  	 19.7342   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 56, m: 56)                                                                                	 0.0413899 	 900       	 5.09154   	 0         	 1.64631   	 3.09269   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                               	 0.0381835 	 100       	 3.05542   	 0         	 0.158183  	 19.3157   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 56, n: 50, r: 56, r2: 56)                           	 0.0326057 	 700       	 377.024   	 0         	 54.3992   	 6.93069   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2800, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                	 0.023928  	 100       	 60.0902   	 0         	 4.76429   	 12.6126   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 56, r1_: 56, n: 50, r2: 56)                         	 0.0151017 	 600       	 697.731   	 0         	 100.673   	 6.93069   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 56, r: 56, streamingCols: 0)                                 	 0.00859822	 100       	 91.1817   	 0         	 26.1978   	 3.48051   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 56, n: 50, r2new: 50)	 0.00855597	 100       	 148.201   	 0         	 25.2081   	 5.87908   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2800, r: 50, r2: 50, leftOrthog: 1)                      	 0.00844846	 100       	 165.711   	 0         	 40.244    	 4.11765   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 56, reductionFactor: 37, colBlockingSize: 12)                                  	 0.00736852	 200       	 8.74194   	 0         	 1.28894   	 6.78225   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 56, r2: 56, leftOrthog: 1)                      	 0.00735131	 100       	 213.295   	 0         	 46.3887   	 4.598     
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 56, n: 50, r: 56, r2: 50)                           	 0.00534892	 100       	 293.144   	 0         	 44.8091   	 6.54206   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 56, m: 2500)                                                                                	 0.00353793	 100       	 0         	 0         	 63.3139   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 56)                                                                       	 0.002851  	 100       	 0         	 0         	 78.5689   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 56, r1_: 50, n: 50, r2: 56)                         	 0.00271987	 100       	 576.499   	 0         	 88.122    	 6.54206   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 6, n: 50, r2: 6)                                                                                                         	 0.00269204	 800       	 0         	 0         	 8.55855   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 56, r1_: 56, n: 50, r2: 50)                         	 0.00259315	 100       	 604.67    	 0         	 87.3489   	 6.92247   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 56, r: 50, streamingCols: 0)                                   	 0.00193727	 100       	 6.45237   	 0         	 2.58095   	 2.5       
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 56, m: 56, fromLeft: 1)                              	 0.00168374	 800       	 0         	 0         	 23.8403   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 56) 	 0.0016304 	 100       	 19.2346   	 0         	 4.28656   	 4.48718   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 56, leftOrthog: 1)                        	 0.00150967	 100       	 18.5472   	 0         	 7.10091   	 2.61194   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 56, n: 50, r2new: 1) 	 0.000976312	 100       	 0.573587  	 0         	 4.59034   	 0.124955  
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000771612	 100       	 0.647994  	 0         	 2.59198   	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 56, r2: 56)                            	 0.000757585	 100       	 41.3947   	 0         	 9.2251    	 4.48718   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 56)                           	 0.000734927	 100       	 0         	 0         	 6.09584   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000672822	 100       	 37.1569   	 0         	 8.91766   	 4.16667   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                  	 0.000485807	 100       	 0         	 0         	 8.23372   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 56)                                                                                                        	 0.000462253	 100       	 0         	 0         	 9.69166   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 56, n: 50, r: 2, r2: 1)                             	 0.000461274	 100       	 2.42806   	 0         	 14.5718   	 0.166627  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 6)                                                                                                         	 0.000377002	 100       	 0         	 0         	 1.2732    	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000350735	 100       	 0.712789  	 0         	 11.4046   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 56)                                                                         	 0.00033044	 100       	 0         	 0         	 13.5577   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 6, n: 50, r2: 1)                                                                                                         	 0.000319097	 100       	 0         	 0         	 1.50424   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 56, m: 50, fromLeft: 1)                              	 0.000193677	 100       	 0         	 0         	 23.1313   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 1.53944   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 1.53941   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 0.956267  	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 0.955061  	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 0.893585  	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 0.514465  	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 0.449956  	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.38123   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.231663  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.219288  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.155815  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.0782399 	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.0744793 	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.0677905 	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.0643387 	 1000      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.0413899 	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.0391735 	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.0210876 	 900       
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.00726312	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00471651	 6400      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0038504 	 1100      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00187741	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.000893875	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000771612	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000734927	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000350735	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22885398779776 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22885196359680 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22884995033216 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22884793706752 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22884592380288 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22884391053824 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22884189727360 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22883988400896 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22883787074432 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22883585747968 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22883384421504 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22883183095040 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22882981768576 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22882780442112 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22882579115648 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22882377789184 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22882176462720 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22881975136256 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22881773809792 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22881572483328 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22881371156864 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22881169830400 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22880968503936 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22880767177472 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22880565851008 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22880364524544 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22880163198080 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22879961871616 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22879760545152 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22879559218688 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22879357892224 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22879156565760 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22878955235200 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22878753908736 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22878552582272 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22878351255808 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22878149929344 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22877948602880 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22877747276416 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22877545949952 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22877344623488 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22877143297024 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22876941970560 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22876740644096 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22876539317632 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22876337991168 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22876136664704 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22875935338240 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22875734011776 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22875532685312 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22875331358848 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22875130032384 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22874928705920 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22874727379456 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22874526052992 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22874324726528 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22874123400064 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22873922073600 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22873720747136 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22873519420672 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22873318094208 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22873116767744 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22872915441280 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22885293119232 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22885286528768 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2850, cols: 57, reductionFactor: 37, colBlockingSize: 12)                                	 0.383929  	 1300      	 64.4019   	 0         	 4.48851   	 14.3482   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 57, m: 57)                                                                               	 0.321286  	 700       	 3.76589   	 0         	 0.170883  	 22.0378   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2850, m: 57)                                                                       	 0.0760512 	 700       	 0         	 0         	 23.9239   	 0         
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2850, Xcols: 57, r: 57, streamingCols: 0)                                 	 0.068552  	 700       	 94.5523   	 0         	 26.6737   	 3.54478   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 57, m: 2850)                                                                                	 0.0658948 	 700       	 0         	 0         	 27.6113   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2850, r: 57, r2: 57, leftOrthog: 1)                      	 0.0597653 	 600       	 185.92    	 0         	 39.663    	 4.6875    
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 57, n: 50, r2new: 57)	 0.059731  	 700       	 170.272   	 0         	 27.4838   	 6.19536   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 57, reductionFactor: 37, colBlockingSize: 12)                                	 0.0594347 	 200       	 56.1425   	 0         	 3.92361   	 14.3089   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 57, m: 57)                                                                                	 0.0472514 	 900       	 4.70318   	 0         	 1.4939    	 3.14826   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 57)                                                                               	 0.0417474 	 100       	 3.12994   	 0         	 0.158094  	 19.798    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                               	 0.0380615 	 100       	 3.06522   	 0         	 0.158691  	 19.3157   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 57, n: 50, r: 57, r2: 57)                           	 0.037167  	 700       	 348.791   	 0         	 49.4427   	 7.05446   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2850, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                	 0.0236149 	 100       	 61.9742   	 0         	 4.91215   	 12.6165   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 57, r1_: 57, n: 50, r2: 57)                         	 0.0158325 	 600       	 701.823   	 0         	 99.4865   	 7.05446   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2850, r: 50, r2: 50, leftOrthog: 1)                      	 0.00934112	 100       	 152.551   	 0         	 37.0405   	 4.1185    
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 57, r: 57, streamingCols: 0)                                 	 0.00905448	 100       	 89.707    	 0         	 25.3244   	 3.54231   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 57, n: 50, r2new: 50)	 0.00886613	 100       	 143.749   	 0         	 24.615    	 5.8399    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 57, r2: 57, leftOrthog: 1)                      	 0.0083988 	 100       	 193.421   	 0         	 41.3391   	 4.67888   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 57, reductionFactor: 37, colBlockingSize: 12)                                  	 0.00810865	 200       	 8.23025   	 0         	 1.20346   	 6.83885   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 57, n: 50, r: 57, r2: 50)                           	 0.0053363 	 100       	 304.424   	 0         	 46.1443   	 6.59722   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 57)                                                                       	 0.00410097	 100       	 0         	 0         	 55.5965   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 57, m: 2500)                                                                                	 0.00373258	 100       	 0         	 0         	 61.0838   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 57, r1_: 50, n: 50, r2: 57)                         	 0.00315094	 100       	 515.561   	 0         	 78.1482   	 6.59722   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 57, r1_: 57, n: 50, r2: 50)                         	 0.00290369	 100       	 559.46    	 0         	 79.4158   	 7.04469   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 7, n: 50, r2: 7)                                                                                                         	 0.0028013 	 800       	 0         	 0         	 11.1948   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 57, m: 57, fromLeft: 1)                              	 0.00178116	 800       	 0         	 0         	 23.3484   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 57) 	 0.00171743	 100       	 18.9178   	 0         	 4.16856   	 4.53822   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 57, r: 50, streamingCols: 0)                                   	 0.00163825	 100       	 7.63008   	 0         	 3.05203   	 2.5       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 57, leftOrthog: 1)                        	 0.0014855 	 100       	 19.1854   	 0         	 7.29719   	 2.62915   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 57, n: 50, r2new: 1) 	 0.00106825	 100       	 0.533584  	 0         	 4.27017   	 0.124956  
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000867113	 100       	 0.576626  	 0         	 2.3065    	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 57, r2: 57)                            	 0.000812618	 100       	 39.9819   	 0         	 8.81004   	 4.53822   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 57)                           	 0.000763086	 100       	 0         	 0         	 5.97574   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000723262	 100       	 34.5656   	 0         	 8.29575   	 4.16667   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 57, n: 50, r: 2, r2: 1)                             	 0.000529166	 100       	 2.15433   	 0         	 12.929    	 0.166628  
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                  	 0.000482443	 100       	 0         	 0         	 8.29113   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 57)                                                                                                        	 0.000476165	 100       	 0         	 0         	 9.57651   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 7)                                                                                                         	 0.00037045	 100       	 0         	 0         	 1.51167   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.00032818	 100       	 0.761777  	 0         	 12.1884   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 57)                                                                         	 0.000316815	 100       	 0         	 0         	 14.3933   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 7, n: 50, r2: 1)                                                                                                         	 0.000310349	 100       	 0         	 0         	 1.80442   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 57, m: 50, fromLeft: 1)                              	 0.000216097	 100       	 0         	 0         	 21.1016   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 1.52588   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 1.52585   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 0.907473  	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 0.906201  	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 0.853287  	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 0.541706  	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 0.475088  	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.401095  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.242161  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.234122  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.080469  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.0792448 	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.0789907 	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.0713828 	 1000      
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.0701098 	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.0472514 	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.043845  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.0226103 	 900       
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.00543565	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00439068	 6400      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.00395826	 1100      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00199726	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00103578	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000867113	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000763086	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.00032818	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22740735575936 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22740509648896 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22740308322432 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22740106995968 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22739905669504 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22739704343040 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22739503016576 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22739301690112 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22739100363648 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22738899037184 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22738697710720 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22738496384256 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22738295057792 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22738093731328 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22737892404864 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22737691078400 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22737489751936 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22737288425472 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22737087099008 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22736885772544 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22736684446080 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22736483119616 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22736281793152 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22736080466688 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22735879140224 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22735677813760 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22735476487296 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22735275160832 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22735073834368 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22734872507904 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22734671181440 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22734469854976 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22734268524416 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22734067197952 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22733865871488 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22733664545024 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22733463218560 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22733261892096 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22733060565632 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22732859239168 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22732657912704 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22732456586240 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22732255259776 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22732053933312 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22731852606848 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22731651280384 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22731449953920 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22731248627456 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22731047300992 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22730845974528 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22730644648064 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22730443321600 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22730241995136 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22730040668672 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22729839342208 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22729638015744 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22729436689280 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22729235362816 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22729034036352 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22728832709888 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22728631383424 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22728430056960 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22728228730496 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22740629915392 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22740623324928 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2900, cols: 58, reductionFactor: 37, colBlockingSize: 12)                                	 0.384218  	 1300      	 67.8003   	 0         	 4.64389   	 14.5999   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 58, m: 58)                                                                               	 0.324384  	 700       	 3.9297    	 0         	 0.175224  	 22.4267   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2900, m: 58)                                                                       	 0.0886152 	 700       	 0         	 0         	 21.2586   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2900, r: 58, r2: 58, leftOrthog: 1)                      	 0.0846521 	 600       	 138.292   	 0         	 28.9937   	 4.76974   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 58, m: 2900)                                                                                	 0.0738562 	 700       	 0         	 0         	 25.5069   	 0         
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2900, Xcols: 58, r: 58, streamingCols: 0)                                 	 0.0683923 	 700       	 99.8493   	 0         	 27.6824   	 3.60697   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 58, n: 50, r2new: 58)	 0.0629434 	 700       	 165.384   	 0         	 26.6696   	 6.20121   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 58, reductionFactor: 37, colBlockingSize: 12)                                	 0.0598539 	 200       	 57.7226   	 0         	 3.96603   	 14.5542   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 58, m: 58)                                                                                	 0.0455641 	 900       	 5.13855   	 0         	 1.60389   	 3.20379   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 58)                                                                               	 0.0419128 	 100       	 3.1653    	 0         	 0.159378  	 19.8603   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                               	 0.0374491 	 100       	 3.11534   	 0         	 0.161286  	 19.3157   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 58, n: 50, r: 58, r2: 58)                           	 0.036742  	 700       	 371.723   	 0         	 51.7849   	 7.17822   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2900, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                	 0.0233194 	 100       	 63.8606   	 0         	 5.06017   	 12.6202   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 58, r1_: 58, n: 50, r2: 58)                         	 0.0160522 	 600       	 729.292   	 0         	 101.598   	 7.17822   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 58, n: 50, r2new: 50)	 0.00937644	 100       	 136.726   	 0         	 23.5569   	 5.80406   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 58, r: 58, streamingCols: 0)                                 	 0.00900354	 100       	 93.4077   	 0         	 25.9171   	 3.6041    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 58, r2: 58, leftOrthog: 1)                      	 0.00862292	 100       	 195.061   	 0         	 40.9817   	 4.75972   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2900, r: 50, r2: 50, leftOrthog: 1)                      	 0.00860631	 100       	 168.481   	 0         	 40.9002   	 4.11932   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 58, reductionFactor: 37, colBlockingSize: 12)                                  	 0.00794074	 200       	 8.70176   	 0         	 1.26215   	 6.89439   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 58, n: 50, r: 58, r2: 50)                           	 0.00555332	 100       	 302.882   	 0         	 45.5368   	 6.65138   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 58)                                                                       	 0.00440109	 100       	 0         	 0         	 52.7143   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 58, m: 2500)                                                                                	 0.00369588	 100       	 0         	 0         	 62.7725   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 58, r1_: 50, n: 50, r2: 58)                         	 0.00297665	 100       	 565.065   	 0         	 84.9546   	 6.65138   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 58, r1_: 58, n: 50, r2: 50)                         	 0.00295656	 100       	 568.904   	 0         	 79.3798   	 7.16686   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 8, n: 50, r2: 8)                                                                                                         	 0.00284592	 800       	 0         	 0         	 14.3925   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 58, m: 58, fromLeft: 1)                              	 0.00181957	 800       	 0         	 0         	 23.6645   	 0         
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 58, r: 50, streamingCols: 0)                                   	 0.00177245	 100       	 7.05237   	 0         	 2.82095   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 58) 	 0.00172891	 100       	 19.4573   	 0         	 4.24035   	 4.58861   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 58, leftOrthog: 1)                        	 0.00148598	 100       	 19.5157   	 0         	 7.37559   	 2.64599   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 58, n: 50, r2new: 1) 	 0.000846509	 100       	 0.685167  	 0         	 5.48323   	 0.124957  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 58, r2: 58)                            	 0.000814109	 100       	 41.3212   	 0         	 9.00518   	 4.58861   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000809353	 100       	 0.617777  	 0         	 2.47111   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 58)                           	 0.000769667	 100       	 0         	 0         	 6.02858   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000751206	 100       	 33.2798   	 0         	 7.98716   	 4.16667   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                  	 0.000516717	 100       	 0         	 0         	 7.74118   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 58)                                                                                                        	 0.00046537	 100       	 0         	 0         	 9.97056   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 8)                                                                                                         	 0.00039209	 100       	 0         	 0         	 1.63228   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 8, n: 50, r2: 1)                                                                                                         	 0.000356553	 100       	 0         	 0         	 1.79496   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000332179	 100       	 0.752606  	 0         	 12.0417   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 58)                                                                         	 0.000331522	 100       	 0         	 0         	 13.9961   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 58, n: 50, r: 2, r2: 1)                             	 0.000320251	 100       	 3.62216   	 0         	 21.7379   	 0.166628  
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 58, m: 50, fromLeft: 1)                              	 0.000199555	 100       	 0         	 0         	 23.2517   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 1.60113   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 1.60111   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 0.955122  	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 0.953904  	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 0.886588  	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 0.563339  	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 0.475332  	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.403746  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.244211  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.23222   	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.103367  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.0933478 	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.0791683 	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.0780688 	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.0748953 	 1000      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.0455641 	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.0434296 	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.0227366 	 900       
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.0085482 	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00480585	 6400      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.00405994	 1100      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00201913	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.000927263	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000809353	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000769667	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000332179	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23139134080896 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23138934974464 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23138733648000 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23138532321536 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23138330995072 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23138129668608 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23137928342144 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23137727015680 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23137525689216 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23137324362752 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23137123036288 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23136921709824 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23136720383360 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23136519056896 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23136317730432 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23136116403968 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23135915077504 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23135713751040 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23135512424576 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23135311098112 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23135109771648 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23134908445184 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23134707118720 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23134505792256 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23134304465792 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23134103139328 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23133901812864 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23133700486400 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23133499159936 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23133297833472 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23133096507008 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23132895180544 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23132693849984 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23132492523520 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23132291197056 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23132089870592 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23131888544128 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23131687217664 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23131485891200 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23131284564736 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23131083238272 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23130881911808 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23130680585344 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23130479258880 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23130277932416 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23130076605952 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23129875279488 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23129673953024 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23129472626560 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23129271300096 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23129069973632 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23128868647168 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23128667320704 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23128465994240 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23128264667776 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23128063341312 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23127862014848 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23127660688384 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23127459361920 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23127258035456 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23127056708992 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23126855382528 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23126654056064 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23139028420352 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23139021829888 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2950, cols: 59, reductionFactor: 37, colBlockingSize: 12)                                	 0.400766  	 1300      	 68.4211   	 0         	 4.60698   	 14.8516   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 59, m: 59)                                                                               	 0.331281  	 700       	 4.05036   	 0         	 0.177527  	 22.8155   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2950, m: 59)                                                                       	 0.084844  	 700       	 0         	 0         	 22.9758   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2950, r: 59, r2: 59, leftOrthog: 1)                      	 0.0842529 	 600       	 146.259   	 0         	 30.1442   	 4.85197   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 59, m: 2950)                                                                                	 0.0778293 	 700       	 0         	 0         	 25.0466   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 59, n: 50, r2new: 59)	 0.0711602 	 700       	 149.796   	 0         	 24.1266   	 6.20876   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2950, Xcols: 59, r: 59, streamingCols: 0)                                 	 0.0703917 	 700       	 102.118   	 0         	 27.8315   	 3.66915   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 59, reductionFactor: 37, colBlockingSize: 12)                                	 0.0620268 	 200       	 57.6377   	 0         	 3.8946    	 14.7994   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 59, m: 59)                                                                                	 0.0486637 	 900       	 5.06444   	 0         	 1.55382   	 3.25936   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 59, n: 50, r: 59, r2: 59)                           	 0.0462684 	 700       	 310.72    	 0         	 42.5529   	 7.30198   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 59)                                                                               	 0.0431245 	 100       	 3.12274   	 0         	 0.156755  	 19.9211   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                               	 0.0384125 	 100       	 3.0372    	 0         	 0.15724   	 19.3157   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2950, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                	 0.0234693 	 100       	 64.5466   	 0         	 5.11305   	 12.6239   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 59, r1_: 59, n: 50, r2: 59)                         	 0.0174086 	 600       	 707.855   	 0         	 96.9401   	 7.30198   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 59, r: 59, streamingCols: 0)                                 	 0.013019  	 100       	 66.8444   	 0         	 18.2342   	 3.66587   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 59, n: 50, r2new: 50)	 0.0113156 	 100       	 114.046   	 0         	 19.7603   	 5.77147   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2950, r: 50, r2: 50, leftOrthog: 1)                      	 0.010531  	 100       	 140.063   	 0         	 33.995    	 4.12011   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 59, r2: 59, leftOrthog: 1)                      	 0.0081448 	 100       	 213.695   	 0         	 44.1471   	 4.84051   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 59, reductionFactor: 37, colBlockingSize: 12)                                  	 0.00722023	 200       	 9.90295   	 0         	 1.42511   	 6.94892   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 59, n: 50, r: 59, r2: 50)                           	 0.00712727	 100       	 244.203   	 0         	 36.4235   	 6.70455   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 59, m: 2500)                                                                                	 0.00452286	 100       	 0         	 0         	 52.1794   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 59)                                                                       	 0.00352031	 100       	 0         	 0         	 67.0396   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 59, r1_: 50, n: 50, r2: 59)                         	 0.00333727	 100       	 521.534   	 0         	 77.7881   	 6.70455   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 59, r1_: 59, n: 50, r2: 50)                         	 0.00319291	 100       	 545.114   	 0         	 74.7859   	 7.28899   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 9, n: 50, r2: 9)                                                                                                         	 0.00291827	 800       	 0         	 0         	 17.764    	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 59, m: 59, fromLeft: 1)                              	 0.00193009	 800       	 0         	 0         	 23.0853   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 59) 	 0.00175514	 100       	 19.8331   	 0         	 4.27589   	 4.63836   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 59, leftOrthog: 1)                        	 0.00152691	 100       	 19.3201   	 0         	 7.25649   	 2.66245   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 59, r: 50, streamingCols: 0)                                   	 0.00148913	 100       	 8.39413   	 0         	 3.35765   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 59, n: 50, r2new: 1) 	 0.000987109	 100       	 0.597705  	 0         	 4.78326   	 0.124958  
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000855911	 100       	 0.584173  	 0         	 2.33669   	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 59, r2: 59)                            	 0.000846165	 100       	 41.1385   	 0         	 8.86919   	 4.63836   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 59)                           	 0.000761524	 100       	 0         	 0         	 6.1981    	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000729942	 100       	 34.2493   	 0         	 8.21983   	 4.16667   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                  	 0.000518188	 100       	 0         	 0         	 7.71921   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 59)                                                                                                        	 0.00046106	 100       	 0         	 0         	 10.2373   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 59, n: 50, r: 2, r2: 1)                             	 0.000439859	 100       	 2.68268   	 0         	 16.0997   	 0.166629  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 9)                                                                                                         	 0.000391147	 100       	 0         	 0         	 1.84074   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 9, n: 50, r2: 1)                                                                                                         	 0.000330433	 100       	 0         	 0         	 2.17896   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.00032708	 100       	 0.764339  	 0         	 12.2294   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 59)                                                                         	 0.00032262	 100       	 0         	 0         	 14.6302   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 59, m: 50, fromLeft: 1)                              	 0.000206818	 100       	 0         	 0         	 22.822    	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 1.6704    	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 1.67036   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 0.992496  	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 0.991232  	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 0.908512  	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 0.587885  	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 0.493483  	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.412818  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.256584  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.238045  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.104456  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.0886869 	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.085218  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.0848999 	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.0828704 	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.0546817 	 1000      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.0486637 	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.0246687 	 900       
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.00983605	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.0048321 	 6400      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.00410091	 1100      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00213691	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00115188	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000855911	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000761524	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.00032708	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23368328247168 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23368111745024 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23367910418560 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23367709092096 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23367507765632 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23367306439168 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23367105112704 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23366903786240 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23366702459776 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23366501133312 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23366299806848 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23366098480384 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23365897153920 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23365695827456 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23365494500992 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23365293174528 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23365091848064 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23364890521600 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23364689195136 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23364487868672 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23364286542208 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23364085215744 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23363883889280 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23363682562816 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23363481236352 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23363279909888 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23363078583424 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23362877256960 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23362675930496 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23362474604032 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23362273277568 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23362071951104 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23361870620544 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23361669294080 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23361467967616 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23361266641152 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23361065314688 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23360863988224 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23360662661760 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23360461335296 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23360260008832 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23360058682368 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23359857355904 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23359656029440 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23359454702976 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23359253376512 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23359052050048 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23358850723584 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23358649397120 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23358448070656 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23358246744192 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23358045417728 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23357844091264 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23357642764800 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23357441438336 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23357240111872 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23357038785408 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23356837458944 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23356636132480 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23356434806016 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23356233479552 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23356032153088 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23355830826624 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23368222586624 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23368215996160 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3000, cols: 60, reductionFactor: 37, colBlockingSize: 12)                                	 0.423138  	 1300      	 68.1549   	 0         	 4.51257   	 15.1033   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 60, m: 60)                                                                               	 0.332944  	 700       	 4.23855   	 0         	 0.182661  	 23.2044   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 60, m: 3000)                                                                                	 0.0811672 	 700       	 0         	 0         	 24.8376   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3000, r: 60, r2: 60, leftOrthog: 1)                      	 0.0793291 	 600       	 163.37    	 0         	 33.1097   	 4.93421   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 3000, m: 60)                                                                       	 0.0742047 	 700       	 0         	 0         	 27.1681   	 0         
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 3000, Xcols: 60, r: 60, streamingCols: 0)                                 	 0.0731571 	 700       	 103.339   	 0         	 27.6949   	 3.73134   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 60, reductionFactor: 37, colBlockingSize: 12)                                	 0.0657338 	 200       	 56.2465   	 0         	 3.73872   	 15.0443   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 60, n: 50, r2new: 60)	 0.0648202 	 700       	 168.466   	 0         	 27.0928   	 6.21811   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 60, m: 60)                                                                                	 0.0478615 	 900       	 5.41563   	 0         	 1.63371   	 3.31492   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 60)                                                                               	 0.0422005 	 100       	 3.23851   	 0         	 0.162083  	 19.9805   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 60, n: 50, r: 60, r2: 60)                           	 0.0401407 	 700       	 376.675   	 0         	 50.7256   	 7.42574   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                               	 0.0378414 	 100       	 3.08304   	 0         	 0.159614  	 19.3157   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3000, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                	 0.0232667 	 100       	 66.2122   	 0         	 5.24355   	 12.6274   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 60, r1_: 60, n: 50, r2: 60)                         	 0.0163881 	 600       	 790.817   	 0         	 106.497   	 7.42574   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 60, n: 50, r2new: 50)	 0.0098366 	 100       	 132.16    	 0         	 23.0161   	 5.74205   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3000, r: 50, r2: 50, leftOrthog: 1)                      	 0.00979295	 100       	 153.171   	 0         	 37.1696   	 4.12088   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 60, r: 60, streamingCols: 0)                                 	 0.00951106	 100       	 94.6267   	 0         	 25.3852   	 3.72763   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 60, reductionFactor: 37, colBlockingSize: 12)                                  	 0.00897659	 200       	 8.23765   	 0         	 1.17639   	 7.00246   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 60, r2: 60, leftOrthog: 1)                      	 0.00850448	 100       	 211.653   	 0         	 43.0079   	 4.92126   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 60, n: 50, r: 60, r2: 50)                           	 0.00590694	 100       	 304.726   	 0         	 45.0995   	 6.75676   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 60, m: 2500)                                                                                	 0.00422574	 100       	 0         	 0         	 56.7947   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 60)                                                                       	 0.003615  	 100       	 0         	 0         	 66.39     	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 60, r1_: 60, n: 50, r2: 50)                         	 0.00333799	 100       	 539.246   	 0         	 72.7623   	 7.41107   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 60, r1_: 50, n: 50, r2: 60)                         	 0.00316803	 100       	 568.177   	 0         	 84.0902   	 6.75676   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 10, n: 50, r2: 10)                                                                                                       	 0.00300951	 800       	 0         	 0         	 21.2659   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 60, m: 60, fromLeft: 1)                              	 0.00197173	 800       	 0         	 0         	 23.3703   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 60) 	 0.00173571	 100       	 20.7409   	 0         	 4.42472   	 4.6875    
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 60, r: 50, streamingCols: 0)                                   	 0.00168761	 100       	 7.40691   	 0         	 2.96276   	 2.5       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 60, leftOrthog: 1)                        	 0.00158743	 100       	 18.8984   	 0         	 7.05542   	 2.67857   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 60, n: 50, r2new: 1) 	 0.00111325	 100       	 0.538962  	 0         	 4.31314   	 0.124958  
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000861886	 100       	 0.580123  	 0         	 2.32049   	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 60, r2: 60)                            	 0.000819485	 100       	 43.93     	 0         	 9.37174   	 4.6875    
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 60)                           	 0.000753784	 100       	 0         	 0         	 6.36787   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000749564	 100       	 33.3527   	 0         	 8.00465   	 4.16667   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 60, n: 50, r: 2, r2: 1)                             	 0.000527549	 100       	 2.27467   	 0         	 13.6511   	 0.16663   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                  	 0.000511989	 100       	 0         	 0         	 7.81267   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 60)                                                                                                        	 0.000461344	 100       	 0         	 0         	 10.4044   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 10)                                                                                                        	 0.000380071	 100       	 0         	 0         	 2.10487   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000329432	 100       	 0.758882  	 0         	 12.1421   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 10, n: 50, r2: 1)                                                                                                        	 0.000321753	 100       	 0         	 0         	 2.48638   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 60)                                                                         	 0.00031956	 100       	 0         	 0         	 15.0207   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 60, m: 50, fromLeft: 1)                              	 0.000212724	 100       	 0         	 0         	 22.5644   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 1.66507   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 1.66503   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 0.989801  	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 0.988536  	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 0.917274  	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 0.591487  	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 0.521115  	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.412986  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.271074  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.2511    	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.099214  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.0859049 	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.0843558 	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.0781392 	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.0775057 	 1000      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.0478615 	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.0473946 	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.0236437 	 900       
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.00813146	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00487552	 6400      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.00417267	 1100      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00218445	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.000916033	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000861886	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000753784	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000329432	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22440830551936 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22440600135680 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22440398809216 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22440197482752 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22439996156288 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22439794829824 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22439593503360 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22439392176896 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22439190850432 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22438989523968 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22438788197504 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22438586871040 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22438385544576 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22438184218112 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22437982891648 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22437781565184 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22437580238720 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22437378912256 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22437177585792 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22436976259328 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22436774932864 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22436573606400 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22436372279936 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22436170953472 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22435969627008 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22435768300544 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22435566974080 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22435365647616 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22435164321152 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22434962994688 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22434761668224 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22434560341760 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22434359011200 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22434157684736 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22433956358272 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22433755031808 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22433553705344 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22433352378880 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22433151052416 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22432949725952 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22432748399488 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22432547073024 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22432345746560 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22432144420096 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22431943093632 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22431741767168 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22431540440704 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22431339114240 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22431137787776 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22430936461312 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22430735134848 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22430533808384 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22430332481920 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22430131155456 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22429929828992 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22429728502528 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22429527176064 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22429325849600 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22429124523136 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22428923196672 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22428721870208 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22428520543744 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22428319217280 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22440724891392 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22440718300928 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3050, cols: 61, reductionFactor: 37, colBlockingSize: 12)                                	 0.438977  	 1300      	 69.0356   	 0         	 4.49595   	 15.3551   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 61, m: 61)                                                                               	 0.348589  	 700       	 4.25413   	 0         	 0.180311  	 23.5933   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3050, r: 61, r2: 61, leftOrthog: 1)                      	 0.113263  	 600       	 120.241   	 0         	 23.9693   	 5.01645   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 3050, m: 61)                                                                       	 0.0788501 	 700       	 0         	 0         	 26.4269   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 61, m: 3050)                                                                                	 0.0787288 	 700       	 0         	 0         	 26.4676   	 0         
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 3050, Xcols: 61, r: 61, streamingCols: 0)                                 	 0.074315  	 700       	 106.901   	 0         	 28.1798   	 3.79353   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 61, n: 50, r2new: 61)	 0.0700015 	 700       	 159.878   	 0         	 25.6651   	 6.22937   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 61, reductionFactor: 37, colBlockingSize: 12)                                	 0.0671385 	 200       	 56.9207   	 0         	 3.72296   	 15.2891   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 61, m: 61)                                                                                	 0.0522589 	 900       	 5.21205   	 0         	 1.54639   	 3.37046   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 61)                                                                               	 0.0464747 	 100       	 2.98371   	 0         	 0.148898  	 20.0385   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 61, n: 50, r: 61, r2: 61)                           	 0.043355  	 700       	 366.478   	 0         	 48.5433   	 7.5495    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                               	 0.0376929 	 100       	 3.09519   	 0         	 0.160242  	 19.3157   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3050, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                	 0.0232991 	 100       	 67.222    	 0         	 5.32208   	 12.6308   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 61, r1_: 61, n: 50, r2: 61)                         	 0.018298  	 600       	 744.282   	 0         	 98.5869   	 7.5495    
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 61, n: 50, r2new: 50)	 0.00995484	 100       	 131.645   	 0         	 23.032    	 5.71572   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 61, r: 61, streamingCols: 0)                                 	 0.00962543	 100       	 96.6451   	 0         	 25.5042   	 3.78938   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3050, r: 50, r2: 50, leftOrthog: 1)                      	 0.00962409	 100       	 158.457   	 0         	 38.4452   	 4.12162   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 61, reductionFactor: 37, colBlockingSize: 12)                                  	 0.00950216	 200       	 8.04358   	 0         	 1.14012   	 7.05503   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 61, r2: 61, leftOrthog: 1)                      	 0.00844296	 100       	 220.361   	 0         	 44.0549   	 5.00197   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 61, n: 50, r: 61, r2: 50)                           	 0.00601964	 100       	 309.071   	 0         	 45.398    	 6.80804   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 61, m: 2500)                                                                                	 0.00420385	 100       	 0         	 0         	 58.0421   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 61)                                                                       	 0.00393375	 100       	 0         	 0         	 62.0274   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 61, r1_: 61, n: 50, r2: 50)                         	 0.00337514	 100       	 551.236   	 0         	 73.1752   	 7.5331    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 61, r1_: 50, n: 50, r2: 61)                         	 0.00309036	 100       	 602.033   	 0         	 88.4298   	 6.80804   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 11, n: 50, r2: 11)                                                                                                       	 0.00290785	 800       	 0         	 0         	 26.6314   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 61, m: 61, fromLeft: 1)                              	 0.00204434	 800       	 0         	 0         	 23.2979   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 61) 	 0.00181233	 100       	 20.5315   	 0         	 4.33519   	 4.73602   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 61, leftOrthog: 1)                        	 0.0016091 	 100       	 18.9547   	 0         	 7.03501   	 2.69435   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 61, r: 50, streamingCols: 0)                                   	 0.00159532	 100       	 7.83543   	 0         	 3.13417   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 61, n: 50, r2new: 1) 	 0.00103668	 100       	 0.588415  	 0         	 4.70886   	 0.124959  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 61, r2: 61)                            	 0.00087809	 100       	 42.3761   	 0         	 8.9476    	 4.73602   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000847007	 100       	 0.590314  	 0         	 2.36126   	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000784381	 100       	 31.8723   	 0         	 7.64934   	 4.16667   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 61)                           	 0.000771188	 100       	 0         	 0         	 6.3279    	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                  	 0.00048352	 100       	 0         	 0         	 8.27267   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 61)                                                                                                        	 0.000457492	 100       	 0         	 0         	 10.6669   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 61, n: 50, r: 2, r2: 1)                             	 0.000455423	 100       	 2.67883   	 0         	 16.0765   	 0.16663   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 11)                                                                                                        	 0.00038936	 100       	 0         	 0         	 2.26012   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 61)                                                                         	 0.000331357	 100       	 0         	 0         	 14.7273   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.0003279 	 100       	 0.762428  	 0         	 12.1988   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 11, n: 50, r2: 1)                                                                                                        	 0.000315706	 100       	 0         	 0         	 2.7874    	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 61, m: 50, fromLeft: 1)                              	 0.000223149	 100       	 0         	 0         	 21.8688   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 1.7615    	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 1.76147   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 1.06811   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 1.06685   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 0.986513  	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 0.604103  	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 0.538917  	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.432756  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.276428  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.263562  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.13294   	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.0855357 	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.0834162 	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.0831152 	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.0828053 	 1000      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.0522589 	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.0507082 	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.0255479 	 900       
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.00945001	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00509227	 6400      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0040704 	 1100      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00226748	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.000980008	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000847007	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000771188	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.0003279 	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23374375454592 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23374151542784 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23373950216320 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23373748889856 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23373547563392 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23373346236928 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23373144910464 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23372943584000 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23372742257536 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23372540931072 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23372339604608 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23372138278144 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23371936951680 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23371735625216 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23371534298752 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23371332972288 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23371131645824 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23370930319360 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23370728992896 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23370527666432 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23370326339968 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23370125013504 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23369923687040 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23369722360576 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23369521034112 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23369319707648 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23369118381184 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23368917054720 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23368715728256 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23368514401792 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23368313075328 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23368111748864 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23367910418304 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23367709091840 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23367507765376 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23367306438912 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23367105112448 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23366903785984 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23366702459520 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23366501133056 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23366299806592 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23366098480128 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23365897153664 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23365695827200 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23365494500736 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23365293174272 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23365091847808 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23364890521344 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23364689194880 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23364487868416 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23364286541952 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23364085215488 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23363883889024 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23363682562560 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23363481236096 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23363279909632 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23363078583168 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23362877256704 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23362675930240 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23362474603776 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23362273277312 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23362071950848 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23361870624384 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23374269794048 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23374263203584 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3100, cols: 62, reductionFactor: 37, colBlockingSize: 12)                                	 0.444815  	 1300      	 71.5354   	 0         	 4.58361   	 15.6068   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 62, m: 62)                                                                               	 0.354735  	 700       	 4.3894    	 0         	 0.183028  	 23.9822   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 62, m: 3100)                                                                                	 0.105758  	 700       	 0         	 0         	 20.3545   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 3100, m: 62)                                                                       	 0.101481  	 700       	 0         	 0         	 21.2123   	 0         
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 3100, Xcols: 62, r: 62, streamingCols: 0)                                 	 0.0784288 	 700       	 106.357   	 0         	 27.5843   	 3.85572   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 62, n: 50, r2new: 62)	 0.0694431 	 700       	 165.243   	 0         	 26.4701   	 6.24261   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 62, reductionFactor: 37, colBlockingSize: 12)                                	 0.0677482 	 200       	 58.273    	 0         	 3.7514    	 15.5337   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3100, r: 62, r2: 62, leftOrthog: 1)                      	 0.0658173 	 600       	 217.263   	 0         	 42.6116   	 5.09868   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 62, m: 62)                                                                                	 0.0518147 	 900       	 5.51953   	 0         	 1.61106   	 3.42602   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 62)                                                                               	 0.0439361 	 100       	 3.20162   	 0         	 0.159322  	 20.0952   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 62, n: 50, r: 62, r2: 62)                           	 0.0426959 	 700       	 390.74    	 0         	 50.9222   	 7.67327   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                               	 0.0383017 	 100       	 3.04599   	 0         	 0.157695  	 19.3157   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3100, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                	 0.0227585 	 100       	 69.9472   	 0         	 5.5364    	 12.6341   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 62, r1_: 62, n: 50, r2: 62)                         	 0.0191262 	 600       	 747.649   	 0         	 97.4356   	 7.67327   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 62, r: 62, streamingCols: 0)                                 	 0.010409  	 100       	 92.3244   	 0         	 23.9734   	 3.85112   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 62, n: 50, r2new: 50)	 0.0103479 	 100       	 127.755   	 0         	 22.4431   	 5.69239   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3100, r: 50, r2: 50, leftOrthog: 1)                      	 0.00893054	 100       	 173.562   	 0         	 42.1027   	 4.12234   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 62, reductionFactor: 37, colBlockingSize: 12)                                  	 0.00877538	 200       	 8.99766   	 0         	 1.26609   	 7.10666   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 62, r2: 62, leftOrthog: 1)                      	 0.00829429	 100       	 231.726   	 0         	 45.5916   	 5.08263   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 62, n: 50, r: 62, r2: 50)                           	 0.00615048	 100       	 312.496   	 0         	 45.5639   	 6.85841   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 62, m: 2500)                                                                                	 0.00443654	 100       	 0         	 0         	 55.8994   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 62)                                                                       	 0.00378595	 100       	 0         	 0         	 65.5053   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 62, r1_: 62, n: 50, r2: 50)                         	 0.00337232	 100       	 569.934   	 0         	 74.4517   	 7.65508   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 62, r1_: 50, n: 50, r2: 62)                         	 0.00320777	 100       	 599.17    	 0         	 87.3629   	 6.85841   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 12, n: 50, r2: 12)                                                                                                       	 0.00304258	 800       	 0         	 0         	 30.2901   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 62, m: 62, fromLeft: 1)                              	 0.00225911	 800       	 0         	 0         	 21.7799   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 62) 	 0.00174182	 100       	 22.0689   	 0         	 4.6131    	 4.78395   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 62, r: 50, streamingCols: 0)                                   	 0.00172025	 100       	 7.26638   	 0         	 2.90655   	 2.5       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 62, leftOrthog: 1)                        	 0.00153431	 100       	 20.2045   	 0         	 7.45611   	 2.70979   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 62, n: 50, r2new: 1) 	 0.00122832	 100       	 0.504753  	 0         	 4.03933   	 0.12496   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000890487	 100       	 0.561491  	 0         	 2.24596   	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 62, r2: 62)                            	 0.000838934	 100       	 45.8201   	 0         	 9.57787   	 4.78395   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000768074	 100       	 32.5489   	 0         	 7.81175   	 4.16667   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 62)                           	 0.000766994	 100       	 0         	 0         	 6.4668    	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 62, n: 50, r: 2, r2: 1)                             	 0.000618943	 100       	 2.00342   	 0         	 12.0231   	 0.166631  
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                  	 0.000505927	 100       	 0         	 0         	 7.90628   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 62)                                                                                                        	 0.000469337	 100       	 0         	 0         	 10.5681   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 12)                                                                                                        	 0.000387595	 100       	 0         	 0         	 2.47681   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000328406	 100       	 0.761253  	 0         	 12.18     	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 12, n: 50, r2: 1)                                                                                                        	 0.000327869	 100       	 0         	 0         	 2.928     	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 62)                                                                         	 0.000325098	 100       	 0         	 0         	 15.2569   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 62, m: 50, fromLeft: 1)                              	 0.000226165	 100       	 0         	 0         	 21.9309   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 1.80761   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 1.80758   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 1.05345   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 1.05214   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 0.948187  	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 0.667271  	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 0.544097  	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.436973  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.281071  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.264116  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.1107    	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.105592  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.090558  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.0845765 	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.0827612 	 1000      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.0518147 	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.0503042 	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.0264744 	 900       
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.0112919 	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00582391	 6400      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.00422738	 1100      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00248528	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00104111	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000890487	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000766994	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000328406	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22838370854784 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22838153046016 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22837951719552 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22837750393088 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22837549066624 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22837347740160 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22837146413696 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22836945087232 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22836743760768 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22836542434304 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22836341107840 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22836139781376 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22835938454912 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22835737128448 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22835535801984 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22835334475520 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22835133149056 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22834931822592 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22834730496128 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22834529169664 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22834327843200 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22834126516736 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22833925190272 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22833723863808 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22833522537344 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22833321210880 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22833119884416 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22832918557952 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22832717231488 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22832515905024 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22832314578560 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22832113252096 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22831911921536 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22831710595072 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22831509268608 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22831307942144 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22831106615680 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22830905289216 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22830703962752 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22830502636288 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22830301309824 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22830099983360 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22829898656896 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22829697330432 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22829496003968 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22829294677504 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22829093351040 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22828892024576 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22828690698112 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22828489371648 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22828288045184 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22828086718720 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22827885392256 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22827684065792 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22827482739328 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22827281412864 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22827080086400 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22826878759936 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22826677433472 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22826476107008 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22826274780544 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22826073454080 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22825872127616 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22838265194240 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22838258603776 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3150, cols: 63, reductionFactor: 37, colBlockingSize: 12)                                	 0.457729  	 1300      	 72.9354   	 0         	 4.59913   	 15.8585   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 63, m: 63)                                                                               	 0.377084  	 700       	 4.33229   	 0         	 0.177764  	 24.3711   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 3150, m: 63)                                                                       	 0.0980357 	 700       	 0         	 0         	 22.6717   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3150, r: 63, r2: 63, leftOrthog: 1)                      	 0.0905334 	 600       	 165.716   	 0         	 31.9858   	 5.18092   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 63, m: 3150)                                                                                	 0.0881786 	 700       	 0         	 0         	 25.2061   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 63, n: 50, r2new: 63)	 0.0846764 	 700       	 139.003   	 0         	 22.2124   	 6.25791   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 3150, Xcols: 63, r: 63, streamingCols: 0)                                 	 0.0796241 	 700       	 109.912   	 0         	 28.0537   	 3.91791   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 63, reductionFactor: 37, colBlockingSize: 12)                                	 0.0688334 	 200       	 59.2194   	 0         	 3.75327   	 15.7781   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 63, n: 50, r: 63, r2: 63)                           	 0.0564254 	 700       	 310.202   	 0         	 39.7847   	 7.79703   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 63, m: 63)                                                                                	 0.055259  	 900       	 5.43      	 0         	 1.55964   	 3.48158   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 63)                                                                               	 0.0441204 	 100       	 3.23357   	 0         	 0.16047   	 20.1507   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                               	 0.0390344 	 100       	 2.98882   	 0         	 0.154735  	 19.3157   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3150, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                	 0.0232825 	 100       	 69.4756   	 0         	 5.49769   	 12.6372   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 63, r1_: 63, n: 50, r2: 63)                         	 0.0192228 	 600       	 780.47    	 0         	 100.098   	 7.79703   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 63, n: 50, r2new: 50)	 0.0110829 	 100       	 120.41    	 0         	 21.229    	 5.67197   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 63, r: 63, streamingCols: 0)                                 	 0.00996621	 100       	 99.5614   	 0         	 25.4447   	 3.91285   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3150, r: 50, r2: 50, leftOrthog: 1)                      	 0.00978121	 100       	 161.023   	 0         	 39.0545   	 4.12304   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 63, r2: 63, leftOrthog: 1)                      	 0.00898966	 100       	 220.754   	 0         	 42.7547   	 5.16326   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 63, reductionFactor: 37, colBlockingSize: 12)                                  	 0.00783014	 200       	 10.4117   	 0         	 1.45469   	 7.15738   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 63, n: 50, r: 63, r2: 50)                           	 0.00599817	 100       	 330.851   	 0         	 47.8946   	 6.90789   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 63, m: 2500)                                                                                	 0.00448655	 100       	 0         	 0         	 56.1679   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 63, r1_: 63, n: 50, r2: 50)                         	 0.00361927	 100       	 548.315   	 0         	 70.5046   	 7.77701   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 63)                                                                       	 0.00361841	 100       	 0         	 0         	 69.6439   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 63, r1_: 50, n: 50, r2: 63)                         	 0.00356525	 100       	 556.622   	 0         	 80.5777   	 6.90789   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 13, n: 50, r2: 13)                                                                                                       	 0.00311408	 800       	 0         	 0         	 34.7326   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 63, m: 63, fromLeft: 1)                              	 0.00214956	 800       	 0         	 0         	 23.6343   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 63) 	 0.00178818	 100       	 22.1958   	 0         	 4.59417   	 4.83129   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 63, r: 50, streamingCols: 0)                                   	 0.00170714	 100       	 7.32221   	 0         	 2.92888   	 2.5       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 63, leftOrthog: 1)                        	 0.00165436	 100       	 19.0406   	 0         	 6.9876    	 2.72491   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 63, n: 50, r2new: 1) 	 0.00109628	 100       	 0.574673  	 0         	 4.59884   	 0.12496   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 63, r2: 63)                            	 0.000877262	 100       	 45.243    	 0         	 9.36459   	 4.83129   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000851876	 100       	 0.58694   	 0         	 2.34776   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 63)                           	 0.000764452	 100       	 0         	 0         	 6.59296   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000734833	 100       	 34.0213   	 0         	 8.16512   	 4.16667   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 63, n: 50, r: 2, r2: 1)                             	 0.0005555 	 100       	 2.26823   	 0         	 13.6122   	 0.166631  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 63)                                                                                                        	 0.000481612	 100       	 0         	 0         	 10.4649   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                  	 0.000477136	 100       	 0         	 0         	 8.38335   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 13)                                                                                                        	 0.00036402	 100       	 0         	 0         	 2.85699   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 63)                                                                         	 0.000331941	 100       	 0         	 0         	 15.1834   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000324084	 100       	 0.771405  	 0         	 12.3425   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 13, n: 50, r2: 1)                                                                                                        	 0.000304892	 100       	 0         	 0         	 3.41104   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 63, m: 50, fromLeft: 1)                              	 0.000202367	 100       	 0         	 0         	 24.9052   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 1.86455   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 1.86452   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 1.10108   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 1.09983   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 1.00628   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 0.657909  	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 0.557675  	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.460239  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.29156   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.267378  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.110959  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.101986  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.0986438 	 1000      
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.0931423 	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.0912974 	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.0638563 	 1000      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.055259  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.0271422 	 900       
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.0107648 	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00518278	 6400      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0042646 	 1100      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00235192	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.0011726 	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000851876	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000764452	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000324084	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22732031989632 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22731852605440 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22731651278976 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22731449952512 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22731248626048 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22731047299584 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22730845973120 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22730644646656 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22730443320192 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22730241993728 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22730040667264 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22729839340800 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22729638014336 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22729436687872 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22729235361408 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22729034034944 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22728832708480 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22728631382016 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22728430055552 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22728228729088 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22728027402624 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22727826076160 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22727624749696 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22727423423232 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22727222096768 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22727020770304 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22726819443840 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22726618117376 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22726416790912 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22726215464448 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22726014137984 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22725812811520 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22725611480960 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22725410154496 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22725208828032 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22725007501568 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22724806175104 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22724604848640 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22724403522176 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22724202195712 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22724000869248 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22723799542784 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22723598216320 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22723396889856 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22723195563392 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22722994236928 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22722792910464 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22722591584000 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22722390257536 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22722188931072 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22721987604608 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22721786278144 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22721584951680 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22721383625216 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22721182298752 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22720980972288 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22720779645824 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22720578319360 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22720376992896 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22720175666432 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22719974339968 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22719773013504 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22719571687040 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22731926329088 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22731747743488 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3200, cols: 64, reductionFactor: 37, colBlockingSize: 12)                                	 0.472639  	 1300      	 74.0517   	 0         	 4.59657   	 16.1102   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 64, m: 64)                                                                               	 0.378386  	 700       	 4.52626   	 0         	 0.182806  	 24.7599   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 3200, m: 64)                                                                       	 0.121038  	 700       	 0         	 0         	 18.9508   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3200, r: 64, r2: 64, leftOrthog: 1)                      	 0.108228  	 600       	 145.329   	 0         	 27.6124   	 5.26316   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 64, m: 3200)                                                                                	 0.090469  	 700       	 0         	 0         	 25.3541   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 64, n: 50, r2new: 64)	 0.0855346 	 700       	 141.207   	 0         	 22.502    	 6.27531   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 3200, Xcols: 64, r: 64, streamingCols: 0)                                 	 0.0841966 	 700       	 108.972   	 0         	 27.3791   	 3.9801    
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 64, reductionFactor: 37, colBlockingSize: 12)                                	 0.0722504 	 200       	 58.224    	 0         	 3.63394   	 16.0223   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 64, m: 64)                                                                                	 0.0538877 	 900       	 5.83754   	 0         	 1.65037   	 3.53712   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 64, n: 50, r: 64, r2: 64)                           	 0.0535417 	 700       	 342.725   	 0         	 43.269    	 7.92079   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 64)                                                                               	 0.0445395 	 100       	 3.24805   	 0         	 0.160756  	 20.2048   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                               	 0.0380123 	 100       	 3.06918   	 0         	 0.158896  	 19.3157   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3200, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                	 0.0228182 	 100       	 72.0147   	 0         	 5.69722   	 12.6403   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 64, r1_: 64, n: 50, r2: 64)                         	 0.0204888 	 600       	 767.671   	 0         	 96.9184   	 7.92079   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 64, n: 50, r2new: 50)	 0.0119883 	 100       	 112.443   	 0         	 19.886    	 5.65436   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 64, r2: 64, leftOrthog: 1)                      	 0.0110153 	 100       	 185.924   	 0         	 35.4557   	 5.24384   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 64, r: 64, streamingCols: 0)                                 	 0.0104567 	 100       	 97.9279   	 0         	 24.6386   	 3.97456   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3200, r: 50, r2: 50, leftOrthog: 1)                      	 0.00963838	 100       	 166.003   	 0         	 40.2557   	 4.12371   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 64, reductionFactor: 37, colBlockingSize: 12)                                  	 0.00906174	 200       	 9.28454   	 0         	 1.28823   	 7.20721   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 64, n: 50, r: 64, r2: 50)                           	 0.00738645	 100       	 277.264   	 0         	 39.8568   	 6.95652   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 64)                                                                       	 0.0052937 	 100       	 0         	 0         	 48.3594   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 64, m: 2500)                                                                                	 0.00514024	 100       	 0         	 0         	 49.8032   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 64, r1_: 50, n: 50, r2: 64)                         	 0.00403657	 100       	 507.361   	 0         	 72.9331   	 6.95652   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 64, r1_: 64, n: 50, r2: 50)                         	 0.00381699	 100       	 536.549   	 0         	 67.9271   	 7.89889   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 14, n: 50, r2: 14)                                                                                                       	 0.00336936	 800       	 0         	 0         	 37.2297   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 64, m: 64, fromLeft: 1)                              	 0.00265097	 800       	 0         	 0         	 19.7772   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 64, leftOrthog: 1)                        	 0.00185209	 100       	 17.2778   	 0         	 6.30638   	 2.73973   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 64) 	 0.00177468	 100       	 23.0803   	 0         	 4.73146   	 4.87805   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 64, r: 50, streamingCols: 0)                                   	 0.00174292	 100       	 7.17186   	 0         	 2.86875   	 2.5       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000904781	 100       	 0.55262   	 0         	 2.21048   	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 64, r2: 64)                            	 0.000864637	 100       	 47.3725   	 0         	 9.71136   	 4.87805   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 64, n: 50, r2new: 1) 	 0.000819324	 100       	 0.781132  	 0         	 6.25101   	 0.124961  
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 64)                           	 0.000770978	 100       	 0         	 0         	 6.64092   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000701967	 100       	 35.6142   	 0         	 8.54741   	 4.16667   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                  	 0.000487738	 100       	 0         	 0         	 8.20112   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 64)                                                                                                        	 0.000474933	 100       	 0         	 0         	 10.7805   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 14)                                                                                                        	 0.000379841	 100       	 0         	 0         	 2.9486    	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 64)                                                                         	 0.000366782	 100       	 0         	 0         	 13.9592   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000350349	 100       	 0.713574  	 0         	 11.4172   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 14, n: 50, r2: 1)                                                                                                        	 0.000337238	 100       	 0         	 0         	 3.3211    	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 64, n: 50, r: 2, r2: 1)                             	 0.000272353	 100       	 4.69978   	 0         	 28.2046   	 0.166632  
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 64, m: 50, fromLeft: 1)                              	 0.000217027	 100       	 0         	 0         	 23.5915   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 1.94784   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 1.94781   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 1.14024   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 1.13889   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 1.04699   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 0.698748  	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 0.57677   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.460938  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.298394  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.279384  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.130734  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.126698  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.100117  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.0963962 	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.096097  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.0620652 	 1000      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.0538877 	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.0290443 	 900       
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.0116593 	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00507392	 6400      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.00456137	 1100      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.002868  	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00110742	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000904781	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000770978	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000350349	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23300996339584 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23300801554432 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23300600227968 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23300398901504 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23300197575040 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23299996248576 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23299794922112 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23299593595648 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23299392269184 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23299190942720 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23298989616256 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23298788289792 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23298586963328 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23298385636864 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23298184310400 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23297982983936 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23297781657472 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23297580331008 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23297379004544 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23297177678080 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23296976351616 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23296775025152 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23296573698688 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23296372372224 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23296171045760 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23295969719296 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23295768392832 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23295567066368 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23295365739904 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23295164413440 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23294963086976 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23294761760512 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23294560429952 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23294359103488 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23294157777024 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23293956450560 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23293755124096 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23293553797632 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23293352471168 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23293151144704 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23292949818240 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23292748491776 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23292547165312 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23292345838848 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23292144512384 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23291943185920 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23291741859456 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23291540532992 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23291339206528 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23291137880064 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23290936553600 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23290735227136 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23290533900672 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23290332574208 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23290131247744 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23289929921280 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23289728594816 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23289527268352 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23289325941888 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23289124615424 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23288923288960 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23288721962496 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23288520636032 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23300890679040 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23300884088576 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3250, cols: 65, reductionFactor: 37, colBlockingSize: 12)                                	 0.474836  	 1300      	 77.2185   	 0         	 4.71939   	 16.362    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 65, m: 65)                                                                               	 0.411001  	 700       	 4.36548   	 0         	 0.173586  	 25.1488   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3250, r: 65, r2: 65, leftOrthog: 1)                      	 0.0960841 	 600       	 171.49    	 0         	 32.0819   	 5.34539   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 3250, m: 65)                                                                       	 0.0950208 	 700       	 0         	 0         	 24.8998   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 65, n: 50, r2new: 65)	 0.0874282 	 700       	 141.816   	 0         	 22.5289   	 6.29487   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 3250, Xcols: 65, r: 65, streamingCols: 0)                                 	 0.0841075 	 700       	 114.281   	 0         	 28.2713   	 4.04229   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 65, reductionFactor: 37, colBlockingSize: 12)                                	 0.0747793 	 200       	 58.0266   	 0         	 3.5673    	 16.2663   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 65, m: 3250)                                                                                	 0.0656056 	 700       	 0         	 0         	 36.064    	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 65, m: 65)                                                                                	 0.0606421 	 900       	 5.43434   	 0         	 1.51261   	 3.59268   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 65, r1_: 65, n: 50, r2: 65)                         	 0.0509937 	 600       	 323.128   	 0         	 40.1673   	 8.04455   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 65, n: 50, r: 65, r2: 65)                           	 0.0466674 	 700       	 411.931   	 0         	 51.2062   	 8.04455   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 65)                                                                               	 0.0450866 	 100       	 3.253     	 0         	 0.16058   	 20.2578   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                               	 0.0411508 	 100       	 2.8351    	 0         	 0.146777  	 19.3157   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3250, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                	 0.025724  	 100       	 64.878    	 0         	 5.1314    	 12.6433   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 65, n: 50, r2new: 50)	 0.0123009 	 100       	 110.765   	 0         	 19.6409   	 5.63949   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 65, r2: 65, leftOrthog: 1)                      	 0.0118481 	 100       	 178.299   	 0         	 33.4872   	 5.32438   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3250, r: 50, r2: 50, leftOrthog: 1)                      	 0.0109756 	 100       	 148.056   	 0         	 35.8978   	 4.12437   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 65, r: 65, streamingCols: 0)                                 	 0.0102695 	 100       	 102.853   	 0         	 25.4823   	 4.03626   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 65, reductionFactor: 37, colBlockingSize: 12)                                  	 0.00940109	 200       	 9.23125   	 0         	 1.27219   	 7.25617   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 65, r1_: 65, n: 50, r2: 50)                         	 0.00714709	 100       	 295.575   	 0         	 36.8514   	 8.02073   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 65, n: 50, r: 65, r2: 50)                           	 0.00687773	 100       	 307.151   	 0         	 43.8517   	 7.00431   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 15, n: 50, r2: 15)                                                                                                       	 0.0041901 	 800       	 0         	 0         	 34.3668   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 65)                                                                       	 0.00413627	 100       	 0         	 0         	 62.8586   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 65, m: 2500)                                                                                	 0.00407216	 100       	 0         	 0         	 63.8481   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 65, r1_: 50, n: 50, r2: 65)                         	 0.00378599	 100       	 557.979   	 0         	 79.6622   	 7.00431   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.00349987	 100       	 0.142862  	 0         	 0.57145   	 0.25      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 65, m: 65, fromLeft: 1)                              	 0.00245089	 800       	 0         	 0         	 22.0655   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 65) 	 0.00179497	 100       	 23.5381   	 0         	 4.78003   	 4.92424   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 65, leftOrthog: 1)                        	 0.00158691	 100       	 20.48     	 0         	 7.43582   	 2.75424   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 65, r: 50, streamingCols: 0)                                   	 0.00141454	 100       	 8.83677   	 0         	 3.53471   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 65, n: 50, r2new: 1) 	 0.000977111	 100       	 0.665226  	 0         	 5.32345   	 0.124962  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 65, r2: 65)                            	 0.000884512	 100       	 47.7665   	 0         	 9.70026   	 4.92424   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000779056	 100       	 32.0901   	 0         	 7.70163   	 4.16667   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 65)                           	 0.000766128	 100       	 0         	 0         	 6.78738   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                  	 0.000481318	 100       	 0         	 0         	 8.31051   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 65)                                                                                                        	 0.000458217	 100       	 0         	 0         	 11.3483   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 65, n: 50, r: 2, r2: 1)                             	 0.000422215	 100       	 3.079     	 0         	 18.4778   	 0.166632  
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.00037004	 100       	 0.675603  	 0         	 10.8096   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 15)                                                                                                        	 0.000368695	 100       	 0         	 0         	 3.25472   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 65)                                                                         	 0.000327911	 100       	 0         	 0         	 15.858    	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 15, n: 50, r2: 1)                                                                                                        	 0.000310211	 100       	 0         	 0         	 3.86833   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 65, m: 50, fromLeft: 1)                              	 0.000201982	 100       	 0         	 0         	 25.7449   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 1.93586   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 1.93582   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 1.1812    	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 1.17723   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 1.07357   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 0.649928  	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 0.584741  	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.497239  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.302287  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.283558  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.120495  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.102501  	 1000      
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.0994849 	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.0957915 	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.0701591 	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.0627058 	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.0606421 	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.0548518 	 1000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.00944153	 1800      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.00532722	 1100      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00420241	 6400      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.00349987	 100       
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00265287	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.000834423	 4600      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000766128	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.00037004	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22735525189504 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22735342266368 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22735140939904 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22734939613440 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22734738286976 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22734536960512 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22734335634048 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22734134307584 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22733932981120 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22733731654656 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22733530328192 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22733329001728 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22733127675264 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22732926348800 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22732725022336 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22732523695872 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22732322369408 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22732121042944 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22731919716480 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22731718390016 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22731517063552 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22731315737088 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22731114410624 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22730913084160 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22730711757696 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22730510431232 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22730309104768 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22730107778304 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22729906451840 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22729705125376 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22729503798912 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22729302472448 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22729101141888 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22728899815424 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22728698488960 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22728497162496 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22728295836032 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22728094509568 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22727893183104 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22727691856640 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22727490530176 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22727289203712 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22727087877248 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22726886550784 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22726685224320 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22726483897856 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22726282571392 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22726081244928 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22725879918464 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22725678592000 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22725477265536 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22725275939072 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22725074612608 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22724873286144 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22724671959680 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22724470633216 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22724269306752 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22724067980288 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22723866653824 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22723665327360 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22723464000896 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22723262674432 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22723061347968 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22735419528960 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22735412938496 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3300, cols: 66, reductionFactor: 37, colBlockingSize: 12)                                	 0.479207  	 1300      	 80.1003   	 0         	 4.82135   	 16.6137   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 66, m: 66)                                                                               	 0.409424  	 700       	 4.58768   	 0         	 0.179643  	 25.5377   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3300, r: 66, r2: 66, leftOrthog: 1)                      	 0.0982253 	 600       	 175.614   	 0         	 32.3556   	 5.42763   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 3300, m: 66)                                                                       	 0.0926093 	 700       	 0         	 0         	 26.3403   	 0         
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 3300, Xcols: 66, r: 66, streamingCols: 0)                                 	 0.0859072 	 700       	 117.131   	 0         	 28.5373   	 4.10448   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 66, n: 50, r2new: 66)	 0.0769606 	 700       	 165.445   	 0         	 26.192    	 6.31661   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 66, reductionFactor: 37, colBlockingSize: 12)                                	 0.0725238 	 200       	 61.6864   	 0         	 3.73628   	 16.5101   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 66, m: 3300)                                                                                	 0.0657756 	 700       	 0         	 0         	 37.0861   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 66, m: 66)                                                                                	 0.0577833 	 900       	 5.9705    	 0         	 1.63654   	 3.64824   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 66, r1_: 66, n: 50, r2: 66)                         	 0.0527669 	 600       	 326.905   	 0         	 40.0211   	 8.16832   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 66, n: 50, r: 66, r2: 66)                           	 0.0486569 	 700       	 413.605   	 0         	 50.6352   	 8.16832   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 66)                                                                               	 0.0441374 	 100       	 3.36827   	 0         	 0.165846  	 20.3097   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                               	 0.03741   	 100       	 3.1186    	 0         	 0.161454  	 19.3157   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3300, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                	 0.0221301 	 100       	 76.5743   	 0         	 6.05511   	 12.6462   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3300, r: 50, r2: 50, leftOrthog: 1)                      	 0.0119646 	 100       	 137.906   	 0         	 33.4319   	 4.125     
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 66, n: 50, r2new: 50)	 0.0119435 	 100       	 115.376   	 0         	 20.5032   	 5.62725   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 66, r2: 66, leftOrthog: 1)                      	 0.0117213 	 100       	 185.815   	 0         	 34.3792   	 5.40487   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 66, r: 66, streamingCols: 0)                                 	 0.01039   	 100       	 104.813   	 0         	 25.5768   	 4.09795   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 66, reductionFactor: 37, colBlockingSize: 12)                                  	 0.00809122	 200       	 11.0582   	 0         	 1.51394   	 7.30429   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 66, r1_: 66, n: 50, r2: 50)                         	 0.00736412	 100       	 295.758   	 0         	 36.3227   	 8.14252   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 66, n: 50, r: 66, r2: 50)                           	 0.00695366	 100       	 313.216   	 0         	 44.4198   	 7.05128   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 16, n: 50, r2: 16)                                                                                                       	 0.00446467	 800       	 0         	 0         	 36.697    	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 66, m: 2500)                                                                                	 0.00411992	 100       	 0         	 0         	 64.0789   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 66)                                                                       	 0.00400536	 100       	 0         	 0         	 65.9117   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 66, r1_: 50, n: 50, r2: 66)                         	 0.00399495	 100       	 545.188   	 0         	 77.3175   	 7.05128   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 66, m: 66, fromLeft: 1)                              	 0.00240918	 800       	 0         	 0         	 23.1435   	 0         
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 66, r: 50, streamingCols: 0)                                   	 0.0018251 	 100       	 6.84894   	 0         	 2.73957   	 2.5       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 66, leftOrthog: 1)                        	 0.00174678	 100       	 18.8919   	 0         	 6.82398   	 2.76846   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 66) 	 0.00171477	 100       	 25.4027   	 0         	 5.11134   	 4.96988   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 66, n: 50, r2new: 1) 	 0.000936386	 100       	 0.704838  	 0         	 5.64041   	 0.124962  
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000833064	 100       	 0.600194  	 0         	 2.40078   	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 66, r2: 66)                            	 0.000830399	 100       	 52.4567   	 0         	 10.5549   	 4.96988   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000787919	 100       	 31.7291   	 0         	 7.615     	 4.16667   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 66)                           	 0.000729642	 100       	 0         	 0         	 7.23643   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                  	 0.000498036	 100       	 0         	 0         	 8.03155   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 66)                                                                                                        	 0.000489676	 100       	 0         	 0         	 10.7826   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 66, n: 50, r: 2, r2: 1)                             	 0.000378293	 100       	 3.48936   	 0         	 20.9404   	 0.166633  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 16)                                                                                                        	 0.000376715	 100       	 0         	 0         	 3.39779   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 66)                                                                         	 0.000328208	 100       	 0         	 0         	 16.0874   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000323217	 100       	 0.773474  	 0         	 12.3756   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 16, n: 50, r2: 1)                                                                                                        	 0.00031334	 100       	 0         	 0         	 4.08502   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 66, m: 50, fromLeft: 1)                              	 0.000204399	 100       	 0         	 0         	 25.8318   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 1.91776   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 1.91773   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 1.17655   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 1.17531   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 1.06694   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 0.647463  	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 0.581952  	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.490972  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.300966  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.282036  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.123658  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.0981222 	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.0969429 	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.0915553 	 1000      
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.0703936 	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.0649139 	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.0577833 	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.0568193 	 1000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.00889092	 1800      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0056444 	 1100      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00386756	 6400      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00261358	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.000920863	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000833064	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000729642	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000323217	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22440659097472 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22440465917952 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22440264591488 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22440063265024 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22439861938560 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22439660612096 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22439459285632 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22439257959168 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22439056632704 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22438855306240 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22438653979776 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22438452653312 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22438251326848 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22438050000384 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22437848673920 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22437647347456 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22437446020992 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22437244694528 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22437043368064 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22436842041600 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22436640715136 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22436439388672 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22436238062208 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22436036735744 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22435835409280 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22435634082816 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22435432756352 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22435231429888 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22435030103424 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22434828776960 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22434627450496 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22434426124032 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22434224793472 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22434023467008 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22433822140544 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22433620814080 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22433419487616 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22433218161152 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22433016834688 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22432815508224 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22432614181760 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22432412855296 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22432211528832 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22432010202368 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22431808875904 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22431607549440 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22431406222976 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22431204896512 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22431003570048 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22430802243584 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22430600917120 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22430399590656 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22430198264192 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22429996937728 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22429795611264 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22429594284800 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22429392958336 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22429191631872 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22428990305408 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22428788978944 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22428587652480 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22428386326016 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22428184999552 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22440553436928 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22440546846464 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3350, cols: 67, reductionFactor: 37, colBlockingSize: 12)                                	 0.497701  	 1300      	 80.6828   	 0         	 4.78393   	 16.8654   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 67, m: 67)                                                                               	 0.411586  	 700       	 4.77418   	 0         	 0.184142  	 25.9266   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 3350, m: 67)                                                                       	 0.104674  	 700       	 0         	 0         	 24.016    	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3350, r: 67, r2: 67, leftOrthog: 1)                      	 0.101815  	 600       	 177.24    	 0         	 32.1678   	 5.50987   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 3350, Xcols: 67, r: 67, streamingCols: 0)                                 	 0.0909516 	 700       	 115.74    	 0         	 27.7775   	 4.16667   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 67, n: 50, r2new: 67)	 0.0803684 	 700       	 162.756   	 0         	 25.669    	 6.34055   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 67, reductionFactor: 37, colBlockingSize: 12)                                	 0.076825  	 200       	 60.0107   	 0         	 3.58194   	 16.7537   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 67, m: 3350)                                                                                	 0.0725983 	 700       	 0         	 0         	 34.6267   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 67, m: 67)                                                                                	 0.0629367 	 900       	 5.73456   	 0         	 1.5483    	 3.70378   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 67, r1_: 67, n: 50, r2: 67)                         	 0.0550632 	 600       	 327.728   	 0         	 39.5231   	 8.29208   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 67, n: 50, r: 67, r2: 67)                           	 0.0501703 	 700       	 419.639   	 0         	 50.6072   	 8.29208   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 67)                                                                               	 0.0445367 	 100       	 3.38298   	 0         	 0.166155  	 20.3604   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                               	 0.0392406 	 100       	 2.97311   	 0         	 0.153922  	 19.3157   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3350, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                	 0.021957  	 100       	 78.3474   	 0         	 6.19393   	 12.649    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3350, r: 50, r2: 50, leftOrthog: 1)                      	 0.0136238 	 100       	 122.947   	 0         	 29.8008   	 4.12562   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 67, r2: 67, leftOrthog: 1)                      	 0.0119287 	 100       	 188.16    	 0         	 34.3024   	 5.48533   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 67, n: 50, r2new: 50)	 0.0116562 	 100       	 119.636   	 0         	 21.2968   	 5.61755   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 67, r: 67, streamingCols: 0)                                 	 0.0111987 	 100       	 100.213   	 0         	 24.0917   	 4.15963   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 67, reductionFactor: 37, colBlockingSize: 12)                                  	 0.00978453	 200       	 9.4237    	 0         	 1.28186   	 7.35158   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 67, r1_: 67, n: 50, r2: 50)                         	 0.00754018	 100       	 297.672   	 0         	 36.0192   	 8.26426   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 67, n: 50, r: 67, r2: 50)                           	 0.00699177	 100       	 321.02    	 0         	 45.2303   	 7.09746   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 17, n: 50, r2: 17)                                                                                                       	 0.00480008	 800       	 0         	 0         	 38.5327   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 67, m: 2500)                                                                                	 0.00435509	 100       	 0         	 0         	 61.5371   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 67)                                                                       	 0.00398898	 100       	 0         	 0         	 67.1851   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 67, r1_: 50, n: 50, r2: 67)                         	 0.00393265	 100       	 570.735   	 0         	 80.4141   	 7.09746   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 67, m: 67, fromLeft: 1)                              	 0.0024873 	 800       	 0         	 0         	 23.1011   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 67) 	 0.00187166	 100       	 23.9841   	 0         	 4.7825    	 5.01497   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 67, r: 50, streamingCols: 0)                                   	 0.00174268	 100       	 7.17287   	 0         	 2.86915   	 2.5       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 67, leftOrthog: 1)                        	 0.00169576	 100       	 19.7551   	 0         	 7.10004   	 2.78239   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 67, n: 50, r2new: 1) 	 0.00116342	 100       	 0.57589   	 0         	 4.60849   	 0.124963  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 67, r2: 67)                            	 0.000930419	 100       	 48.2471   	 0         	 9.62061   	 5.01497   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 67)                           	 0.000791894	 100       	 0         	 0         	 6.76858   	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.00078529	 100       	 0.636707  	 0         	 2.54683   	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000739494	 100       	 33.8069   	 0         	 8.11366   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 17)                                                                                                        	 0.000640721	 100       	 0         	 0         	 2.12261   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 67, n: 50, r: 2, r2: 1)                             	 0.000589128	 100       	 2.27455   	 0         	 13.65     	 0.166634  
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                  	 0.000493086	 100       	 0         	 0         	 8.11218   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 67)                                                                                                        	 0.000468155	 100       	 0         	 0         	 11.4492   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 17, n: 50, r2: 1)                                                                                                        	 0.000365113	 100       	 0         	 0         	 3.72487   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 67)                                                                         	 0.000327141	 100       	 0         	 0         	 16.3844   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000326521	 100       	 0.765648  	 0         	 12.2504   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 67, m: 50, fromLeft: 1)                              	 0.000205025	 100       	 0         	 0         	 26.1432   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 2.01531   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 2.01528   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 1.22276   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 1.22157   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 1.10467   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 0.691302  	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 0.606268  	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.495363  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.312636  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.294653  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.129064  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.10899   	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.103893  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.0950597 	 1000      
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.0774465 	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.0672756 	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.0629367 	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.0586817 	 1000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.0116635 	 1800      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.00627407	 1100      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00448067	 6400      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00269232	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.000967253	 4600      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000791894	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.00078529	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000326521	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23075609925504 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23075382880256 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23075181553792 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23074980227328 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23074778900864 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23074577574400 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23074376247936 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23074174921472 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23073973595008 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23073772268544 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23073570942080 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23073369615616 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23073168289152 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23072966962688 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23072765636224 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23072564309760 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23072362983296 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23072161656832 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23071960330368 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23071759003904 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23071557677440 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23071356350976 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23071155024512 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23070953698048 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23070752371584 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23070551045120 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23070349718656 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23070148392192 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23069947065728 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23069745739264 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23069544412800 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23069343086336 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23069141755776 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23068940429312 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23068739102848 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23068537776384 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23068336449920 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23068135123456 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23067933796992 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23067732470528 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23067531144064 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23067329817600 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23067128491136 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23066927164672 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23066725838208 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23066524511744 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23066323185280 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23066121858816 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23065920532352 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23065719205888 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23065517879424 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23065316552960 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23065115226496 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23064913900032 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23064712573568 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23064511247104 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23064309920640 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23064108594176 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23063907267712 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23063705941248 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23063504614784 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23063303288320 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23063101961856 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23075504264960 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23075497674496 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3400, cols: 68, reductionFactor: 37, colBlockingSize: 12)                                	 0.496132  	 1300      	 84.6165   	 0         	 4.94338   	 17.1171   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 68, m: 68)                                                                               	 0.420734  	 700       	 4.88263   	 0         	 0.185542  	 26.3154   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3400, r: 68, r2: 68, leftOrthog: 1)                      	 0.101241  	 600       	 186.347   	 0         	 33.3233   	 5.59211   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 3400, Xcols: 68, r: 68, streamingCols: 0)                                 	 0.0906648 	 700       	 121.382   	 0         	 28.7034   	 4.22886   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 3400, m: 68)                                                                       	 0.0836104 	 700       	 0         	 0         	 30.9703   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 68, n: 50, r2new: 68)	 0.0783282 	 700       	 171.614   	 0         	 26.955    	 6.3667    
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 68, reductionFactor: 37, colBlockingSize: 12)                                	 0.0753105 	 200       	 63.0586   	 0         	 3.70995   	 16.9971   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 68, m: 3400)                                                                                	 0.0733846 	 700       	 0         	 0         	 35.2859   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 68, m: 68)                                                                                	 0.0616338 	 900       	 6.12193   	 0         	 1.62846   	 3.75934   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 68, r1_: 68, n: 50, r2: 68)                         	 0.0521561 	 600       	 361.72    	 0         	 42.9809   	 8.41584   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 68, n: 50, r: 68, r2: 68)                           	 0.0477705 	 700       	 460.75    	 0         	 54.7479   	 8.41584   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 68)                                                                               	 0.0450066 	 100       	 3.3921    	 0         	 0.166198  	 20.41     
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                               	 0.0392683 	 100       	 2.97102   	 0         	 0.153814  	 19.3157   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3400, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                	 0.022459  	 100       	 77.7391   	 0         	 6.14452   	 12.6518   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 68, n: 50, r2new: 50)	 0.0115448 	 100       	 122.306   	 0         	 21.8002   	 5.6103    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 68, r2: 68, leftOrthog: 1)                      	 0.0114145 	 100       	 202.55    	 0         	 36.3922   	 5.56574   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 68, r: 68, streamingCols: 0)                                 	 0.0107668 	 100       	 107.367   	 0         	 25.4347   	 4.2213    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3400, r: 50, r2: 50, leftOrthog: 1)                      	 0.00960769	 100       	 176.942   	 0         	 42.8823   	 4.12621   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 68, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0088425 	 200       	 10.7412   	 0         	 1.4519    	 7.39808   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 68, r1_: 68, n: 50, r2: 50)                         	 0.00737169	 100       	 313.632   	 0         	 37.3997   	 8.38595   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 68, n: 50, r: 68, r2: 50)                           	 0.00642559	 100       	 359.811   	 0         	 50.3735   	 7.14286   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 18, n: 50, r2: 18)                                                                                                       	 0.00548226	 800       	 0         	 0         	 37.8238   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 68, m: 2500)                                                                                	 0.00465998	 100       	 0         	 0         	 58.3693   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 68)                                                                       	 0.0043502 	 100       	 0         	 0         	 62.5259   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 68, r1_: 50, n: 50, r2: 68)                         	 0.00379334	 100       	 609.489   	 0         	 85.3285   	 7.14286   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 68, m: 68, fromLeft: 1)                              	 0.00259153	 800       	 0         	 0         	 22.8387   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 68) 	 0.00188908	 100       	 24.4775   	 0         	 4.83791   	 5.05952   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 68, leftOrthog: 1)                        	 0.00171732	 100       	 19.7983   	 0         	 7.0808    	 2.79605   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 68, r: 50, streamingCols: 0)                                   	 0.00167767	 100       	 7.45081   	 0         	 2.98033   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 68, n: 50, r2new: 1) 	 0.00102847	 100       	 0.661174  	 0         	 5.29095   	 0.124963  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 68, r2: 68)                            	 0.000949266	 100       	 48.7113   	 0         	 9.62765   	 5.05952   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000818182	 100       	 0.611111  	 0         	 2.44444   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 68)                           	 0.000780808	 100       	 0         	 0         	 6.96714   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.00072251	 100       	 34.6016   	 0         	 8.30438   	 4.16667   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                  	 0.000488478	 100       	 0         	 0         	 8.1887    	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 68)                                                                                                        	 0.000488218	 100       	 0         	 0         	 11.1426   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 68, n: 50, r: 2, r2: 1)                             	 0.000474351	 100       	 2.86708   	 0         	 17.2058   	 0.166634  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 18)                                                                                                        	 0.000384316	 100       	 0         	 0         	 3.74692   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.00036146	 100       	 0.691639  	 0         	 11.0662   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 68)                                                                         	 0.000347984	 100       	 0         	 0         	 15.6329   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 18, n: 50, r2: 1)                                                                                                        	 0.000321568	 100       	 0         	 0         	 4.47806   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 68, m: 50, fromLeft: 1)                              	 0.00020139	 100       	 0         	 0         	 27.0123   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 1.98992   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 1.9899    	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 1.22517   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 1.22391   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 1.11982   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 0.66596   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 0.602744  	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.505009  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.3125    	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.291225  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.12398   	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.103109  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.0927906 	 1000      
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.0883086 	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.078533  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.0640436 	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.0616338 	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.0556197 	 1000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.00781249	 1800      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.00667636	 1100      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.0041789 	 6400      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00279292	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00104258	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000818182	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000780808	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.00036146	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22767999616896 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22767822956544 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22767621630080 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22767420303616 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22767218977152 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22767017650688 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22766816324224 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22766614997760 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22766413671296 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22766212344832 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22766011018368 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22765809691904 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22765608365440 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22765407038976 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22765205712512 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22765004386048 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22764803059584 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22764601733120 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22764400406656 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22764199080192 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22763997753728 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22763796427264 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22763595100800 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22763393774336 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22763192447872 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22762991121408 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22762789794944 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22762588468480 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22762387142016 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22762185815552 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22761984489088 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22761783162624 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22761581832064 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22761380505600 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22761179179136 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22760977852672 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22760776526208 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22760575199744 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22760373873280 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22760172546816 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22759971220352 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22759769893888 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22759568567424 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22759367240960 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22759165914496 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22758964588032 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22758763261568 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22758561935104 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22758360608640 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22758159282176 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22757957955712 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22757756629248 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22757555302784 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22757353976320 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22757152649856 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22756951323392 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22756749996928 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22756548670464 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22756347344000 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22756146017536 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22755944691072 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22755743364608 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22755542038144 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22767893956352 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22767715378944 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3450, cols: 69, reductionFactor: 37, colBlockingSize: 12)                                	 0.512015  	 1300      	 85.6623   	 0         	 4.93195   	 17.3688   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 69, m: 69)                                                                               	 0.432955  	 700       	 4.95724   	 0         	 0.185634  	 26.7043   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3450, r: 69, r2: 69, leftOrthog: 1)                      	 0.0947561 	 600       	 208.014   	 0         	 36.6586   	 5.67434   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 3450, Xcols: 69, r: 69, streamingCols: 0)                                 	 0.0943652 	 700       	 121.844   	 0         	 28.3949   	 4.29104   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 69, reductionFactor: 37, colBlockingSize: 12)                                	 0.0818381 	 200       	 59.7482   	 0         	 3.46559   	 17.2404   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 69, n: 50, r2new: 69)	 0.0815877 	 700       	 169.371   	 0         	 26.4846   	 6.39508   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 69, m: 69)                                                                                	 0.0668482 	 900       	 5.8971    	 0         	 1.54581   	 3.8149    
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 69, m: 3450)                                                                                	 0.0646354 	 700       	 0         	 0         	 41.2492   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 69, r1_: 69, n: 50, r2: 69)                         	 0.0592173 	 600       	 332.851   	 0         	 38.9774   	 8.5396    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 69, n: 50, r: 69, r2: 69)                           	 0.051053  	 700       	 450.427   	 0         	 52.7456   	 8.5396    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 69)                                                                               	 0.047215  	 100       	 3.27579   	 0         	 0.160119  	 20.4586   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 3450, m: 69)                                                                       	 0.0428288 	 700       	 0         	 0         	 62.2515   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                               	 0.03934   	 100       	 2.9656    	 0         	 0.153533  	 19.3157   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3450, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                	 0.0224781 	 100       	 78.8155   	 0         	 6.22829   	 12.6544   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 69, n: 50, r2new: 50)	 0.0124734 	 100       	 114.684   	 0         	 20.4596   	 5.60541   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 69, r2: 69, leftOrthog: 1)                      	 0.0117437 	 100       	 202.705   	 0         	 35.9017   	 5.64611   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 69, r: 69, streamingCols: 0)                                 	 0.0112341 	 100       	 105.95    	 0         	 24.7377   	 4.28295   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 69, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0104628 	 200       	 9.34675   	 0         	 1.25564   	 7.44379   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3450, r: 50, r2: 50, leftOrthog: 1)                      	 0.0100151 	 100       	 172.239   	 0         	 41.7368   	 4.12679   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 69, r1_: 69, n: 50, r2: 50)                         	 0.00791023	 100       	 300.939   	 0         	 35.373    	 8.5076    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 69, n: 50, r: 69, r2: 50)                           	 0.00719157	 100       	 331.013   	 0         	 46.0539   	 7.1875    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 19, n: 50, r2: 19)                                                                                                       	 0.00551202	 800       	 0         	 0         	 41.9157   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 69)                                                                       	 0.00448756	 100       	 0         	 0         	 61.5034   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 69, m: 2500)                                                                                	 0.00425939	 100       	 0         	 0         	 64.798    	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 69, r1_: 50, n: 50, r2: 69)                         	 0.0034749 	 100       	 685.056   	 0         	 95.3121   	 7.1875    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 69, m: 69, fromLeft: 1)                              	 0.00266684	 800       	 0         	 0         	 22.8513   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 69) 	 0.0020283 	 100       	 23.4729   	 0         	 4.59932   	 5.10355   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 69, leftOrthog: 1)                        	 0.0017479 	 100       	 19.738    	 0         	 7.02559   	 2.80945   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 69, r: 50, streamingCols: 0)                                   	 0.00150627	 100       	 8.29866   	 0         	 3.31946   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 69, n: 50, r2new: 1) 	 0.00128071	 100       	 0.538766  	 0         	 4.31138   	 0.124964  
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.00107431	 100       	 0.465415  	 0         	 1.86166   	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 69, r2: 69)                            	 0.000963138	 100       	 49.4322   	 0         	 9.68584   	 5.10355   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 69)                           	 0.000905045	 100       	 0         	 0         	 6.09914   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000737915	 100       	 33.8792   	 0         	 8.13102   	 4.16667   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 69, n: 50, r: 2, r2: 1)                             	 0.000726465	 100       	 1.89961   	 0         	 11.3999   	 0.166634  
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                  	 0.000489777	 100       	 0         	 0         	 8.16698   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 69)                                                                         	 0.000459154	 100       	 0         	 0         	 12.0221   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 69)                                                                                                        	 0.000454894	 100       	 0         	 0         	 12.1347   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 19)                                                                                                        	 0.000372865	 100       	 0         	 0         	 4.07654   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000318228	 100       	 0.7856    	 0         	 12.5696   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 19, n: 50, r2: 1)                                                                                                        	 0.000317976	 100       	 0         	 0         	 4.78023   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 69, m: 50, fromLeft: 1)                              	 0.000214539	 100       	 0         	 0         	 25.7296   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 1.97481   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 1.97478   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 1.24062   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 1.23915   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 1.14105   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 0.634552  	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 0.626794  	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.51951   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.324916  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.302904  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.118263  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.107105  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.0973701 	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.0713403 	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.0693845 	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.0668482 	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.0599342 	 1000      
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.0477756 	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.00665775	 1100      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00355317	 6400      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00288138	 900       
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.00273603	 1800      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.00107431	 100       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00100043	 4600      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000905045	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000318228	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23084476278656 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23084241250304 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23084039923840 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23083838597376 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23083637270912 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23083435944448 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23083234617984 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23083033291520 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23082831965056 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23082630638592 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23082429312128 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23082227985664 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23082026659200 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23081825332736 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23081624006272 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23081422679808 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23081221353344 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23081020026880 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23080818700416 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23080617373952 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23080416047488 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23080214721024 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23080013394560 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23079812068096 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23079610741632 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23079409415168 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23079208088704 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23079006762240 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23078805435776 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23078604109312 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23078402782848 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23078201456384 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23078000125824 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23077798799360 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23077597472896 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23077396146432 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23077194819968 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23076993493504 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23076792167040 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23076590840576 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23076389514112 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23076188187648 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23075986861184 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23075785534720 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23075584208256 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23075382881792 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23075181555328 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23074980228864 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23074778902400 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23074577575936 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23074376249472 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23074174923008 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23073973596544 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23073772270080 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23073570943616 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23073369617152 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23073168290688 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23072966964224 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23072765637760 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23072564311296 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23072362984832 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23072161658368 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23071960331904 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23084370618112 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23084364027648 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3500, cols: 70, reductionFactor: 37, colBlockingSize: 12)                                	 0.529882  	 1300      	 86.4252   	 0         	 4.90479   	 17.6206   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 70, m: 70)                                                                               	 0.440587  	 700       	 5.08624   	 0         	 0.187731  	 27.0932   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3500, r: 70, r2: 70, leftOrthog: 1)                      	 0.100779  	 600       	 204.209   	 0         	 35.4741   	 5.75658   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 3500, Xcols: 70, r: 70, streamingCols: 0)                                 	 0.0965711 	 700       	 124.313   	 0         	 28.5564   	 4.35323   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 3500, m: 70)                                                                       	 0.0953608 	 700       	 0         	 0         	 28.7749   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 70, reductionFactor: 37, colBlockingSize: 12)                                	 0.0842863 	 200       	 59.7064   	 0         	 3.41503   	 17.4834   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 70, n: 50, r2new: 70)	 0.0829388 	 700       	 171.331   	 0         	 26.6635   	 6.42568   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 70, m: 3500)                                                                                	 0.0779016 	 700       	 0         	 0         	 35.2239   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 70, m: 70)                                                                                	 0.0657672 	 900       	 6.25843   	 0         	 1.61698   	 3.87045   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 70, r1_: 70, n: 50, r2: 70)                         	 0.057692  	 600       	 356.722   	 0         	 41.1759   	 8.66337   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 70, n: 50, r: 70, r2: 70)                           	 0.0513324 	 700       	 467.736   	 0         	 53.9901   	 8.66337   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 70)                                                                               	 0.0450754 	 100       	 3.47566   	 0         	 0.169494  	 20.5061   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                               	 0.0418372 	 100       	 2.78859   	 0         	 0.144369  	 19.3157   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3500, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                	 0.022051  	 100       	 81.5063   	 0         	 6.43961   	 12.657    
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 70, n: 50, r2new: 50)	 0.0130783 	 100       	 110.871   	 0         	 19.7885   	 5.60278   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 70, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0117515 	 200       	 8.56473   	 0         	 1.14368   	 7.48874   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 70, r2: 70, leftOrthog: 1)                      	 0.0115409 	 100       	 212.288   	 0         	 37.0715   	 5.72644   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3500, r: 50, r2: 50, leftOrthog: 1)                      	 0.0114466 	 100       	 152.884   	 0         	 37.0415   	 4.12736   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 70, r: 70, streamingCols: 0)                                 	 0.011384  	 100       	 107.607   	 0         	 24.7681   	 4.34459   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 70, r1_: 70, n: 50, r2: 50)                         	 0.00782415	 100       	 313.133   	 0         	 36.2876   	 8.62919   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 70, n: 50, r: 70, r2: 50)                           	 0.00758038	 100       	 323.203   	 0         	 44.6943   	 7.2314    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 20, n: 50, r2: 20)                                                                                                       	 0.00606034	 800       	 0         	 0         	 42.2418   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 70)                                                                       	 0.00475297	 100       	 0         	 0         	 58.9105   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 70, m: 2500)                                                                                	 0.00434788	 100       	 0         	 0         	 64.3992   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 70, r1_: 50, n: 50, r2: 70)                         	 0.00417647	 100       	 586.62    	 0         	 81.1212   	 7.2314    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 70, m: 70, fromLeft: 1)                              	 0.00274045	 800       	 0         	 0         	 22.8868   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 70) 	 0.00183995	 100       	 26.6311   	 0         	 5.17404   	 5.14706   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 70, leftOrthog: 1)                        	 0.00165686	 100       	 21.1243   	 0         	 7.48404   	 2.82258   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 70, r: 50, streamingCols: 0)                                   	 0.00152474	 100       	 8.19814   	 0         	 3.27925   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 70, n: 50, r2new: 1) 	 0.000939307	 100       	 0.74523   	 0         	 5.96355   	 0.124964  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 70, r2: 70)                            	 0.000925738	 100       	 52.9307   	 0         	 10.2837   	 5.14706   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000794059	 100       	 0.629676  	 0         	 2.5187    	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 70)                           	 0.0007699 	 100       	 0         	 0         	 7.27367   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000737533	 100       	 33.8968   	 0         	 8.13523   	 4.16667   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                  	 0.000476134	 100       	 0         	 0         	 8.401     	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 70)                                                                                                        	 0.000467382	 100       	 0         	 0         	 11.9816   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 70)                                                                         	 0.000439729	 100       	 0         	 0         	 12.7351   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 70, n: 50, r: 2, r2: 1)                             	 0.000396874	 100       	 3.52757   	 0         	 21.1694   	 0.166635  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 20)                                                                                                        	 0.000395441	 100       	 0         	 0         	 4.04612   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000334182	 100       	 0.748095  	 0         	 11.9695   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 20, n: 50, r2: 1)                                                                                                        	 0.000317979	 100       	 0         	 0         	 5.03178   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 70, m: 50, fromLeft: 1)                              	 0.000201819	 100       	 0         	 0         	 27.7476   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 2.11647   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 2.11643   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 1.28831   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 1.2871    	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 1.1642    	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 0.725008  	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 0.647971  	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.5275    	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.340775  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.308206  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.125423  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.10948   	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.100554  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.0987963 	 1000      
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.0827256 	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.0704301 	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.0657672 	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.0602354 	 1000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.00955782	 1800      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.00724114	 1100      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00429092	 6400      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00294227	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00102891	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000794059	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.0007699 	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000334182	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22535264446336 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22535089416192 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22534888089728 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22534686763264 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22534485436800 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22534284110336 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22534082783872 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22533881457408 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22533680130944 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22533478804480 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22533277478016 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22533076151552 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22532874825088 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22532673498624 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22532472172160 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22532270845696 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22532069519232 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22531868192768 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22531666866304 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22531465539840 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22531264213376 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22531062886912 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22530861560448 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22530660233984 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22530458907520 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22530257581056 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22530056254592 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22529854928128 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22529653601664 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22529452275200 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22529250948736 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22529049622272 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22528848291712 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22528646965248 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22528445638784 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22528244312320 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22528042985856 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22527841659392 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22527640332928 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22527439006464 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22527237680000 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22527036353536 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22526835027072 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22526633700608 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22526432374144 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22526231047680 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22526029721216 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22525828394752 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22525627068288 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22525425741824 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22525224415360 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22525023088896 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22524821762432 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22524620435968 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22524419109504 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22524217783040 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22524016456576 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22523815130112 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22523613803648 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22523412477184 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22523211150720 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22523009824256 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22522808497792 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22535158785792 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22534980224768 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3550, cols: 71, reductionFactor: 37, colBlockingSize: 12)                                	 0.535356  	 1300      	 89.2602   	 0         	 4.99434   	 17.8723   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 71, m: 71)                                                                               	 0.459313  	 700       	 5.09097   	 0         	 0.185247  	 27.4821   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3550, r: 71, r2: 71, leftOrthog: 1)                      	 0.118083  	 600       	 181.861   	 0         	 31.1469   	 5.83882   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 3550, Xcols: 71, r: 71, streamingCols: 0)                                 	 0.097966  	 700       	 127.87    	 0         	 28.9598   	 4.41542   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 3550, m: 71)                                                                       	 0.0972245 	 700       	 0         	 0         	 29.0355   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 71, m: 3550)                                                                                	 0.0876317 	 700       	 0         	 0         	 32.2139   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 71, n: 50, r2new: 71)	 0.0869402 	 700       	 168.124   	 0         	 26.0316   	 6.45848   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 71, reductionFactor: 37, colBlockingSize: 12)                                	 0.0812446 	 200       	 63.7242   	 0         	 3.59489   	 17.7263   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 71, m: 71)                                                                                	 0.0700588 	 900       	 6.13046   	 0         	 1.5615    	 3.92601   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 71, r1_: 71, n: 50, r2: 71)                         	 0.0616226 	 600       	 348.487   	 0         	 39.6588   	 8.78713   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 71, n: 50, r: 71, r2: 71)                           	 0.0546379 	 700       	 458.542   	 0         	 52.1834   	 8.78713   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 71)                                                                               	 0.0459213 	 100       	 3.45519   	 0         	 0.168114  	 20.5527   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                               	 0.040096  	 100       	 2.90968   	 0         	 0.150639  	 19.3157   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3550, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                	 0.0223701 	 100       	 81.4915   	 0         	 6.43716   	 12.6595   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 71, n: 50, r2new: 50)	 0.0133882 	 100       	 109.835   	 0         	 19.6053   	 5.60233   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3550, r: 50, r2: 50, leftOrthog: 1)                      	 0.0132705 	 100       	 133.755   	 0         	 32.4026   	 4.12791   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 71, r2: 71, leftOrthog: 1)                      	 0.0132666 	 100       	 189.989   	 0         	 32.7188   	 5.80673   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 71, r: 71, streamingCols: 0)                                 	 0.0116807 	 100       	 107.892   	 0         	 24.4863   	 4.40622   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 71, reductionFactor: 37, colBlockingSize: 12)                                  	 0.00912908	 200       	 11.3423   	 0         	 1.50569   	 7.53295   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 71, r1_: 71, n: 50, r2: 50)                         	 0.0081008 	 100       	 311.142   	 0         	 35.5561   	 8.75074   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 71, n: 50, r: 71, r2: 50)                           	 0.00805647	 100       	 312.854   	 0         	 43.0064   	 7.27459   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 21, n: 50, r2: 21)                                                                                                       	 0.00627725	 800       	 0         	 0         	 44.9624   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 71, m: 2500)                                                                                	 0.00461895	 100       	 0         	 0         	 61.4858   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 71, r1_: 50, n: 50, r2: 71)                         	 0.00418719	 100       	 601.956   	 0         	 82.7477   	 7.27459   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 71)                                                                       	 0.00401271	 100       	 0         	 0         	 70.7752   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 71, m: 71, fromLeft: 1)                              	 0.00284968	 800       	 0         	 0         	 22.6428   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 71) 	 0.00188675	 100       	 26.718    	 0         	 5.14791   	 5.19006   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 71, r: 50, streamingCols: 0)                                   	 0.00173471	 100       	 7.20582   	 0         	 2.88233   	 2.5       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 71, leftOrthog: 1)                        	 0.00173137	 100       	 20.504    	 0         	 7.23127   	 2.83546   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 71, r2: 71)                            	 0.000972753	 100       	 51.822    	 0         	 9.98486   	 5.19006   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 71, n: 50, r2new: 1) 	 0.000940601	 100       	 0.754837  	 0         	 6.04039   	 0.124965  
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000782398	 100       	 0.639061  	 0         	 2.55624   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 71)                           	 0.000765128	 100       	 0         	 0         	 7.42359   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000750919	 100       	 33.2925   	 0         	 7.99021   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 21)                                                                                                        	 0.000612071	 100       	 0         	 0         	 2.74478   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                  	 0.000492257	 100       	 0         	 0         	 8.12584   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 71)                                                                                                        	 0.000466665	 100       	 0         	 0         	 12.1715   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 71, n: 50, r: 2, r2: 1)                             	 0.000371351	 100       	 3.82388   	 0         	 22.9476   	 0.166635  
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 71)                                                                         	 0.000355709	 100       	 0         	 0         	 15.9681   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 21, n: 50, r2: 1)                                                                                                        	 0.000341353	 100       	 0         	 0         	 4.92159   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000330765	 100       	 0.755824  	 0         	 12.0932   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 71, m: 50, fromLeft: 1)                              	 0.000229959	 100       	 0         	 0         	 24.7001   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 2.18363   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 2.18359   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 1.3335    	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 1.33231   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 1.20394   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 0.738648  	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 0.648099  	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.545331  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.336357  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.312765  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.146351  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.111381  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.103156  	 1000      
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.101593  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.0927429 	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.0746615 	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.0700588 	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.0640384 	 1000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.00982192	 1800      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.00769734	 1100      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00465125	 6400      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00307964	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00097423	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000782398	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000765128	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000330765	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23046356252544 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23046123415552 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23045922089088 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23045720762624 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23045519436160 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23045318109696 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23045116783232 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23044915456768 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23044714130304 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23044512803840 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23044311477376 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23044110150912 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23043908824448 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23043707497984 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23043506171520 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23043304845056 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23043103518592 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23042902192128 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23042700865664 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23042499539200 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23042298212736 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23042096886272 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23041895559808 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23041694233344 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23041492906880 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23041291580416 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23041090253952 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23040888927488 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23040687601024 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23040486274560 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23040284948096 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23040083621632 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23039882291072 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23039680964608 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23039479638144 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23039278311680 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23039076985216 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23038875658752 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23038674332288 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23038473005824 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23038271679360 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23038070352896 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23037869026432 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23037667699968 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23037466373504 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23037265047040 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23037063720576 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23036862394112 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23036661067648 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23036459741184 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23036258414720 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23036057088256 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23035855761792 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23035654435328 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23035453108864 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23035251782400 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23035050455936 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23034849129472 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23034647803008 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23034446476544 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23034245150080 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23034043823616 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23033842497152 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23046250592000 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23046244001536 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3600, cols: 72, reductionFactor: 37, colBlockingSize: 12)                                	 0.572374  	 1300      	 87.0648   	 0         	 4.80384   	 18.124    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 72, m: 72)                                                                               	 0.476261  	 700       	 5.1202    	 0         	 0.183711  	 27.871    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3600, r: 72, r2: 72, leftOrthog: 1)                      	 0.130514  	 600       	 171.59    	 0         	 28.9796   	 5.92105   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 3600, m: 72)                                                                       	 0.114788  	 700       	 0         	 0         	 25.2904   	 0         
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 3600, Xcols: 72, r: 72, streamingCols: 0)                                 	 0.10088   	 700       	 129.497   	 0         	 28.921    	 4.47761   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 72, n: 50, r2new: 72)	 0.0902136 	 700       	 166.708   	 0         	 25.6732   	 6.49348   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 72, reductionFactor: 37, colBlockingSize: 12)                                	 0.0848223 	 200       	 62.7678   	 0         	 3.49312   	 17.969    
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 72, m: 3600)                                                                                	 0.0846445 	 700       	 0         	 0         	 34.2969   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 72, m: 72)                                                                                	 0.0719846 	 900       	 6.22213   	 0         	 1.56273   	 3.98157   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 72, r1_: 72, n: 50, r2: 72)                         	 0.0569301 	 600       	 393.375   	 0         	 44.1454   	 8.91089   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 72, n: 50, r: 72, r2: 72)                           	 0.0561088 	 700       	 465.655   	 0         	 52.2569   	 8.91089   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 72)                                                                               	 0.0459817 	 100       	 3.49414   	 0         	 0.169633  	 20.5983   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                               	 0.0419079 	 100       	 2.78388   	 0         	 0.144126  	 19.3157   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3600, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                	 0.0228268 	 100       	 80.9861   	 0         	 6.396     	 12.662    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 72, r2: 72, leftOrthog: 1)                      	 0.013945  	 100       	 185.873   	 0         	 31.5737   	 5.88697   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 72, n: 50, r2new: 50)	 0.013711  	 100       	 108.818   	 0         	 19.418    	 5.60397   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 72, r: 72, streamingCols: 0)                                 	 0.0117023 	 100       	 110.747   	 0         	 24.7877   	 4.46783   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3600, r: 50, r2: 50, leftOrthog: 1)                      	 0.0105952 	 100       	 169.888   	 0         	 41.1507   	 4.12844   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 72, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0100831 	 200       	 10.5605   	 0         	 1.39386   	 7.57643   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 72, n: 50, r: 72, r2: 50)                           	 0.00780332	 100       	 332.166   	 0         	 45.3961   	 7.31707   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 72, r1_: 72, n: 50, r2: 50)                         	 0.00778988	 100       	 332.739   	 0         	 37.5034   	 8.87224   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 22, n: 50, r2: 22)                                                                                                       	 0.00663377	 800       	 0         	 0         	 46.6944   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 72, m: 2500)                                                                                	 0.00514192	 100       	 0         	 0         	 56.0102   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 72, r1_: 50, n: 50, r2: 72)                         	 0.00428534	 100       	 604.853   	 0         	 82.6632   	 7.31707   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 72)                                                                       	 0.00412053	 100       	 0         	 0         	 69.8939   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 72, m: 72, fromLeft: 1)                              	 0.00305466	 800       	 0         	 0         	 21.7226   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 72) 	 0.00207191	 100       	 25.0204   	 0         	 4.78168   	 5.23256   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 72, leftOrthog: 1)                        	 0.00181913	 100       	 19.7896   	 0         	 6.94836   	 2.8481    
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 72, r: 50, streamingCols: 0)                                   	 0.00156572	 100       	 7.98353   	 0         	 3.19341   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 72, n: 50, r2new: 1) 	 0.00100521	 100       	 0.716268  	 0         	 5.73174   	 0.124965  
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 72)                           	 0.000959013	 100       	 0         	 0         	 6.00618   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 72, r2: 72)                            	 0.000944099	 100       	 54.9095   	 0         	 10.4938   	 5.23256   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000846728	 100       	 0.590508  	 0         	 2.36203   	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000696139	 100       	 35.9124   	 0         	 8.61897   	 4.16667   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 72)                                                                         	 0.000496063	 100       	 0         	 0         	 11.6114   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 72)                                                                                                        	 0.000489739	 100       	 0         	 0         	 11.7614   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                  	 0.000486731	 100       	 0         	 0         	 8.21809   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 22)                                                                                                        	 0.000390846	 100       	 0         	 0         	 4.50305   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 72, n: 50, r: 2, r2: 1)                             	 0.000384416	 100       	 3.74594   	 0         	 22.4798   	 0.166636  
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.00032349	 100       	 0.772821  	 0         	 12.3651   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 22, n: 50, r2: 1)                                                                                                        	 0.000313478	 100       	 0         	 0         	 5.61443   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 72, m: 50, fromLeft: 1)                              	 0.000213823	 100       	 0         	 0         	 26.9382   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 2.28163   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 2.2816    	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 1.38163   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 1.38037   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 1.2588    	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 0.783339  	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 0.690107  	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.564151  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.360338  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.330879  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.156873  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.119405  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.114148  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.107002  	 1000      
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.0902732 	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.0719846 	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.0697015 	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.0652406 	 1000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.0122623 	 1800      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.00782783	 1100      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00424673	 6400      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00326848	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00102773	 4600      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000959013	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000846728	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.00032349	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23388073645952 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23387841751040 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23387640424576 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23387439098112 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23387237771648 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23387036445184 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23386835118720 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23386633792256 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23386432465792 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23386231139328 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23386029812864 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23385828486400 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23385627159936 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23385425833472 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23385224507008 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23385023180544 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23384821854080 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23384620527616 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23384419201152 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23384217874688 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23384016548224 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23383815221760 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23383613895296 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23383412568832 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23383211242368 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23383009915904 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23382808589440 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23382607262976 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23382405936512 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23382204610048 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23382003283584 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23381801957120 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23381600626560 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23381399300096 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23381197973632 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23380996647168 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23380795320704 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23380593994240 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23380392667776 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23380191341312 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23379990014848 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23379788688384 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23379587361920 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23379386035456 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23379184708992 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23378983382528 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23378782056064 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23378580729600 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23378379403136 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23378178076672 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23377976750208 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23377775423744 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23377574097280 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23377372770816 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23377171444352 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23376970117888 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23376768791424 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23376567464960 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23376366138496 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23376164812032 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23375963485568 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23375762159104 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23375560832640 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23387967985408 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23387961394944 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3650, cols: 73, reductionFactor: 37, colBlockingSize: 12)                                	 0.589416  	 1300      	 88.1194   	 0         	 4.79543   	 18.3757   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 73, m: 73)                                                                               	 0.507995  	 700       	 5.00316   	 0         	 0.177041  	 28.2598   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3650, r: 73, r2: 73, leftOrthog: 1)                      	 0.124863  	 600       	 186.933   	 0         	 31.1384   	 6.00329   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 3650, Xcols: 73, r: 73, streamingCols: 0)                                 	 0.103584  	 700       	 131.445   	 0         	 28.954    	 4.5398    
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 73, n: 50, r2new: 73)	 0.098125  	 700       	 157.739   	 0         	 24.1537   	 6.53065   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 73, reductionFactor: 37, colBlockingSize: 12)                                	 0.0948928 	 200       	 57.6759   	 0         	 3.16701   	 18.2115   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 73, m: 3650)                                                                                	 0.0911079 	 700       	 0         	 0         	 32.755    	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 3650, m: 73)                                                                       	 0.0910869 	 700       	 0         	 0         	 32.7626   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 73, m: 73)                                                                                	 0.0752147 	 900       	 6.20649   	 0         	 1.53736   	 4.03711   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 73, r1_: 73, n: 50, r2: 73)                         	 0.0708457 	 600       	 329.463   	 0         	 36.4665   	 9.03465   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 73, n: 50, r: 73, r2: 73)                           	 0.0631364 	 700       	 431.307   	 0         	 47.7392   	 9.03465   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 73)                                                                               	 0.0461162 	 100       	 3.52733   	 0         	 0.170873  	 20.643    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                               	 0.0394176 	 100       	 2.95976   	 0         	 0.153231  	 19.3157   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3650, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                	 0.0228303 	 100       	 82.0981   	 0         	 6.48261   	 12.6644   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3650, r: 50, r2: 50, leftOrthog: 1)                      	 0.0143282 	 100       	 127.371   	 0         	 30.8482   	 4.12896   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 73, r2: 73, leftOrthog: 1)                      	 0.0139323 	 100       	 191.246   	 0         	 32.0497   	 5.96717   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 73, n: 50, r2new: 50)	 0.0138224 	 100       	 109.568   	 0         	 19.5393   	 5.6076    
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 73, r: 73, streamingCols: 0)                                 	 0.0118275 	 100       	 112.64    	 0         	 24.8684   	 4.52944   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 73, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0109473 	 200       	 9.99887   	 0         	 1.31233   	 7.6192    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 73, r1_: 73, n: 50, r2: 50)                         	 0.00825107	 100       	 322.928   	 0         	 35.9061   	 8.99369   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 73, n: 50, r: 73, r2: 50)                           	 0.00781344	 100       	 341.015   	 0         	 46.3407   	 7.35887   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 23, n: 50, r2: 23)                                                                                                       	 0.00707309	 800       	 0         	 0         	 47.8659   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 73, m: 2500)                                                                                	 0.00446882	 100       	 0         	 0         	 65.3417   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 73)                                                                       	 0.0044145 	 100       	 0         	 0         	 66.1457   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 73, r1_: 50, n: 50, r2: 73)                         	 0.00392738	 100       	 678.442   	 0         	 92.1938   	 7.35887   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 73, m: 73, fromLeft: 1)                              	 0.00374226	 800       	 0         	 0         	 18.2273   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 73) 	 0.00190675	 100       	 27.9481   	 0         	 5.29866   	 5.27457   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 73, leftOrthog: 1)                        	 0.0018009 	 100       	 20.2676   	 0         	 7.08533   	 2.8605    
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 73, r: 50, streamingCols: 0)                                   	 0.0015638 	 100       	 7.99333   	 0         	 3.19733   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 73, n: 50, r2new: 1) 	 0.00106411	 100       	 0.686019  	 0         	 5.48965   	 0.124966  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 73, r2: 73)                            	 0.000995795	 100       	 53.515    	 0         	 10.1459   	 5.27457   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000807085	 100       	 0.619513  	 0         	 2.47805   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 73)                           	 0.00075128	 100       	 0         	 0         	 7.7734    	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000727705	 100       	 34.3546   	 0         	 8.2451    	 4.16667   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 73, n: 50, r: 2, r2: 1)                             	 0.000511449	 100       	 2.85463   	 0         	 17.1309   	 0.166636  
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                  	 0.000504986	 100       	 0         	 0         	 7.92101   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 73)                                                                                                        	 0.000461102	 100       	 0         	 0         	 12.6653   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 23)                                                                                                        	 0.000390046	 100       	 0         	 0         	 4.71739   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 73)                                                                         	 0.0003419 	 100       	 0         	 0         	 17.081    	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 23, n: 50, r2: 1)                                                                                                        	 0.000328476	 100       	 0         	 0         	 5.60163   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000323138	 100       	 0.773663  	 0         	 12.3786   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 73, m: 50, fromLeft: 1)                              	 0.000208812	 100       	 0         	 0         	 27.9677   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 2.38595   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 2.38592   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 1.48001   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 1.47879   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 1.32966   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 0.784061  	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 0.718086  	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.593528  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.373203  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.345937  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.154925  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.116975  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.114918  	 1000      
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.0960817 	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.0958433 	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.0837519 	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.0752147 	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.0724571 	 1000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.0103477 	 1800      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.00825272	 1100      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.0046832 	 6400      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00395108	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00102022	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000807085	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.00075128	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000323138	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23374700238720 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23374487087104 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23374285760640 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23374084434176 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23373883107712 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23373681781248 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23373480454784 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23373279128320 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23373077801856 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23372876475392 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23372675148928 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23372473822464 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23372272496000 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23372071169536 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23371869843072 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23371668516608 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23371467190144 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23371265863680 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23371064537216 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23370863210752 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23370661884288 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23370460557824 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23370259231360 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23370057904896 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23369856578432 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23369655251968 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23369453925504 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23369252599040 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23369051272576 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23368849946112 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23368648619648 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23368447293184 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23368245962624 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23368044636160 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23367843309696 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23367641983232 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23367440656768 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23367239330304 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23367038003840 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23366836677376 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23366635350912 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23366434024448 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23366232697984 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23366031371520 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23365830045056 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23365628718592 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23365427392128 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23365226065664 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23365024739200 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23364823412736 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23364622086272 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23364420759808 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23364219433344 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23364018106880 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23363816780416 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23363615453952 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23363414127488 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23363212801024 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23363011474560 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23362810148096 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23362608821632 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23362407495168 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23362206168704 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23374594578176 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23374587987712 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3700, cols: 74, reductionFactor: 37, colBlockingSize: 12)                                	 0.60246   	 1300      	 89.8033   	 0         	 4.82102   	 18.6275   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 74, m: 74)                                                                               	 0.497431  	 700       	 5.32227   	 0         	 0.185777  	 28.6487   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3700, r: 74, r2: 74, leftOrthog: 1)                      	 0.121635  	 600       	 199.888   	 0         	 32.8465   	 6.08553   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 3700, Xcols: 74, r: 74, streamingCols: 0)                                 	 0.106193  	 700       	 133.557   	 0         	 29.0216   	 4.60199   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 74, n: 50, r2new: 74)	 0.0936264 	 700       	 170.184   	 0         	 25.9032   	 6.56998   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 74, reductionFactor: 37, colBlockingSize: 12)                                	 0.0927433 	 200       	 60.6405   	 0         	 3.28608   	 18.4538   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 3700, m: 74)                                                                       	 0.0849907 	 700       	 0         	 0         	 36.0811   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 74, m: 3700)                                                                                	 0.0804976 	 700       	 0         	 0         	 38.0951   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 74, m: 74)                                                                                	 0.0759965 	 900       	 6.39856   	 0         	 1.56342   	 4.09267   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 74, r1_: 74, n: 50, r2: 74)                         	 0.0674074 	 600       	 360.694   	 0         	 39.3839   	 9.15842   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 74, n: 50, r: 74, r2: 74)                           	 0.0583729 	 700       	 485.939   	 0         	 53.0593   	 9.15842   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 74)                                                                               	 0.0475381 	 100       	 3.46389   	 0         	 0.167445  	 20.6868   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                               	 0.0397633 	 100       	 2.93403   	 0         	 0.151899  	 19.3157   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3700, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                	 0.0230291 	 100       	 82.5044   	 0         	 6.5135    	 12.6667   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 74, r2: 74, leftOrthog: 1)                      	 0.0136341 	 100       	 200.82    	 0         	 33.208    	 6.04733   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 74, n: 50, r2new: 50)	 0.0135885 	 100       	 113.184   	 0         	 20.1641   	 5.61314   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3700, r: 50, r2: 50, leftOrthog: 1)                      	 0.012688  	 100       	 145.807   	 0         	 35.309    	 4.12946   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 74, r: 74, streamingCols: 0)                                 	 0.0119364 	 100       	 114.691   	 0         	 24.9816   	 4.59103   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 74, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0113554 	 200       	 9.90543   	 0         	 1.29292   	 7.66129   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 74, r1_: 74, n: 50, r2: 50)                         	 0.00822605	 100       	 332.845   	 0         	 36.5158   	 9.1151    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 74, n: 50, r: 74, r2: 50)                           	 0.00790938	 100       	 346.171   	 0         	 46.7799   	 7.4       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 24, n: 50, r2: 24)                                                                                                       	 0.00742957	 800       	 0         	 0         	 49.618    	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 74)                                                                       	 0.00463481	 100       	 0         	 0         	 63.8646   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 74, m: 2500)                                                                                	 0.00451038	 100       	 0         	 0         	 65.6265   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 74, r1_: 50, n: 50, r2: 74)                         	 0.00434477	 100       	 630.182   	 0         	 85.1598   	 7.4       
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 74, m: 74, fromLeft: 1)                              	 0.00315244	 800       	 0         	 0         	 22.2345   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 74) 	 0.00193907	 100       	 28.2403   	 0         	 5.31224   	 5.31609   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 74, leftOrthog: 1)                        	 0.00184173	 100       	 20.0898   	 0         	 6.99341   	 2.87267   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 74, r: 50, streamingCols: 0)                                   	 0.00169778	 100       	 7.36254   	 0         	 2.94502   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 74, r2: 74)                            	 0.00102055	 100       	 53.6574   	 0         	 10.0934   	 5.31609   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 74, n: 50, r2new: 1) 	 0.00101493	 100       	 0.729111  	 0         	 5.83447   	 0.124966  
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000868529	 100       	 0.575686  	 0         	 2.30274   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 74)                           	 0.00076888	 100       	 0         	 0         	 7.69951   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000701047	 100       	 35.6609   	 0         	 8.55863   	 4.16667   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                  	 0.00047439	 100       	 0         	 0         	 8.43188   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 74, n: 50, r: 2, r2: 1)                             	 0.000458569	 100       	 3.22743   	 0         	 19.3681   	 0.166637  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 74)                                                                                                        	 0.000452907	 100       	 0         	 0         	 13.0711   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 24)                                                                                                        	 0.000378566	 100       	 0         	 0         	 5.07177   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000322439	 100       	 0.77534   	 0         	 12.4054   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 74)                                                                         	 0.000321965	 100       	 0         	 0         	 18.3871   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 24, n: 50, r2: 1)                                                                                                        	 0.000315412	 100       	 0         	 0         	 6.08728   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 74, m: 50, fromLeft: 1)                              	 0.000206803	 100       	 0         	 0         	 28.6263   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 2.3566    	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 2.35657   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 1.46714   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 1.46588   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 1.32688   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 0.775334  	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 0.729588  	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.584733  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.379464  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.351219  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.149799  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.119827  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.110169  	 1000      
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.0899475 	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.0854823 	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.0806793 	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.0759965 	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.0677614 	 1000      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.00857645	 1100      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.00842148	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00458409	 6400      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00335924	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00115373	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000868529	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.00076888	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000322439	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23046744680320 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23046526068736 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23046324742272 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23046123415808 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23045922089344 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23045720762880 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23045519436416 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23045318109952 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23045116783488 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23044915457024 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23044714130560 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23044512804096 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23044311477632 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23044110151168 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23043908824704 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23043707498240 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23043506171776 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23043304845312 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23043103518848 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23042902192384 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23042700865920 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23042499539456 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23042298212992 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23042096886528 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23041895560064 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23041694233600 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23041492907136 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23041291580672 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23041090254208 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23040888927744 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23040687601280 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23040486274816 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23040284944256 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23040083617792 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23039882291328 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23039680964864 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23039479638400 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23039278311936 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23039076985472 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23038875659008 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23038674332544 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23038473006080 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23038271679616 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23038070353152 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23037869026688 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23037667700224 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23037466373760 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23037265047296 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23037063720832 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23036862394368 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23036661067904 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23036459741440 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23036258414976 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23036057088512 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23035855762048 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23035654435584 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23035453109120 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23035251782656 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23035050456192 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23034849129728 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23034647803264 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23034446476800 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23034245150336 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23046639019776 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23046632429312 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3750, cols: 75, reductionFactor: 37, colBlockingSize: 12)                                	 0.618242  	 1300      	 91.1067   	 0         	 4.82578   	 18.8792   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 75, m: 75)                                                                               	 0.522592  	 700       	 5.27419   	 0         	 0.181633  	 29.0376   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3750, r: 75, r2: 75, leftOrthog: 1)                      	 0.121832  	 600       	 207.766   	 0         	 33.6858   	 6.16776   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 3750, Xcols: 75, r: 75, streamingCols: 0)                                 	 0.110582  	 700       	 133.527   	 0         	 28.6282   	 4.66418   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 75, n: 50, r2new: 75)	 0.096278  	 700       	 170.405   	 0         	 25.7743   	 6.61142   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 75, reductionFactor: 37, colBlockingSize: 12)                                	 0.0934553 	 200       	 61.816    	 0         	 3.30639   	 18.6959   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 75, m: 75)                                                                                	 0.0796558 	 900       	 6.35547   	 0         	 1.53209   	 4.14823   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 75, r1_: 75, n: 50, r2: 75)                         	 0.0696182 	 600       	 363.59    	 0         	 39.1708   	 9.28218   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 75, n: 50, r: 75, r2: 75)                           	 0.0602315 	 700       	 490.296   	 0         	 52.8212   	 9.28218   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 3750, m: 75)                                                                       	 0.0546312 	 700       	 0         	 0         	 57.6594   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 75, m: 3750)                                                                                	 0.0506584 	 700       	 0         	 0         	 62.1812   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 75)                                                                               	 0.0455906 	 100       	 3.65573   	 0         	 0.176352  	 20.7297   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                               	 0.0386886 	 100       	 3.01553   	 0         	 0.156118  	 19.3157   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3750, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                	 0.0224074 	 100       	 85.9391   	 0         	 6.78346   	 12.6689   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 75, r2: 75, leftOrthog: 1)                      	 0.0143561 	 100       	 195.909   	 0         	 31.9724   	 6.12745   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 75, n: 50, r2new: 50)	 0.0140004 	 100       	 111.604   	 0         	 19.8566   	 5.6205    
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 75, reductionFactor: 37, colBlockingSize: 12)                                  	 0.013355  	 200       	 8.65148   	 0         	 1.12317   	 7.7027    
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 75, r: 75, streamingCols: 0)                                 	 0.0122429 	 100       	 114.863   	 0         	 24.6879   	 4.65261   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3750, r: 50, r2: 50, leftOrthog: 1)                      	 0.0121155 	 100       	 154.76    	 0         	 37.4726   	 4.12996   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 75, r1_: 75, n: 50, r2: 50)                         	 0.00855052	 100       	 328.927   	 0         	 35.6119   	 9.23645   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 75, n: 50, r: 75, r2: 50)                           	 0.00814832	 100       	 345.163   	 0         	 46.39     	 7.44048   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 25, n: 50, r2: 25)                                                                                                       	 0.00812928	 800       	 0         	 0         	 49.2048   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 75)                                                                       	 0.00468216	 100       	 0         	 0         	 64.0729   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 75, r1_: 50, n: 50, r2: 75)                         	 0.00451659	 100       	 622.705   	 0         	 83.6915   	 7.44048   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 75, m: 2500)                                                                                	 0.00448457	 100       	 0         	 0         	 66.8961   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 75, m: 75, fromLeft: 1)                              	 0.00317022	 800       	 0         	 0         	 22.7114   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 75) 	 0.00210675	 100       	 26.6998   	 0         	 4.98397   	 5.35714   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 75, leftOrthog: 1)                        	 0.00187363	 100       	 20.0146   	 0         	 6.93841   	 2.88462   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 75, r: 50, streamingCols: 0)                                   	 0.00153087	 100       	 8.16527   	 0         	 3.26611   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 75, r2: 75)                            	 0.00104608	 100       	 53.7723   	 0         	 10.0375   	 5.35714   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 75, n: 50, r2new: 1) 	 0.00103746	 100       	 0.722923  	 0         	 5.78493   	 0.124967  
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 75)                           	 0.000910781	 100       	 0         	 0         	 6.58775   	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000869423	 100       	 0.575094  	 0         	 2.30038   	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000681574	 100       	 36.6798   	 0         	 8.80315   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 75)                                                                                                        	 0.000490433	 100       	 0         	 0         	 12.2341   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                  	 0.000479288	 100       	 0         	 0         	 8.34571   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 75, n: 50, r: 2, r2: 1)                             	 0.000456082	 100       	 3.28888   	 0         	 19.7368   	 0.166637  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 25)                                                                                                        	 0.000377915	 100       	 0         	 0         	 5.2922    	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 75)                                                                         	 0.000332398	 100       	 0         	 0         	 18.0507   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.00031595	 100       	 0.791264  	 0         	 12.6602   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 25, n: 50, r2: 1)                                                                                                        	 0.000312052	 100       	 0         	 0         	 6.40919   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 75, m: 50, fromLeft: 1)                              	 0.000214989	 100       	 0         	 0         	 27.9084   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 2.29809   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 2.29806   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 1.44856   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 1.4473    	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 1.35465   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 0.74746   	 1800      
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 0.733788  	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.606871  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.390677  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.357822  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.150177  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.124355  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.113423  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.0833669 	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.0796558 	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.069882  	 1000      
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.0596457 	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.0556222 	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.00930968	 1100      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.00724568	 1800      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00338521	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00291696	 6400      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.000989457	 4600      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000910781	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000869423	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.00031595	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22972041312128 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22971833903104 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22971632576640 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22971431250176 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22971229923712 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22971028597248 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22970827270784 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22970625944320 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22970424617856 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22970223291392 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22970021964928 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22969820638464 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22969619312000 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22969417985536 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22969216659072 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22969015332608 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22968814006144 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22968612679680 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22968411353216 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22968210026752 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22968008700288 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22967807373824 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22967606047360 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22967404720896 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22967203394432 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22967002067968 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22966800741504 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22966599415040 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22966398088576 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22966196762112 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22965995435648 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22965794109184 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22965592778624 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22965391452160 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22965190125696 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22964988799232 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22964787472768 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22964586146304 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22964384819840 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22964183493376 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22963982166912 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22963780840448 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22963579513984 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22963378187520 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22963176861056 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22962975534592 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22962774208128 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22962572881664 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22962371555200 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22962170228736 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22961968902272 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22961767575808 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22961566249344 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22961364922880 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22961163596416 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22960962269952 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22960760943488 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22960559617024 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22960358290560 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22960156964096 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22959955637632 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22959754311168 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22959552984704 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22971935651584 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22971929061120 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3800, cols: 76, reductionFactor: 37, colBlockingSize: 12)                                	 0.633217  	 1300      	 92.558    	 0         	 4.83814   	 19.1309   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 76, m: 76)                                                                               	 0.510265  	 700       	 5.62056   	 0         	 0.191003  	 29.4265   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3800, r: 76, r2: 76, leftOrthog: 1)                      	 0.137986  	 600       	 190.879   	 0         	 30.5406   	 6.25      
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 3800, Xcols: 76, r: 76, streamingCols: 0)                                 	 0.110433  	 700       	 139.127   	 0         	 29.4363   	 4.72637   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 76, m: 3800)                                                                                	 0.101018  	 700       	 0         	 0         	 32.0196   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 76, n: 50, r2new: 76)	 0.096899  	 700       	 174.37    	 0         	 26.2016   	 6.65496   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 3800, m: 76)                                                                       	 0.0942092 	 700       	 0         	 0         	 34.3338   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 76, reductionFactor: 37, colBlockingSize: 12)                                	 0.0938777 	 200       	 63.1897   	 0         	 3.3367    	 18.9378   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 76, m: 76)                                                                                	 0.0791975 	 900       	 6.65135   	 0         	 1.58223   	 4.20377   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 76, r1_: 76, n: 50, r2: 76)                         	 0.0647285 	 600       	 406.908   	 0         	 43.2608   	 9.40594   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 76, n: 50, r: 76, r2: 76)                           	 0.0588975 	 700       	 521.725   	 0         	 55.4676   	 9.40594   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 76)                                                                               	 0.0461758 	 100       	 3.6527    	 0         	 0.17585   	 20.7718   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                               	 0.038413  	 100       	 3.03716   	 0         	 0.157238  	 19.3157   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3800, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                	 0.0229398 	 100       	 85.064    	 0         	 6.71322   	 12.6711   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 76, n: 50, r2new: 50)	 0.0156149 	 100       	 101.698   	 0         	 18.0648   	 5.62961   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 76, r2: 76, leftOrthog: 1)                      	 0.0141588 	 100       	 203.972   	 0         	 32.8587   	 6.20753   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 76, r: 76, streamingCols: 0)                                 	 0.0122927 	 100       	 117.468   	 0         	 24.9181   	 4.71417   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 76, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0110988 	 200       	 10.6897   	 0         	 1.38048   	 7.74346   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3800, r: 50, r2: 50, leftOrthog: 1)                      	 0.0110078 	 100       	 172.605   	 0         	 41.7887   	 4.13043   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 26, n: 50, r2: 26)                                                                                                       	 0.00839091	 800       	 0         	 0         	 51.5606   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 76, n: 50, r: 76, r2: 50)                           	 0.00829369	 100       	 348.216   	 0         	 46.551    	 7.48031   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 76, r1_: 76, n: 50, r2: 50)                         	 0.00802609	 100       	 359.826   	 0         	 38.4522   	 9.35776   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 76, m: 2500)                                                                                	 0.00490355	 100       	 0         	 0         	 61.996    	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 76, r1_: 50, n: 50, r2: 76)                         	 0.00454754	 100       	 635.069   	 0         	 84.8987   	 7.48031   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 76, m: 76, fromLeft: 1)                              	 0.00349523	 800       	 0         	 0         	 21.1525   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 76)                                                                       	 0.00342305	 100       	 0         	 0         	 88.8096   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 76, leftOrthog: 1)                        	 0.00205323	 100       	 18.5075   	 0         	 6.38994   	 2.89634   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 76) 	 0.00191424	 100       	 30.1738   	 0         	 5.5901    	 5.39773   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 76, r: 50, streamingCols: 0)                                   	 0.00129716	 100       	 9.63645   	 0         	 3.85458   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 76, n: 50, r2new: 1) 	 0.00117018	 100       	 0.649474  	 0         	 5.19716   	 0.124967  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 76, r2: 76)                            	 0.0010092 	 100       	 57.2337   	 0         	 10.6033   	 5.39773   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000822208	 100       	 0.608119  	 0         	 2.43247   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 76)                           	 0.000739352	 100       	 0         	 0         	 8.22342   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000680226	 100       	 36.7525   	 0         	 8.8206    	 4.16667   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 76, n: 50, r: 2, r2: 1)                             	 0.000597993	 100       	 2.54184   	 0         	 15.2537   	 0.166637  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 76)                                                                                                        	 0.000484544	 100       	 0         	 0         	 12.5479   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                  	 0.000481562	 100       	 0         	 0         	 8.3063    	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 76)                                                                         	 0.00040872	 100       	 0         	 0         	 14.8757   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 26)                                                                                                        	 0.00038804	 100       	 0         	 0         	 5.36027   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000330561	 100       	 0.75629   	 0         	 12.1006   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 26, n: 50, r2: 1)                                                                                                        	 0.000330441	 100       	 0         	 0         	 6.29462   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 76, m: 50, fromLeft: 1)                              	 0.000211013	 100       	 0         	 0         	 28.8134   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 2.46763   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 2.4676    	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 1.51749   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 1.51626   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 1.36624   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 0.830389  	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 0.761133  	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.594854  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.399914  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.362229  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.165206  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.124023  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.115598  	 1000      
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.106403  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.098041  	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.0791975 	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.0779824 	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.0687984 	 1000      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.00959393	 1100      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.00934102	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00492489	 6400      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00370624	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.000974392	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000822208	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000739352	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000330561	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23066458261376 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23066256074752 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23066054748288 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23065853421824 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23065652095360 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23065450768896 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23065249442432 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23065048115968 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23064846789504 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23064645463040 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23064444136576 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23064242810112 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23064041483648 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23063840157184 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23063638830720 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23063437504256 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23063236177792 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23063034851328 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23062833524864 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23062632198400 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23062430871936 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23062229545472 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23062028219008 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23061826892544 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23061625566080 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23061424239616 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23061222913152 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23061021586688 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23060820260224 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23060618933760 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23060417607296 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23060216280832 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23060014950272 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23059813623808 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23059612297344 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23059410970880 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23059209644416 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23059008317952 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23058806991488 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23058605665024 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23058404338560 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23058203012096 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23058001685632 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23057800359168 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23057599032704 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23057397706240 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23057196379776 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23056995053312 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23056793726848 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23056592400384 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23056391073920 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23056189747456 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23055988420992 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23055787094528 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23055585768064 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23055384441600 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23055183115136 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23054981788672 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23054780462208 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23054579135744 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23054377809280 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23054176482816 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23053975156352 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23066352600832 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23066346010368 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3850, cols: 77, reductionFactor: 37, colBlockingSize: 12)                                	 0.651519  	 1300      	 93.5558   	 0         	 4.82679   	 19.3826   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 77, m: 77)                                                                               	 0.539652  	 700       	 5.52704   	 0         	 0.185376  	 29.8154   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3850, r: 77, r2: 77, leftOrthog: 1)                      	 0.135759  	 600       	 201.769   	 0         	 31.8638   	 6.33224   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 3850, Xcols: 77, r: 77, streamingCols: 0)                                 	 0.113576  	 700       	 140.686   	 0         	 29.3797   	 4.78856   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 77, m: 3850)                                                                                	 0.109644  	 700       	 0         	 0         	 30.282    	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 77, n: 50, r2new: 77)	 0.10501   	 700       	 165.74    	 0         	 24.7353   	 6.70056   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 77, reductionFactor: 37, colBlockingSize: 12)                                	 0.0980262 	 200       	 62.1185   	 0         	 3.23879   	 19.1795   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 77, m: 77)                                                                                	 0.0859836 	 900       	 6.37144   	 0         	 1.49588   	 4.25933   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 3850, m: 77)                                                                       	 0.0803917 	 700       	 0         	 0         	 41.3008   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 77, r1_: 77, n: 50, r2: 77)                         	 0.0752819 	 600       	 363.859   	 0         	 38.1815   	 9.5297    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 77, n: 50, r: 77, r2: 77)                           	 0.0676452 	 700       	 472.425   	 0         	 49.574    	 9.5297    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 77)                                                                               	 0.0486242 	 100       	 3.50991   	 0         	 0.16864   	 20.813    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                               	 0.0382833 	 100       	 3.04746   	 0         	 0.157771  	 19.3157   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3850, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                	 0.0231634 	 100       	 85.3515   	 0         	 6.73478   	 12.6733   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 77, n: 50, r2new: 50)	 0.015262  	 100       	 105.786   	 0         	 18.7551   	 5.64037   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 77, r2: 77, leftOrthog: 1)                      	 0.0146348 	 100       	 202.565   	 0         	 32.2168   	 6.28756   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 77, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0133999 	 200       	 9.08852   	 0         	 1.16765   	 7.78357   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3850, r: 50, r2: 50, leftOrthog: 1)                      	 0.0129356 	 100       	 148.814   	 0         	 36.0245   	 4.1309    
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 77, r: 77, streamingCols: 0)                                 	 0.0126418 	 100       	 117.25    	 0         	 24.5511   	 4.77573   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 77, r1_: 77, n: 50, r2: 50)                         	 0.00901309	 100       	 328.911   	 0         	 34.6988   	 9.47902   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 27, n: 50, r2: 27)                                                                                                       	 0.00875127	 800       	 0         	 0         	 53.3134   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 77, n: 50, r: 77, r2: 50)                           	 0.00863917	 100       	 343.146   	 0         	 45.634    	 7.51953   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 77, m: 2500)                                                                                	 0.00476345	 100       	 0         	 0         	 64.659    	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 77)                                                                       	 0.00446529	 100       	 0         	 0         	 68.9764   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 77, r1_: 50, n: 50, r2: 77)                         	 0.0040872 	 100       	 725.312   	 0         	 96.4571   	 7.51953   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 77, m: 77, fromLeft: 1)                              	 0.00367591	 800       	 0         	 0         	 20.6455   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 77) 	 0.00208129	 100       	 28.4872   	 0         	 5.23868   	 5.43785   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 77, leftOrthog: 1)                        	 0.0018664 	 100       	 20.6279   	 0         	 7.09386   	 2.90785   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 77, r: 50, streamingCols: 0)                                   	 0.00163981	 100       	 7.62283   	 0         	 3.04913   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 77, r2: 77)                            	 0.00113092	 100       	 52.4263   	 0         	 9.64099   	 5.43785   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 77, n: 50, r2new: 1) 	 0.000973065	 100       	 0.791314  	 0         	 6.33216   	 0.124968  
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000800117	 100       	 0.624909  	 0         	 2.49963   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 77)                           	 0.000785861	 100       	 0         	 0         	 7.83854   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000738786	 100       	 33.8393   	 0         	 8.12143   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 77)                                                                                                        	 0.00047827	 100       	 0         	 0         	 12.8798   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                  	 0.000474553	 100       	 0         	 0         	 8.42898   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 27)                                                                                                        	 0.000421662	 100       	 0         	 0         	 5.12259   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 77, n: 50, r: 2, r2: 1)                             	 0.000412466	 100       	 3.73364   	 0         	 22.4057   	 0.166638  
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 77)                                                                         	 0.00038691	 100       	 0         	 0         	 15.921    	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 27, n: 50, r2: 1)                                                                                                        	 0.000336505	 100       	 0         	 0         	 6.41892   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000330342	 100       	 0.756791  	 0         	 12.1087   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 77, m: 50, fromLeft: 1)                              	 0.000216326	 100       	 0         	 0         	 28.4755   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 2.55531   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 2.55528   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 1.57715   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 1.57594   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 1.40979   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 0.847466  	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 0.786108  	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.62656   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.409841  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.377289  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.165196  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.127858  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.123326  	 1000      
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.114882  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.089121  	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.0859836 	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.0852439 	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.0778277 	 1000      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0099877 	 1100      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.00662364	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00527578	 6400      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00389224	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.000893111	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000800117	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000785861	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000330342	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23036016056192 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23035788650496 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23035587324032 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23035385997568 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23035184671104 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23034983344640 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23034782018176 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23034580691712 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23034379365248 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23034178038784 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23033976712320 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23033775385856 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23033574059392 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23033372732928 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23033171406464 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23032970080000 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23032768753536 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23032567427072 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23032366100608 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23032164774144 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23031963447680 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23031762121216 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23031560794752 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23031359468288 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23031158141824 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23030956815360 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23030755488896 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23030554162432 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23030352835968 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23030151509504 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23029950183040 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23029748856576 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23029547526016 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23029346199552 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23029144873088 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23028943546624 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23028742220160 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23028540893696 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23028339567232 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23028138240768 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23027936914304 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23027735587840 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23027534261376 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23027332934912 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23027131608448 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23026930281984 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23026728955520 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23026527629056 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23026326302592 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23026124976128 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23025923649664 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23025722323200 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23025520996736 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23025319670272 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23025118343808 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23024917017344 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23024715690880 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23024514364416 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23024313037952 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23024111711488 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23023910385024 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23023709058560 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23023507732096 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23035910395648 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23035903805184 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3900, cols: 78, reductionFactor: 37, colBlockingSize: 12)                                	 0.662518  	 1300      	 95.6338   	 0         	 4.87074   	 19.6343   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 78, m: 78)                                                                               	 0.53569   	 700       	 5.78769   	 0         	 0.191618  	 30.2043   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3900, r: 78, r2: 78, leftOrthog: 1)                      	 0.129329  	 600       	 220.161   	 0         	 34.3225   	 6.41447   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 3900, Xcols: 78, r: 78, streamingCols: 0)                                 	 0.116576  	 700       	 142.477   	 0         	 29.3721   	 4.85075   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 3900, m: 78)                                                                       	 0.11424   	 700       	 0         	 0         	 29.8237   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 78, n: 50, r2new: 78)	 0.113734  	 700       	 157.655   	 0         	 23.3626   	 6.74817   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 78, reductionFactor: 37, colBlockingSize: 12)                                	 0.101027  	 200       	 61.8491   	 0         	 3.18464   	 19.4211   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 78, m: 3900)                                                                                	 0.0983469 	 700       	 0         	 0         	 34.6431   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 78, m: 78)                                                                                	 0.0847193 	 900       	 6.72175   	 0         	 1.5578    	 4.31489   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 78, n: 50, r: 78, r2: 78)                           	 0.0750941 	 700       	 442.36    	 0         	 45.824    	 9.65347   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 78, r1_: 78, n: 50, r2: 78)                         	 0.0741407 	 600       	 384.042   	 0         	 39.7828   	 9.65347   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 78)                                                                               	 0.0527272 	 100       	 3.27472   	 0         	 0.157035  	 20.8535   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                               	 0.0377976 	 100       	 3.08662   	 0         	 0.159799  	 19.3157   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3900, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                	 0.0226417 	 100       	 88.4519   	 0         	 6.97827   	 12.6753   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 78, r2: 78, leftOrthog: 1)                      	 0.0149071 	 100       	 204.064   	 0         	 32.0474   	 6.36755   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 78, n: 50, r2new: 50)	 0.0143084 	 100       	 114.757   	 0         	 20.3013   	 5.65271   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 78, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0140057 	 200       	 8.92268   	 0         	 1.14056   	 7.82306   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3900, r: 50, r2: 50, leftOrthog: 1)                      	 0.0132095 	 100       	 147.621   	 0         	 35.7318   	 4.13136   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 78, r: 78, streamingCols: 0)                                 	 0.0127518 	 100       	 119.278   	 0         	 24.658    	 4.83727   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 28, n: 50, r2: 28)                                                                                                       	 0.00970346	 800       	 0         	 0         	 51.7094   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 78, r1_: 78, n: 50, r2: 50)                         	 0.00888989	 100       	 342.186   	 0         	 35.6435   	 9.60024   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 78, n: 50, r: 78, r2: 50)                           	 0.00865735	 100       	 351.378   	 0         	 46.49     	 7.55814   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 78, r1_: 50, n: 50, r2: 78)                         	 0.00474058	 100       	 641.694   	 0         	 84.901    	 7.55814   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 78, m: 2500)                                                                                	 0.00464483	 100       	 0         	 0         	 67.1714   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 78)                                                                       	 0.00450061	 100       	 0         	 0         	 69.3239   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 78, m: 78, fromLeft: 1)                              	 0.00351116	 800       	 0         	 0         	 22.1793   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 78) 	 0.00193974	 100       	 31.3651   	 0         	 5.72614   	 5.47753   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 78, leftOrthog: 1)                        	 0.00185665	 100       	 21.0055   	 0         	 7.19574   	 2.91916   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 78, r: 50, streamingCols: 0)                                   	 0.00155185	 100       	 8.05489   	 0         	 3.22196   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 78, n: 50, r2new: 1) 	 0.0010852 	 100       	 0.718763  	 0         	 5.75158   	 0.124968  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 78, r2: 78)                            	 0.0010246 	 100       	 59.379    	 0         	 10.8405   	 5.47753   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000922852	 100       	 0.541799  	 0         	 2.16719   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 78)                           	 0.000767569	 100       	 0         	 0         	 8.12956   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000724611	 100       	 34.5013   	 0         	 8.2803    	 4.16667   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 78, n: 50, r: 2, r2: 1)                             	 0.000531094	 100       	 2.93733   	 0         	 17.627    	 0.166638  
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                  	 0.000475086	 100       	 0         	 0         	 8.41953   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 78)                                                                                                        	 0.000460244	 100       	 0         	 0         	 13.558    	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 28)                                                                                                        	 0.000397014	 100       	 0         	 0         	 5.64212   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 78)                                                                         	 0.000369957	 100       	 0         	 0         	 16.8668   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 28, n: 50, r2: 1)                                                                                                        	 0.00032749	 100       	 0         	 0         	 6.8399    	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.00032389	 100       	 0.771867  	 0         	 12.3499   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 78, m: 50, fromLeft: 1)                              	 0.000232937	 100       	 0         	 0         	 26.7884   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 2.58101   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 2.58098   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 1.56167   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 1.56035   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 1.40891   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 0.88329   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 0.800192  	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.626214  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.419297  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.381902  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.159302  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.131067  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.130879  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.11911   	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.103467  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.0884958 	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.0853072 	 1000      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.0847193 	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0108882 	 1100      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.00894262	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00468129	 6400      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0037441 	 900       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000922852	 100       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.000900991	 4600      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000767569	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.00032389	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22775130802048 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22774936496128 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22774735169664 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22774533843200 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22774332516736 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22774131190272 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22773929863808 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22773728537344 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22773527210880 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22773325884416 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22773124557952 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22772923231488 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22772721905024 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22772520578560 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22772319252096 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22772117925632 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22771916599168 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22771715272704 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22771513946240 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22771312619776 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22771111293312 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22770909966848 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22770708640384 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22770507313920 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22770305987456 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22770104660992 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22769903334528 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22769702008064 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22769500681600 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22769299355136 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22769098028672 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22768896702208 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22768695371648 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22768494045184 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22768292718720 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22768091392256 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22767890065792 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22767688739328 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22767487412864 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22767286086400 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22767084759936 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22766883433472 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22766682107008 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22766480780544 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22766279454080 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22766078127616 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22765876801152 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22765675474688 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22765474148224 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22765272821760 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22765071495296 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22764870168832 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22764668842368 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22764467515904 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22764266189440 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22764064862976 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22763863536512 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22763662210048 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22763460883584 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22763259557120 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22763058230656 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22762856904192 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22762655577728 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22775025141504 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22775018551040 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3950, cols: 79, reductionFactor: 37, colBlockingSize: 12)                                	 0.676837  	 1300      	 97.2574   	 0         	 4.89073   	 19.8861   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 79, m: 79)                                                                               	 0.554336  	 700       	 5.81089   	 0         	 0.189941  	 30.5931   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3950, r: 79, r2: 79, leftOrthog: 1)                      	 0.139699  	 600       	 211.758   	 0         	 32.5946   	 6.49671   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 79, n: 50, r2new: 79)	 0.133042  	 700       	 138.871   	 0         	 20.4289   	 6.79777   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 3950, Xcols: 79, r: 79, streamingCols: 0)                                 	 0.118271  	 700       	 145.905   	 0         	 29.6981   	 4.91294   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 79, m: 3950)                                                                                	 0.112798  	 700       	 0         	 0         	 30.9841   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 79, reductionFactor: 37, colBlockingSize: 12)                                	 0.101561  	 200       	 63.1113   	 0         	 3.20974   	 19.6625   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 3950, m: 79)                                                                       	 0.0989223 	 700       	 0         	 0         	 35.3304   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 79, n: 50, r: 79, r2: 79)                           	 0.091571  	 700       	 376.896   	 0         	 38.5483   	 9.77723   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 79, m: 79)                                                                                	 0.0883001 	 900       	 6.70039   	 0         	 1.53312   	 4.37044   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 79, r1_: 79, n: 50, r2: 79)                         	 0.0760644 	 600       	 388.912   	 0         	 39.7773   	 9.77723   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 79)                                                                               	 0.0480319 	 100       	 3.63647   	 0         	 0.174051  	 20.8931   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                               	 0.0371599 	 100       	 3.13958   	 0         	 0.162541  	 19.3157   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 3950, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                	 0.0232999 	 100       	 87.0554   	 0         	 6.86699   	 12.6774   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 79, n: 50, r2new: 50)	 0.0157274 	 100       	 106.216   	 0         	 18.7444   	 5.66655   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 79, r2: 79, leftOrthog: 1)                      	 0.0147121 	 100       	 212.105   	 0         	 32.8972   	 6.44751   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 79, r: 79, streamingCols: 0)                                 	 0.0128709 	 100       	 121.223   	 0         	 24.7454   	 4.8988    
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 79, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0119352 	 200       	 10.7408   	 0         	 1.36618   	 7.86193   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 3950, r: 50, r2: 50, leftOrthog: 1)                      	 0.0113938 	 100       	 173.34    	 0         	 41.9526   	 4.1318    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 29, n: 50, r2: 29)                                                                                                       	 0.00997851	 800       	 0         	 0         	 53.9399   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 79, r1_: 79, n: 50, r2: 50)                         	 0.00925474	 100       	 337.178   	 0         	 34.6841   	 9.7214    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 79, n: 50, r: 79, r2: 50)                           	 0.00892014	 100       	 349.827   	 0         	 46.0531   	 7.59615   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 79, m: 2500)                                                                                	 0.00582389	 100       	 0         	 0         	 54.2593   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 79, r1_: 50, n: 50, r2: 79)                         	 0.00479404	 100       	 650.913   	 0         	 85.6898   	 7.59615   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 79)                                                                       	 0.00438672	 100       	 0         	 0         	 72.0356   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 79, m: 79, fromLeft: 1)                              	 0.00376215	 800       	 0         	 0         	 21.2338   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 79) 	 0.00196427	 100       	 31.7727   	 0         	 5.7593    	 5.51676   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 79, leftOrthog: 1)                        	 0.00185776	 100       	 21.2621   	 0         	 7.25604   	 2.93027   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 79, r: 50, streamingCols: 0)                                   	 0.00134395	 100       	 9.30096   	 0         	 3.72038   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 79, n: 50, r2new: 1) 	 0.00106121	 100       	 0.744435  	 0         	 5.95699   	 0.124968  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 79, r2: 79)                            	 0.000990554	 100       	 63.0051   	 0         	 11.4207   	 5.51676   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 79)                           	 0.000805665	 100       	 0         	 0         	 7.84445   	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000802688	 100       	 0.622907  	 0         	 2.49163   	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000704486	 100       	 35.4869   	 0         	 8.51685   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 79)                                                                                                        	 0.000668208	 100       	 0         	 0         	 9.45813   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 79, n: 50, r: 2, r2: 1)                             	 0.000521984	 100       	 3.02691   	 0         	 18.1645   	 0.166639  
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                  	 0.000479442	 100       	 0         	 0         	 8.34303   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 29)                                                                                                        	 0.00039978	 100       	 0         	 0         	 5.80319   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000327639	 100       	 0.763035  	 0         	 12.2086   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 29, n: 50, r2: 1)                                                                                                        	 0.000326842	 100       	 0         	 0         	 7.09823   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 79)                                                                         	 0.000323508	 100       	 0         	 0         	 19.5358   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 79, m: 50, fromLeft: 1)                              	 0.000213303	 100       	 0         	 0         	 29.6292   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 2.70513   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 2.70511   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 1.6372    	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 1.63599   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 1.46909   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 0.894417  	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 0.813633  	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.639528  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.4233    	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.391466  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.167663  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.151795  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.132486  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.119102  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.103633  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.102004  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.0908176 	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.0883001 	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0113733 	 1100      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.00895862	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00543901	 6400      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00397546	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00105615	 4600      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000805665	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000802688	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000327639	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23026186565504 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23025990756352 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23025789429888 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23025588103424 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23025386776960 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23025185450496 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23024984124032 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23024782797568 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23024581471104 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23024380144640 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23024178818176 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23023977491712 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23023776165248 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23023574838784 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23023373512320 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23023172185856 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23022970859392 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23022769532928 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23022568206464 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23022366880000 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23022165553536 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23021964227072 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23021762900608 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23021561574144 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23021360247680 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23021158921216 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23020957594752 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23020756268288 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23020554941824 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23020353615360 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23020152288896 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23019950962432 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23019749631872 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23019548305408 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23019346978944 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23019145652480 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23018944326016 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23018742999552 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23018541673088 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23018340346624 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23018139020160 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23017937693696 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23017736367232 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23017535040768 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23017333714304 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23017132387840 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23016931061376 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23016729734912 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23016528408448 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23016327081984 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23016125755520 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23015924429056 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23015723102592 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23015521776128 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23015320449664 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23015119123200 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23014917796736 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23014716470272 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23014515143808 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23014313817344 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23014112490880 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23013911164416 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23013709837952 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23026080904960 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23026074314496 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4000, cols: 80, reductionFactor: 37, colBlockingSize: 12)                                	 0.684175  	 1300      	 99.9143   	 0         	 4.96153   	 20.1378   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 80, m: 80)                                                                               	 0.556947  	 700       	 6.00608   	 0         	 0.193857  	 30.982    
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 80, n: 50, r2new: 80)	 0.260172  	 700       	 73.1825   	 0         	 10.6846   	 6.84932   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4000, r: 80, r2: 80, leftOrthog: 1)                      	 0.137873  	 600       	 222.814   	 0         	 33.8677   	 6.57895   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 4000, Xcols: 80, r: 80, streamingCols: 0)                                 	 0.122047  	 700       	 146.829   	 0         	 29.5125   	 4.97512   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 80, n: 50, r: 80, r2: 80)                           	 0.10437   	 700       	 343.393   	 0         	 34.6827   	 9.90099   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 80, reductionFactor: 37, colBlockingSize: 12)                                	 0.102192  	 200       	 64.3198   	 0         	 3.23156   	 19.9036   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 80, m: 80)                                                                                	 0.092382  	 900       	 6.65064   	 0         	 1.50263   	 4.426     
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 80, r1_: 80, n: 50, r2: 80)                         	 0.0765329 	 600       	 401.396   	 0         	 40.541    	 9.90099   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 80, m: 4000)                                                                                	 0.0500626 	 700       	 0         	 0         	 71.5904   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 80)                                                                               	 0.0471098 	 100       	 3.7501    	 0         	 0.179156  	 20.9321   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                               	 0.0376089 	 100       	 3.1021    	 0         	 0.1606    	 19.3157   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 4000, m: 80)                                                                       	 0.0247105 	 700       	 0         	 0         	 145.039   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4000, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                	 0.022581  	 100       	 90.9637   	 0         	 7.17416   	 12.6793   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 80, n: 50, r2new: 50)	 0.0176172 	 100       	 96.4964   	 0         	 16.9834   	 5.68182   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 80, r2: 80, leftOrthog: 1)                      	 0.0151865 	 100       	 210.713   	 0         	 32.2813   	 6.52742   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 80, r: 80, streamingCols: 0)                                 	 0.0130711 	 100       	 122.407   	 0         	 24.6773   	 4.96032   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 80, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0121785 	 200       	 10.7944   	 0         	 1.36634   	 7.90021   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4000, r: 50, r2: 50, leftOrthog: 1)                      	 0.0107465 	 100       	 186.107   	 0         	 45.038    	 4.13223   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 30, n: 50, r2: 30)                                                                                                       	 0.0101522 	 800       	 0         	 0         	 56.7366   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 80, n: 50, r: 80, r2: 50)                           	 0.00933445	 100       	 342.816   	 0         	 44.9089   	 7.63359   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 80, r1_: 80, n: 50, r2: 50)                         	 0.00870644	 100       	 367.544   	 0         	 37.3425   	 9.84252   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 80, m: 2500)                                                                                	 0.00705882	 100       	 0         	 0         	 45.3334   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 80, r1_: 50, n: 50, r2: 80)                         	 0.00473014	 100       	 676.512   	 0         	 88.6231   	 7.63359   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 80)                                                                       	 0.0046746 	 100       	 0         	 0         	 68.455    	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 80, m: 80, fromLeft: 1)                              	 0.00378798	 800       	 0         	 0         	 21.6263   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 80, leftOrthog: 1)                        	 0.0019335 	 100       	 20.6879   	 0         	 7.03388   	 2.94118   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 80, r: 50, streamingCols: 0)                                   	 0.00184222	 100       	 6.78528   	 0         	 2.71411   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 80) 	 0.00183154	 100       	 34.9433   	 0         	 6.28979   	 5.55556   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 80, n: 50, r2new: 1) 	 0.00101859	 100       	 0.785396  	 0         	 6.28474   	 0.124969  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 80, r2: 80)                            	 0.000912292	 100       	 70.153    	 0         	 12.6275   	 5.55556   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000905769	 100       	 0.552017  	 0         	 2.20807   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 80)                           	 0.000774166	 100       	 0         	 0         	 8.26696   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000713736	 100       	 35.027    	 0         	 8.40647   	 4.16667   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                  	 0.000484488	 100       	 0         	 0         	 8.25614   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 80, n: 50, r: 2, r2: 1)                             	 0.000480285	 100       	 3.33136   	 0         	 19.9915   	 0.166639  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 80)                                                                                                        	 0.000461941	 100       	 0         	 0         	 13.8546   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 30)                                                                                                        	 0.000398294	 100       	 0         	 0         	 6.0257    	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 80)                                                                         	 0.00039126	 100       	 0         	 0         	 16.3574   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.00032962	 100       	 0.758449  	 0         	 12.1352   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 30, n: 50, r2: 1)                                                                                                        	 0.000313928	 100       	 0         	 0         	 7.64507   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 80, m: 50, fromLeft: 1)                              	 0.000216121	 100       	 0         	 0         	 29.613    	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 2.74624   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 2.74621   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 1.6651    	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 1.66378   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 1.47329   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 0.821127  	 1800      
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 0.764123  	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.641666  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.430047  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.392043  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.280639  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.165739  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.13696   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.115097  	 1000      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.092382  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.0906832 	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.0576059 	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.0297764 	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0113263 	 1100      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00524408	 4600      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00400411	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00282322	 6400      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.00219065	 1800      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000905769	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000774166	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.00032962	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23060332476288 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23060149168128 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23059947841664 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23059746515200 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23059545188736 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23059343862272 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23059142535808 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23058941209344 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23058739882880 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23058538556416 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23058337229952 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23058135903488 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23057934577024 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23057733250560 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23057531924096 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23057330597632 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23057129271168 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23056927944704 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23056726618240 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23056525291776 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23056323965312 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23056122638848 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23055921312384 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23055719985920 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23055518659456 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23055317332992 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23055116006528 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23054914680064 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23054713353600 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23054512027136 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23054310700672 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23054109374208 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23053908043648 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23053706717184 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23053505390720 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23053304064256 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23053102737792 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23052901411328 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23052700084864 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23052498758400 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23052297431936 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23052096105472 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23051894779008 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23051693452544 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23051492126080 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23051290799616 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23051089473152 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23050888146688 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23050686820224 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23050485493760 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23050284167296 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23050082840832 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23049881514368 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23049680187904 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23049478861440 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23049277534976 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23049076208512 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23048874882048 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23048673555584 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23048472229120 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23048270902656 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23048069576192 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23047868249728 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23060226815744 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23060220225280 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4050, cols: 81, reductionFactor: 37, colBlockingSize: 12)                                	 0.70904   	 1300      	 100.071   	 0         	 4.90798   	 20.3895   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 81, m: 81)                                                                               	 0.617366  	 700       	 5.62402   	 0         	 0.179275  	 31.3709   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4050, r: 81, r2: 81, leftOrthog: 1)                      	 0.146644  	 600       	 217.441   	 0         	 32.643    	 6.66118   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 4050, Xcols: 81, r: 81, streamingCols: 0)                                 	 0.124276  	 700       	 149.671   	 0         	 29.7125   	 5.03731   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 81, n: 50, r2new: 81)	 0.111566  	 700       	 175.895   	 0         	 25.4819   	 6.90276   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 81, reductionFactor: 37, colBlockingSize: 12)                                	 0.104861  	 200       	 64.2594   	 0         	 3.1899    	 20.1446   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 81, m: 4050)                                                                                	 0.103429  	 700       	 0         	 0         	 35.5234   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 81, m: 81)                                                                                	 0.0985157 	 900       	 6.47337   	 0         	 1.44445   	 4.48156   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 4050, m: 81)                                                                       	 0.0898126 	 700       	 0         	 0         	 40.9092   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 81, r1_: 81, n: 50, r2: 81)                         	 0.0741272 	 600       	 430.159   	 0         	 42.9097   	 10.0248   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 81, n: 50, r: 81, r2: 81)                           	 0.0682542 	 700       	 545.034   	 0         	 54.3688   	 10.0248   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 81)                                                                               	 0.0479057 	 100       	 3.72955   	 0         	 0.17785   	 20.9703   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                               	 0.0377918 	 100       	 3.08709   	 0         	 0.159823  	 19.3157   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4050, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                	 0.0226111 	 100       	 91.9782   	 0         	 7.25307   	 12.6813   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 81, n: 50, r2new: 50)	 0.0156322 	 100       	 110.701   	 0         	 19.4266   	 5.69843   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 81, r2: 81, leftOrthog: 1)                      	 0.0151553 	 100       	 216.458   	 0         	 32.7606   	 6.60728   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 81, r: 81, streamingCols: 0)                                 	 0.0135955 	 100       	 120.647   	 0         	 24.0245   	 5.02182   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 81, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0116729 	 200       	 11.5452   	 0         	 1.45444   	 7.9379    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4050, r: 50, r2: 50, leftOrthog: 1)                      	 0.0113582 	 100       	 178.285   	 0         	 43.1407   	 4.13265   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 81, n: 50, r: 81, r2: 50)                           	 0.00976182	 100       	 336.054   	 0         	 43.8115   	 7.67045   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 31, n: 50, r2: 31)                                                                                                       	 0.00964222	 800       	 0         	 0         	 63.7862   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 81, r1_: 81, n: 50, r2: 50)                         	 0.00893483	 100       	 367.159   	 0         	 36.85     	 9.96359   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 81, m: 2500)                                                                                	 0.00516778	 100       	 0         	 0         	 62.6962   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 81, r1_: 50, n: 50, r2: 81)                         	 0.00492203	 100       	 666.493   	 0         	 86.891    	 7.67045   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 81)                                                                       	 0.00455814	 100       	 0         	 0         	 71.0817   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 81, m: 81, fromLeft: 1)                              	 0.00390605	 800       	 0         	 0         	 21.5002   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 81) 	 0.00198126	 100       	 33.1153   	 0         	 5.91987   	 5.59392   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 81, leftOrthog: 1)                        	 0.00196865	 100       	 20.5725   	 0         	 6.96924   	 2.9519    
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 81, r: 50, streamingCols: 0)                                   	 0.00144684	 100       	 8.63953   	 0         	 3.45581   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 81, r2: 81)                            	 0.00105129	 100       	 62.409    	 0         	 11.1566   	 5.59392   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 81, n: 50, r2new: 1) 	 0.000936103	 100       	 0.865289  	 0         	 6.92402   	 0.124969  
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000799022	 100       	 0.625765  	 0         	 2.50306   	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000770338	 100       	 32.4533   	 0         	 7.78879   	 4.16667   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 81)                           	 0.000768572	 100       	 0         	 0         	 8.43122   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                  	 0.000488949	 100       	 0         	 0         	 8.18081   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 31)                                                                                                        	 0.000461083	 100       	 0         	 0         	 5.37864   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 81)                                                                                                        	 0.000456831	 100       	 0         	 0         	 14.1847   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 81, n: 50, r: 2, r2: 1)                             	 0.000367294	 100       	 4.41064   	 0         	 26.4682   	 0.166639  
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 81)                                                                         	 0.000357482	 100       	 0         	 0         	 18.1268   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 31, n: 50, r2: 1)                                                                                                        	 0.000348973	 100       	 0         	 0         	 7.10657   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000329525	 100       	 0.758668  	 0         	 12.1387   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 81, m: 50, fromLeft: 1)                              	 0.000214385	 100       	 0         	 0         	 30.226    	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 2.78976   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 2.78973   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 1.73049   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 1.72927   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 1.56915   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 0.919792  	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 0.848186  	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.703064  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.440505  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.40869   	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.175126  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.139318  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.130115  	 1000      
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.109086  	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.0985157 	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.0947282 	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.0887544 	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.0794346 	 1000      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0109091 	 1100      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.00797718	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00517998	 6400      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00412043	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.001     	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000799022	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000768572	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000329525	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23437768939392 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23437569419264 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23437368092800 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23437166766336 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23436965439872 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23436764113408 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23436562786944 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23436361460480 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23436160134016 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23435958807552 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23435757481088 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23435556154624 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23435354828160 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23435153501696 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23434952175232 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23434750848768 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23434549522304 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23434348195840 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23434146869376 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23433945542912 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23433744216448 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23433542889984 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23433341563520 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23433140237056 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23432938910592 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23432737584128 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23432536257664 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23432334931200 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23432133604736 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23431932278272 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23431730951808 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23431529625344 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23431328294784 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23431126968320 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23430925641856 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23430724315392 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23430522988928 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23430321662464 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23430120336000 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23429919009536 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23429717683072 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23429516356608 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23429315030144 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23429113703680 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23428912377216 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23428711050752 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23428509724288 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23428308397824 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23428107071360 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23427905744896 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23427704418432 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23427503091968 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23427301765504 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23427100439040 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23426899112576 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23426697786112 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23426496459648 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23426295133184 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23426093806720 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23425892480256 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23425691153792 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23425489827328 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23425288500864 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23437663278848 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23437656688384 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4100, cols: 82, reductionFactor: 37, colBlockingSize: 12)                                	 0.722936  	 1300      	 101.828   	 0         	 4.93323   	 20.6412   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 82, m: 82)                                                                               	 0.620055  	 700       	 5.8096    	 0         	 0.182923  	 31.7598   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4100, r: 82, r2: 82, leftOrthog: 1)                      	 0.136027  	 600       	 243.203   	 0         	 36.0652   	 6.74342   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 4100, Xcols: 82, r: 82, streamingCols: 0)                                 	 0.129002  	 700       	 149.593   	 0         	 29.3349   	 5.0995    
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 82, n: 50, r2new: 82)	 0.118205  	 700       	 171.124   	 0         	 24.5936   	 6.95807   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 82, m: 4100)                                                                                	 0.111603  	 700       	 0         	 0         	 33.7396   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 82, reductionFactor: 37, colBlockingSize: 12)                                	 0.110452  	 200       	 62.5225   	 0         	 3.06702   	 20.3854   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 82, m: 82)                                                                                	 0.0935264 	 900       	 7.07437   	 0         	 1.55923   	 4.5371    
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 4100, m: 82)                                                                       	 0.0795297 	 700       	 0         	 0         	 47.3463   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 82, r1_: 82, n: 50, r2: 82)                         	 0.0793163 	 600       	 417.09    	 0         	 41.0987   	 10.1485   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 82, n: 50, r: 82, r2: 82)                           	 0.0711377 	 700       	 542.55    	 0         	 53.4611   	 10.1485   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 82)                                                                               	 0.0482111 	 100       	 3.74741   	 0         	 0.178382  	 21.0078   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                               	 0.036979  	 100       	 3.15495   	 0         	 0.163336  	 19.3157   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4100, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                	 0.0222727 	 100       	 94.5287   	 0         	 7.45308   	 12.6832   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 82, n: 50, r2new: 50)	 0.0165503 	 100       	 106.463   	 0         	 18.6244   	 5.71632   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 82, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0157568 	 200       	 8.76539   	 0         	 1.09911   	 7.97502   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 82, r2: 82, leftOrthog: 1)                      	 0.0140444 	 100       	 239.384   	 0         	 35.7979   	 6.68711   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 82, r: 82, streamingCols: 0)                                 	 0.0134607 	 100       	 124.882   	 0         	 24.567    	 5.08332   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4100, r: 50, r2: 50, leftOrthog: 1)                      	 0.0124795 	 100       	 164.269   	 0         	 39.7451   	 4.13306   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 32, n: 50, r2: 32)                                                                                                       	 0.0113852 	 800       	 0         	 0         	 57.5624   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 82, n: 50, r: 82, r2: 50)                           	 0.0093713 	 100       	 358.755   	 0         	 46.5506   	 7.70677   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 82, r1_: 82, n: 50, r2: 50)                         	 0.00913119	 100       	 368.189   	 0         	 36.5099   	 10.0846   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 82, m: 2500)                                                                                	 0.00569565	 100       	 0         	 0         	 57.5878   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 82, r1_: 50, n: 50, r2: 82)                         	 0.00487067	 100       	 690.255   	 0         	 89.5647   	 7.70677   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 82)                                                                       	 0.00479606	 100       	 0         	 0         	 68.3894   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 82, m: 82, fromLeft: 1)                              	 0.00399719	 800       	 0         	 0         	 21.5319   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 82, leftOrthog: 1)                        	 0.00211941	 100       	 19.345    	 0         	 6.53012   	 2.96243   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 82) 	 0.00199705	 100       	 33.6696   	 0         	 5.97842   	 5.63187   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 82, r: 50, streamingCols: 0)                                   	 0.00145   	 100       	 8.62068   	 0         	 3.44827   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 82, r2: 82)                            	 0.00106515	 100       	 63.1273   	 0         	 11.2089   	 5.63187   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 82, n: 50, r2new: 1) 	 0.00104735	 100       	 0.782931  	 0         	 6.26498   	 0.12497   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000780128	 100       	 0.64092   	 0         	 2.56368   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 82)                           	 0.000753952	 100       	 0         	 0         	 8.70082   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000732448	 100       	 34.1321   	 0         	 8.19171   	 4.16667   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                  	 0.000476812	 100       	 0         	 0         	 8.38905   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 82, n: 50, r: 2, r2: 1)                             	 0.000474031	 100       	 3.45969   	 0         	 20.7615   	 0.16664   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 82)                                                                                                        	 0.000462202	 100       	 0         	 0         	 14.1929   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 32)                                                                                                        	 0.000392386	 100       	 0         	 0         	 6.52419   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 82)                                                                         	 0.000381568	 100       	 0         	 0         	 17.1922   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 32, n: 50, r2: 1)                                                                                                        	 0.00033566	 100       	 0         	 0         	 7.62677   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000328436	 100       	 0.761183  	 0         	 12.1789   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 82, m: 50, fromLeft: 1)                              	 0.000205003	 100       	 0         	 0         	 31.9995   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 2.78851   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 2.78849   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 1.71578   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 1.71458   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 1.55893   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 0.929511  	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 0.871417  	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.705245  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.456083  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.416403  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.16467   	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.143913  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.1378    	 1000      
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.117775  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.0940506 	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.0935264 	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.0847073 	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.0820481 	 1000      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0125755 	 1100      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.00589125	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00468938	 6400      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00420219	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.000973892	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000780128	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000753952	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000328436	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23326649251712 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23326437140480 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23326235814016 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23326034487552 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23325833161088 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23325631834624 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23325430508160 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23325229181696 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23325027855232 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23324826528768 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23324625202304 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23324423875840 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23324222549376 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23324021222912 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23323819896448 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23323618569984 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23323417243520 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23323215917056 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23323014590592 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23322813264128 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23322611937664 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23322410611200 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23322209284736 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23322007958272 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23321806631808 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23321605305344 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23321403978880 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23321202652416 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23321001325952 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23320799999488 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23320598673024 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23320397346560 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23320196016000 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23319994689536 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23319793363072 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23319592036608 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23319390710144 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23319189383680 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23318988057216 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23318786730752 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23318585404288 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23318384077824 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23318182751360 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23317981424896 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23317780098432 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23317578771968 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23317377445504 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23317176119040 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23316974792576 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23316773466112 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23316572139648 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23316370813184 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23316169486720 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23315968160256 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23315766833792 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23315565507328 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23315364180864 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23315162854400 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23314961527936 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23314760201472 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23314558875008 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23314357548544 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23314156222080 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23326543591168 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23326537000704 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4150, cols: 83, reductionFactor: 37, colBlockingSize: 12)                                	 0.759696  	 1300      	 100.489   	 0         	 4.80972   	 20.893    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 83, m: 83)                                                                               	 0.62947   	 700       	 5.93464   	 0         	 0.1846    	 32.1487   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4150, r: 83, r2: 83, leftOrthog: 1)                      	 0.143162  	 600       	 239.638   	 0         	 35.1085   	 6.82566   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 4150, Xcols: 83, r: 83, streamingCols: 0)                                 	 0.129647  	 700       	 154.361   	 0         	 29.9052   	 5.16169   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 83, n: 50, r2new: 83)	 0.126396  	 700       	 164.975   	 0         	 23.5168   	 7.01519   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 83, reductionFactor: 37, colBlockingSize: 12)                                	 0.112491  	 200       	 62.8956   	 0         	 3.04933   	 20.626    
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 4150, m: 83)                                                                       	 0.111167  	 700       	 0         	 0         	 34.7031   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 83, m: 83)                                                                                	 0.0988932 	 900       	 6.93823   	 0         	 1.51072   	 4.59266   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 83, m: 4150)                                                                                	 0.094409  	 700       	 0         	 0         	 40.8631   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 83, r1_: 83, n: 50, r2: 83)                         	 0.079794  	 600       	 429.947   	 0         	 41.8551   	 10.2723   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 83, n: 50, r: 83, r2: 83)                           	 0.07675   	 700       	 521.499   	 0         	 50.7677   	 10.2723   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 83)                                                                               	 0.0466766 	 100       	 3.91345   	 0         	 0.18596   	 21.0445   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                               	 0.0373928 	 100       	 3.12003   	 0         	 0.161529  	 19.3157   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4150, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                	 0.0233768 	 100       	 91.1624   	 0         	 7.18662   	 12.685    
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 83, n: 50, r2new: 50)	 0.0184853 	 100       	 97.0772   	 0         	 16.9259   	 5.73543   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 83, r2: 83, leftOrthog: 1)                      	 0.0163141 	 100       	 211.136   	 0         	 31.2014   	 6.76689   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 83, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0144838 	 200       	 9.76982   	 0         	 1.21946   	 8.01158   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 83, r: 83, streamingCols: 0)                                 	 0.0137746 	 100       	 125.031   	 0         	 24.3025   	 5.1448    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 33, n: 50, r2: 33)                                                                                                       	 0.0117906 	 800       	 0         	 0         	 59.1117   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4150, r: 50, r2: 50, leftOrthog: 1)                      	 0.0104814 	 100       	 197.97    	 0         	 47.8944   	 4.13347   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 83, n: 50, r: 83, r2: 50)                           	 0.00990131	 100       	 347.883   	 0         	 44.9314   	 7.74254   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 83, r1_: 83, n: 50, r2: 50)                         	 0.00943203	 100       	 365.192   	 0         	 35.7835   	 10.2056   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 83, m: 2500)                                                                                	 0.0048783 	 100       	 0         	 0         	 68.0566   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 83)                                                                       	 0.0046758 	 100       	 0         	 0         	 71.0039   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 83, r1_: 50, n: 50, r2: 83)                         	 0.00454529	 100       	 757.818   	 0         	 97.8772   	 7.74254   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 83, m: 83, fromLeft: 1)                              	 0.00408195	 800       	 0         	 0         	 21.6022   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 83, leftOrthog: 1)                        	 0.00200298	 100       	 20.7191   	 0         	 6.96961   	 2.97278   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 83) 	 0.00194883	 100       	 35.3494   	 0         	 6.23513   	 5.6694    
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 83, r: 50, streamingCols: 0)                                   	 0.00150009	 100       	 8.33284   	 0         	 3.33314   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 83, n: 50, r2new: 1) 	 0.00113791	 100       	 0.72941   	 0         	 5.83669   	 0.12497   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 83, r2: 83)                            	 0.00103662	 100       	 66.4566   	 0         	 11.722    	 5.6694    
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000792977	 100       	 0.630535  	 0         	 2.52214   	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000759844	 100       	 32.9015   	 0         	 7.89636   	 4.16667   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 83)                           	 0.000756938	 100       	 0         	 0         	 8.77218   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 83, n: 50, r: 2, r2: 1)                             	 0.000518617	 100       	 3.20082   	 0         	 19.208    	 0.16664   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                  	 0.000486464	 100       	 0         	 0         	 8.2226    	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 83)                                                                                                        	 0.000468784	 100       	 0         	 0         	 14.1643   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 83)                                                                         	 0.000434844	 100       	 0         	 0         	 15.2698   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 33)                                                                                                        	 0.00039468	 100       	 0         	 0         	 6.68896   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.00034718	 100       	 0.720088  	 0         	 11.5214   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 33, n: 50, r2: 1)                                                                                                        	 0.000325116	 100       	 0         	 0         	 8.12018   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 83, m: 50, fromLeft: 1)                              	 0.000210861	 100       	 0         	 0         	 31.4899   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 2.90232   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 2.90229   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 1.76806   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 1.76684   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 1.59897   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 0.977202  	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 0.910048  	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.713539  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.4811    	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.430086  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.171961  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.147968  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.144922  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.116278  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.0997738 	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.0988932 	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.0945312 	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.0882066 	 1000      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0129791 	 1100      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.011044  	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00478939	 6400      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00429281	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.000924082	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000792977	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000756938	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.00034718	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23297622685568 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23297446111232 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23297244784768 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23297043458304 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23296842131840 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23296640805376 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23296439478912 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23296238152448 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23296036825984 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23295835499520 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23295634173056 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23295432846592 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23295231520128 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23295030193664 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23294828867200 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23294627540736 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23294426214272 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23294224887808 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23294023561344 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23293822234880 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23293620908416 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23293419581952 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23293218255488 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23293016929024 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23292815602560 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23292614276096 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23292412949632 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23292211623168 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23292010296704 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23291808970240 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23291607643776 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23291406317312 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23291204986752 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23291003660288 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23290802333824 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23290601007360 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23290399680896 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23290198354432 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23289997027968 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23289795701504 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23289594375040 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23289393048576 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23289191722112 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23288990395648 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23288789069184 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23288587742720 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23288386416256 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23288185089792 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23287983763328 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23287782436864 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23287581110400 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23287379783936 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23287178457472 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23286977131008 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23286775804544 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23286574478080 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23286373151616 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23286171825152 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23285970498688 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23285769172224 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23285567845760 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23285366519296 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23285165192832 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23297517025024 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23297338459904 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4200, cols: 84, reductionFactor: 37, colBlockingSize: 12)                                	 0.767436  	 1300      	 103.115   	 0         	 4.87663   	 21.1447   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 84, m: 84)                                                                               	 0.630177  	 700       	 6.14484   	 0         	 0.188854  	 32.5375   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4200, r: 84, r2: 84, leftOrthog: 1)                      	 0.150255  	 600       	 236.679   	 0         	 34.262    	 6.90789   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 4200, Xcols: 84, r: 84, streamingCols: 0)                                 	 0.130725  	 700       	 158.689   	 0         	 30.3777   	 5.22388   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 84, n: 50, r2new: 84)	 0.123196  	 700       	 174.497   	 0         	 24.6671   	 7.07409   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 84, reductionFactor: 37, colBlockingSize: 12)                                	 0.113365  	 200       	 63.9234   	 0         	 3.06345   	 20.8665   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 4200, m: 84)                                                                       	 0.106611  	 700       	 0         	 0         	 37.0633   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 84, m: 4200)                                                                                	 0.106129  	 700       	 0         	 0         	 37.2318   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 84, m: 84)                                                                                	 0.0954952 	 900       	 7.44796   	 0         	 1.60233   	 4.64822   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 84, r1_: 84, n: 50, r2: 84)                         	 0.0743523 	 600       	 478.294   	 0         	 46.0073   	 10.396    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 84, n: 50, r: 84, r2: 84)                           	 0.074329  	 700       	 558.185   	 0         	 53.692    	 10.396    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 84)                                                                               	 0.0472141 	 100       	 3.91126   	 0         	 0.185538  	 21.0807   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                               	 0.0372343 	 100       	 3.13331   	 0         	 0.162216  	 19.3157   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4200, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                	 0.0231877 	 100       	 93.0129   	 0         	 7.33147   	 12.6868   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 84, n: 50, r2new: 50)	 0.0180588 	 100       	 101.225   	 0         	 17.587    	 5.75567   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4200, r: 50, r2: 50, leftOrthog: 1)                      	 0.0161756 	 100       	 129.825   	 0         	 31.4054   	 4.13386   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 84, r2: 84, leftOrthog: 1)                      	 0.014932  	 100       	 236.271   	 0         	 34.5091   	 6.84664   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 84, r: 84, streamingCols: 0)                                 	 0.0138102 	 100       	 127.731   	 0         	 24.5341   	 5.20627   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 84, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0125341 	 200       	 11.5632   	 0         	 1.43685   	 8.0476    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 34, n: 50, r2: 34)                                                                                                       	 0.0118613 	 800       	 0         	 0         	 62.3741   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 84, n: 50, r: 84, r2: 50)                           	 0.0101432 	 100       	 347.818   	 0         	 44.7195   	 7.77778   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 84, r1_: 84, n: 50, r2: 50)                         	 0.00926418	 100       	 380.821   	 0         	 36.878    	 10.3265   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 84, m: 2500)                                                                                	 0.00558507	 100       	 0         	 0         	 60.1604   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 84, r1_: 50, n: 50, r2: 84)                         	 0.00480511	 100       	 734.218   	 0         	 94.3994   	 7.77778   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 84)                                                                       	 0.00477264	 100       	 0         	 0         	 70.4012   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 84, m: 84, fromLeft: 1)                              	 0.00417838	 800       	 0         	 0         	 21.6153   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 84) 	 0.00222426	 100       	 31.7229   	 0         	 5.55905   	 5.70652   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 84, leftOrthog: 1)                        	 0.00194354	 100       	 21.61     	 0         	 7.2445    	 2.98295   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 84, n: 50, r2new: 1) 	 0.00154033	 100       	 0.545338  	 0         	 4.36374   	 0.12497   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 84, r: 50, streamingCols: 0)                                   	 0.00135007	 100       	 9.25881   	 0         	 3.70352   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 84, r2: 84)                            	 0.00130866	 100       	 53.9177   	 0         	 9.44844   	 5.70652   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000952781	 100       	 26.239    	 0         	 6.29735   	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000917776	 100       	 0.544795  	 0         	 2.17918   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 84)                           	 0.000755516	 100       	 0         	 0         	 8.89458   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 84, n: 50, r: 2, r2: 1)                             	 0.00071152	 100       	 2.36114   	 0         	 14.1691   	 0.16664   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                  	 0.000471031	 100       	 0         	 0         	 8.49201   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 84)                                                                                                        	 0.000463714	 100       	 0         	 0         	 14.4917   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 84)                                                                         	 0.000442327	 100       	 0         	 0         	 15.1924   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 34)                                                                                                        	 0.000362171	 100       	 0         	 0         	 7.51026   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 34, n: 50, r2: 1)                                                                                                        	 0.000332837	 100       	 0         	 0         	 8.17217   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000326199	 100       	 0.766403  	 0         	 12.2625   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 84, m: 50, fromLeft: 1)                              	 0.000208158	 100       	 0         	 0         	 32.2832   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 2.91716   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 2.91713   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 1.79407   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 1.79274   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 1.629     	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 0.972972  	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 0.916524  	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.714625  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.479008  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.438596  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.183307  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.145885  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.145019  	 1000      
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.112185  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.111826  	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.0954952 	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.0893744 	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.0864924 	 1000      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0130201 	 1100      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.00873468	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00493847	 6400      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00438654	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.000959031	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000917776	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000755516	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000326199	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22852446095232 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22852245907456 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22852044580992 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22851843254528 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22851641928064 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22851440601600 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22851239275136 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22851037948672 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22850836622208 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22850635295744 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22850433969280 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22850232642816 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22850031316352 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22849829989888 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22849628663424 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22849427336960 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22849226010496 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22849024684032 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22848823357568 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22848622031104 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22848420704640 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22848219378176 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22848018051712 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22847816725248 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22847615398784 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22847414072320 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22847212745856 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22847011419392 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22846810092928 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22846608766464 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22846407440000 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22846206113536 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22846004782976 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22845803456512 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22845602130048 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22845400803584 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22845199477120 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22844998150656 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22844796824192 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22844595497728 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22844394171264 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22844192844800 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22843991518336 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22843790191872 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22843588865408 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22843387538944 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22843186212480 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22842984886016 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22842783559552 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22842582233088 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22842380906624 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22842179580160 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22841978253696 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22841776927232 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22841575600768 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22841374274304 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22841172947840 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22840971621376 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22840770294912 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22840568968448 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22840367641984 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22840166315520 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22839964989056 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22852340434688 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22852333844224 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4250, cols: 85, reductionFactor: 37, colBlockingSize: 12)                                	 0.798481  	 1300      	 102.687   	 0         	 4.79929   	 21.3964   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 85, m: 85)                                                                               	 0.675228  	 700       	 5.94211   	 0         	 0.180466  	 32.9264   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4250, r: 85, r2: 85, leftOrthog: 1)                      	 0.162849  	 600       	 226.267   	 0         	 32.3695   	 6.99013   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 4250, Xcols: 85, r: 85, streamingCols: 0)                                 	 0.137995  	 700       	 155.762   	 0         	 29.4664   	 5.28607   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 4250, m: 85)                                                                       	 0.133605  	 700       	 0         	 0         	 30.2834   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 85, n: 50, r2new: 85)	 0.129461  	 700       	 171.2     	 0         	 23.9953   	 7.13473   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 85, reductionFactor: 37, colBlockingSize: 12)                                	 0.119075  	 200       	 62.316    	 0         	 2.95243   	 21.1067   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 85, m: 85)                                                                                	 0.104329  	 900       	 7.06368   	 0         	 1.50171   	 4.70377   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 85, m: 4250)                                                                                	 0.103972  	 700       	 0         	 0         	 38.9144   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 85, r1_: 85, n: 50, r2: 85)                         	 0.0799944 	 600       	 460.626   	 0         	 43.7866   	 10.5198   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 85, n: 50, r: 85, r2: 85)                           	 0.0771931 	 700       	 556.899   	 0         	 52.9381   	 10.5198   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 85)                                                                               	 0.0514223 	 100       	 3.63007   	 0         	 0.17191   	 21.1161   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                               	 0.0395338 	 100       	 2.95106   	 0         	 0.152781  	 19.3157   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4250, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                	 0.0230116 	 100       	 94.8405   	 0         	 7.47449   	 12.6886   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 85, n: 50, r2new: 50)	 0.0184548 	 100       	 100.922   	 0         	 17.4697   	 5.77699   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 85, r2: 85, leftOrthog: 1)                      	 0.0164671 	 100       	 219.377   	 0         	 31.6728   	 6.92634   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 85, reductionFactor: 37, colBlockingSize: 12)                                  	 0.015317  	 200       	 9.68894   	 0         	 1.19867   	 8.08308   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4250, r: 50, r2: 50, leftOrthog: 1)                      	 0.0149066 	 100       	 142.554   	 0         	 34.4814   	 4.13424   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 85, r: 85, streamingCols: 0)                                 	 0.0141135 	 100       	 127.98    	 0         	 24.2952   	 5.26772   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 35, n: 50, r2: 35)                                                                                                       	 0.0120365 	 800       	 0         	 0         	 65.1354   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 85, n: 50, r: 85, r2: 50)                           	 0.00989927	 100       	 364.926   	 0         	 46.7105   	 7.8125    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 85, r1_: 85, n: 50, r2: 50)                         	 0.00894892	 100       	 403.68    	 0         	 38.6393   	 10.4474   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 85)                                                                       	 0.00530358	 100       	 0         	 0         	 64.1076   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 85, r1_: 50, n: 50, r2: 85)                         	 0.00516468	 100       	 699.463   	 0         	 89.5313   	 7.8125    
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 85, m: 2500)                                                                                	 0.00491464	 100       	 0         	 0         	 69.1811   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 85, m: 85, fromLeft: 1)                              	 0.00470282	 800       	 0         	 0         	 19.6648   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 85) 	 0.00224459	 100       	 32.1885   	 0         	 5.60458   	 5.74324   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 85, leftOrthog: 1)                        	 0.0019465 	 100       	 21.8341   	 0         	 7.29516   	 2.99296   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 85, r: 50, streamingCols: 0)                                   	 0.00139441	 100       	 8.96436   	 0         	 3.58574   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 85, r2: 85)                            	 0.00111192	 100       	 64.9774   	 0         	 11.3137   	 5.74324   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 85, n: 50, r2new: 1) 	 0.00106633	 100       	 0.797127  	 0         	 6.37852   	 0.124971  
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 85)                           	 0.000964133	 100       	 0         	 0         	 7.05297   	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000881884	 100       	 0.566968  	 0         	 2.26787   	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000736075	 100       	 33.9639   	 0         	 8.15134   	 4.16667   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 85)                                                                         	 0.00049947	 100       	 0         	 0         	 13.6144   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                  	 0.00049655	 100       	 0         	 0         	 8.05558   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 85)                                                                                                        	 0.000491998	 100       	 0         	 0         	 13.8212   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 85, n: 50, r: 2, r2: 1)                             	 0.000482383	 100       	 3.52417   	 0         	 21.1483   	 0.166641  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 35)                                                                                                        	 0.000412537	 100       	 0         	 0         	 6.78727   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.00032837	 100       	 0.761336  	 0         	 12.1814   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 35, n: 50, r2: 1)                                                                                                        	 0.00031872	 100       	 0         	 0         	 8.78514   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 85, m: 50, fromLeft: 1)                              	 0.000209532	 100       	 0         	 0         	 32.4533   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 3.10317   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 3.10314   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 1.89924   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 1.89794   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 1.72878   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 1.03969   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 0.955885  	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.766184  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.492337  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.464776  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.19617   	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.153503  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.151227  	 1000      
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.139408  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.109383  	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.104329  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.0948441 	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.0886867 	 1000      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0132597 	 1100      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.0114463 	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00522151	 6400      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00491235	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00102305	 4600      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000964133	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000881884	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.00032837	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22668830529408 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22668636055552 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22668434729088 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22668233402624 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22668032076160 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22667830749696 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22667629423232 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22667428096768 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22667226770304 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22667025443840 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22666824117376 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22666622790912 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22666421464448 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22666220137984 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22666018811520 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22665817485056 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22665616158592 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22665414832128 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22665213505664 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22665012179200 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22664810852736 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22664609526272 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22664408199808 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22664206873344 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22664005546880 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22663804220416 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22663602893952 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22663401567488 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22663200241024 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22662998914560 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22662797588096 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22662596261632 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22662394931072 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22662193604608 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22661992278144 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22661790951680 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22661589625216 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22661388298752 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22661186972288 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22660985645824 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22660784319360 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22660582992896 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22660381666432 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22660180339968 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22659979013504 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22659777687040 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22659576360576 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22659375034112 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22659173707648 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22658972381184 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22658771054720 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22658569728256 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22658368401792 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22658167075328 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22657965748864 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22657764422400 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22657563095936 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22657361769472 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22657160443008 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22656959116544 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22656757790080 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22656556463616 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22656355137152 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22668724868864 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22668718278400 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4300, cols: 86, reductionFactor: 37, colBlockingSize: 12)                                	 0.802418  	 1300      	 105.833   	 0         	 4.88877   	 21.6481   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 86, m: 86)                                                                               	 0.66102   	 700       	 6.28659   	 0         	 0.1887    	 33.3153   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4300, r: 86, r2: 86, leftOrthog: 1)                      	 0.164929  	 600       	 231.392   	 0         	 32.7178   	 7.07237   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 86, n: 50, r2new: 86)	 0.156558  	 700       	 145.965   	 0         	 20.2812   	 7.19705   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 4300, Xcols: 86, r: 86, streamingCols: 0)                                 	 0.147719  	 700       	 150.704   	 0         	 28.1782   	 5.34826   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 4300, m: 86)                                                                       	 0.140707  	 700       	 0         	 0         	 29.4353   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 86, reductionFactor: 37, colBlockingSize: 12)                                	 0.117736  	 200       	 64.5164   	 0         	 3.0223    	 21.3468   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 86, m: 86)                                                                                	 0.103243  	 900       	 7.39292   	 0         	 1.55335   	 4.75933   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 86, n: 50, r: 86, r2: 86)                           	 0.10049   	 700       	 443.067   	 0         	 41.6277   	 10.6436   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 86, m: 4300)                                                                                	 0.0900317 	 700       	 0         	 0         	 46.0034   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 86, r1_: 86, n: 50, r2: 86)                         	 0.082388  	 600       	 463.215   	 0         	 43.5207   	 10.6436   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 86)                                                                               	 0.0481389 	 100       	 3.91922   	 0         	 0.185297  	 21.151    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                               	 0.0377666 	 100       	 3.08915   	 0         	 0.15993   	 19.3157   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4300, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                	 0.0230588 	 100       	 95.76     	 0         	 7.54594   	 12.6903   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 86, n: 50, r2new: 50)	 0.0206088 	 100       	 92.0965   	 0         	 15.8806   	 5.79932   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 86, r2: 86, leftOrthog: 1)                      	 0.0168773 	 100       	 219.11    	 0         	 31.2747   	 7.006     
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 86, r: 86, streamingCols: 0)                                 	 0.0143532 	 100       	 128.822   	 0         	 24.1729   	 5.32917   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4300, r: 50, r2: 50, leftOrthog: 1)                      	 0.0137432 	 100       	 156.441   	 0         	 37.8368   	 4.13462   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 86, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0130867 	 200       	 11.6086   	 0         	 1.42997   	 8.11804   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 36, n: 50, r2: 36)                                                                                                       	 0.0121135 	 800       	 0         	 0         	 68.4722   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 86, n: 50, r: 86, r2: 50)                           	 0.0101764 	 100       	 363.391   	 0         	 46.3113   	 7.84672   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 86, r1_: 86, n: 50, r2: 50)                         	 0.00933917	 100       	 395.967   	 0         	 37.4676   	 10.5682   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 86, r1_: 50, n: 50, r2: 86)                         	 0.00528505	 100       	 699.709   	 0         	 89.1722   	 7.84672   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 86)                                                                       	 0.00512854	 100       	 0         	 0         	 67.0756   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 86, n: 50, r2new: 1) 	 0.00511487	 100       	 0.168137  	 0         	 1.34541   	 0.124971  
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 86, m: 2500)                                                                                	 0.00478511	 100       	 0         	 0         	 71.8897   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 86, n: 50, r: 2, r2: 1)                             	 0.0045913 	 100       	 0.374622  	 0         	 2.24808   	 0.166641  
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 86, m: 86, fromLeft: 1)                              	 0.00444945	 800       	 0         	 0         	 21.2765   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 86) 	 0.00199065	 100       	 37.1536   	 0         	 6.42844   	 5.77957   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 86, leftOrthog: 1)                        	 0.00197298	 100       	 21.7944   	 0         	 7.25805   	 3.00279   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 86, r: 50, streamingCols: 0)                                   	 0.00190776	 100       	 6.5522    	 0         	 2.62088   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 86, r2: 86)                            	 0.00106531	 100       	 69.4256   	 0         	 12.0122   	 5.77957   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000788094	 100       	 0.634442  	 0         	 2.53777   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 86)                           	 0.000770556	 100       	 0         	 0         	 8.92862   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000677514	 100       	 36.8996   	 0         	 8.85591   	 4.16667   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                  	 0.000498143	 100       	 0         	 0         	 8.02982   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 86)                                                                                                        	 0.000484936	 100       	 0         	 0         	 14.1874   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 36)                                                                                                        	 0.000387553	 100       	 0         	 0         	 7.43124   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 86)                                                                         	 0.000332478	 100       	 0         	 0         	 20.6931   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000321351	 100       	 0.777966  	 0         	 12.4474   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 36, n: 50, r2: 1)                                                                                                        	 0.00031602	 100       	 0         	 0         	 9.11335   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 86, m: 50, fromLeft: 1)                              	 0.000204488	 100       	 0         	 0         	 33.645    	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 3.1103    	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 3.11027   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 1.86228   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 1.86109   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 1.69262   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 1.04771   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 0.956299  	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.746926  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.498804  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.458617  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.197523  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.184272  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.16398   	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.146168  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.116323  	 1000      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.103243  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.0976897 	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.0953149 	 900       
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.0133998 	 1800      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.013302  	 1100      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00465394	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00440002	 6400      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00119859	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000788094	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000770556	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000321351	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22942901831552 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22942708656128 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22942507329664 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22942306003200 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22942104676736 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22941903350272 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22941702023808 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22941500697344 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22941299370880 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22941098044416 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22940896717952 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22940695391488 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22940494065024 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22940292738560 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22940091412096 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22939890085632 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22939688759168 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22939487432704 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22939286106240 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22939084779776 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22938883453312 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22938682126848 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22938480800384 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22938279473920 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22938078147456 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22937876820992 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22937675494528 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22937474168064 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22937272841600 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22937071515136 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22936870188672 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22936668862208 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22936467531648 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22936266205184 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22936064878720 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22935863552256 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22935662225792 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22935460899328 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22935259572864 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22935058246400 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22934856919936 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22934655593472 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22934454267008 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22934252940544 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22934051614080 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22933850287616 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22933648961152 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22933447634688 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22933246308224 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22933044981760 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22932843655296 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22932642328832 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22932441002368 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22932239675904 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22932038349440 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22931837022976 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22931635696512 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22931434370048 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22931233043584 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22931031717120 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22930830390656 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22930629064192 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22930427737728 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22942796171008 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22942789580544 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4350, cols: 87, reductionFactor: 37, colBlockingSize: 12)                                	 0.818752  	 1300      	 107.382   	 0         	 4.90331   	 21.8998   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 87, m: 87)                                                                               	 0.699746  	 700       	 6.14826   	 0         	 0.182418  	 33.7042   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4350, r: 87, r2: 87, leftOrthog: 1)                      	 0.165034  	 600       	 239.406   	 0         	 33.4618   	 7.15461   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 87, n: 50, r2new: 87)	 0.154471  	 700       	 152.535   	 0         	 21.0074   	 7.26102   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 4350, Xcols: 87, r: 87, streamingCols: 0)                                 	 0.140257  	 700       	 164.325   	 0         	 30.3717   	 5.41045   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 4350, m: 87)                                                                       	 0.122158  	 700       	 0         	 0         	 34.698    	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 87, reductionFactor: 37, colBlockingSize: 12)                                	 0.119751  	 200       	 64.9144   	 0         	 3.00716   	 21.5866   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 87, m: 87)                                                                                	 0.10946   	 900       	 7.21913   	 0         	 1.49934   	 4.81489   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 87, m: 4350)                                                                                	 0.100295  	 700       	 0         	 0         	 42.2619   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 87, n: 50, r: 87, r2: 87)                           	 0.0947815 	 700       	 486.331   	 0         	 45.1673   	 10.7673   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 87, r1_: 87, n: 50, r2: 87)                         	 0.0851103 	 600       	 464.223   	 0         	 43.114    	 10.7673   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 87)                                                                               	 0.0483802 	 100       	 3.941     	 0         	 0.186026  	 21.1852   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                               	 0.0376047 	 100       	 3.10245   	 0         	 0.160618  	 19.3157   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4350, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                	 0.0232602 	 100       	 96.0346   	 0         	 7.56658   	 12.692    
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 87, n: 50, r2new: 50)	 0.0190493 	 100       	 101.552   	 0         	 17.441    	 5.8226    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 87, r2: 87, leftOrthog: 1)                      	 0.016437  	 100       	 230.243   	 0         	 32.4944   	 7.08561   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 87, r: 87, streamingCols: 0)                                 	 0.0146697 	 100       	 128.991   	 0         	 23.9288   	 5.3906    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4350, r: 50, r2: 50, leftOrthog: 1)                      	 0.0129433 	 100       	 168.04    	 0         	 40.6387   	 4.13498   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 87, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0129047 	 200       	 12.0476   	 0         	 1.47778   	 8.1525    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 37, n: 50, r2: 37)                                                                                                       	 0.0122586 	 800       	 0         	 0         	 71.473    	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 87, n: 50, r: 87, r2: 50)                           	 0.0104885 	 100       	 360.824   	 0         	 45.7873   	 7.88043   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 87, r1_: 87, n: 50, r2: 50)                         	 0.00955448	 100       	 396.097   	 0         	 37.0565   	 10.689    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 87, r1_: 50, n: 50, r2: 87)                         	 0.00532758	 100       	 710.36    	 0         	 90.1423   	 7.88043   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 87)                                                                       	 0.00515727	 100       	 0         	 0         	 67.4776   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 87, m: 2500)                                                                                	 0.00499893	 100       	 0         	 0         	 69.615    	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 87, m: 87, fromLeft: 1)                              	 0.0045277 	 800       	 0         	 0         	 21.3979   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 87) 	 0.00206637	 100       	 36.6295   	 0         	 6.2986    	 5.81551   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 87, leftOrthog: 1)                        	 0.00203796	 100       	 21.3449   	 0         	 7.08552   	 3.01247   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 87, r: 50, streamingCols: 0)                                   	 0.00160105	 100       	 7.80738   	 0         	 3.12295   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 87, r2: 87)                            	 0.00113974	 100       	 66.4096   	 0         	 11.4194   	 5.81551   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 87, n: 50, r2new: 1) 	 0.00111666	 100       	 0.779107  	 0         	 6.23429   	 0.124971  
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000912202	 100       	 0.548124  	 0         	 2.1925    	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 87)                           	 0.000766004	 100       	 0         	 0         	 9.08611   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000698632	 100       	 35.7842   	 0         	 8.58821   	 4.16667   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 87, n: 50, r: 2, r2: 1)                             	 0.000487439	 100       	 3.56968   	 0         	 21.4213   	 0.166641  
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                  	 0.000475418	 100       	 0         	 0         	 8.41365   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 87)                                                                                                        	 0.000471478	 100       	 0         	 0         	 14.7621   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 37)                                                                                                        	 0.000424257	 100       	 0         	 0         	 6.9769    	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 87)                                                                         	 0.000378797	 100       	 0         	 0         	 18.374    	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 37, n: 50, r2: 1)                                                                                                        	 0.000344526	 100       	 0         	 0         	 8.59151   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000327152	 100       	 0.764171  	 0         	 12.2267   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 87, m: 50, fromLeft: 1)                              	 0.000201677	 100       	 0         	 0         	 34.5106   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 3.174     	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 3.17397   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 1.93789   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 1.93658   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 1.75828   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 1.04953   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 0.974668  	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.78573   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.514182  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.461699  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.196453  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.176703  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.156527  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.127694  	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.10946   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.106897  	 1000      
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.105769  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.100691  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0134989 	 1100      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.0111013 	 1800      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00472938	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00464876	 6400      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00116101	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000912202	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000766004	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000327152	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22502026999680 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22501803419648 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22501602093184 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22501400766720 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22501199440256 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22500998113792 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22500796787328 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22500595460864 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22500394134400 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22500192807936 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22499991481472 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22499790155008 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22499588828544 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22499387502080 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22499186175616 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22498984849152 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22498783522688 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22498582196224 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22498380869760 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22498179543296 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22497978216832 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22497776890368 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22497575563904 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22497374237440 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22497172910976 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22496971584512 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22496770258048 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22496568931584 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22496367605120 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22496166278656 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22495964952192 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22495763625728 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22495562295168 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22495360968704 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22495159642240 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22494958315776 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22494756989312 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22494555662848 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22494354336384 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22494153009920 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22493951683456 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22493750356992 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22493549030528 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22493347704064 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22493146377600 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22492945051136 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22492743724672 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22492542398208 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22492341071744 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22492139745280 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22491938418816 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22491737092352 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22491535765888 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22491334439424 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22491133112960 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22490931786496 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22490730460032 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22490529133568 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22490327807104 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22490126480640 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22489925154176 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22489723827712 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22489522501248 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22501921339136 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22501914748672 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4400, cols: 88, reductionFactor: 37, colBlockingSize: 12)                                	 0.844423  	 1300      	 107.749   	 0         	 4.86417   	 22.1516   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 88, m: 88)                                                                               	 0.691304  	 700       	 6.44042   	 0         	 0.188907  	 34.0931   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4400, r: 88, r2: 88, leftOrthog: 1)                      	 0.175736  	 600       	 232.669   	 0         	 32.1506   	 7.23684   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 4400, Xcols: 88, r: 88, streamingCols: 0)                                 	 0.144742  	 700       	 164.786   	 0         	 30.1109   	 5.47264   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 88, n: 50, r2new: 88)	 0.143255  	 700       	 169.593   	 0         	 23.1476   	 7.3266    
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 4400, m: 88)                                                                       	 0.139466  	 700       	 0         	 0         	 31.0946   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 88, reductionFactor: 37, colBlockingSize: 12)                                	 0.122758  	 200       	 64.7882   	 0         	 2.96835   	 21.8263   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 88, m: 4400)                                                                                	 0.118444  	 700       	 0         	 0         	 36.6133   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 88, m: 88)                                                                                	 0.107044  	 900       	 7.63949   	 0         	 1.56854   	 4.87043   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 88, n: 50, r: 88, r2: 88)                           	 0.0838099 	 700       	 569.182   	 0         	 52.2612   	 10.8911   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 88, r1_: 88, n: 50, r2: 88)                         	 0.0785838 	 600       	 520.315   	 0         	 47.7743   	 10.8911   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 88)                                                                               	 0.0495756 	 100       	 3.88632   	 0         	 0.183155  	 21.2188   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                               	 0.0393505 	 100       	 2.96481   	 0         	 0.153492  	 19.3157   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4400, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                	 0.0242795 	 100       	 93.0605   	 0         	 7.3313    	 12.6936   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 88, n: 50, r2new: 50)	 0.0203585 	 100       	 96.8635   	 0         	 16.567    	 5.84677   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 88, r2: 88, leftOrthog: 1)                      	 0.0167341 	 100       	 231.384   	 0         	 32.2928   	 7.16519   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 88, r: 88, streamingCols: 0)                                 	 0.0147008 	 100       	 131.694   	 0         	 24.155    	 5.45202   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4400, r: 50, r2: 50, leftOrthog: 1)                      	 0.0145633 	 100       	 151.065   	 0         	 36.5302   	 4.13534   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 88, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0136416 	 200       	 11.6604   	 0         	 1.42435   	 8.18645   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 38, n: 50, r2: 38)                                                                                                       	 0.0129567 	 800       	 0         	 0         	 71.3268   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 88, n: 50, r: 88, r2: 50)                           	 0.0105138 	 100       	 368.279   	 0         	 46.5371   	 7.91367   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 88, r1_: 88, n: 50, r2: 50)                         	 0.00911882	 100       	 424.616   	 0         	 39.2809   	 10.8097   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 88, r1_: 50, n: 50, r2: 88)                         	 0.00575155	 100       	 673.21    	 0         	 85.0692   	 7.91367   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 88, m: 2500)                                                                                	 0.00567362	 100       	 0         	 0         	 62.0415   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 88)                                                                       	 0.00504281	 100       	 0         	 0         	 69.8024   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 88, m: 88, fromLeft: 1)                              	 0.00493317	 800       	 0         	 0         	 20.0932   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 88, leftOrthog: 1)                        	 0.00242481	 100       	 18.1458   	 0         	 6.00459   	 3.02198   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 88) 	 0.00207052	 100       	 37.4012   	 0         	 6.3922    	 5.85106   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 88, r: 50, streamingCols: 0)                                   	 0.00152857	 100       	 8.1776    	 0         	 3.27104   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 88, r2: 88)                            	 0.00117788	 100       	 65.7452   	 0         	 11.2364   	 5.85106   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 88, n: 50, r2new: 1) 	 0.00111639	 100       	 0.788251  	 0         	 6.30744   	 0.124972  
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000837026	 100       	 0.597353  	 0         	 2.38941   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 88)                           	 0.000751827	 100       	 0         	 0         	 9.36386   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.00072957	 100       	 34.2668   	 0         	 8.22402   	 4.16667   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                  	 0.000492295	 100       	 0         	 0         	 8.12521   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 88)                                                                                                        	 0.000473806	 100       	 0         	 0         	 14.8584   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 88, n: 50, r: 2, r2: 1)                             	 0.000455283	 100       	 3.86573   	 0         	 23.1979   	 0.166641  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 38)                                                                                                        	 0.000404514	 100       	 0         	 0         	 7.51519   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 88)                                                                         	 0.000333076	 100       	 0         	 0         	 21.1363   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 38, n: 50, r2: 1)                                                                                                        	 0.000327213	 100       	 0         	 0         	 9.29058   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.00032635	 100       	 0.766049  	 0         	 12.2568   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 88, m: 50, fromLeft: 1)                              	 0.000212376	 100       	 0         	 0         	 33.1488   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 3.28739   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 3.28736   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 2.01035   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 2.00911   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 1.8094    	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 1.1058    	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 1.0051    	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.78023   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.525495  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.480857  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.209458  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.166801  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.160972  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.144842  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.12461   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.107044  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.0959568 	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.0941838 	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0141622 	 1100      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.0130177 	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.0057305 	 6400      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00514554	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.000988607	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000837026	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000751827	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.00032635	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22462478161792 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22462276298752 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22462074972288 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22461873645824 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22461672319360 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22461470992896 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22461269666432 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22461068339968 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22460867013504 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22460665687040 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22460464360576 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22460263034112 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22460061707648 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22459860381184 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22459659054720 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22459457728256 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22459256401792 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22459055075328 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22458853748864 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22458652422400 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22458451095936 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22458249769472 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22458048443008 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22457847116544 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22457645790080 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22457444463616 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22457243137152 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22457041810688 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22456840484224 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22456639157760 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22456437831296 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22456236504832 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22456035174272 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22455833847808 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22455632521344 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22455431194880 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22455229868416 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22455028541952 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22454827215488 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22454625889024 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22454424562560 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22454223236096 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22454021909632 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22453820583168 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22453619256704 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22453417930240 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22453216603776 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22453015277312 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22452813950848 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22452612624384 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22452411297920 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22452209971456 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22452008644992 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22451807318528 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22451605992064 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22451404665600 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22451203339136 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22451002012672 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22450800686208 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22450599359744 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22450398033280 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22450196706816 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22449995380352 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22462372501248 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22462365910784 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4450, cols: 89, reductionFactor: 37, colBlockingSize: 12)                                	 0.870653  	 1300      	 108.106   	 0         	 4.82546   	 22.4033   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 89, m: 89)                                                                               	 0.722292  	 700       	 6.37664   	 0         	 0.184927  	 34.482    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4450, r: 89, r2: 89, leftOrthog: 1)                      	 0.175247  	 600       	 241.363   	 0         	 32.9773   	 7.31908   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 89, n: 50, r2new: 89)	 0.155703  	 700       	 160.889   	 0         	 21.7602   	 7.39373   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 4450, Xcols: 89, r: 89, streamingCols: 0)                                 	 0.148957  	 700       	 165.644   	 0         	 29.9276   	 5.53483   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 4450, m: 89)                                                                       	 0.145753  	 700       	 0         	 0         	 30.4334   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 89, reductionFactor: 37, colBlockingSize: 12)                                	 0.130408  	 200       	 62.3817   	 0         	 2.82707   	 22.0658   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 89, m: 89)                                                                                	 0.118086  	 900       	 7.16393   	 0         	 1.45431   	 4.92599   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 89, m: 4450)                                                                                	 0.104138  	 700       	 0         	 0         	 42.5951   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 89, n: 50, r: 89, r2: 89)                           	 0.0941405 	 700       	 524.194   	 0         	 47.5897   	 11.0149   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 89, r1_: 89, n: 50, r2: 89)                         	 0.0939963 	 600       	 449.998   	 0         	 40.8537   	 11.0149   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 89)                                                                               	 0.0500557 	 100       	 3.889     	 0         	 0.182996  	 21.2518   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                               	 0.0384113 	 100       	 3.0373    	 0         	 0.157246  	 19.3157   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4450, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                	 0.0236422 	 100       	 96.6549   	 0         	 7.6135    	 12.6952   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 89, n: 50, r2new: 50)	 0.0204091 	 100       	 98.51     	 0         	 16.7768   	 5.87179   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 89, r2: 89, leftOrthog: 1)                      	 0.017481  	 100       	 226.561   	 0         	 31.2725   	 7.24473   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 89, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0163724 	 200       	 9.93758   	 0         	 1.20896   	 8.21991   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 89, r: 89, streamingCols: 0)                                 	 0.014939  	 100       	 132.556   	 0         	 24.0423   	 5.51343   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4450, r: 50, r2: 50, leftOrthog: 1)                      	 0.0132822 	 100       	 167.517   	 0         	 40.5053   	 4.13569   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 39, n: 50, r2: 39)                                                                                                       	 0.0128126 	 800       	 0         	 0         	 75.9754   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 89, n: 50, r: 89, r2: 50)                           	 0.0111556 	 100       	 355.025   	 0         	 44.6773   	 7.94643   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 89, r1_: 50, n: 50, r2: 89)                         	 0.0104476 	 100       	 379.083   	 0         	 47.7048   	 7.94643   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 89, r1_: 89, n: 50, r2: 50)                         	 0.0100486 	 100       	 394.133   	 0         	 36.0583   	 10.9304   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 89, m: 2500)                                                                                	 0.00523305	 100       	 0         	 0         	 68.0291   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 89)                                                                       	 0.0050376 	 100       	 0         	 0         	 70.6686   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 89, m: 89, fromLeft: 1)                              	 0.00495945	 800       	 0         	 0         	 20.4435   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 89, leftOrthog: 1)                        	 0.00207693	 100       	 21.4259   	 0         	 7.06812   	 3.03134   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 89) 	 0.00207383	 100       	 38.195    	 0         	 6.48886   	 5.88624   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 89, r: 50, streamingCols: 0)                                   	 0.0013876 	 100       	 9.00837   	 0         	 3.60335   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 89, n: 50, r2new: 1) 	 0.00117559	 100       	 0.757068  	 0         	 6.0579    	 0.124972  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 89, r2: 89)                            	 0.00110082	 100       	 71.9556   	 0         	 12.2244   	 5.88624   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000866167	 100       	 28.8628   	 0         	 6.92707   	 4.16667   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 89)                           	 0.00080685	 100       	 0         	 0         	 8.82444   	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000774979	 100       	 0.645179  	 0         	 2.58072   	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 89, n: 50, r: 2, r2: 1)                             	 0.000563389	 100       	 3.15945   	 0         	 18.9595   	 0.166642  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 89)                                                                                                        	 0.00049562	 100       	 0         	 0         	 14.3658   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                  	 0.000477726	 100       	 0         	 0         	 8.373     	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 39)                                                                                                        	 0.00038144	 100       	 0         	 0         	 8.17953   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 89)                                                                         	 0.000353653	 100       	 0         	 0         	 20.1327   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000322481	 100       	 0.775239  	 0         	 12.4038   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 39, n: 50, r2: 1)                                                                                                        	 0.000312699	 100       	 0         	 0         	 9.97765   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 89, m: 50, fromLeft: 1)                              	 0.000204255	 100       	 0         	 0         	 34.8584   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 3.3757    	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 3.37567   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 2.0525    	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 2.05132   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 1.85071   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 1.12362   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 1.04108   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.810759  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.544358  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.497754  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.208087  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.179361  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.165284  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.151144  	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.118086  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.115359  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.109848  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.10696   	 1000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.0154696 	 1800      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0140023 	 1100      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00516371	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00461718	 6400      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.0010929 	 4600      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.00080685	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000774979	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000322481	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23124252125056 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23124036806656 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23123835480192 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23123634153728 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23123432827264 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23123231500800 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23123030174336 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23122828847872 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23122627521408 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23122426194944 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23122224868480 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23122023542016 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23121822215552 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23121620889088 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23121419562624 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23121218236160 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23121016909696 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23120815583232 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23120614256768 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23120412930304 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23120211603840 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23120010277376 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23119808950912 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23119607624448 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23119406297984 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23119204971520 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23119003645056 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23118802318592 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23118600992128 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23118399665664 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23118198339200 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23117997012736 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23117795682176 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23117594355712 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23117393029248 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23117191702784 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23116990376320 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23116789049856 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23116587723392 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23116386396928 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23116185070464 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23115983744000 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23115782417536 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23115581091072 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23115379764608 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23115178438144 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23114977111680 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23114775785216 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23114574458752 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23114373132288 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23114171805824 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23113970479360 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23113769152896 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23113567826432 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23113366499968 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23113165173504 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23112963847040 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23112762520576 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23112561194112 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23112359867648 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23112158541184 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23111957214720 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23111755888256 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23124146464512 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23124139874048 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4500, cols: 90, reductionFactor: 37, colBlockingSize: 12)                                	 0.886124  	 1300      	 109.839   	 0         	 4.84835   	 22.655    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 90, m: 90)                                                                               	 0.71782   	 700       	 6.63509   	 0         	 0.190276  	 34.8708   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4500, r: 90, r2: 90, leftOrthog: 1)                      	 0.183166  	 600       	 238.8     	 0         	 32.2646   	 7.40132   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 4500, Xcols: 90, r: 90, streamingCols: 0)                                 	 0.151139  	 700       	 168.818   	 0         	 30.1622   	 5.59701   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 90, n: 50, r2new: 90)	 0.148633  	 700       	 173.783   	 0         	 23.2879   	 7.46238   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 4500, m: 90)                                                                       	 0.136505  	 700       	 0         	 0         	 33.2297   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 90, reductionFactor: 37, colBlockingSize: 12)                                	 0.131804  	 200       	 63.116    	 0         	 2.82966   	 22.3051   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 90, m: 90)                                                                                	 0.114304  	 900       	 7.65325   	 0         	 1.53632   	 4.98155   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 90, m: 4500)                                                                                	 0.109469  	 700       	 0         	 0         	 41.4362   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 90, r1_: 90, n: 50, r2: 90)                         	 0.0929868 	 600       	 470.389   	 0         	 42.2305   	 11.1386   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 90, n: 50, r: 90, r2: 90)                           	 0.0855779 	 700       	 596.299   	 0         	 53.5344   	 11.1386   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 90)                                                                               	 0.0487493 	 100       	 4.03425   	 0         	 0.189541  	 21.2843   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                               	 0.0376881 	 100       	 3.09558   	 0         	 0.160263  	 19.3157   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4500, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                	 0.0230074 	 100       	 100.438   	 0         	 7.91051   	 12.6968   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 90, n: 50, r2new: 50)	 0.0196218 	 100       	 104.476   	 0         	 17.715    	 5.89758   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 90, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0189669 	 200       	 8.77204   	 0         	 1.0629    	 8.2529    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 90, r2: 90, leftOrthog: 1)                      	 0.0172519 	 100       	 234.757   	 0         	 32.0521   	 7.32422   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 90, r: 90, streamingCols: 0)                                 	 0.0150635 	 100       	 134.431   	 0         	 24.1139   	 5.57483   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4500, r: 50, r2: 50, leftOrthog: 1)                      	 0.0139049 	 100       	 161.813   	 0         	 39.1228   	 4.13603   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 40, n: 50, r2: 40)                                                                                                       	 0.0130318 	 800       	 0         	 0         	 78.5771   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 90, n: 50, r: 90, r2: 50)                           	 0.0106428 	 100       	 380.537   	 0         	 47.694    	 7.97872   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 90, r1_: 90, n: 50, r2: 50)                         	 0.0102062 	 100       	 396.818   	 0         	 35.9077   	 11.0511   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 90, r1_: 50, n: 50, r2: 90)                         	 0.0060743 	 100       	 666.744   	 0         	 83.5652   	 7.97872   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 90)                                                                       	 0.00568472	 100       	 0         	 0         	 63.3277   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 90, m: 2500)                                                                                	 0.00529326	 100       	 0         	 0         	 68.011    	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 90, m: 90, fromLeft: 1)                              	 0.00482805	 800       	 0         	 0         	 21.4745   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 90, leftOrthog: 1)                        	 0.00215615	 100       	 20.8705   	 0         	 6.86409   	 3.04054   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 90) 	 0.00204268	 100       	 39.6538   	 0         	 6.69708   	 5.92105   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 90, r: 50, streamingCols: 0)                                   	 0.0013899 	 100       	 8.99345   	 0         	 3.59738   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 90, r2: 90)                            	 0.00111883	 100       	 72.3973   	 0         	 12.2271   	 5.92105   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 90, n: 50, r2new: 1) 	 0.00111258	 100       	 0.808928  	 0         	 6.47287   	 0.124972  
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000792827	 100       	 0.630655  	 0         	 2.52262   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 90)                           	 0.000765069	 100       	 0         	 0         	 9.41092   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000734726	 100       	 34.0263   	 0         	 8.16631   	 4.16667   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 90)                                                                         	 0.000515836	 100       	 0         	 0         	 13.9579   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 90)                                                                                                        	 0.000500881	 100       	 0         	 0         	 14.3747   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 90, n: 50, r: 2, r2: 1)                             	 0.000487429	 100       	 3.69285   	 0         	 22.1604   	 0.166642  
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                  	 0.000474284	 100       	 0         	 0         	 8.43377   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 40)                                                                                                        	 0.000419587	 100       	 0         	 0         	 7.62655   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 40, n: 50, r2: 1)                                                                                                        	 0.000327193	 100       	 0         	 0         	 9.78016   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000322022	 100       	 0.776344  	 0         	 12.4215   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 90, m: 50, fromLeft: 1)                              	 0.000200261	 100       	 0         	 0         	 35.9531   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 3.36875   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 3.36872   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 2.048     	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 2.04679   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 1.85001   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 1.13622   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 1.0599    	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.804257  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.554601  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.506547  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.216479  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.17141   	 1000      
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.167592  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.142705  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.115237  	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.114304  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.110002  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.097827  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.0150069 	 1800      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0142794 	 1100      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00523488	 6400      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00502831	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00096696	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000792827	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000765069	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000322022	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22471750104960 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22471537321984 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22471335995520 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22471134669056 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22470933342592 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22470732016128 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22470530689664 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22470329363200 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22470128036736 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22469926710272 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22469725383808 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22469524057344 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22469322730880 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22469121404416 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22468920077952 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22468718751488 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22468517425024 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22468316098560 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22468114772096 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22467913445632 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22467712119168 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22467510792704 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22467309466240 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22467108139776 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22466906813312 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22466705486848 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22466504160384 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22466302833920 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22466101507456 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22465900180992 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22465698854528 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22465497528064 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22465296197504 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22465094871040 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22464893544576 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22464692218112 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22464490891648 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22464289565184 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22464088238720 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22463886912256 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22463685585792 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22463484259328 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22463282932864 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22463081606400 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22462880279936 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22462678953472 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22462477627008 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22462276300544 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22462074974080 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22461873647616 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22461672321152 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22461470994688 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22461269668224 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22461068341760 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22460867015296 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22460665688832 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22460464362368 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22460263035904 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22460061709440 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22459860382976 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22459659056512 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22459457730048 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22459256403584 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22471644444416 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22471637853952 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4550, cols: 91, reductionFactor: 37, colBlockingSize: 12)                                	 0.892014  	 1300      	 112.792   	 0         	 4.92396   	 22.9067   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 91, m: 91)                                                                               	 0.748699  	 700       	 6.57585   	 0         	 0.186497  	 35.2597   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4550, r: 91, r2: 91, leftOrthog: 1)                      	 0.185827  	 600       	 243.314   	 0         	 32.5132   	 7.48355   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 4550, Xcols: 91, r: 91, streamingCols: 0)                                 	 0.153982  	 700       	 171.286   	 0         	 30.2668   	 5.6592    
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 91, n: 50, r2new: 91)	 0.150106  	 700       	 177.427   	 0         	 23.5549   	 7.53252   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 4550, m: 91)                                                                       	 0.1347    	 700       	 0         	 0         	 34.4273   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 91, reductionFactor: 37, colBlockingSize: 12)                                	 0.132022  	 200       	 64.4195   	 0         	 2.85747   	 22.5443   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 91, m: 91)                                                                                	 0.118744  	 900       	 7.61542   	 0         	 1.51187   	 5.0371    
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 91, m: 4550)                                                                                	 0.103563  	 700       	 0         	 0         	 44.778    	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 91, r1_: 91, n: 50, r2: 91)                         	 0.0979331 	 600       	 461.685   	 0         	 40.9936   	 11.2624   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 91, n: 50, r: 91, r2: 91)                           	 0.0865625 	 700       	 609.386   	 0         	 54.1081   	 11.2624   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 91)                                                                               	 0.0490996 	 100       	 4.04619   	 0         	 0.189818  	 21.3162   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                               	 0.0372587 	 100       	 3.13126   	 0         	 0.16211   	 19.3157   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4550, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                	 0.0237014 	 100       	 98.5801   	 0         	 7.76325   	 12.6983   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 91, r2: 91, leftOrthog: 1)                      	 0.0212174 	 100       	 195.146   	 0         	 26.358    	 7.40367   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 91, n: 50, r2new: 50)	 0.0201062 	 100       	 103.973   	 0         	 17.5508   	 5.92411   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 91, r: 91, streamingCols: 0)                                 	 0.0153549 	 100       	 134.826   	 0         	 23.9214   	 5.63621   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 91, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0145133 	 200       	 11.7201   	 0         	 1.41454   	 8.28541   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 41, n: 50, r2: 41)                                                                                                       	 0.0135025 	 800       	 0         	 0         	 79.6771   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4550, r: 50, r2: 50, leftOrthog: 1)                      	 0.0129813 	 100       	 175.252   	 0         	 42.3686   	 4.13636   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 91, n: 50, r: 91, r2: 50)                           	 0.0111535 	 100       	 371.228   	 0         	 46.3424   	 8.01056   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 91, r1_: 91, n: 50, r2: 50)                         	 0.0101023 	 100       	 409.855   	 0         	 36.687    	 11.1717   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 91, r1_: 50, n: 50, r2: 91)                         	 0.00613331	 100       	 675.084   	 0         	 84.2742   	 8.01056   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 91)                                                                       	 0.00543468	 100       	 0         	 0         	 66.9772   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 91, m: 2500)                                                                                	 0.0051534 	 100       	 0         	 0         	 70.633    	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 91, m: 91, fromLeft: 1)                              	 0.00492168	 800       	 0         	 0         	 21.5367   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 91) 	 0.00216588	 100       	 38.2338   	 0         	 6.41993   	 5.9555    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 91, leftOrthog: 1)                        	 0.00214032	 100       	 21.2585   	 0         	 6.97091   	 3.0496    
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 91, r: 50, streamingCols: 0)                                   	 0.0012921 	 100       	 9.67416   	 0         	 3.86966   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 91, r2: 91)                            	 0.0012405 	 100       	 66.7551   	 0         	 11.209    	 5.9555    
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 91, n: 50, r2new: 1) 	 0.00095697	 100       	 0.950918  	 0         	 7.60902   	 0.124973  
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000793621	 100       	 0.630024  	 0         	 2.52009   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 91)                           	 0.000774853	 100       	 0         	 0         	 9.39533   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000729568	 100       	 34.2669   	 0         	 8.22404   	 4.16667   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                  	 0.000504278	 100       	 0         	 0         	 7.93213   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 91)                                                                                                        	 0.000474813	 100       	 0         	 0         	 15.3324   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 41)                                                                                                        	 0.000376929	 100       	 0         	 0         	 8.7019    	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 91, n: 50, r: 2, r2: 1)                             	 0.000372406	 100       	 4.88714   	 0         	 29.3271   	 0.166642  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 41, n: 50, r2: 1)                                                                                                        	 0.000352974	 100       	 0         	 0         	 9.29247   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 91)                                                                         	 0.000329327	 100       	 0         	 0         	 22.1057   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000322388	 100       	 0.775463  	 0         	 12.4074   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 91, m: 50, fromLeft: 1)                              	 0.000200075	 100       	 0         	 0         	 36.3864   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 3.42248   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 3.42245   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 2.10916   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 2.10797   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 1.92096   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 1.12558   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 1.06225   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.835057  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.553884  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.509383  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.222166  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.173335  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.170629  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.140464  	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.118744  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.114898  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.109221  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.0993289 	 1000      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0147072 	 1100      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.0113385 	 1800      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00512175	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00460187	 6400      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00094525	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000793621	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000774853	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000322388	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22864849258368 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22864661047296 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22864459720832 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22864258394368 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22864057067904 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22863855741440 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22863654414976 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22863453088512 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22863251762048 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22863050435584 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22862849109120 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22862647782656 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22862446456192 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22862245129728 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22862043803264 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22861842476800 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22861641150336 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22861439823872 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22861238497408 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22861037170944 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22860835844480 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22860634518016 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22860433191552 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22860231865088 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22860030538624 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22859829212160 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22859627885696 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22859426559232 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22859225232768 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22859023906304 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22858822579840 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22858621253376 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22858419922816 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22858218596352 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22858017269888 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22857815943424 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22857614616960 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22857413290496 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22857211964032 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22857010637568 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22856809311104 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22856607984640 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22856406658176 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22856205331712 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22856004005248 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22855802678784 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22855601352320 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22855400025856 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22855198699392 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22854997372928 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22854796046464 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22854594720000 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22854393393536 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22854192067072 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22853990740608 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22853789414144 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22853588087680 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22853386761216 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22853185434752 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22852984108288 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22852782781824 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22852581455360 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22852380128896 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22864743597824 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22864737007360 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4600, cols: 92, reductionFactor: 37, colBlockingSize: 12)                                	 0.929863  	 1300      	 111.807   	 0         	 4.82792   	 23.1585   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 92, m: 92)                                                                               	 0.741701  	 700       	 6.85913   	 0         	 0.19241   	 35.6486   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4600, r: 92, r2: 92, leftOrthog: 1)                      	 0.193555  	 600       	 241.385   	 0         	 31.9048   	 7.56579   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 92, n: 50, r2new: 92)	 0.168416  	 700       	 163.05    	 0         	 21.4424   	 7.60408   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 4600, Xcols: 92, r: 92, streamingCols: 0)                                 	 0.158212  	 700       	 172.263   	 0         	 30.1086   	 5.72139   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 92, reductionFactor: 37, colBlockingSize: 12)                                	 0.144282  	 200       	 60.2483   	 0         	 2.64442   	 22.7832   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 92, m: 4600)                                                                                	 0.138151  	 700       	 0         	 0         	 34.3091   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 4600, m: 92)                                                                       	 0.132895  	 700       	 0         	 0         	 35.6661   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 92, m: 92)                                                                                	 0.117256  	 900       	 7.96907   	 0         	 1.56482   	 5.09266   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 92, n: 50, r: 92, r2: 92)                           	 0.101234  	 700       	 538.438   	 0         	 47.2889   	 11.3861   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 92, r1_: 92, n: 50, r2: 92)                         	 0.0944096 	 600       	 494.878   	 0         	 43.4632   	 11.3861   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 92)                                                                               	 0.0500991 	 100       	 4.0054    	 0         	 0.187628  	 21.3475   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                               	 0.038045  	 100       	 3.06654   	 0         	 0.158759  	 19.3157   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4600, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                	 0.0242171 	 100       	 97.5413   	 0         	 7.68054   	 12.6998   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 92, n: 50, r2new: 50)	 0.0219142 	 100       	 97.2884   	 0         	 16.3474   	 5.95132   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 92, r2: 92, leftOrthog: 1)                      	 0.0170002 	 100       	 248.938   	 0         	 33.2667   	 7.48308   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 92, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0156438 	 200       	 11.1134   	 0         	 1.33615   	 8.31747   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 92, r: 92, streamingCols: 0)                                 	 0.0156042 	 100       	 135.605   	 0         	 23.8004   	 5.69758   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4600, r: 50, r2: 50, leftOrthog: 1)                      	 0.0142795 	 100       	 161.07    	 0         	 38.9369   	 4.13669   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 42, n: 50, r2: 42)                                                                                                       	 0.0136993 	 800       	 0         	 0         	 82.4103   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 92, n: 50, r: 92, r2: 50)                           	 0.0106021 	 100       	 399.165   	 0         	 49.6353   	 8.04196   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 92, r1_: 92, n: 50, r2: 50)                         	 0.0101525 	 100       	 416.841   	 0         	 36.914    	 11.2922   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 92, m: 2500)                                                                                	 0.00667823	 100       	 0         	 0         	 55.1044   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 92, r1_: 50, n: 50, r2: 92)                         	 0.00603236	 100       	 701.55    	 0         	 87.2362   	 8.04196   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 92)                                                                       	 0.00563019	 100       	 0         	 0         	 65.3619   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 92, m: 92, fromLeft: 1)                              	 0.00507918	 800       	 0         	 0         	 21.33     	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 92, leftOrthog: 1)                        	 0.00227246	 100       	 20.2424   	 0         	 6.61838   	 3.05851   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 92) 	 0.00204389	 100       	 41.4113   	 0         	 6.91389   	 5.98958   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 92, r: 50, streamingCols: 0)                                   	 0.00150577	 100       	 8.30141   	 0         	 3.32056   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 92, r2: 92)                            	 0.00112711	 100       	 75.0945   	 0         	 12.5375   	 5.98958   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 92, n: 50, r2new: 1) 	 0.00111004	 100       	 0.8288    	 0         	 6.63184   	 0.124973  
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000799054	 100       	 0.62574   	 0         	 2.50296   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 92)                           	 0.000757993	 100       	 0         	 0         	 9.70985   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.00071236	 100       	 35.0946   	 0         	 8.42271   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 92)                                                                                                        	 0.000490508	 100       	 0         	 0         	 15.0049   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 92, n: 50, r: 2, r2: 1)                             	 0.000484325	 100       	 3.7991    	 0         	 22.7979   	 0.166643  
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                  	 0.000480591	 100       	 0         	 0         	 8.32309   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 42)                                                                                                        	 0.000393936	 100       	 0         	 0         	 8.5293    	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 92)                                                                         	 0.000346733	 100       	 0         	 0         	 21.2267   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 42, n: 50, r2: 1)                                                                                                        	 0.000340085	 100       	 0         	 0         	 9.87988   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000325342	 100       	 0.768422  	 0         	 12.2948   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 92, m: 50, fromLeft: 1)                              	 0.000205798	 100       	 0         	 0         	 35.7632   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 3.59511   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 3.59508   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 2.20771   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 2.20651   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 1.94951   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 1.19151   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 1.11401   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.829845  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.575012  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.540015  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.227108  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.193484  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.175322  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.14531   	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.138872  	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.117256  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.113447  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.111307  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0149238 	 1100      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.0131979 	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00584378	 6400      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00528498	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00117127	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000799054	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000757993	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000325342	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22686885496704 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22686688339968 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22686487013504 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22686285687040 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22686084360576 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22685883034112 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22685681707648 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22685480381184 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22685279054720 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22685077728256 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22684876401792 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22684675075328 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22684473748864 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22684272422400 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22684071095936 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22683869769472 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22683668443008 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22683467116544 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22683265790080 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22683064463616 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22682863137152 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22682661810688 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22682460484224 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22682259157760 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22682057831296 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22681856504832 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22681655178368 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22681453851904 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22681252525440 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22681051198976 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22680849872512 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22680648546048 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22680447215488 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22680245889024 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22680044562560 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22679843236096 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22679641909632 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22679440583168 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22679239256704 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22679037930240 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22678836603776 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22678635277312 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22678433950848 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22678232624384 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22678031297920 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22677829971456 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22677628644992 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22677427318528 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22677225992064 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22677024665600 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22676823339136 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22676622012672 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22676420686208 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22676219359744 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22676018033280 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22675816706816 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22675615380352 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22675414053888 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22675212727424 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22675011400960 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22674810074496 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22674608748032 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22674407421568 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22686779836160 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22686773245696 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4650, cols: 93, reductionFactor: 37, colBlockingSize: 12)                                	 0.928233  	 1300      	 115.696   	 0         	 4.94211   	 23.4102   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 93, m: 93)                                                                               	 0.778497  	 700       	 6.75036   	 0         	 0.187315  	 36.0375   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4650, r: 93, r2: 93, leftOrthog: 1)                      	 0.190369  	 600       	 253.515   	 0         	 33.1477   	 7.64803   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 4650, Xcols: 93, r: 93, streamingCols: 0)                                 	 0.165241  	 700       	 170.372   	 0         	 29.4579   	 5.78358   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 93, n: 50, r2new: 93)	 0.160012  	 700       	 176.936   	 0         	 23.0474   	 7.67705   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 4650, m: 93)                                                                       	 0.14132   	 700       	 0         	 0         	 34.2728   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 93, reductionFactor: 37, colBlockingSize: 12)                                	 0.13652   	 200       	 65.0656   	 0         	 2.82624   	 23.022    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 93, m: 93)                                                                                	 0.125981  	 900       	 7.66171   	 0         	 1.48823   	 5.14821   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 93, m: 4650)                                                                                	 0.113315  	 700       	 0         	 0         	 42.7433   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 93, r1_: 93, n: 50, r2: 93)                         	 0.101369  	 600       	 476.094   	 0         	 41.3639   	 11.5099   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 93, n: 50, r: 93, r2: 93)                           	 0.0911031 	 700       	 618.036   	 0         	 53.696    	 11.5099   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 93)                                                                               	 0.051443  	 100       	 3.93964   	 0         	 0.184282  	 21.3783   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                               	 0.0372272 	 100       	 3.13391   	 0         	 0.162247  	 19.3157   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4650, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                	 0.0234645 	 100       	 101.764   	 0         	 8.0121    	 12.7013   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 93, n: 50, r2new: 50)	 0.0233048 	 100       	 93.3069   	 0         	 15.6054   	 5.97916   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 43, n: 50, r2: 43)                                                                                                       	 0.0220079 	 800       	 0         	 0         	 53.7697   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 93, r2: 93, leftOrthog: 1)                      	 0.0176274 	 100       	 245.329   	 0         	 32.4404   	 7.56245   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 93, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0158351 	 200       	 11.2191   	 0         	 1.34375   	 8.34908   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 93, r: 93, streamingCols: 0)                                 	 0.0156798 	 100       	 137.9     	 0         	 23.9454   	 5.75894   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4650, r: 50, r2: 50, leftOrthog: 1)                      	 0.0143373 	 100       	 162.165   	 0         	 39.1985   	 4.13701   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 93, n: 50, r: 93, r2: 50)                           	 0.0137384 	 100       	 314.775   	 0         	 38.9915   	 8.07292   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 93, r1_: 93, n: 50, r2: 50)                         	 0.0105774 	 100       	 408.844   	 0         	 35.8235   	 11.4127   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 93, r1_: 50, n: 50, r2: 93)                         	 0.00630351	 100       	 686.046   	 0         	 84.9812   	 8.07292   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 93, m: 93, fromLeft: 1)                              	 0.00622953	 800       	 0         	 0         	 17.7714   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 93, m: 2500)                                                                                	 0.00588281	 100       	 0         	 0         	 63.2351   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 93)                                                                       	 0.00545398	 100       	 0         	 0         	 68.2071   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 93, leftOrthog: 1)                        	 0.00221095	 100       	 21.0317   	 0         	 6.85678   	 3.06728   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 93) 	 0.00213805	 100       	 40.4527   	 0         	 6.71602   	 6.02332   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 93, r: 50, streamingCols: 0)                                   	 0.00141415	 100       	 8.83923   	 0         	 3.53569   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 93, r2: 93)                            	 0.00118711	 100       	 72.8576   	 0         	 12.0959   	 6.02332   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 93, n: 50, r2new: 1) 	 0.00107894	 100       	 0.861959  	 0         	 6.89715   	 0.124973  
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000783916	 100       	 0.637823  	 0         	 2.55129   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 93)                           	 0.000780218	 100       	 0         	 0         	 9.5358    	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000723717	 100       	 34.5439   	 0         	 8.29053   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 93)                                                                                                        	 0.000704444	 100       	 0         	 0         	 10.5615   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                  	 0.000513096	 100       	 0         	 0         	 7.79581   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 93, n: 50, r: 2, r2: 1)                             	 0.000490524	 100       	 3.79186   	 0         	 22.7544   	 0.166643  
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 93)                                                                         	 0.000467048	 100       	 0         	 0         	 15.9298   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 43)                                                                                                        	 0.000384936	 100       	 0         	 0         	 8.93655   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000327521	 100       	 0.76331   	 0         	 12.213    	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 43, n: 50, r2: 1)                                                                                                        	 0.000323973	 100       	 0         	 0         	 10.6182   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 93, m: 50, fromLeft: 1)                              	 0.00022604	 100       	 0         	 0         	 32.9145   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 3.59494   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 3.59491   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 2.19333   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 2.19214   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 1.97155   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 1.20366   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 1.10405   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.867167  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.581397  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.523675  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.224545  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.186534  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.182335  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.147241  	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.125981  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.11971   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.118974  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.106519  	 1000      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0234213 	 1100      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.0136671 	 1800      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00645557	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00551647	 6400      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.0010585 	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000783916	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000780218	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000327521	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22518700091264 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22518513526784 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22518312200320 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22518110873856 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22517909547392 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22517708220928 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22517506894464 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22517305568000 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22517104241536 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22516902915072 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22516701588608 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22516500262144 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22516298935680 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22516097609216 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22515896282752 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22515694956288 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22515493629824 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22515292303360 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22515090976896 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22514889650432 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22514688323968 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22514486997504 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22514285671040 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22514084344576 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22513883018112 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22513681691648 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22513480365184 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22513279038720 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22513077712256 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22512876385792 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22512675059328 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22512473732864 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22512272402304 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22512071075840 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22511869749376 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22511668422912 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22511467096448 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22511265769984 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22511064443520 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22510863117056 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22510661790592 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22510460464128 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22510259137664 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22510057811200 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22509856484736 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22509655158272 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22509453831808 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22509252505344 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22509051178880 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22508849852416 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22508648525952 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22508447199488 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22508245873024 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22508044546560 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22507843220096 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22507641893632 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22507440567168 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22507239240704 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22507037914240 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22506836587776 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22506635261312 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22506433934848 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22506232608384 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22518594430720 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22518587840256 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4700, cols: 94, reductionFactor: 37, colBlockingSize: 12)                                	 0.94787   	 1300      	 116.993   	 0         	 4.94436   	 23.6619   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 94, m: 94)                                                                               	 0.769207  	 700       	 7.05464   	 0         	 0.193668  	 36.4264   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4700, r: 94, r2: 94, leftOrthog: 1)                      	 0.190078  	 600       	 262.183   	 0         	 33.9164   	 7.73026   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 94, n: 50, r2new: 94)	 0.175539  	 700       	 166.282   	 0         	 21.4519   	 7.75137   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 4700, Xcols: 94, r: 94, streamingCols: 0)                                 	 0.166442  	 700       	 174.658   	 0         	 29.8776   	 5.84577   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 94, reductionFactor: 37, colBlockingSize: 12)                                	 0.140266  	 200       	 64.6971   	 0         	 2.78141   	 23.2605   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 4700, m: 94)                                                                       	 0.136533  	 700       	 0         	 0         	 36.2415   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 94, m: 94)                                                                                	 0.128233  	 900       	 7.77256   	 0         	 1.49364   	 5.20376   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 94, m: 4700)                                                                                	 0.120611  	 700       	 0         	 0         	 41.0259   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 94, r1_: 94, n: 50, r2: 94)                         	 0.102067  	 600       	 488.258   	 0         	 41.9694   	 11.6337   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 94, n: 50, r: 94, r2: 94)                           	 0.101474  	 700       	 572.965   	 0         	 49.2506   	 11.6337   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 94)                                                                               	 0.0509503 	 100       	 4.01699   	 0         	 0.187634  	 21.4086   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                               	 0.0396021 	 100       	 2.94597   	 0         	 0.152517  	 19.3157   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4700, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                	 0.0230324 	 100       	 104.788   	 0         	 8.24926   	 12.7027   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 94, n: 50, r2new: 50)	 0.0205967 	 100       	 107.687   	 0         	 17.9252   	 6.00758   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 94, r2: 94, leftOrthog: 1)                      	 0.0182898 	 100       	 241.556   	 0         	 31.6099   	 7.64178   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 94, r: 94, streamingCols: 0)                                 	 0.016169  	 100       	 136.619   	 0         	 23.473    	 5.82029   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 44, n: 50, r2: 44)                                                                                                       	 0.0148927 	 800       	 0         	 0         	 83.1979   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 94, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0147538 	 200       	 12.3017   	 0         	 1.46794   	 8.38026   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4700, r: 50, r2: 50, leftOrthog: 1)                      	 0.0125767 	 100       	 186.854   	 0         	 45.163    	 4.13732   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 94, r1_: 94, n: 50, r2: 50)                         	 0.0115672 	 100       	 381.942   	 0         	 33.1168   	 11.5332   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 94, n: 50, r: 94, r2: 50)                           	 0.0114641 	 100       	 385.376   	 0         	 47.557    	 8.10345   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 94, r1_: 50, n: 50, r2: 94)                         	 0.00598717	 100       	 737.911   	 0         	 91.0614   	 8.10345   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 94)                                                                       	 0.00569105	 100       	 0         	 0         	 66.0687   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 94, m: 2500)                                                                                	 0.00565759	 100       	 0         	 0         	 66.4594   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 94, m: 94, fromLeft: 1)                              	 0.005321  	 800       	 0         	 0         	 21.2555   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 94, leftOrthog: 1)                        	 0.002134  	 100       	 22.0244   	 0         	 7.16027   	 3.07592   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 94) 	 0.00208148	 100       	 42.4505   	 0         	 7.00885   	 6.0567    
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 94, r: 50, streamingCols: 0)                                   	 0.00201788	 100       	 6.19462   	 0         	 2.47785   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 94, n: 50, r2new: 1) 	 0.0014312 	 100       	 0.65679   	 0         	 5.25544   	 0.124973  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 94, r2: 94)                            	 0.00116548	 100       	 75.8143   	 0         	 12.5174   	 6.0567    
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000810045	 100       	 0.61725   	 0         	 2.469     	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 94, n: 50, r: 2, r2: 1)                             	 0.000771358	 100       	 2.43726   	 0         	 14.6256   	 0.166643  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000766165	 100       	 32.63     	 0         	 7.83121   	 4.16667   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 94)                           	 0.000735098	 100       	 0         	 0         	 10.2299   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 94)                                                                                                        	 0.000496835	 100       	 0         	 0         	 15.1358   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                  	 0.000477082	 100       	 0         	 0         	 8.3843    	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 44)                                                                                                        	 0.000419115	 100       	 0         	 0         	 8.39865   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 94)                                                                         	 0.000390669	 100       	 0         	 0         	 19.249    	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000346804	 100       	 0.720868  	 0         	 11.5339   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 44, n: 50, r2: 1)                                                                                                        	 0.000316992	 100       	 0         	 0         	 11.1044   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 94, m: 50, fromLeft: 1)                              	 0.000204165	 100       	 0         	 0         	 36.833    	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 3.6256    	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 3.62557   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 2.2069    	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 2.20566   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 1.97611   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 1.20802   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 1.12592   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.85976   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.587253  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.539794  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.223078  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.199648  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.184629  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.142615  	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.128233  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.126745  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.120388  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.114875  	 1000      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0161256 	 1100      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.012989  	 1800      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00552517	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00539002	 6400      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00106416	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000810045	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000735098	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000346804	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22915550672768 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22915328239616 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22915126913152 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22914925586688 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22914724260224 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22914522933760 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22914321607296 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22914120280832 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22913918954368 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22913717627904 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22913516301440 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22913314974976 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22913113648512 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22912912322048 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22912710995584 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22912509669120 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22912308342656 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22912107016192 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22911905689728 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22911704363264 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22911503036800 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22911301710336 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22911100383872 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22910899057408 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22910697730944 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22910496404480 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22910295078016 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22910093751552 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22909892425088 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22909691098624 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22909489772160 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22909288445696 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22909087115136 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22908885788672 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22908684462208 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22908483135744 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22908281809280 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22908080482816 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22907879156352 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22907677829888 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22907476503424 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22907275176960 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22907073850496 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22906872524032 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22906671197568 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22906469871104 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22906268544640 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22906067218176 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22905865891712 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22905664565248 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22905463238784 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22905261912320 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22905060585856 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22904859259392 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22904657932928 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22904456606464 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22904255280000 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22904053953536 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22903852627072 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22903651300608 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22903449974144 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22903248647680 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22903047321216 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22915445012224 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22915438421760 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4750, cols: 95, reductionFactor: 37, colBlockingSize: 12)                                	 1.07808   	 1300      	 106.18    	 0         	 4.44016   	 23.9136   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 95, m: 95)                                                                               	 0.790275  	 700       	 7.08806   	 0         	 0.19253   	 36.8153   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4750, r: 95, r2: 95, leftOrthog: 1)                      	 0.199653  	 600       	 257.66    	 0         	 32.9805   	 7.8125    
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 95, n: 50, r2new: 95)	 0.173623  	 700       	 173.314   	 0         	 22.1431   	 7.82701   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 4750, m: 95)                                                                       	 0.172752  	 700       	 0         	 0         	 29.2558   	 0         
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 4750, Xcols: 95, r: 95, streamingCols: 0)                                 	 0.167149  	 700       	 179.529   	 0         	 30.3876   	 5.90796   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 95, reductionFactor: 37, colBlockingSize: 12)                                	 0.14059   	 200       	 65.9288   	 0         	 2.80561   	 23.4989   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 95, m: 95)                                                                                	 0.13118   	 900       	 7.84301   	 0         	 1.49126   	 5.25932   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 95, m: 4750)                                                                                	 0.114654  	 700       	 0         	 0         	 44.0805   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 95, r1_: 95, n: 50, r2: 95)                         	 0.108399  	 600       	 474.565   	 0         	 40.363    	 11.7574   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 95, n: 50, r: 95, r2: 95)                           	 0.101206  	 700       	 593.011   	 0         	 50.4371   	 11.7574   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 95)                                                                               	 0.0502347 	 100       	 4.11402   	 0         	 0.191899  	 21.4385   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                               	 0.0393383 	 100       	 2.96573   	 0         	 0.15354   	 19.3157   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4750, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                	 0.0273612 	 100       	 89.1478   	 0         	 7.01724   	 12.7041   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 95, n: 50, r2new: 50)	 0.0225691 	 100       	 100.248   	 0         	 16.6068   	 6.03655   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 95, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0188008 	 200       	 9.86011   	 0         	 1.17229   	 8.411     
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 95, r2: 95, leftOrthog: 1)                      	 0.017845  	 100       	 252.872   	 0         	 32.7509   	 7.72107   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 95, r: 95, streamingCols: 0)                                 	 0.0163563 	 100       	 137.944   	 0         	 23.4533   	 5.88162   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 45, n: 50, r2: 45)                                                                                                       	 0.0158082 	 800       	 0         	 0         	 81.983    	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4750, r: 50, r2: 50, leftOrthog: 1)                      	 0.0149929 	 100       	 158.409   	 0         	 38.2849   	 4.13763   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 95, n: 50, r: 95, r2: 50)                           	 0.012184  	 100       	 370.362   	 0         	 45.5351   	 8.13356   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 95, r1_: 95, n: 50, r2: 50)                         	 0.0113785 	 100       	 396.583   	 0         	 34.031    	 11.6536   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 95, r1_: 50, n: 50, r2: 95)                         	 0.00649674	 100       	 694.579   	 0         	 85.3966   	 8.13356   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 95)                                                                       	 0.00588325	 100       	 0         	 0         	 64.5901   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 95, m: 2500)                                                                                	 0.00558926	 100       	 0         	 0         	 67.9875   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 95, m: 95, fromLeft: 1)                              	 0.00545419	 800       	 0         	 0         	 21.18     	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 95, leftOrthog: 1)                        	 0.00217227	 100       	 21.8665   	 0         	 7.08936   	 3.08442   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 95) 	 0.00202863	 100       	 44.4881   	 0         	 7.30541   	 6.08974   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 95, r: 50, streamingCols: 0)                                   	 0.0019078 	 100       	 6.55204   	 0         	 2.62082   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 95, n: 50, r2new: 1) 	 0.00135748	 100       	 0.699828  	 0         	 5.5998    	 0.124974  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 95, r2: 95)                            	 0.00113712	 100       	 79.3669   	 0         	 13.0329   	 6.08974   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.00087627	 100       	 0.5706    	 0         	 2.2824    	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 95)                           	 0.000737195	 100       	 0         	 0         	 10.3093   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000716487	 100       	 34.8925   	 0         	 8.37419   	 4.16667   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 95, n: 50, r: 2, r2: 1)                             	 0.000692734	 100       	 2.74276   	 0         	 16.4588   	 0.166643  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 95)                                                                                                        	 0.000496137	 100       	 0         	 0         	 15.3183   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                  	 0.000473894	 100       	 0         	 0         	 8.44071   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 45)                                                                                                        	 0.000385014	 100       	 0         	 0         	 9.35031   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 95)                                                                         	 0.00032709	 100       	 0         	 0         	 23.2352   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000320154	 100       	 0.780874  	 0         	 12.494    	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 45, n: 50, r2: 1)                                                                                                        	 0.0003174 	 100       	 0         	 0         	 11.3422   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 95, m: 50, fromLeft: 1)                              	 0.000205776	 100       	 0         	 0         	 36.9334   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 3.85653   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 3.8565    	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 2.30773   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 2.30646   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 2.07818   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 1.32678   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 1.26484   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.879848  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.666389  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.599557  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.234663  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.199578  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.185413  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.178963  	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.13118   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.126991  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.120717  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.11522   	 1000      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.0196249 	 1800      
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0170067 	 1100      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00565997	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00511224	 6400      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00111436	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.00087627	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000737195	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000320154	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23377718491008 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23377506985984 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23377305659520 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23377104333056 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23376903006592 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23376701680128 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23376500353664 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23376299027200 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23376097700736 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23375896374272 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23375695047808 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23375493721344 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23375292394880 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23375091068416 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23374889741952 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23374688415488 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23374487089024 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23374285762560 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23374084436096 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23373883109632 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23373681783168 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23373480456704 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23373279130240 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23373077803776 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23372876477312 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23372675150848 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23372473824384 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23372272497920 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23372071171456 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23371869844992 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23371668518528 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23371467192064 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23371265861504 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23371064535040 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23370863208576 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23370661882112 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23370460555648 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23370259229184 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23370057902720 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23369856576256 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23369655249792 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23369453923328 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23369252596864 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23369051270400 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23368849943936 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23368648617472 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23368447291008 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23368245964544 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23368044638080 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23367843311616 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23367641985152 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23367440658688 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23367239332224 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23367038005760 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23366836679296 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23366635352832 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23366434026368 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23366232699904 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23366031373440 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23365830046976 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23365628720512 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23365427394048 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23365226067584 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23377612830464 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23377606240000 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4800, cols: 96, reductionFactor: 37, colBlockingSize: 12)                                	 1.12031   	 1300      	 105.439   	 0         	 4.36322   	 24.1653   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 96, m: 96)                                                                               	 0.801442  	 700       	 7.21234   	 0         	 0.193859  	 37.2042   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4800, r: 96, r2: 96, leftOrthog: 1)                      	 0.210083  	 600       	 252.682   	 0         	 32.0064   	 7.89474   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 96, n: 50, r2new: 96)	 0.188059  	 700       	 164.946   	 0         	 20.8689   	 7.90393   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 4800, Xcols: 96, r: 96, streamingCols: 0)                                 	 0.171322  	 700       	 180.746   	 0         	 30.2749   	 5.97015   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 96, reductionFactor: 37, colBlockingSize: 12)                                	 0.146627  	 200       	 64.5522   	 0         	 2.71946   	 23.7371   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 96, m: 4800)                                                                                	 0.132976  	 700       	 0         	 0         	 38.8113   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 96, m: 96)                                                                                	 0.129506  	 900       	 8.19796   	 0         	 1.54245   	 5.31488   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 4800, m: 96)                                                                       	 0.128574  	 700       	 0         	 0         	 40.14     	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 96, n: 50, r: 96, r2: 96)                           	 0.111876  	 700       	 553.573   	 0         	 46.5924   	 11.8812   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 96, r1_: 96, n: 50, r2: 96)                         	 0.103926  	 600       	 510.79    	 0         	 42.9915   	 11.8812   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 96)                                                                               	 0.0532953 	 100       	 3.91529   	 0         	 0.18238   	 21.4678   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                               	 0.0394092 	 100       	 2.96039   	 0         	 0.153264  	 19.3157   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4800, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                	 0.0269838 	 100       	 91.3462   	 0         	 7.18951   	 12.7055   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 96, n: 50, r2new: 50)	 0.0238426 	 100       	 96.8015   	 0         	 15.958    	 6.06602   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 96, r2: 96, leftOrthog: 1)                      	 0.0183351 	 100       	 251.321   	 0         	 32.2194   	 7.80031   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 96, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0180152 	 200       	 10.5079   	 0         	 1.24482   	 8.44132   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 96, r: 96, streamingCols: 0)                                 	 0.0163738 	 100       	 140.713   	 0         	 23.6772   	 5.94295   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 46, n: 50, r2: 46)                                                                                                       	 0.0161959 	 800       	 0         	 0         	 83.6161   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4800, r: 50, r2: 50, leftOrthog: 1)                      	 0.0135477 	 100       	 177.152   	 0         	 42.8116   	 4.13793   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 96, n: 50, r: 96, r2: 50)                           	 0.0133059 	 100       	 346.312   	 0         	 42.4232   	 8.16327   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 96, r1_: 96, n: 50, r2: 50)                         	 0.0115326 	 100       	 399.564   	 0         	 33.9363   	 11.7739   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 96, m: 96, fromLeft: 1)                              	 0.00685378	 800       	 0         	 0         	 17.2116   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 96, r1_: 50, n: 50, r2: 96)                         	 0.00674029	 100       	 683.651   	 0         	 83.7472   	 8.16327   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 96)                                                                       	 0.00669262	 100       	 0         	 0         	 57.3766   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 96, m: 2500)                                                                                	 0.00636069	 100       	 0         	 0         	 60.3708   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 96, leftOrthog: 1)                        	 0.00222004	 100       	 21.6212   	 0         	 6.99086   	 3.09278   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 96) 	 0.00213022	 100       	 43.2632   	 0         	 7.06632   	 6.12245   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 96, r: 50, streamingCols: 0)                                   	 0.00154562	 100       	 8.08735   	 0         	 3.23494   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 96, n: 50, r2new: 1) 	 0.00126258	 100       	 0.760349  	 0         	 6.08406   	 0.124974  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 96, r2: 96)                            	 0.0012269 	 100       	 75.1163   	 0         	 12.269    	 6.12245   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 96)                           	 0.000772978	 100       	 0         	 0         	 9.9356    	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000751957	 100       	 0.664932  	 0         	 2.65973   	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000707994	 100       	 35.311    	 0         	 8.47465   	 4.16667   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 96, n: 50, r: 2, r2: 1)                             	 0.000572092	 100       	 3.3561    	 0         	 20.1394   	 0.166644  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 96)                                                                                                        	 0.00048473	 100       	 0         	 0         	 15.8439   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                  	 0.00048383	 100       	 0         	 0         	 8.26737   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 96)                                                                         	 0.000423333	 100       	 0         	 0         	 18.1417   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 46)                                                                                                        	 0.000403279	 100       	 0         	 0         	 9.1252    	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 46, n: 50, r2: 1)                                                                                                        	 0.000319272	 100       	 0         	 0         	 11.5262   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000318282	 100       	 0.785467  	 0         	 12.5675   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 96, m: 50, fromLeft: 1)                              	 0.000207366	 100       	 0         	 0         	 37.036    	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 3.95418   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 3.95415   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 2.41541   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 2.41426   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 2.14864   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 1.31922   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 1.31194   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.894147  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.684954  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.628063  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.244186  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.215294  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.189241  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.13982   	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.13569   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.129506  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.126981  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.122906  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0174032 	 1100      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.0110677 	 1800      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00706115	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00585573	 6400      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00110717	 4600      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000772978	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000751957	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000318282	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22887010404224 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22886806972416 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22886605645952 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22886404319488 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22886202993024 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22886001666560 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22885800340096 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22885599013632 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22885397687168 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22885196360704 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22884995034240 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22884793707776 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22884592381312 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22884391054848 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22884189728384 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22883988401920 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22883787075456 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22883585748992 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22883384422528 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22883183096064 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22882981769600 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22882780443136 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22882579116672 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22882377790208 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22882176463744 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22881975137280 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22881773810816 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22881572484352 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22881371157888 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22881169831424 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22880968504960 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22880767178496 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22880565847936 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22880364521472 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22880163195008 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22879961868544 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22879760542080 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22879559215616 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22879357889152 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22879156562688 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22878955236224 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22878753909760 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22878552583296 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22878351256832 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22878149930368 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22877948603904 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22877747277440 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22877545950976 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22877344624512 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22877143298048 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22876941971584 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22876740645120 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22876539318656 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22876337992192 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22876136665728 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22875935339264 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22875734012800 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22875532686336 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22875331359872 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22875130033408 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22874928706944 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22874727380480 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22874526054016 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22886904743680 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22886898153216 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4850, cols: 97, reductionFactor: 37, colBlockingSize: 12)                                	 1.16615   	 1300      	 104.493   	 0         	 4.2795    	 24.4171   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 97, m: 97)                                                                               	 0.835726  	 700       	 7.13487   	 0         	 0.189792  	 37.593    
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 97, n: 50, r2new: 97)	 0.292742  	 700       	 109.223   	 0         	 13.6835   	 7.98209   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 97, n: 50, r: 97, r2: 97)                           	 0.217058  	 700       	 294.332   	 0         	 24.5176   	 12.005    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4850, r: 97, r2: 97, leftOrthog: 1)                      	 0.203791  	 600       	 268.709   	 0         	 33.6856   	 7.97697   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 4850, Xcols: 97, r: 97, streamingCols: 0)                                 	 0.175396  	 700       	 182.122   	 0         	 30.191    	 6.03234   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 4850, m: 97)                                                                       	 0.173795  	 700       	 0         	 0         	 30.3175   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 97, reductionFactor: 37, colBlockingSize: 12)                                	 0.152943  	 200       	 63.1823   	 0         	 2.63532   	 23.9752   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 97, m: 97)                                                                                	 0.140982  	 900       	 7.76843   	 0         	 1.44652   	 5.37043   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 97, m: 4850)                                                                                	 0.117618  	 700       	 0         	 0         	 44.798    	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 97, r1_: 97, n: 50, r2: 97)                         	 0.0721907 	 600       	 758.551   	 0         	 63.1865   	 12.005    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 97)                                                                               	 0.0520968 	 100       	 4.04375   	 0         	 0.188111  	 21.4966   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                               	 0.039602  	 100       	 2.94598   	 0         	 0.152518  	 19.3157   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4850, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                	 0.0274626 	 100       	 90.6884   	 0         	 7.13698   	 12.7068   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 97, n: 50, r2new: 50)	 0.02307   	 100       	 102.059   	 0         	 16.7421   	 6.09595   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 97, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0191791 	 200       	 10.0769   	 0         	 1.18955   	 8.47123   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 97, r2: 97, leftOrthog: 1)                      	 0.0190049 	 100       	 247.541   	 0         	 31.4158   	 7.87952   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 47, n: 50, r2: 47)                                                                                                       	 0.0171488 	 800       	 0         	 0         	 82.4408   	 0         
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 97, r: 97, streamingCols: 0)                                 	 0.0167701 	 100       	 140.265   	 0         	 23.3609   	 6.00426   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4850, r: 50, r2: 50, leftOrthog: 1)                      	 0.0136679 	 100       	 177.424   	 0         	 42.8743   	 4.13823   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 97, n: 50, r: 97, r2: 50)                           	 0.0123467 	 100       	 381.034   	 0         	 46.5097   	 8.19257   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 97, r1_: 97, n: 50, r2: 50)                         	 0.00843959	 100       	 557.432   	 0         	 46.8657   	 11.8943   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 97, r1_: 50, n: 50, r2: 97)                         	 0.00714187	 100       	 658.721   	 0         	 80.4047   	 8.19257   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 97)                                                                       	 0.00620763	 100       	 0         	 0         	 62.5037   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 97, m: 97, fromLeft: 1)                              	 0.00572925	 800       	 0         	 0         	 21.0211   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 97, m: 2500)                                                                                	 0.00551616	 100       	 0         	 0         	 70.3387   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 97) 	 0.002544  	 100       	 36.9851   	 0         	 6.00913   	 6.15482   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 97, leftOrthog: 1)                        	 0.00249608	 100       	 19.4304   	 0         	 6.26582   	 3.10102   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 97, r2: 97)                            	 0.00152363	 100       	 61.754    	 0         	 10.0334   	 6.15482   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 97, r: 50, streamingCols: 0)                                   	 0.0013892 	 100       	 8.99797   	 0         	 3.59919   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 97, n: 50, r2new: 1) 	 0.00123267	 100       	 0.78691   	 0         	 6.29658   	 0.124974  
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 97)                           	 0.000845095	 100       	 0         	 0         	 9.1824    	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000811901	 100       	 0.615839  	 0         	 2.46335   	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000731553	 100       	 34.1739   	 0         	 8.20173   	 4.16667   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 97, n: 50, r: 2, r2: 1)                             	 0.00057929	 100       	 3.34893   	 0         	 20.0963   	 0.166644  
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                  	 0.000508  	 100       	 0         	 0         	 7.87402   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 97)                                                                                                        	 0.000489675	 100       	 0         	 0         	 15.8472   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 47)                                                                                                        	 0.000388043	 100       	 0         	 0         	 9.68965   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 97)                                                                         	 0.000367676	 100       	 0         	 0         	 21.1055   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000326613	 100       	 0.765432  	 0         	 12.2469   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 47, n: 50, r2: 1)                                                                                                        	 0.000319237	 100       	 0         	 0         	 11.7781   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 97, m: 50, fromLeft: 1)                              	 0.000203573	 100       	 0         	 0         	 38.119    	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 4.14354   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 4.14351   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 2.41898   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 2.41777   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 2.23533   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 1.38597   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 1.36573   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.927425  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.708089  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.658723  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.319589  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.23896   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.231507  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.193556  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.180371  	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.140982  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.123642  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.0885038 	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0183457 	 1100      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.0159901 	 1800      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00593282	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00499272	 6400      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.000954696	 4600      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000845095	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000811901	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000326613	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22430531336064 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22430332479488 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22430131153024 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22429929826560 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22429728500096 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22429527173632 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22429325847168 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22429124520704 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22428923194240 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22428721867776 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22428520541312 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22428319214848 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22428117888384 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22427916561920 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22427715235456 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22427513908992 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22427312582528 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22427111256064 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22426909929600 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22426708603136 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22426507276672 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22426305950208 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22426104623744 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22425903297280 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22425701970816 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22425500644352 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22425299317888 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22425097991424 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22424896664960 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22424695338496 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22424494012032 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22424292685568 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22424091355008 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22423890028544 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22423688702080 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22423487375616 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22423286049152 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22423084722688 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22422883396224 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22422682069760 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22422480743296 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22422279416832 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22422078090368 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22421876763904 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22421675437440 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22421474110976 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22421272784512 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22421071458048 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22420870131584 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22420668805120 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22420467478656 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22420266152192 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22420064825728 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22419863499264 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22419662172800 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22419460846336 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22419259519872 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22419058193408 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22418856866944 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22418655540480 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22418454214016 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22418252887552 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22418051561088 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22430425675520 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22430419085056 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4900, cols: 98, reductionFactor: 37, colBlockingSize: 12)                                	 1.19111   	 1300      	 105.499   	 0         	 4.27664   	 24.6688   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 98, m: 98)                                                                               	 0.841502  	 700       	 7.30731   	 0         	 0.192389  	 37.9819   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 98, n: 50, r2new: 98)	 0.298513  	 700       	 110.399   	 0         	 13.6946   	 8.06146   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 98, n: 50, r: 98, r2: 98)                           	 0.223026  	 700       	 295.406   	 0         	 24.356    	 12.1287   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4900, r: 98, r2: 98, leftOrthog: 1)                      	 0.196302  	 600       	 287.676   	 0         	 35.6953   	 8.05921   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 4900, Xcols: 98, r: 98, streamingCols: 0)                                 	 0.176111  	 700       	 187.051   	 0         	 30.6917   	 6.09453   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 98, reductionFactor: 37, colBlockingSize: 12)                                	 0.154125  	 200       	 63.9972   	 0         	 2.64309   	 24.213    
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 4900, m: 98)                                                                       	 0.14304   	 700       	 0         	 0         	 37.5996   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 98, m: 98)                                                                                	 0.139525  	 900       	 8.09484   	 0         	 1.49187   	 5.42599   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 98, m: 4900)                                                                                	 0.129     	 700       	 0         	 0         	 41.6918   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 98, r1_: 98, n: 50, r2: 98)                         	 0.0737496 	 600       	 765.72    	 0         	 63.1328   	 12.1287   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 98)                                                                               	 0.0526128 	 100       	 4.04211   	 0         	 0.187787  	 21.525    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                               	 0.0399101 	 100       	 2.92324   	 0         	 0.15134   	 19.3157   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 98, n: 50, r2new: 50)	 0.0309509 	 100       	 77.6068   	 0         	 12.6678   	 6.1263    
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4900, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                	 0.0276287 	 100       	 91.0725   	 0         	 7.16646   	 12.7082   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 98, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0182128 	 200       	 10.8315   	 0         	 1.27418   	 8.50073   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 48, n: 50, r2: 48)                                                                                                       	 0.0176821 	 800       	 0         	 0         	 83.3927   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 98, r2: 98, leftOrthog: 1)                      	 0.0174967 	 100       	 274.452   	 0         	 34.4846   	 7.95868   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 98, r: 98, streamingCols: 0)                                 	 0.0171432 	 100       	 140.056   	 0         	 23.0903   	 6.06556   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4900, r: 50, r2: 50, leftOrthog: 1)                      	 0.0155439 	 100       	 157.619   	 0         	 38.0858   	 4.13851   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 98, n: 50, r: 98, r2: 50)                           	 0.0130955 	 100       	 366.692   	 0         	 44.6017   	 8.22148   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 98, r1_: 98, n: 50, r2: 50)                         	 0.00825974	 100       	 581.374   	 0         	 48.3893   	 12.0145   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 98, r1_: 50, n: 50, r2: 98)                         	 0.00696568	 100       	 689.38    	 0         	 83.8512   	 8.22148   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 98, m: 2500)                                                                                	 0.00607005	 100       	 0         	 0         	 64.5794   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 98)                                                                       	 0.00605326	 100       	 0         	 0         	 64.7585   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 98, m: 98, fromLeft: 1)                              	 0.00604911	 800       	 0         	 0         	 20.3222   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 98, leftOrthog: 1)                        	 0.00236063	 100       	 20.7571   	 0         	 6.67617   	 3.10914   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 98) 	 0.00207385	 100       	 46.3101   	 0         	 7.48522   	 6.18687   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 98, r: 50, streamingCols: 0)                                   	 0.00146666	 100       	 8.52278   	 0         	 3.40911   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 98, r2: 98)                            	 0.00116601	 100       	 82.3666   	 0         	 13.3131   	 6.18687   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 98, n: 50, r2new: 1) 	 0.00116512	 100       	 0.841118  	 0         	 6.73032   	 0.124974  
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000775356	 100       	 0.644865  	 0         	 2.57946   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 98)                           	 0.000760316	 100       	 0         	 0         	 10.3115   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.000752383	 100       	 33.2278   	 0         	 7.97466   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 98)                                                                                                        	 0.000639785	 100       	 0         	 0         	 12.2541   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 98, n: 50, r: 2, r2: 1)                             	 0.000525311	 100       	 3.73112   	 0         	 22.3898   	 0.166644  
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.00050541	 100       	 0.494648  	 0         	 7.91437   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                  	 0.000488128	 100       	 0         	 0         	 8.19457   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 48)                                                                                                        	 0.000412727	 100       	 0         	 0         	 9.30397   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 98)                                                                         	 0.000406843	 100       	 0         	 0         	 19.2703   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 48, n: 50, r2: 1)                                                                                                        	 0.000313721	 100       	 0         	 0         	 12.2402   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 98, m: 50, fromLeft: 1)                              	 0.000201615	 100       	 0         	 0         	 38.886    	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 4.19888   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 4.19885   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 2.46879   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 2.46743   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 2.2563    	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 1.39108   	 1800      
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 1.38519   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.934025  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.720709  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.671444  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.332703  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.237813  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.231703  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.194721  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.1495    	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.139525  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.135558  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.0897274 	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0190484 	 1100      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.0140626 	 1800      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00625072	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00572582	 6400      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00103611	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000775356	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000760316	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.00050541	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22510766282624 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22510527571968 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22510326245504 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22510124919040 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22509923592576 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22509722266112 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22509520939648 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22509319613184 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22509118286720 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22508916960256 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22508715633792 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22508514307328 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22508312980864 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22508111654400 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22507910327936 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22507709001472 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22507507675008 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22507306348544 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22507105022080 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22506903695616 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22506702369152 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22506501042688 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22506299716224 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22506098389760 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22505897063296 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22505695736832 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22505494410368 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22505293083904 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22505091757440 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22504890430976 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22504689104512 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22504487778048 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22504286447488 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22504085121024 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22503883794560 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22503682468096 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22503481141632 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22503279815168 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22503078488704 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22502877162240 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22502675835776 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22502474509312 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22502273182848 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22502071856384 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22501870529920 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22501669203456 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22501467876992 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22501266550528 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22501065224064 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22500863897600 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22500662571136 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22500461244672 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22500259918208 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22500058591744 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22499857265280 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22499655938816 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22499454612352 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22499253285888 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22499051959424 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22498850632960 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22498649306496 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22498447980032 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22498246653568 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22510660622080 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22510654031616 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                    	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4950, cols: 99, reductionFactor: 37, colBlockingSize: 12)                                	 1.19532   	 1300      	 108.38    	 0         	 4.34902   	 24.9205   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 99, m: 99)                                                                               	 0.889511  	 700       	 7.12671   	 0         	 0.185733  	 38.3708   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 99, n: 50, r2new: 99)	 0.310672  	 700       	 109.324   	 0         	 13.4271   	 8.142     
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 99, n: 50, r: 99, r2: 99)                           	 0.235423  	 700       	 288.506   	 0         	 23.5468   	 12.2525   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4950, r: 99, r2: 99, leftOrthog: 1)                      	 0.216812  	 600       	 268.517   	 0         	 32.9815   	 8.14145   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 4950, Xcols: 99, r: 99, streamingCols: 0)                                 	 0.180227  	 700       	 188.432   	 0         	 30.6059   	 6.15672   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 4950, m: 99)                                                                       	 0.177964  	 700       	 0         	 0         	 30.8408   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 99, reductionFactor: 37, colBlockingSize: 12)                                	 0.155795  	 200       	 64.6098   	 0         	 2.64245   	 24.4507   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 99, m: 99)                                                                                	 0.146609  	 900       	 7.94194   	 0         	 1.44885   	 5.48154   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 99, m: 4950)                                                                                	 0.124008  	 700       	 0         	 0         	 44.2598   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 99, r1_: 99, n: 50, r2: 99)                         	 0.0760646 	 600       	 765.375   	 0         	 62.467    	 12.2525   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 99)                                                                               	 0.0520846 	 100       	 4.1215    	 0         	 0.191227  	 21.5529   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                               	 0.0394123 	 100       	 2.96016   	 0         	 0.153252  	 19.3157   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 4950, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                	 0.0288123 	 100       	 88.2225   	 0         	 6.94148   	 12.7095   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 99, n: 50, r2new: 50)	 0.0240936 	 100       	 101.708   	 0         	 16.5189   	 6.15704   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 99, r2: 99, leftOrthog: 1)                      	 0.019955  	 100       	 245.578   	 0         	 30.5529   	 8.0378    
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 99, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0180772 	 200       	 11.1366   	 0         	 1.3056    	 8.52984   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 49, n: 50, r2: 49)                                                                                                       	 0.0177661 	 800       	 0         	 0         	 86.493    	 0         
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 99, r: 99, streamingCols: 0)                                 	 0.0171606 	 100       	 142.783   	 0         	 23.3045   	 6.12684   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 4950, r: 50, r2: 50, leftOrthog: 1)                      	 0.0137246 	 100       	 180.333   	 0         	 43.5714   	 4.1388    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 99, n: 50, r: 99, r2: 50)                           	 0.0132811 	 100       	 368.982   	 0         	 44.7251   	 8.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 99, r1_: 99, n: 50, r2: 50)                         	 0.0085647 	 100       	 572.174   	 0         	 47.1518   	 12.1347   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 99, r1_: 50, n: 50, r2: 99)                         	 0.00730503	 100       	 670.839   	 0         	 81.3138   	 8.25      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 99, m: 99, fromLeft: 1)                              	 0.00662245	 800       	 0         	 0         	 18.9436   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 99)                                                                       	 0.00587145	 100       	 0         	 0         	 67.445    	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 99, m: 2500)                                                                                	 0.00584516	 100       	 0         	 0         	 67.7484   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 99, leftOrthog: 1)                        	 0.00245862	 100       	 20.1332   	 0         	 6.45889   	 3.11713   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 99) 	 0.0021407 	 100       	 45.784    	 0         	 7.36244   	 6.21859   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 99, r: 50, streamingCols: 0)                                   	 0.00181168	 100       	 6.89966   	 0         	 2.75986   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 99, n: 50, r2new: 1) 	 0.00141834	 100       	 0.697997  	 0         	 5.5851    	 0.124975  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 99, r2: 99)                            	 0.00120558	 100       	 81.2967   	 0         	 13.0732   	 6.21859   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                          	 0.00112773	 100       	 22.1684   	 0         	 5.32041   	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000885556	 100       	 0.564617  	 0         	 2.25847   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 99)                           	 0.00077936	 100       	 0         	 0         	 10.1622   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 99, n: 50, r: 2, r2: 1)                             	 0.000740775	 100       	 2.67288   	 0         	 16.0394   	 0.166644  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 99)                                                                                                        	 0.000500769	 100       	 0         	 0         	 15.8157   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                  	 0.000475828	 100       	 0         	 0         	 8.4064    	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 99)                                                                         	 0.000460229	 100       	 0         	 0         	 17.2088   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 49)                                                                                                        	 0.000381844	 100       	 0         	 0         	 10.266    	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                               	 0.000321893	 100       	 0.776656  	 0         	 12.4265   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 49, n: 50, r2: 1)                                                                                                        	 0.000311287	 100       	 0         	 0         	 12.5929   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 99, m: 50, fromLeft: 1)                              	 0.000205895	 100       	 0         	 0         	 38.4662   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 4.33585   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 4.33582   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 2.53481   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 2.53352   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 2.32984   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 1.44077   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 1.398     	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.981008  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.734147  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.664938  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.338325  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.252951  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.25065   	 1000      
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.199199  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.184296  	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.146609  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.130329  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.093062  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.01896   	 1100      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.0177543 	 1800      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00682834	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00546063	 6400      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00103456	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000885556	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.00077936	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000321893	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22592655996800 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22592467494912 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22592266168448 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22592064841984 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22591863515520 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22591662189056 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22591460862592 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22591259536128 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22591058209664 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22590856883200 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22590655556736 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22590454230272 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22590252903808 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22590051577344 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22589850250880 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22589648924416 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22589447597952 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22589246271488 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22589044945024 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22588843618560 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22588642292096 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22588440965632 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22588239639168 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22588038312704 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22587836986240 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22587635659776 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22587434333312 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22587233006848 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22587031680384 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22586830353920 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22586629027456 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22586427700992 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22586226370432 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22586025043968 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22585823717504 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22585622391040 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22585421064576 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22585219738112 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22585018411648 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22584817085184 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22584615758720 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22584414432256 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22584213105792 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22584011779328 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22583810452864 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22583609126400 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22583407799936 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22583206473472 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22583005147008 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22582803820544 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22582602494080 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22582401167616 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22582199841152 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22581998514688 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22581797188224 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22581595861760 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22581394535296 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22581193208832 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22580991882368 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22580790555904 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22580589229440 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22580387902976 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22580186576512 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22592550336256 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22592543745792 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5000, cols: 100, reductionFactor: 37, colBlockingSize: 12)                                 	 1.20852   	 1300      	 110.477   	 0         	 4.38885   	 25.1722   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 100, m: 100)                                                                               	 0.843698  	 700       	 7.74369   	 0         	 0.199787  	 38.7597   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 100, n: 50, r2new: 100)	 0.313445  	 700       	 111.662   	 0         	 13.5781   	 8.22368   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 100, n: 50, r: 100, r2: 100)                          	 0.236686  	 700       	 295.751   	 0         	 23.8967   	 12.3762   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5000, r: 100, r2: 100, leftOrthog: 1)                      	 0.230145  	 600       	 260.705   	 0         	 31.7018   	 8.22368   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 5000, m: 100)                                                                        	 0.188951  	 700       	 0         	 0         	 29.6373   	 0         
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 5000, Xcols: 100, r: 100, streamingCols: 0)                                 	 0.179269  	 700       	 195.237   	 0         	 31.3942   	 6.21891   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 100, reductionFactor: 37, colBlockingSize: 12)                                 	 0.157531  	 200       	 65.195    	 0         	 2.64074   	 24.6881   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 100, m: 100)                                                                                	 0.144792  	 900       	 8.28777   	 0         	 1.49677   	 5.53709   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 100, m: 5000)                                                                                 	 0.130523  	 700       	 0         	 0         	 42.9043   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 100, r1_: 100, n: 50, r2: 100)                        	 0.0762675 	 600       	 786.704   	 0         	 63.5657   	 12.3762   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 100)                                                                                	 0.0530521 	 100       	 4.08403   	 0         	 0.189248  	 21.5803   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                                 	 0.038158  	 100       	 3.05746   	 0         	 0.158289  	 19.3157   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5000, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0275092 	 100       	 93.335    	 0         	 7.343     	 12.7107   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 100, n: 50, r2new: 50) 	 0.0245103 	 100       	 101.998   	 0         	 16.4829   	 6.18812   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 100, r2: 100, leftOrthog: 1)                      	 0.020572  	 100       	 243.048   	 0         	 29.9436   	 8.11688   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 50)                                                                                                         	 0.0192723 	 800       	 0         	 0         	 83.0207   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 100, reductionFactor: 37, colBlockingSize: 12)                                   	 0.018723  	 200       	 10.9707   	 0         	 1.28184   	 8.55856   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 100, r: 100, streamingCols: 0)                                 	 0.0175114 	 100       	 142.764   	 0         	 23.0707   	 6.18812   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5000, r: 50, r2: 50, leftOrthog: 1)                        	 0.0156405 	 100       	 159.842   	 0         	 38.6177   	 4.13907   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 100, n: 50, r: 100, r2: 50)                           	 0.0129775 	 100       	 385.284   	 0         	 46.5423   	 8.27815   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 100, r1_: 100, n: 50, r2: 50)                         	 0.00812442	 100       	 615.428   	 0         	 50.219    	 12.2549   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 100)                                                                        	 0.0078926 	 100       	 0         	 0         	 50.6804   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 100, r1_: 50, n: 50, r2: 100)                         	 0.00708515	 100       	 705.701   	 0         	 85.2487   	 8.27815   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 100, m: 2500)                                                                                 	 0.00706353	 100       	 0         	 0         	 56.6289   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 100, m: 100, fromLeft: 1)                              	 0.00648713	 800       	 0         	 0         	 19.7314   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 100)  	 0.00229553	 100       	 43.5629   	 0         	 6.97007   	 6.25      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 100, leftOrthog: 1)                         	 0.00228154	 100       	 21.915    	 0         	 7.0128    	 3.125     
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 100, r: 50, streamingCols: 0)                                    	 0.00138713	 100       	 9.01144   	 0         	 3.60458   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 100, n: 50, r2new: 1)  	 0.00126795	 100       	 0.788675  	 0         	 6.31066   	 0.124975  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 100, r2: 100)                            	 0.00117368	 100       	 85.202    	 0         	 13.6323   	 6.25      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000775368	 100       	 0.644855  	 0         	 2.57942   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 100)                            	 0.000773075	 100       	 0         	 0         	 10.3483   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000725119	 100       	 34.4771   	 0         	 8.2745    	 4.16667   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 100, n: 50, r: 2, r2: 1)                              	 0.00059271	 100       	 3.37433   	 0         	 20.2487   	 0.166644  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 100)                                                                                                         	 0.000521351	 100       	 0         	 0         	 15.3447   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                    	 0.000490007	 100       	 0         	 0         	 8.16315   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 100)                                                                          	 0.000483276	 100       	 0         	 0         	 16.5537   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 50)                                                                                                          	 0.000405724	 100       	 0         	 0         	 9.85892   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                          	 0.000346623	 100       	 0         	 0         	 11.5399   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000333494	 100       	 0.749639  	 0         	 11.9942   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 100, m: 50, fromLeft: 1)                               	 0.000197594	 100       	 0         	 0         	 40.4871   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 4.30954   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 4.30951   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 2.49197   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 2.49077   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 2.28527   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 1.46497   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 1.41228   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.934908  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.745817  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.667503  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.341519  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.268639  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.25143   	 1000      
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.198168  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.197327  	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.144792  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.138077  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.0922022 	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.020546  	 1100      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.0162145 	 1800      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00668472	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00493206	 6400      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.0011755 	 4400      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000775368	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000773075	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000333494	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22409233454976 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22409058969600 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22408857643136 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22408656316672 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22408454990208 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22408253663744 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22408052337280 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22407851010816 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22407649684352 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22407448357888 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22407247031424 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22407045704960 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22406844378496 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22406643052032 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22406441725568 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22406240399104 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22406039072640 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22405837746176 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22405636419712 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22405435093248 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22405233766784 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22405032440320 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22404831113856 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22404629787392 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22404428460928 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22404227134464 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22404025808000 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22403824481536 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22403623155072 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22403421828608 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22403220502144 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22403019175680 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22402817845120 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22402616518656 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22402415192192 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22402213865728 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22402012539264 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22401811212800 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22401609886336 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22401408559872 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22401207233408 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22401005906944 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22400804580480 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22400603254016 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22400401927552 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22400200601088 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22399999274624 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22399797948160 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22399596621696 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22399395295232 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22399193968768 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22398992642304 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22398791315840 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22398589989376 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22398388662912 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22398187336448 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22397986009984 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22397784683520 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22397583357056 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22397382030592 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22397180704128 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22396979377664 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22396778051200 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22408954107648 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22408949217024 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5050, cols: 101, reductionFactor: 37, colBlockingSize: 12)                                 	 1.23072   	 1300      	 111.771   	 0         	 4.3963    	 25.424    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 101, m: 101)                                                                               	 0.929953  	 700       	 7.23833   	 0         	 0.184894  	 39.1486   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 101, n: 50, r2new: 101)	 0.304955  	 700       	 118.26    	 0         	 14.2371   	 8.30647   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5050, r: 101, r2: 101, leftOrthog: 1)                      	 0.231899  	 600       	 266.573   	 0         	 32.0944   	 8.30592   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 101, n: 50, r: 101, r2: 101)                          	 0.225927  	 700       	 319.222   	 0         	 25.5378   	 12.5      
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 5050, Xcols: 101, r: 101, streamingCols: 0)                                 	 0.185615  	 700       	 194.276   	 0         	 30.9303   	 6.28109   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 5050, m: 101)                                                                        	 0.178691  	 700       	 0         	 0         	 31.969    	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 101, reductionFactor: 37, colBlockingSize: 12)                                 	 0.163595  	 200       	 64.0403   	 0         	 2.56927   	 24.9254   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 101, m: 101)                                                                                	 0.154627  	 900       	 7.99575   	 0         	 1.42969   	 5.59265   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 101, m: 5050)                                                                                 	 0.118266  	 700       	 0         	 0         	 48.3027   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 101, r1_: 101, n: 50, r2: 101)                        	 0.0782663 	 600       	 789.842   	 0         	 63.1874   	 12.5      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 101)                                                                                	 0.0539304 	 100       	 4.05461   	 0         	 0.187649  	 21.6074   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                                 	 0.0407661 	 100       	 2.86185   	 0         	 0.148162  	 19.3157   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5050, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0277487 	 100       	 93.4547   	 0         	 7.3517    	 12.712    
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 101, n: 50, r2new: 50) 	 0.0246438 	 100       	 103.495   	 0         	 16.6403   	 6.21952   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 101, reductionFactor: 37, colBlockingSize: 12)                                   	 0.0219326 	 200       	 9.55354   	 0         	 1.11257   	 8.5869    
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 101, r: 101, streamingCols: 0)                                 	 0.0202366 	 100       	 126.022   	 0         	 20.1655   	 6.24938   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 101, r2: 101, leftOrthog: 1)                      	 0.0201429 	 100       	 253.216   	 0         	 30.8953   	 8.19592   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 51, n: 50, r2: 51)                                                                                                         	 0.0195145 	 800       	 0         	 0         	 85.3026   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 101, n: 50, r: 101, r2: 50)                           	 0.013706  	 100       	 372.135   	 0         	 44.8036   	 8.30592   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5050, r: 50, r2: 50, leftOrthog: 1)                        	 0.0134632 	 100       	 187.549   	 0         	 45.3088   	 4.13934   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 101, r1_: 101, n: 50, r2: 50)                         	 0.00843495	 100       	 604.686   	 0         	 48.8634   	 12.375    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 101, r1_: 50, n: 50, r2: 101)                         	 0.00703764	 100       	 724.746   	 0         	 87.2565   	 8.30592   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 101, m: 101, fromLeft: 1)                              	 0.00658716	 800       	 0         	 0         	 19.8223   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 101)                                                                        	 0.00615574	 100       	 0         	 0         	 65.6298   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 101, m: 2500)                                                                                 	 0.00586731	 100       	 0         	 0         	 68.8561   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 101, leftOrthog: 1)                         	 0.00230364	 100       	 21.9218   	 0         	 6.99761   	 3.13275   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 101)  	 0.00211377	 100       	 48.2597   	 0         	 7.68333   	 6.28109   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 101, r: 50, streamingCols: 0)                                    	 0.00158857	 100       	 7.86869   	 0         	 3.14748   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 101, n: 50, r2new: 1)  	 0.00123692	 100       	 0.816543  	 0         	 6.53364   	 0.124975  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 101, r2: 101)                            	 0.00120437	 100       	 84.6997   	 0         	 13.4849   	 6.28109   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000778313	 100       	 0.642415  	 0         	 2.56966   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 101)                            	 0.000755313	 100       	 0         	 0         	 10.6976   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000754711	 100       	 33.1253   	 0         	 7.95006   	 4.16667   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                    	 0.00068509	 100       	 0         	 0         	 5.83865   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 101, n: 50, r: 2, r2: 1)                              	 0.000591051	 100       	 3.41764   	 0         	 20.5086   	 0.166645  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 101)                                                                                                         	 0.000498156	 100       	 0         	 0         	 16.2198   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 101)                                                                          	 0.00043804	 100       	 0         	 0         	 18.4458   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 51)                                                                                                          	 0.000432441	 100       	 0         	 0         	 9.43481   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000391856	 100       	 0.637989  	 0         	 10.2078   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 51, n: 50, r2: 1)                                                                                                          	 0.000330584	 100       	 0         	 0         	 12.3418   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 101, m: 50, fromLeft: 1)                               	 0.000232855	 100       	 0         	 0         	 34.6997   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 4.4141    	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 4.41407   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 2.59213   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 2.59089   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 2.39046   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 1.47691   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 1.444     	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 1.02465   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.76059   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.684537  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.332949  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.267809  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.241429  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.20744   	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.185285  	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.154627  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.124818  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.0944936 	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0207757 	 1100      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.0167084 	 1800      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00682001	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00515042	 6400      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00422141	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000778313	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000755313	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000391856	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22980104640384 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22979886966784 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22979685640320 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22979484313856 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22979282987392 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22979081660928 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22978880334464 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22978679008000 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22978477681536 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22978276355072 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22978075028608 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22977873702144 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22977672375680 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22977471049216 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22977269722752 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22977068396288 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22976867069824 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22976665743360 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22976464416896 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22976263090432 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22976061763968 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22975860437504 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22975659111040 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22975457784576 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22975256458112 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22975055131648 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22974853805184 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22974652478720 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22974451152256 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22974249825792 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22974048499328 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22973847172864 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22973645842304 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22973444515840 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22973243189376 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22973041862912 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22972840536448 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22972639209984 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22972437883520 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22972236557056 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22972035230592 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22971833904128 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22971632577664 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22971431251200 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22971229924736 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22971028598272 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22970827271808 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22970625945344 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22970424618880 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22970223292416 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22970021965952 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22969820639488 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22969619313024 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22969417986560 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22969216660096 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22969015333632 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22968814007168 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22968612680704 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22968411354240 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22968210027776 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22968008701312 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22967807374848 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22967606048384 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22979998979840 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22979992389376 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5100, cols: 102, reductionFactor: 37, colBlockingSize: 12)                                 	 1.24135   	 1300      	 114.138   	 0         	 4.44537   	 25.6757   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 102, m: 102)                                                                               	 0.920352  	 700       	 7.53323   	 0         	 0.190534  	 39.5375   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 102, n: 50, r2new: 102)	 0.301774  	 700       	 123.127   	 0         	 14.6749   	 8.39032   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 102, n: 50, r: 102, r2: 102)                          	 0.227721  	 700       	 326.208   	 0         	 25.8408   	 12.6238   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5100, r: 102, r2: 102, leftOrthog: 1)                      	 0.221425  	 600       	 287.557   	 0         	 34.2814   	 8.38816   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 5100, Xcols: 102, r: 102, streamingCols: 0)                                 	 0.188715  	 700       	 196.817   	 0         	 31.0277   	 6.34328   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 102, reductionFactor: 37, colBlockingSize: 12)                                 	 0.161526  	 200       	 66.1515   	 0         	 2.62897   	 25.1626   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 102, m: 102)                                                                                	 0.149374  	 900       	 8.52524   	 0         	 1.50937   	 5.64821   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 102, m: 5100)                                                                                 	 0.128283  	 700       	 0         	 0         	 45.4172   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 5100, m: 102)                                                                        	 0.0833486 	 700       	 0         	 0         	 69.9021   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 102, r1_: 102, n: 50, r2: 102)                        	 0.079925  	 600       	 796.653   	 0         	 63.1074   	 12.6238   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 102)                                                                                	 0.0525602 	 100       	 4.19836   	 0         	 0.194063  	 21.634    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                                 	 0.0382752 	 100       	 3.0481    	 0         	 0.157804  	 19.3157   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5100, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0282867 	 100       	 92.5849   	 0         	 7.28258   	 12.7132   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 102, n: 50, r2new: 50) 	 0.0214574 	 100       	 121.263   	 0         	 19.3984   	 6.2512    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 52, n: 50, r2: 52)                                                                                                         	 0.0195707 	 800       	 0         	 0         	 88.426    	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 102, r2: 102, leftOrthog: 1)                      	 0.0195467 	 100       	 266.132   	 0         	 32.1613   	 8.27492   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 102, reductionFactor: 37, colBlockingSize: 12)                                   	 0.0194329 	 200       	 10.997    	 0         	 1.27652   	 8.61486   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 102, r: 102, streamingCols: 0)                                 	 0.0183281 	 100       	 141.913   	 0         	 22.4879   	 6.31063   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 102, n: 50, r: 102, r2: 50)                           	 0.0139116 	 100       	 373.932   	 0         	 44.8718   	 8.33333   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5100, r: 50, r2: 50, leftOrthog: 1)                        	 0.0134893 	 100       	 189.039   	 0         	 45.666    	 4.13961   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 102, r1_: 102, n: 50, r2: 50)                         	 0.00870596	 100       	 597.522   	 0         	 47.8205   	 12.4951   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 102, r1_: 50, n: 50, r2: 102)                         	 0.00758838	 100       	 685.522   	 0         	 82.2627   	 8.33333   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 102, m: 102, fromLeft: 1)                              	 0.00691807	 800       	 0         	 0         	 19.2498   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 102)                                                                        	 0.00624896	 100       	 0         	 0         	 65.2909   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 102, m: 2500)                                                                                 	 0.00557426	 100       	 0         	 0         	 73.1935   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 102, leftOrthog: 1)                         	 0.00231193	 100       	 22.0595   	 0         	 7.02444   	 3.14039   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 102)  	 0.00221247	 100       	 47.0245   	 0         	 7.45015   	 6.31188   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 102, r: 50, streamingCols: 0)                                    	 0.00157773	 100       	 7.92279   	 0         	 3.16912   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 102, n: 50, r2new: 1)  	 0.00129227	 100       	 0.789312  	 0         	 6.31573   	 0.124975  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 102, r2: 102)                            	 0.00126588	 100       	 82.1881   	 0         	 13.0212   	 6.31188   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000843554	 100       	 0.59273   	 0         	 2.37092   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 102)                            	 0.000785867	 100       	 0         	 0         	 10.3834   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000764059	 100       	 32.72     	 0         	 7.8528    	 4.16667   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 102, n: 50, r: 2, r2: 1)                              	 0.000602719	 100       	 3.38466   	 0         	 20.3106   	 0.166645  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 102)                                                                                                         	 0.000526874	 100       	 0         	 0         	 15.4876   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                    	 0.000491418	 100       	 0         	 0         	 8.13971   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 52)                                                                                                          	 0.00039894	 100       	 0         	 0         	 10.4276   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 102)                                                                          	 0.000391553	 100       	 0         	 0         	 20.8401   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 52, n: 50, r2: 1)                                                                                                          	 0.00034634	 100       	 0         	 0         	 12.0113   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000323191	 100       	 0.773536  	 0         	 12.3766   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 102, m: 50, fromLeft: 1)                               	 0.000221221	 100       	 0         	 0         	 36.8862   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 4.28035   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 4.28032   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 2.57225   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 2.571     	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 2.36984   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 1.4506    	 1800      
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 1.37912   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 1.01119   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.766088  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.685565  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.326736  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.256773  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.243502  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.20862   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.149374  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.134348  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.0969834 	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.0899891 	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0208429 	 1100      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00713929	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00529457	 6400      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.00396286	 1800      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00103976	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000843554	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000785867	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000323191	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22383387441024 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22383154948096 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22382953621632 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22382752295168 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22382550968704 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22382349642240 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22382148315776 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22381946989312 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22381745662848 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22381544336384 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22381343009920 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22381141683456 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22380940356992 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22380739030528 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22380537704064 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22380336377600 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22380135051136 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22379933724672 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22379732398208 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22379531071744 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22379329745280 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22379128418816 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22378927092352 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22378725765888 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22378524439424 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22378323112960 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22378121786496 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22377920460032 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22377719133568 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22377517807104 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22377316480640 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22377115154176 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22376913823616 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22376712497152 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22376511170688 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22376309844224 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22376108517760 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22375907191296 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22375705864832 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22375504538368 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22375303211904 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22375101885440 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22374900558976 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22374699232512 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22374497906048 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22374296579584 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22374095253120 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22373893926656 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22373692600192 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22373491273728 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22373289947264 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22373088620800 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22372887294336 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22372685967872 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22372484641408 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22372283314944 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22372081988480 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22371880662016 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22371679335552 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22371478009088 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22371276682624 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22371075356160 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22370874029696 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22383281780480 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22383275190016 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5150, cols: 103, reductionFactor: 37, colBlockingSize: 12)                                 	 1.27759   	 1300      	 114.195   	 0         	 4.4044    	 25.9274   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 103, m: 103)                                                                               	 0.954096  	 700       	 7.48263   	 0         	 0.187411  	 39.9263   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 103, n: 50, r2new: 103)	 0.320649  	 700       	 119.376   	 0         	 14.0854   	 8.47522   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 103, n: 50, r: 103, r2: 103)                          	 0.240851  	 700       	 317.586   	 0         	 24.9135   	 12.7475   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5150, r: 103, r2: 103, leftOrthog: 1)                      	 0.220675  	 600       	 297.105   	 0         	 35.0757   	 8.47039   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 5150, Xcols: 103, r: 103, streamingCols: 0)                                 	 0.188914  	 700       	 202.449   	 0         	 31.6057   	 6.40547   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 103, reductionFactor: 37, colBlockingSize: 12)                                 	 0.166497  	 200       	 65.4409   	 0         	 2.57647   	 25.3995   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 103, m: 103)                                                                                	 0.161846  	 900       	 8.10195   	 0         	 1.42046   	 5.70376   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 5150, m: 103)                                                                        	 0.148009  	 700       	 0         	 0         	 40.1398   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 103, m: 5150)                                                                                 	 0.11969   	 700       	 0         	 0         	 49.637    	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 103, r1_: 103, n: 50, r2: 103)                        	 0.0826574 	 600       	 793.197   	 0         	 62.2236   	 12.7475   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 103)                                                                                	 0.0527256 	 100       	 4.22312   	 0         	 0.194972  	 21.6602   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                                 	 0.0421012 	 100       	 2.7711    	 0         	 0.143464  	 19.3157   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5150, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0298107 	 100       	 88.713    	 0         	 6.97737   	 12.7144   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 103, n: 50, r2new: 50) 	 0.0255639 	 100       	 103.838   	 0         	 16.5264   	 6.28314   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 53, n: 50, r2: 53)                                                                                                         	 0.0214083 	 800       	 0         	 0         	 83.975    	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 103, r2: 103, leftOrthog: 1)                      	 0.0204908 	 100       	 258.872   	 0         	 30.9883   	 8.35388   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 103, reductionFactor: 37, colBlockingSize: 12)                                   	 0.0195553 	 200       	 11.1435   	 0         	 1.28939   	 8.64247   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 103, r: 103, streamingCols: 0)                                 	 0.0186328 	 100       	 142.343   	 0         	 22.3393   	 6.37187   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5150, r: 50, r2: 50, leftOrthog: 1)                        	 0.0139157 	 100       	 185.042   	 0         	 44.6976   	 4.13987   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 103, n: 50, r: 103, r2: 50)                           	 0.0137337 	 100       	 386.238   	 0         	 46.1986   	 8.36039   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 103, r1_: 103, n: 50, r2: 50)                         	 0.00875667	 100       	 605.767   	 0         	 48.0191   	 12.6151   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 103, r1_: 50, n: 50, r2: 103)                         	 0.0077286 	 100       	 686.347   	 0         	 82.0951   	 8.36039   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 103, m: 103, fromLeft: 1)                              	 0.00694249	 800       	 0         	 0         	 19.56     	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 103)                                                                        	 0.00674232	 100       	 0         	 0         	 61.1066   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 103, m: 2500)                                                                                 	 0.00603995	 100       	 0         	 0         	 68.2125   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 103, leftOrthog: 1)                         	 0.00242883	 100       	 21.2036   	 0         	 6.73575   	 3.14792   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 103)  	 0.00221812	 100       	 47.8287   	 0         	 7.54115   	 6.34236   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 103, r: 50, streamingCols: 0)                                    	 0.00152093	 100       	 8.21863   	 0         	 3.28745   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 103, r2: 103)                            	 0.00130783	 100       	 81.1194   	 0         	 12.7901   	 6.34236   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 103, n: 50, r2new: 1)  	 0.00108788	 100       	 0.946796  	 0         	 7.57584   	 0.124976  
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000894621	 100       	 0.558896  	 0         	 2.23558   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 103)                            	 0.000765231	 100       	 0         	 0         	 10.768    	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000703898	 100       	 35.5165   	 0         	 8.52396   	 4.16667   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                    	 0.00049641	 100       	 0         	 0         	 8.05786   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 103)                                                                                                         	 0.000475518	 100       	 0         	 0         	 17.3285   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 103)                                                                          	 0.00046078	 100       	 0         	 0         	 17.8827   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 103, n: 50, r: 2, r2: 1)                              	 0.000441291	 100       	 4.66812   	 0         	 28.0124   	 0.166645  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 53)                                                                                                          	 0.000397698	 100       	 0         	 0         	 10.6614   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000341142	 100       	 0.732833  	 0         	 11.7253   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 53, n: 50, r2: 1)                                                                                                          	 0.000322374	 100       	 0         	 0         	 13.1524   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 103, m: 50, fromLeft: 1)                               	 0.000233877	 100       	 0         	 0         	 35.2322   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 4.46344   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 4.46341   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 2.61519   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 2.61388   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 2.43847   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 1.49345   	 1800      
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 1.4811    	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 1.04892   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.782149  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.712374  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.349519  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.25751   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.256334  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.209067  	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.161846  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.155212  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.126226  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.0998465 	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0226039 	 1100      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.0108098 	 1800      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00717637	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.0045554 	 6400      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00111875	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000894621	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000765231	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000341142	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22835215189888 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22834998929408 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22834797602944 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22834596276480 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22834394950016 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22834193623552 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22833992297088 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22833790970624 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22833589644160 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22833388317696 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22833186991232 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22832985664768 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22832784338304 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22832583011840 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22832381685376 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22832180358912 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22831979032448 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22831777705984 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22831576379520 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22831375053056 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22831173726592 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22830972400128 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22830771073664 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22830569747200 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22830368420736 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22830167094272 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22829965767808 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22829764441344 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22829563114880 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22829361788416 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22829160461952 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22828959135488 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22828757804928 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22828556478464 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22828355152000 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22828153825536 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22827952499072 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22827751172608 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22827549846144 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22827348519680 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22827147193216 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22826945866752 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22826744540288 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22826543213824 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22826341887360 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22826140560896 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22825939234432 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22825737907968 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22825536581504 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22825335255040 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22825133928576 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22824932602112 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22824731275648 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22824529949184 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22824328622720 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22824127296256 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22823925969792 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22823724643328 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22823523316864 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22823321990400 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22823120663936 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22822919337472 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22822718011008 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22835109529344 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22835102938880 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5200, cols: 104, reductionFactor: 37, colBlockingSize: 12)                                 	 1.28579   	 1300      	 116.803   	 0         	 4.4617    	 26.1791   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 104, m: 104)                                                                               	 0.902215  	 700       	 8.14563   	 0         	 0.202048  	 40.3152   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 104, n: 50, r2new: 104)	 0.332431  	 700       	 118.606   	 0         	 13.8541   	 8.56112   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 104, n: 50, r: 104, r2: 104)                          	 0.252474  	 700       	 311.876   	 0         	 24.2303   	 12.8713   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5200, r: 104, r2: 104, leftOrthog: 1)                      	 0.235603  	 600       	 286.464   	 0         	 33.4943   	 8.55263   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 5200, Xcols: 104, r: 104, streamingCols: 0)                                 	 0.192109  	 700       	 204.937   	 0         	 31.6864   	 6.46766   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 104, reductionFactor: 37, colBlockingSize: 12)                                 	 0.166555  	 200       	 66.6945   	 0         	 2.60157   	 25.6362   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 104, m: 104)                                                                                	 0.152792  	 900       	 8.83446   	 0         	 1.53394   	 5.75932   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 5200, m: 104)                                                                        	 0.149305  	 700       	 0         	 0         	 40.5677   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 104, m: 5200)                                                                                 	 0.13785   	 700       	 0         	 0         	 43.9389   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 104, r1_: 104, n: 50, r2: 104)                        	 0.0789923 	 600       	 854.411   	 0         	 66.3812   	 12.8713   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 104)                                                                                	 0.0554808 	 100       	 4.04945   	 0         	 0.186731  	 21.686    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                                 	 0.0389631 	 100       	 2.99429   	 0         	 0.155019  	 19.3157   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5200, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                  	 0.028246  	 100       	 94.5363   	 0         	 7.43469   	 12.7156   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 104, n: 50, r2new: 50) 	 0.0273357 	 100       	 99.0647   	 0         	 15.6865   	 6.3153    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 54, n: 50, r2: 54)                                                                                                         	 0.0218309 	 800       	 0         	 0         	 85.4862   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 104, reductionFactor: 37, colBlockingSize: 12)                                   	 0.0209692 	 200       	 10.5949   	 0         	 1.22206   	 8.66971   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 104, r2: 104, leftOrthog: 1)                      	 0.0206902 	 100       	 261.38    	 0         	 30.9957   	 8.4328    
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 104, r: 104, streamingCols: 0)                                 	 0.0183484 	 100       	 147.37    	 0         	 22.9081   	 6.4331    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5200, r: 50, r2: 50, leftOrthog: 1)                        	 0.0149045 	 100       	 174.444   	 0         	 42.135    	 4.14013   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 104, n: 50, r: 104, r2: 50)                           	 0.0143921 	 100       	 375.763   	 0         	 44.8025   	 8.3871    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 104, r1_: 104, n: 50, r2: 50)                         	 0.00853751	 100       	 633.44    	 0         	 49.7397   	 12.7351   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 104, r1_: 50, n: 50, r2: 104)                         	 0.00813671	 100       	 664.642   	 0         	 79.2458   	 8.3871    
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 104)                                                                        	 0.0071046 	 100       	 0         	 0         	 58.5536   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 104, m: 2500)                                                                                 	 0.00686892	 100       	 0         	 0         	 60.5626   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 104, m: 104, fromLeft: 1)                              	 0.0066759 	 800       	 0         	 0         	 20.738    	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 104, leftOrthog: 1)                         	 0.00243728	 100       	 21.3352   	 0         	 6.76162   	 3.15534   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 104)  	 0.00226857	 100       	 47.6776   	 0         	 7.48172   	 6.37255   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 104, n: 50, r2new: 1)  	 0.00140758	 100       	 0.738857  	 0         	 5.91199   	 0.124976  
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 104, r: 50, streamingCols: 0)                                    	 0.00131404	 100       	 9.51265   	 0         	 3.80506   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 104, r2: 104)                            	 0.0012202 	 100       	 88.6411   	 0         	 13.9098   	 6.37255   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000973467	 100       	 0.513628  	 0         	 2.05451   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 104)                            	 0.000876544	 100       	 0         	 0         	 9.49182   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000779521	 100       	 32.071    	 0         	 7.69703   	 4.16667   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 104, n: 50, r: 2, r2: 1)                              	 0.00067451	 100       	 3.08372   	 0         	 18.5047   	 0.166645  
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 104)                                                                          	 0.000627235	 100       	 0         	 0         	 13.2646   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 104)                                                                                                         	 0.000494672	 100       	 0         	 0         	 16.8192   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                    	 0.000486547	 100       	 0         	 0         	 8.2212    	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 54)                                                                                                          	 0.000385964	 100       	 0         	 0         	 11.1928   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000324871	 100       	 0.769536  	 0         	 12.3126   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 54, n: 50, r2: 1)                                                                                                          	 0.000324578	 100       	 0         	 0         	 13.3096   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 104, m: 50, fromLeft: 1)                               	 0.000209978	 100       	 0         	 0         	 39.6232   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 4.50749   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 4.50746   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 2.62909   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 2.62771   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 2.4134    	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 1.50156   	 1800      
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 1.5009    	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 0.996659  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.789226  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.713381  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.363443  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.273635  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.268761  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.211772  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.157037  	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.152792  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.145205  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.096446  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0230361 	 1100      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.0156161 	 1800      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00688587	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00529661	 6400      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00109431	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000973467	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000876544	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000324871	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22591101884288 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22590923991040 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22590722664576 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22590521338112 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22590320011648 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22590118685184 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22589917358720 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22589716032256 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22589514705792 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22589313379328 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22589112052864 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22588910726400 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22588709399936 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22588508073472 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22588306747008 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22588105420544 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22587904094080 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22587702767616 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22587501441152 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22587300114688 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22587098788224 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22586897461760 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22586696135296 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22586494808832 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22586293482368 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22586092155904 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22585890829440 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22585689502976 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22585488176512 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22585286850048 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22585085523584 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22584884197120 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22584682866560 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22584481540096 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22584280213632 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22584078887168 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22583877560704 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22583676234240 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22583474907776 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22583273581312 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22583072254848 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22582870928384 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22582669601920 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22582468275456 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22582266948992 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22582065622528 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22581864296064 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22581662969600 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22581461643136 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22581260316672 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22581058990208 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22580857663744 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22580656337280 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22580455010816 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22580253684352 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22580052357888 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22579851031424 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22579649704960 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22579448378496 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22579247052032 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22579045725568 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22578844399104 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22578643072640 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22590996223744 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22590817597184 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5250, cols: 105, reductionFactor: 37, colBlockingSize: 12)                                 	 1.34727   	 1300      	 114.719   	 0         	 4.34036   	 26.4308   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 105, m: 105)                                                                               	 0.952943  	 700       	 7.93662   	 0         	 0.194983  	 40.7041   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 105, n: 50, r2new: 105)	 0.338148  	 700       	 120.092   	 0         	 13.8866   	 8.648     
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 105, n: 50, r: 105, r2: 105)                          	 0.254761  	 700       	 318.077   	 0         	 24.4768   	 12.995    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5250, r: 105, r2: 105, leftOrthog: 1)                      	 0.232694  	 600       	 298.493   	 0         	 34.5683   	 8.63487   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 5250, Xcols: 105, r: 105, streamingCols: 0)                                 	 0.191466  	 700       	 211.614   	 0         	 32.4071   	 6.52985   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 105, reductionFactor: 37, colBlockingSize: 12)                                 	 0.181449  	 200       	 62.4032   	 0         	 2.41192   	 25.8728   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 105, m: 105)                                                                                	 0.169182  	 900       	 8.21096   	 0         	 1.41206   	 5.81487   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 5250, m: 105)                                                                        	 0.160408  	 700       	 0         	 0         	 38.4894   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 105, m: 5250)                                                                                 	 0.12703   	 700       	 0         	 0         	 48.6026   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 105, r1_: 105, n: 50, r2: 105)                        	 0.0859292 	 600       	 808.311   	 0         	 62.2014   	 12.995    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 105)                                                                                	 0.0545865 	 100       	 4.15243   	 0         	 0.191256  	 21.7114   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                                 	 0.0408141 	 100       	 2.85849   	 0         	 0.147988  	 19.3157   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5250, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0273536 	 100       	 98.5591   	 0         	 7.75035   	 12.7167   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 105, n: 50, r2new: 50) 	 0.0266575 	 100       	 103.629   	 0         	 16.3256   	 6.34766   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 55, n: 50, r2: 55)                                                                                                         	 0.0216801 	 800       	 0         	 0         	 89.2986   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 105, r2: 105, leftOrthog: 1)                      	 0.0201859 	 100       	 273.086   	 0         	 32.0837   	 8.51167   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 105, reductionFactor: 37, colBlockingSize: 12)                                   	 0.0200953 	 200       	 11.2693   	 0         	 1.29583   	 8.6966    
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 105, r: 105, streamingCols: 0)                                 	 0.0185482 	 100       	 148.599   	 0         	 22.8814   	 6.49431   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 105, n: 50, r: 105, r2: 50)                           	 0.0151729 	 100       	 363.311   	 0         	 43.1822   	 8.41346   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5250, r: 50, r2: 50, leftOrthog: 1)                        	 0.0147419 	 100       	 178.064   	 0         	 43.0067   	 4.14038   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 105, r1_: 105, n: 50, r2: 50)                         	 0.00934831	 100       	 589.679   	 0         	 45.8714   	 12.855    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 105, r1_: 50, n: 50, r2: 105)                         	 0.00811405	 100       	 679.377   	 0         	 80.7489   	 8.41346   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 105, n: 50, r2new: 1)  	 0.00738451	 100       	 0.14219   	 0         	 1.13773   	 0.124976  
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 105)                                                                        	 0.0071519 	 100       	 0         	 0         	 58.7257   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 105, m: 105, fromLeft: 1)                              	 0.00680149	 800       	 0         	 0         	 20.7484   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 105, m: 2500)                                                                                 	 0.00659128	 100       	 0         	 0         	 63.7206   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 105, leftOrthog: 1)                         	 0.00256916	 100       	 20.4347   	 0         	 6.46126   	 3.16265   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 105)  	 0.00227608	 100       	 48.4385   	 0         	 7.56564   	 6.40244   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 105, r: 50, streamingCols: 0)                                    	 0.00164935	 100       	 7.57875   	 0         	 3.0315    	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 105, r2: 105)                            	 0.00130669	 100       	 84.3735   	 0         	 13.1783   	 6.40244   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 105)                            	 0.000814303	 100       	 0         	 0         	 10.3156   	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000761729	 100       	 0.656401  	 0         	 2.62561   	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000726842	 100       	 34.3954   	 0         	 8.25489   	 4.16667   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 105)                                                                          	 0.0006684 	 100       	 0         	 0         	 12.5673   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 105, n: 50, r: 2, r2: 1)                              	 0.000586636	 100       	 3.57973   	 0         	 21.4811   	 0.166646  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 105)                                                                                                         	 0.000501363	 100       	 0         	 0         	 16.7543   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                    	 0.000477373	 100       	 0         	 0         	 8.37919   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 55)                                                                                                          	 0.00038613	 100       	 0         	 0         	 11.3951   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000324064	 100       	 0.771453  	 0         	 12.3432   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 55, n: 50, r2: 1)                                                                                                          	 0.000321148	 100       	 0         	 0         	 13.7008   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 105, m: 50, fromLeft: 1)                               	 0.000213871	 100       	 0         	 0         	 39.276    	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 4.65436   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 4.65433   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 2.72168   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 2.72051   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 2.51181   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 1.57617   	 1800      
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 1.55121   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 1.04834   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.827836  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.749407  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.374466  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.271828  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.270191  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.211664  	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.169182  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.168228  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.134099  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.104118  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0228887 	 1100      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.0129635 	 1800      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00701536	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00541431	 4600      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00503319	 6400      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000814303	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000761729	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000324064	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23353345767296 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23353146468352 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23352945141888 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23352743815424 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23352542488960 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23352341162496 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23352139836032 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23351938509568 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23351737183104 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23351535856640 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23351334530176 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23351133203712 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23350931877248 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23350730550784 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23350529224320 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23350327897856 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23350126571392 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23349925244928 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23349723918464 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23349522592000 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23349321265536 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23349119939072 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23348918612608 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23348717286144 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23348515959680 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23348314633216 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23348113306752 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23347911980288 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23347710653824 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23347509327360 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23347308000896 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23347106674432 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23346905343872 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23346704017408 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23346502690944 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23346301364480 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23346100038016 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23345898711552 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23345697385088 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23345496058624 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23345294732160 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23345093405696 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23344892079232 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23344690752768 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23344489426304 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23344288099840 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23344086773376 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23343885446912 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23343684120448 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23343482793984 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23343281467520 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23343080141056 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23342878814592 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23342677488128 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23342476161664 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23342274835200 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23342073508736 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23341872182272 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23341670855808 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23341469529344 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23341268202880 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23341066876416 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23340865549952 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23353240106752 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23353233516288 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5300, cols: 106, reductionFactor: 37, colBlockingSize: 12)                                 	 1.38167   	 1300      	 115.091   	 0         	 4.31333   	 26.6826   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 106, m: 106)                                                                               	 0.976954  	 700       	 7.96486   	 0         	 0.193825  	 41.093    
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 106, n: 50, r2new: 106)	 0.337179  	 700       	 124.027   	 0         	 14.1975   	 8.73583   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 106, n: 50, r: 106, r2: 106)                          	 0.251848  	 700       	 331.038   	 0         	 25.2338   	 13.1188   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5300, r: 106, r2: 106, leftOrthog: 1)                      	 0.230719  	 600       	 309.732   	 0         	 35.5315   	 8.71711   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 5300, Xcols: 106, r: 106, streamingCols: 0)                                 	 0.191373  	 700       	 217.823   	 0         	 33.0434   	 6.59204   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 106, reductionFactor: 37, colBlockingSize: 12)                                 	 0.176781  	 200       	 65.2766   	 0         	 2.50014   	 26.1092   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 106, m: 106)                                                                                	 0.165068  	 900       	 8.65838   	 0         	 1.47492   	 5.87042   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 106, m: 5300)                                                                                 	 0.150087  	 700       	 0         	 0         	 41.9235   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 5300, m: 106)                                                                        	 0.0985964 	 700       	 0         	 0         	 63.8173   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 106, r1_: 106, n: 50, r2: 106)                        	 0.0850162 	 600       	 840.557   	 0         	 64.0727   	 13.1188   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 106)                                                                                	 0.0556253 	 100       	 4.11084   	 0         	 0.189122  	 21.7364   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                                 	 0.0412076 	 100       	 2.83119   	 0         	 0.146575  	 19.3157   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5300, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0284686 	 100       	 95.6007   	 0         	 7.51704   	 12.7179   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 56, n: 50, r2: 56)                                                                                                         	 0.0223319 	 800       	 0         	 0         	 89.8734   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 106, reductionFactor: 37, colBlockingSize: 12)                                   	 0.0202271 	 200       	 11.4101   	 0         	 1.30803   	 8.72315   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 106, n: 50, r2new: 50) 	 0.0200365 	 100       	 140.644   	 0         	 22.0438   	 6.38018   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 106, r2: 106, leftOrthog: 1)                      	 0.0191748 	 100       	 292.989   	 0         	 34.1061   	 8.59051   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 106, r: 106, streamingCols: 0)                                 	 0.0191743 	 100       	 146.498   	 0         	 22.3474   	 6.55551   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 106, n: 50, r: 106, r2: 50)                           	 0.0158251 	 100       	 355.005   	 0         	 42.0647   	 8.43949   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5300, r: 50, r2: 50, leftOrthog: 1)                        	 0.0157534 	 100       	 168.217   	 0         	 40.626    	 4.14062   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 106, r1_: 106, n: 50, r2: 50)                         	 0.00895803	 100       	 627.147   	 0         	 48.3353   	 12.9749   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 106, r1_: 50, n: 50, r2: 106)                         	 0.00871102	 100       	 644.93    	 0         	 76.4181   	 8.43949   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 106, m: 106, fromLeft: 1)                              	 0.00716337	 800       	 0         	 0         	 20.0773   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 106)                                                                        	 0.00654713	 100       	 0         	 0         	 64.7612   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 106, m: 2500)                                                                                 	 0.00483153	 100       	 0         	 0         	 87.7569   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 106, leftOrthog: 1)                         	 0.00255908	 100       	 20.7106   	 0         	 6.53359   	 3.16986   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 106)  	 0.00237938	 100       	 47.2223   	 0         	 7.34174   	 6.43204   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 106, r: 50, streamingCols: 0)                                    	 0.00197762	 100       	 6.32073   	 0         	 2.52829   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 106, r2: 106)                            	 0.00141364	 100       	 79.483    	 0         	 12.3574   	 6.43204   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 106, n: 50, r2new: 1)  	 0.00121198	 100       	 0.874604  	 0         	 6.99815   	 0.124976  
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 106)                            	 0.000800184	 100       	 0         	 0         	 10.5976   	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000771219	 100       	 0.648324  	 0         	 2.5933    	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000738868	 100       	 33.8355   	 0         	 8.12053   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 106)                                                                                                         	 0.000487285	 100       	 0         	 0         	 17.4025   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                    	 0.000483128	 100       	 0         	 0         	 8.27938   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 106, n: 50, r: 2, r2: 1)                              	 0.000446751	 100       	 4.74537   	 0         	 28.4758   	 0.166646  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 56)                                                                                                          	 0.000387822	 100       	 0         	 0         	 11.5517   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 106)                                                                          	 0.000359581	 100       	 0         	 0         	 23.583    	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000346844	 100       	 0.720785  	 0         	 11.5326   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 56, n: 50, r2: 1)                                                                                                          	 0.000327327	 100       	 0         	 0         	 13.6866   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 106, m: 50, fromLeft: 1)                               	 0.00021077	 100       	 0         	 0         	 40.2334   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 4.7492    	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 4.74914   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 2.86943   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 2.8682    	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 2.61892   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 1.60714   	 1800      
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 1.5155    	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 1.07379   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.83107   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.777193  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.360806  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.269533  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.268206  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.212525  	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.165068  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.155401  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.105503  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.103424  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0235343 	 1100      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00737414	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00585692	 6400      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.00449563	 1800      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00100553	 4600      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000800184	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000771219	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000346844	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22510359009152 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22510124918784 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22509923592320 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22509722265856 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22509520939392 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22509319612928 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22509118286464 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22508916960000 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22508715633536 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22508514307072 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22508312980608 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22508111654144 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22507910327680 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22507709001216 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22507507674752 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22507306348288 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22507105021824 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22506903695360 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22506702368896 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22506501042432 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22506299715968 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22506098389504 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22505897063040 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22505695736576 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22505494410112 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22505293083648 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22505091757184 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22504890430720 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22504689104256 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22504487777792 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22504286451328 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22504085124864 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22503883794304 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22503682467840 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22503481141376 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22503279814912 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22503078488448 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22502877161984 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22502675835520 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22502474509056 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22502273182592 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22502071856128 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22501870529664 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22501669203200 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22501467876736 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22501266550272 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22501065223808 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22500863897344 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22500662570880 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22500461244416 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22500259917952 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22500058591488 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22499857265024 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22499655938560 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22499454612096 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22499253285632 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22499051959168 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22498850632704 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22498649306240 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22498447979776 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22498246653312 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22498045326848 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22497844000384 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22510253348608 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22510246758144 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5350, cols: 107, reductionFactor: 37, colBlockingSize: 12)                                 	 1.42677   	 1300      	 114.637   	 0         	 4.25616   	 26.9343   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 107, m: 107)                                                                               	 1.00227   	 700       	 7.98546   	 0         	 0.192505  	 41.4819   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 107, n: 50, r2new: 107)	 0.346783  	 700       	 124.17    	 0         	 14.0709   	 8.82458   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 107, n: 50, r: 107, r2: 107)                          	 0.258948  	 700       	 331.16    	 0         	 25.0072   	 13.2426   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5350, r: 107, r2: 107, leftOrthog: 1)                      	 0.243109  	 600       	 302.344   	 0         	 34.3598   	 8.79934   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 5350, Xcols: 107, r: 107, streamingCols: 0)                                 	 0.199215  	 700       	 215.228   	 0         	 32.3445   	 6.65423   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 107, reductionFactor: 37, colBlockingSize: 12)                                 	 0.17791   	 200       	 66.0922   	 0         	 2.50868   	 26.3454   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 107, m: 107)                                                                                	 0.172624  	 900       	 8.51591   	 0         	 1.43705   	 5.92598   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 5350, m: 107)                                                                        	 0.164458  	 700       	 0         	 0         	 38.9854   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 107, m: 5350)                                                                                 	 0.133502  	 700       	 0         	 0         	 48.0252   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 107, r1_: 107, n: 50, r2: 107)                        	 0.0888923 	 600       	 826.873   	 0         	 62.4405   	 13.2426   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 107)                                                                                	 0.0555415 	 100       	 4.15305   	 0         	 0.190848  	 21.761    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                                 	 0.0404388 	 100       	 2.88502   	 0         	 0.149362  	 19.3157   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5350, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0284036 	 100       	 96.7235   	 0         	 7.60466   	 12.719    
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 107, n: 50, r2new: 50) 	 0.0275348 	 100       	 104.395   	 0         	 16.2791   	 6.41286   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 57, n: 50, r2: 57)                                                                                                         	 0.0226167 	 800       	 0         	 0         	 91.9391   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 107, reductionFactor: 37, colBlockingSize: 12)                                   	 0.0220045 	 200       	 10.6873   	 0         	 1.2215    	 8.74935   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 107, r2: 107, leftOrthog: 1)                      	 0.0212408 	 100       	 269.505   	 0         	 31.0873   	 8.6693    
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 107, r: 107, streamingCols: 0)                                 	 0.0192781 	 100       	 148.471   	 0         	 22.4389   	 6.6167    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 107, n: 50, r: 107, r2: 50)                           	 0.0152024 	 100       	 376.554   	 0         	 44.4826   	 8.46519   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5350, r: 50, r2: 50, leftOrthog: 1)                        	 0.0150039 	 100       	 178.287   	 0         	 43.0554   	 4.14087   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 107, r1_: 107, n: 50, r2: 50)                         	 0.00941223	 100       	 608.198   	 0         	 46.4459   	 13.0948   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 107, r1_: 50, n: 50, r2: 107)                         	 0.00820248	 100       	 697.899   	 0         	 82.4434   	 8.46519   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 107, m: 107, fromLeft: 1)                              	 0.00699667	 800       	 0         	 0         	 20.9453   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 107)                                                                        	 0.00693097	 100       	 0         	 0         	 61.7518   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 107, m: 2500)                                                                                 	 0.00613655	 100       	 0         	 0         	 69.7461   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 107, leftOrthog: 1)                         	 0.00271566	 100       	 19.7006   	 0         	 6.20108   	 3.17696   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 107)  	 0.00225953	 100       	 50.6699   	 0         	 7.842     	 6.46135   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 107, r: 50, streamingCols: 0)                                    	 0.00153964	 100       	 8.11878   	 0         	 3.24751   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 107, r2: 107)                            	 0.00127683	 100       	 89.6676   	 0         	 13.8775   	 6.46135   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 107, n: 50, r2new: 1)  	 0.00120591	 100       	 0.887297  	 0         	 7.0997    	 0.124977  
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 107)                            	 0.000813306	 100       	 0         	 0         	 10.5249   	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000768804	 100       	 0.650361  	 0         	 2.60144   	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000748053	 100       	 33.4201   	 0         	 8.02082   	 4.16667   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                    	 0.000517942	 100       	 0         	 0         	 7.72287   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 107, n: 50, r: 2, r2: 1)                              	 0.000507146	 100       	 4.21969   	 0         	 25.3213   	 0.166646  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 107)                                                                                                         	 0.000497399	 100       	 0         	 0         	 17.2095   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 107)                                                                          	 0.000456143	 100       	 0         	 0         	 18.766    	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 57)                                                                                                          	 0.000405674	 100       	 0         	 0         	 11.2406   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 57, n: 50, r2: 1)                                                                                                          	 0.000340052	 100       	 0         	 0         	 13.4097   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000325212	 100       	 0.768729  	 0         	 12.2997   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 107, m: 50, fromLeft: 1)                               	 0.000220504	 100       	 0         	 0         	 38.8202   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 4.8797    	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 4.87967   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 2.87772   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 2.87655   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 2.65172   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 1.65508   	 1800      
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 1.61145   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 1.09825   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.856918  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.799213  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.377783  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.28207   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.275934  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.220032  	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.172624  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.171845  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.140156  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.107255  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0238598 	 1100      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.014206  	 1800      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00721717	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00504838	 6400      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.000996954	 4600      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000813306	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000768804	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000325212	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22500982138752 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22500796786688 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22500595460224 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22500394133760 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22500192807296 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22499991480832 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22499790154368 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22499588827904 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22499387501440 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22499186174976 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22498984848512 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22498783522048 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22498582195584 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22498380869120 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22498179542656 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22497978216192 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22497776889728 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22497575563264 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22497374236800 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22497172910336 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22496971583872 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22496770257408 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22496568930944 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22496367604480 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22496166278016 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22495964951552 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22495763625088 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22495562298624 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22495360972160 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22495159645696 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22494958319232 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22494756992768 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22494555662208 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22494354335744 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22494153009280 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22493951682816 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22493750356352 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22493549029888 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22493347703424 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22493146376960 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22492945050496 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22492743724032 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22492542397568 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22492341071104 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22492139744640 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22491938418176 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22491737091712 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22491535765248 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22491334438784 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22491133112320 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22490931785856 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22490730459392 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22490529132928 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22490327806464 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22490126480000 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22489925153536 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22489723827072 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22489522500608 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22489321174144 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22489119847680 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22488918521216 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22488717194752 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22488515868288 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22500876478208 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22500869887744 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5400, cols: 108, reductionFactor: 37, colBlockingSize: 12)                                 	 1.47701   	 1300      	 113.871   	 0         	 4.1886    	 27.186    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 108, m: 108)                                                                               	 0.967698  	 700       	 8.50484   	 0         	 0.203121  	 41.8708   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 108, n: 50, r2new: 108)	 0.359787  	 700       	 123.217   	 0         	 13.8225   	 8.91422   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 108, n: 50, r: 108, r2: 108)                          	 0.268465  	 700       	 328.459   	 0         	 24.5736   	 13.3663   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5400, r: 108, r2: 108, leftOrthog: 1)                      	 0.250275  	 600       	 301.998   	 0         	 34.0028   	 8.88158   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 5400, Xcols: 108, r: 108, streamingCols: 0)                                 	 0.194823  	 700       	 226.308   	 0         	 33.6947   	 6.71642   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 108, reductionFactor: 37, colBlockingSize: 12)                                 	 0.182183  	 200       	 65.7538   	 0         	 2.47368   	 26.5814   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 108, m: 108)                                                                                	 0.167895  	 900       	 9.00359   	 0         	 1.50523   	 5.98154   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 108, m: 5400)                                                                                 	 0.154346  	 700       	 0         	 0         	 42.3194   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 5400, m: 108)                                                                        	 0.150588  	 700       	 0         	 0         	 43.3754   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 108, r1_: 108, n: 50, r2: 108)                        	 0.0910495 	 600       	 830.128   	 0         	 62.1058   	 13.3663   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 108)                                                                                	 0.0582312 	 100       	 3.99556   	 0         	 0.183407  	 21.7853   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                                 	 0.0409615 	 100       	 2.8482    	 0         	 0.147455  	 19.3157   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5400, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0288984 	 100       	 95.9558   	 0         	 7.54366   	 12.7201   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 108, n: 50, r2new: 50) 	 0.02709   	 100       	 108.232   	 0         	 16.7914   	 6.44566   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 58, n: 50, r2: 58)                                                                                                         	 0.02282   	 800       	 0         	 0         	 94.3452   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 108, reductionFactor: 37, colBlockingSize: 12)                                   	 0.0218997 	 200       	 10.9401   	 0         	 1.2467    	 8.77523   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 108, r2: 108, leftOrthog: 1)                      	 0.0207683 	 100       	 280.813   	 0         	 32.1      	 8.74806   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 108, r: 108, streamingCols: 0)                                 	 0.0194697 	 100       	 149.771   	 0         	 22.4279   	 6.67788   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 108, n: 50, r: 108, r2: 50)                           	 0.0143228 	 100       	 407.183   	 0         	 47.9571   	 8.49057   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5400, r: 50, r2: 50, leftOrthog: 1)                        	 0.012991  	 100       	 207.836   	 0         	 50.1885   	 4.1411    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 108, r1_: 108, n: 50, r2: 50)                         	 0.00954546	 100       	 610.971   	 0         	 46.2347   	 13.2146   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 108, r1_: 50, n: 50, r2: 108)                         	 0.00794099	 100       	 734.418   	 0         	 86.4981   	 8.49057   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 108, m: 2500)                                                                                 	 0.00760959	 100       	 0         	 0         	 56.7705   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 108, m: 108, fromLeft: 1)                              	 0.00733916	 800       	 0         	 0         	 20.3428   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 108)                                                                        	 0.00650697	 100       	 0         	 0         	 66.3903   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 108, leftOrthog: 1)                         	 0.00278835	 100       	 19.3663   	 0         	 6.08244   	 3.18396   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 108)  	 0.00228884	 100       	 50.9604   	 0         	 7.85167   	 6.49038   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 108, r: 50, streamingCols: 0)                                    	 0.00144367	 100       	 8.6585    	 0         	 3.4634    	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 108, r2: 108)                            	 0.00137061	 100       	 85.1006   	 0         	 13.1118   	 6.49038   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 108, n: 50, r2new: 1)  	 0.00125132	 100       	 0.863087  	 0         	 6.90598   	 0.124977  
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 108)                            	 0.000772793	 100       	 0         	 0         	 11.1802   	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000762597	 100       	 0.655654  	 0         	 2.62262   	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000727999	 100       	 34.3407   	 0         	 8.24177   	 4.16667   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 108, n: 50, r: 2, r2: 1)                              	 0.00052615	 100       	 4.10529   	 0         	 24.6348   	 0.166646  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 108)                                                                                                         	 0.000521933	 100       	 0         	 0         	 16.5538   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                    	 0.000481554	 100       	 0         	 0         	 8.30644   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 58)                                                                                                          	 0.00040652	 100       	 0         	 0         	 11.414    	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 108)                                                                          	 0.000391641	 100       	 0         	 0         	 22.061    	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 58, n: 50, r2: 1)                                                                                                          	 0.000335598	 100       	 0         	 0         	 13.8261   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000328694	 100       	 0.760586  	 0         	 12.1694   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 108, m: 50, fromLeft: 1)                               	 0.00021211	 100       	 0         	 0         	 40.7336   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 4.98721   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 4.98718   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 2.929     	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 2.92783   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 2.67187   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 1.70999   	 1800      
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 1.65277   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 1.06689   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.901045  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.809996  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.390418  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.286823  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.284685  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.215736  	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.167895  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.162437  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.157487  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.109264  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0240841 	 1100      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.0128388 	 1800      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00755127	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00579628	 6400      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00107337	 4600      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000772793	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000762597	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000328694	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22440497342336 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22440264591360 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22440063264896 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22439861938432 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22439660611968 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22439459285504 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22439257959040 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22439056632576 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22438855306112 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22438653979648 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22438452653184 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22438251326720 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22438050000256 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22437848673792 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22437647347328 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22437446020864 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22437244694400 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22437043367936 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22436842041472 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22436640715008 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22436439388544 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22436238062080 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22436036735616 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22435835409152 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22435634082688 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22435432756224 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22435231429760 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22435030103296 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22434828776832 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22434627450368 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22434426123904 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22434224797440 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22434023466880 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22433822140416 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22433620813952 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22433419487488 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22433218161024 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22433016834560 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22432815508096 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22432614181632 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22432412855168 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22432211528704 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22432010202240 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22431808875776 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22431607549312 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22431406222848 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22431204896384 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22431003569920 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22430802243456 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22430600916992 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22430399590528 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22430198264064 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22429996937600 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22429795611136 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22429594284672 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22429392958208 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22429191631744 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22428990305280 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22428788978816 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22428587652352 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22428386325888 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22428184999424 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22427983672960 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22440391681792 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22440385091328 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5450, cols: 109, reductionFactor: 37, colBlockingSize: 12)                                 	 1.47235   	 1300      	 117.434   	 0         	 4.28003   	 27.4377   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 109, m: 109)                                                                               	 1.00562   	 700       	 8.41358   	 0         	 0.199093  	 42.2597   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 109, n: 50, r2new: 109)	 0.363316  	 700       	 125.607   	 0         	 13.949    	 9.00473   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 109, n: 50, r: 109, r2: 109)                          	 0.269018  	 700       	 336.974   	 0         	 24.9794   	 13.4901   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5450, r: 109, r2: 109, leftOrthog: 1)                      	 0.251206  	 600       	 309.314   	 0         	 34.507    	 8.96382   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 5450, Xcols: 109, r: 109, streamingCols: 0)                                 	 0.194286  	 700       	 233.295   	 0         	 34.4164   	 6.77861   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 109, m: 109)                                                                                	 0.193596  	 900       	 8.02721   	 0         	 1.32965   	 6.03709   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 5450, m: 109)                                                                        	 0.188332  	 700       	 0         	 0         	 35.3278   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 109, reductionFactor: 37, colBlockingSize: 12)                                 	 0.185763  	 200       	 65.6863   	 0         	 2.4494    	 26.8173   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 109, m: 5450)                                                                                 	 0.146585  	 700       	 0         	 0         	 45.389    	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 109, r1_: 109, n: 50, r2: 109)                        	 0.0899419 	 600       	 863.91    	 0         	 64.0403   	 13.4901   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 109)                                                                                	 0.056643  	 100       	 4.14291   	 0         	 0.189962  	 21.8092   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                                 	 0.0414575 	 100       	 2.81412   	 0         	 0.145691  	 19.3157   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5450, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0329799 	 100       	 84.8591   	 0         	 6.67072   	 12.7211   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 109, n: 50, r2new: 50) 	 0.0281925 	 100       	 106.074   	 0         	 16.3732   	 6.47855   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 59, n: 50, r2: 59)                                                                                                         	 0.0246964 	 800       	 0         	 0         	 90.209    	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 109, reductionFactor: 37, colBlockingSize: 12)                                   	 0.0219064 	 200       	 11.1402   	 0         	 1.26582   	 8.80078   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 109, r2: 109, leftOrthog: 1)                      	 0.0203402 	 100       	 292.057   	 0         	 33.0876   	 8.82677   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 109, r: 109, streamingCols: 0)                                 	 0.019918  	 100       	 149.124   	 0         	 22.1283   	 6.73904   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5450, r: 50, r2: 50, leftOrthog: 1)                        	 0.0155764 	 100       	 174.944   	 0         	 42.2434   	 4.14134   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 109, n: 50, r: 109, r2: 50)                           	 0.0150931 	 100       	 393.591   	 0         	 46.2199   	 8.51562   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 109, r1_: 109, n: 50, r2: 50)                         	 0.00910042	 100       	 652.772   	 0         	 48.9543   	 13.3343   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 109)                                                                        	 0.00859808	 100       	 0         	 0         	 50.709    	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 109, r1_: 50, n: 50, r2: 109)                         	 0.00850946	 100       	 698.106   	 0         	 81.9794   	 8.51562   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 109, m: 109, fromLeft: 1)                              	 0.00738485	 800       	 0         	 0         	 20.5931   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 109, m: 2500)                                                                                 	 0.0063605 	 100       	 0         	 0         	 68.5481   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 109, leftOrthog: 1)                         	 0.00257712	 100       	 21.1476   	 0         	 6.62755   	 3.19087   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 109, n: 50, r2new: 1)  	 0.00244049	 100       	 0.446632  	 0         	 3.57371   	 0.124977  
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 109)  	 0.00227732	 100       	 52.1709   	 0         	 8.00273   	 6.51914   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 109, r: 50, streamingCols: 0)                                    	 0.00153432	 100       	 8.14691   	 0         	 3.25876   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 109, r2: 109)                            	 0.00135352	 100       	 87.7788   	 0         	 13.4648   	 6.51914   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000780014	 100       	 0.641014  	 0         	 2.56406   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 109)                            	 0.000776526	 100       	 0         	 0         	 11.2295   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000751741	 100       	 33.2561   	 0         	 7.98147   	 4.16667   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 109, n: 50, r: 2, r2: 1)                              	 0.000674703	 100       	 3.23105   	 0         	 19.3887   	 0.166646  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 109)                                                                                                         	 0.00052119	 100       	 0         	 0         	 16.7309   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 109)                                                                          	 0.000494664	 100       	 0         	 0         	 17.6281   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                    	 0.000487975	 100       	 0         	 0         	 8.19714   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 59)                                                                                                          	 0.000401588	 100       	 0         	 0         	 11.7533   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000340904	 100       	 0.733344  	 0         	 11.7335   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 59, n: 50, r2: 1)                                                                                                          	 0.000334214	 100       	 0         	 0         	 14.1227   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 109, m: 50, fromLeft: 1)                               	 0.000220737	 100       	 0         	 0         	 39.504    	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 5.06613   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 5.06609   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 2.95971   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 2.9585    	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 2.70633   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 1.713     	 1800      
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 1.69446   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 1.10372   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.887759  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.826345  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.396226  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.2897    	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.286139  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.215738  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.197425  	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.193596  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.153434  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.108304  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0259534 	 1100      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.0152603 	 1800      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00760558	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00556505	 6400      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00106779	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000780014	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000776526	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000340904	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23454354913152 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23454145308672 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23453943982208 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23453742655744 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23453541329280 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23453340002816 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23453138676352 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23452937349888 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23452736023424 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23452534696960 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23452333370496 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23452132044032 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23451930717568 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23451729391104 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23451528064640 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23451326738176 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23451125411712 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23450924085248 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23450722758784 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23450521432320 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23450320105856 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23450118779392 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23449917452928 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23449716126464 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23449514800000 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23449313473536 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23449112147072 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23448910820608 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23448709494144 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23448508167680 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23448306841216 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23448105514752 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23447904184192 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23447702857728 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23447501531264 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23447300204800 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23447098878336 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23446897551872 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23446696225408 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23446494898944 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23446293572480 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23446092246016 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23445890919552 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23445689593088 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23445488266624 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23445286940160 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23445085613696 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23444884287232 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23444682960768 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23444481634304 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23444280307840 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23444078981376 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23443877654912 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23443676328448 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23443475001984 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23443273675520 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23443072349056 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23442871022592 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23442669696128 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23442468369664 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23442267043200 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23442065716736 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23441864390272 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23454249252608 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23454242662144 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5500, cols: 110, reductionFactor: 37, colBlockingSize: 12)                                 	 1.49236   	 1300      	 119.077   	 0         	 4.30045   	 27.6895   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 110, m: 110)                                                                               	 1.01534   	 700       	 8.56445   	 0         	 0.200815  	 42.6485   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 110, n: 50, r2new: 110)	 0.374253  	 700       	 125.503   	 0         	 13.7975   	 9.09609   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 110, n: 50, r: 110, r2: 110)                          	 0.276145  	 700       	 337.395   	 0         	 24.7832   	 13.6139   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5500, r: 110, r2: 110, leftOrthog: 1)                      	 0.263646  	 600       	 302.906   	 0         	 33.4849   	 9.04605   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 5500, Xcols: 110, r: 110, streamingCols: 0)                                 	 0.196889  	 700       	 236.606   	 0         	 34.5874   	 6.8408    
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 110, reductionFactor: 37, colBlockingSize: 12)                                 	 0.196145  	 200       	 63.3562   	 0         	 2.34194   	 27.0529   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 110, m: 110)                                                                                	 0.179525  	 900       	 8.89679   	 0         	 1.46025   	 6.09265   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 110, m: 5500)                                                                                 	 0.145485  	 700       	 0         	 0         	 46.5753   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 5500, m: 110)                                                                        	 0.133697  	 700       	 0         	 0         	 50.6816   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 110, r1_: 110, n: 50, r2: 110)                        	 0.0920866 	 600       	 867.227   	 0         	 63.7018   	 13.6139   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 110)                                                                                	 0.0571673 	 100       	 4.13989   	 0         	 0.189619  	 21.8327   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                                 	 0.0416731 	 100       	 2.79957   	 0         	 0.144938  	 19.3157   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 110, n: 50, r2new: 50) 	 0.0294235 	 100       	 103.658   	 0         	 15.9192   	 6.51153   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5500, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0281179 	 100       	 100.446   	 0         	 7.89532   	 12.7222   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 110, reductionFactor: 37, colBlockingSize: 12)                                   	 0.0250676 	 200       	 9.91482   	 0         	 1.12336   	 8.82601   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 60, n: 50, r2: 60)                                                                                                         	 0.0240265 	 800       	 0         	 0         	 95.8942   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 110, r2: 110, leftOrthog: 1)                      	 0.022714  	 100       	 266.355   	 0         	 29.9092   	 8.90544   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 110, r: 110, streamingCols: 0)                                 	 0.0198531 	 100       	 152.369   	 0         	 22.4065   	 6.8002    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 110, n: 50, r: 110, r2: 50)                           	 0.0157939 	 100       	 383.058   	 0         	 44.8526   	 8.54037   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5500, r: 50, r2: 50, leftOrthog: 1)                        	 0.0147616 	 100       	 186.294   	 0         	 44.9815   	 4.14157   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 110, r1_: 110, n: 50, r2: 50)                         	 0.00990968	 100       	 610.514   	 0         	 45.3778   	 13.454    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 110, r1_: 50, n: 50, r2: 110)                         	 0.00800295	 100       	 755.972   	 0         	 88.5174   	 8.54037   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 110, m: 110, fromLeft: 1)                              	 0.00769952	 800       	 0         	 0         	 20.1155   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 110)                                                                        	 0.00691721	 100       	 0         	 0         	 63.6094   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 110, m: 2500)                                                                                 	 0.00680487	 100       	 0         	 0         	 64.6595   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 110, leftOrthog: 1)                         	 0.00285234	 100       	 19.2824   	 0         	 6.03013   	 3.19767   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 110)  	 0.00241291	 100       	 50.1468   	 0         	 7.65879   	 6.54762   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 110, r: 50, streamingCols: 0)                                    	 0.00147344	 100       	 8.48357   	 0         	 3.39343   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 110, r2: 110)                            	 0.00132812	 100       	 91.106    	 0         	 13.9144   	 6.54762   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 110, n: 50, r2new: 1)  	 0.00121089	 100       	 0.908424  	 0         	 7.26872   	 0.124977  
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000899776	 100       	 0.555694  	 0         	 2.22278   	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000796386	 100       	 31.3918   	 0         	 7.53404   	 4.16667   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 110)                            	 0.00078462	 100       	 0         	 0         	 11.2156   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                    	 0.000510576	 100       	 0         	 0         	 7.83429   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 110, n: 50, r: 2, r2: 1)                              	 0.000508708	 100       	 4.32468   	 0         	 25.9512   	 0.166646  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 110)                                                                                                         	 0.000500243	 100       	 0         	 0         	 17.5915   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 60)                                                                                                          	 0.000420899	 100       	 0         	 0         	 11.4042   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 110)                                                                          	 0.000403687	 100       	 0         	 0         	 21.7991   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000352386	 100       	 0.709449  	 0         	 11.3512   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 60, n: 50, r2: 1)                                                                                                          	 0.000333842	 100       	 0         	 0         	 14.3781   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 110, m: 50, fromLeft: 1)                               	 0.000221047	 100       	 0         	 0         	 39.8105   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 5.05962   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 5.05958   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 3.00584   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 3.00451   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 2.75618   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 1.74169   	 1800      
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 1.63477   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 1.11418   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.896147  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.846691  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.407301  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.303974  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.293776  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.218215  	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.179525  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.1528    	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.141018  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.110796  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0252815 	 1100      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.0108186 	 1800      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00792057	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00550313	 6400      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00116737	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000899776	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.00078462	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000352386	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22528677885824 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22528445638656 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22528244312192 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22528042985728 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22527841659264 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22527640332800 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22527439006336 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22527237679872 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22527036353408 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22526835026944 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22526633700480 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22526432374016 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22526231047552 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22526029721088 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22525828394624 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22525627068160 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22525425741696 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22525224415232 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22525023088768 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22524821762304 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22524620435840 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22524419109376 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22524217782912 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22524016456448 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22523815129984 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22523613803520 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22523412477056 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22523211150592 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22523009824128 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22522808497664 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22522607171200 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22522405844736 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22522204514176 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22522003187712 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22521801861248 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22521600534784 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22521399208320 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22521197881856 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22520996555392 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22520795228928 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22520593902464 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22520392576000 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22520191249536 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22519989923072 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22519788596608 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22519587270144 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22519385943680 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22519184617216 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22518983290752 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22518781964288 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22518580637824 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22518379311360 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22518177984896 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22517976658432 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22517775331968 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22517574005504 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22517372679040 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22517171352576 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22516970026112 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22516768699648 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22516567373184 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22516366046720 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22516164720256 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22528572225280 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22528565634816 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5550, cols: 111, reductionFactor: 37, colBlockingSize: 12)                                 	 1.509     	 1300      	 121.006   	 0         	 4.33072   	 27.9412   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 111, m: 111)                                                                               	 1.02103   	 700       	 8.75117   	 0         	 0.203339  	 43.0374   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 111, n: 50, r2new: 111)	 0.364491  	 700       	 132.616   	 0         	 14.4332   	 9.18825   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 111, n: 50, r: 111, r2: 111)                          	 0.265312  	 700       	 360.836   	 0         	 26.2663   	 13.7376   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5550, r: 111, r2: 111, leftOrthog: 1)                      	 0.251259  	 600       	 326.586   	 0         	 35.7774   	 9.12829   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 111, reductionFactor: 37, colBlockingSize: 12)                                 	 0.194199  	 200       	 65.16     	 0         	 2.38783   	 27.2884   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 5550, Xcols: 111, r: 111, streamingCols: 0)                                 	 0.193931  	 700       	 246.825   	 0         	 35.7563   	 6.90299   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 111, m: 111)                                                                                	 0.186133  	 900       	 8.81714   	 0         	 1.4341    	 6.1482    
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 111, m: 5550)                                                                                 	 0.145884  	 700       	 0         	 0         	 47.2962   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 5550, m: 111)                                                                        	 0.134093  	 700       	 0         	 0         	 51.4551   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 111, r1_: 111, n: 50, r2: 111)                        	 0.0935636 	 600       	 877.028   	 0         	 63.8413   	 13.7376   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 111)                                                                                	 0.0604713 	 100       	 3.94678   	 0         	 0.180582  	 21.8559   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                                 	 0.0404763 	 100       	 2.88234   	 0         	 0.149223  	 19.3157   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5550, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0293005 	 100       	 97.2678   	 0         	 7.64491   	 12.7232   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 111, reductionFactor: 37, colBlockingSize: 12)                                   	 0.0242195 	 200       	 10.4495   	 0         	 1.1806    	 8.85093   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 61, n: 50, r2: 61)                                                                                                         	 0.0240582 	 800       	 0         	 0         	 98.9867   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 111, r2: 111, leftOrthog: 1)                      	 0.0209396 	 100       	 294.203   	 0         	 32.7472   	 8.98407   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 111, r: 111, streamingCols: 0)                                 	 0.0205506 	 100       	 149.886   	 0         	 21.845    	 6.86134   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 111, n: 50, r2new: 50) 	 0.0201163 	 100       	 154.626   	 0         	 23.6266   	 6.54456   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 111, n: 50, r: 111, r2: 50)                           	 0.0158919 	 100       	 387.65    	 0         	 45.2607   	 8.56481   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5550, r: 50, r2: 50, leftOrthog: 1)                        	 0.0138373 	 100       	 200.545   	 0         	 48.4198   	 4.14179   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 111, r1_: 111, n: 50, r2: 50)                         	 0.00988552	 100       	 623.184   	 0         	 45.9113   	 13.5737   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 111, r1_: 50, n: 50, r2: 111)                         	 0.00842047	 100       	 731.61    	 0         	 85.4205   	 8.56481   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 111)                                                                        	 0.00792067	 100       	 0         	 0         	 56.0558   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 111, m: 111, fromLeft: 1)                              	 0.00778101	 800       	 0         	 0         	 20.2684   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 111, m: 2500)                                                                                 	 0.00589673	 100       	 0         	 0         	 75.2959   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 111, n: 50, r2new: 1)  	 0.00393037	 100       	 0.282416  	 0         	 2.25974   	 0.124977  
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 111, leftOrthog: 1)                         	 0.00312234	 100       	 17.7752   	 0         	 5.54713   	 3.20439   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 111)  	 0.00228952	 100       	 53.8147   	 0         	 8.18372   	 6.57583   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 111, r: 50, streamingCols: 0)                                    	 0.00198837	 100       	 6.28657   	 0         	 2.51463   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 111, r2: 111)                            	 0.00133204	 100       	 92.497    	 0         	 14.0662   	 6.57583   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000908635	 100       	 0.550276  	 0         	 2.2011    	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 111)                            	 0.000811133	 100       	 0         	 0         	 10.9476   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000765997	 100       	 32.6372   	 0         	 7.83293   	 4.16667   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 111, n: 50, r: 2, r2: 1)                              	 0.000559002	 100       	 3.97136   	 0         	 23.831    	 0.166647  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 111)                                                                                                         	 0.000494633	 100       	 0         	 0         	 17.9527   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                    	 0.000484868	 100       	 0         	 0         	 8.24967   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 111)                                                                          	 0.000464747	 100       	 0         	 0         	 19.1072   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 61)                                                                                                          	 0.000430074	 100       	 0         	 0         	 11.3469   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 61, n: 50, r2: 1)                                                                                                          	 0.000337067	 100       	 0         	 0         	 14.4778   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000327764	 100       	 0.762744  	 0         	 12.2039   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 111, m: 50, fromLeft: 1)                               	 0.000222227	 100       	 0         	 0         	 39.9591   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 5.03839   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 5.03836   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 2.98597   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 2.98465   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 2.76242   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 1.75672   	 1800      
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 1.64829   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 1.12198   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.90473   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.853091  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.390827  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.289158  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.283095  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.21647   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.186133  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.152266  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.142478  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.112636  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.02532   	 1100      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.00963249	 1800      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00800324	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00514492	 6400      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.000990034	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000908635	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000811133	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000327764	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23415283664768 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23415087949824 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23414886623360 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23414685296896 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23414483970432 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23414282643968 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23414081317504 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23413879991040 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23413678664576 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23413477338112 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23413276011648 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23413074685184 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23412873358720 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23412672032256 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23412470705792 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23412269379328 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23412068052864 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23411866726400 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23411665399936 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23411464073472 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23411262747008 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23411061420544 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23410860094080 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23410658767616 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23410457441152 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23410256114688 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23410054788224 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23409853461760 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23409652135296 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23409450808832 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23409249482368 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23409048155904 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23408846825344 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23408645498880 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23408444172416 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23408242845952 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23408041519488 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23407840193024 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23407638866560 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23407437540096 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23407236213632 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23407034887168 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23406833560704 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23406632234240 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23406430907776 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23406229581312 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23406028254848 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23405826928384 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23405625601920 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23405424275456 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23405222948992 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23405021622528 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23404820296064 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23404618969600 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23404417643136 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23404216316672 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23404014990208 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23403813663744 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23403612337280 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23403411010816 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23403209684352 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23403008357888 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23402807031424 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23415178004224 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23415171413760 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5600, cols: 112, reductionFactor: 37, colBlockingSize: 12)                                 	 1.53463   	 1300      	 122.23    	 0         	 4.33547   	 28.1929   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 112, m: 112)                                                                               	 1.03808   	 700       	 8.84216   	 0         	 0.203613  	 43.4263   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 112, n: 50, r2new: 112)	 0.456481  	 700       	 108.957   	 0         	 11.7396   	 9.28121   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 112, m: 112)                                                                                	 0.31136   	 900       	 5.41467   	 0         	 0.872806  	 6.20375   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 112, n: 50, r: 112, r2: 112)                          	 0.289795  	 700       	 339.36    	 0         	 24.4824   	 13.8614   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5600, r: 112, r2: 112, leftOrthog: 1)                      	 0.259631  	 600       	 324.675   	 0         	 35.2504   	 9.21053   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 5600, Xcols: 112, r: 112, streamingCols: 0)                                 	 0.20123   	 700       	 244.36    	 0         	 35.0831   	 6.96517   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 112, reductionFactor: 37, colBlockingSize: 12)                                 	 0.199837  	 200       	 64.4678   	 0         	 2.34227   	 27.5237   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 112, r1_: 112, n: 50, r2: 112)                        	 0.0940691 	 600       	 896.104   	 0         	 64.6475   	 13.8614   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 112, m: 5600)                                                                                 	 0.091339  	 700       	 0         	 0         	 76.9073   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 112)                                                                                	 0.0567962 	 100       	 4.23737   	 0         	 0.193675  	 21.8788   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 5600, m: 112)                                                                        	 0.0503414 	 700       	 0         	 0         	 139.54    	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                                 	 0.0403901 	 100       	 2.8885    	 0         	 0.149542  	 19.3157   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 112, n: 50, r2new: 50) 	 0.0345383 	 100       	 91.8402   	 0         	 13.9625   	 6.57764   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5600, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0283103 	 100       	 101.577   	 0         	 7.98295   	 12.7242   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 62, n: 50, r2: 62)                                                                                                         	 0.0250285 	 800       	 0         	 0         	 98.2944   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 112, reductionFactor: 37, colBlockingSize: 12)                                   	 0.0247249 	 200       	 10.4211   	 0         	 1.17413   	 8.87554   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 112, n: 50, r: 112, r2: 50)                           	 0.0233528 	 100       	 268.576   	 0         	 31.2699   	 8.58896   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 112, r2: 112, leftOrthog: 1)                      	 0.0218869 	 100       	 286.564   	 0         	 31.6203   	 9.06266   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 112, r: 112, streamingCols: 0)                                 	 0.0207186 	 100       	 151.362   	 0         	 21.8653   	 6.92247   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5600, r: 50, r2: 50, leftOrthog: 1)                        	 0.0138963 	 100       	 201.492   	 0         	 48.6459   	 4.14201   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 112, r1_: 112, n: 50, r2: 50)                         	 0.0102664 	 100       	 610.924   	 0         	 44.6149   	 13.6933   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 112, r1_: 50, n: 50, r2: 112)                         	 0.00943014	 100       	 665.102   	 0         	 77.4368   	 8.58896   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 112, m: 112, fromLeft: 1)                              	 0.00820256	 800       	 0         	 0         	 19.5748   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 112)                                                                        	 0.00809453	 100       	 0         	 0         	 55.346    	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 112, m: 2500)                                                                                 	 0.00700986	 100       	 0         	 0         	 63.91     	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 112, leftOrthog: 1)                         	 0.00296949	 100       	 18.8584   	 0         	 5.87306   	 3.21101   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 112)  	 0.00223125	 100       	 56.2196   	 0         	 8.51325   	 6.60377   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 112, r: 50, streamingCols: 0)                                    	 0.00164606	 100       	 7.59388   	 0         	 3.03755   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 112, r2: 112)                            	 0.00127929	 100       	 98.0546   	 0         	 14.8483   	 6.60377   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 112, n: 50, r2new: 1)  	 0.00116631	 100       	 0.960294  	 0         	 7.68373   	 0.124978  
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 112)                            	 0.000789697	 100       	 0         	 0         	 11.3461   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000764853	 100       	 32.686    	 0         	 7.84464   	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000753535	 100       	 0.663539  	 0         	 2.65416   	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 112, n: 50, r: 2, r2: 1)                              	 0.000507252	 100       	 4.41595   	 0         	 26.4989   	 0.166647  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 112)                                                                                                         	 0.000502425	 100       	 0         	 0         	 17.8335   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 112)                                                                          	 0.000485319	 100       	 0         	 0         	 18.4621   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                    	 0.000476617	 100       	 0         	 0         	 8.39248   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 62)                                                                                                          	 0.000404885	 100       	 0         	 0         	 12.2504   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 62, n: 50, r2: 1)                                                                                                          	 0.000356261	 100       	 0         	 0         	 13.9224   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000322965	 100       	 0.774078  	 0         	 12.3852   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 112, m: 50, fromLeft: 1)                               	 0.000219855	 100       	 0         	 0         	 40.7541   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 5.31257   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 5.31254   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 3.15893   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 3.15778   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 2.84474   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 1.7875    	 1800      
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 1.65581   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 1.13527   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.928595  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.860091  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.494417  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.314934  	 1000      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.31136   	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.298384  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.223594  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.114531  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.0988255 	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.0589213 	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.026292  	 1100      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00842242	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00408044	 4600      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00352776	 6400      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.00291075	 1800      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000789697	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000753535	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000322965	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23097520080768 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23097327478784 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23097126152320 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23096924825856 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23096723499392 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23096522172928 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23096320846464 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23096119520000 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23095918193536 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23095716867072 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23095515540608 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23095314214144 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23095112887680 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23094911561216 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23094710234752 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23094508908288 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23094307581824 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23094106255360 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23093904928896 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23093703602432 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23093502275968 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23093300949504 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23093099623040 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23092898296576 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23092696970112 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23092495643648 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23092294317184 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23092092990720 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23091891664256 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23091690337792 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23091489011328 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23091287684864 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23091086354304 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23090885027840 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23090683701376 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23090482374912 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23090281048448 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23090079721984 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23089878395520 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23089677069056 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23089475742592 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23089274416128 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23089073089664 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23088871763200 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23088670436736 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23088469110272 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23088267783808 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23088066457344 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23087865130880 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23087663804416 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23087462477952 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23087261151488 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23087059825024 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23086858498560 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23086657172096 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23086455845632 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23086254519168 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23086053192704 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23085851866240 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23085650539776 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23085449213312 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23085247886848 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23085046560384 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23097414420224 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23097407829760 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5650, cols: 113, reductionFactor: 37, colBlockingSize: 12)                                 	 1.54774   	 1300      	 124.469   	 0         	 4.37585   	 28.4446   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 113, m: 113)                                                                               	 1.07836   	 700       	 8.7419    	 0         	 0.199518  	 43.8152   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 113, n: 50, r2new: 113)	 0.398997  	 700       	 128.246   	 0         	 13.6797   	 9.37494   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 113, m: 113)                                                                                	 0.31576   	 900       	 5.48352   	 0         	 0.876059  	 6.25931   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 113, n: 50, r: 113, r2: 113)                          	 0.292624  	 700       	 345.162   	 0         	 24.6806   	 13.9851   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5650, r: 113, r2: 113, leftOrthog: 1)                      	 0.273161  	 600       	 316.933   	 0         	 34.1054   	 9.29276   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 5650, Xcols: 113, r: 113, streamingCols: 0)                                 	 0.200274  	 700       	 252.162   	 0         	 35.8829   	 7.02736   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 113, reductionFactor: 37, colBlockingSize: 12)                                 	 0.19677   	 200       	 66.6469   	 0         	 2.40093   	 27.7588   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 5650, m: 113)                                                                        	 0.180839  	 700       	 0         	 0         	 39.5414   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 113, m: 5650)                                                                                 	 0.148985  	 700       	 0         	 0         	 47.9958   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 113, r1_: 113, n: 50, r2: 113)                        	 0.0964596 	 600       	 897.514   	 0         	 64.1762   	 13.9851   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 113)                                                                                	 0.0572244 	 100       	 4.24061   	 0         	 0.193624  	 21.9013   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                                 	 0.0407933 	 100       	 2.85994   	 0         	 0.148063  	 19.3157   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5650, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0298037 	 100       	 97.3488   	 0         	 7.65007   	 12.7252   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 113, n: 50, r2new: 50) 	 0.0296695 	 100       	 109.018   	 0         	 16.491    	 6.61073   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 63, n: 50, r2: 63)                                                                                                         	 0.0255999 	 800       	 0         	 0         	 99.2253   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 113, reductionFactor: 37, colBlockingSize: 12)                                   	 0.0238741 	 200       	 10.9861   	 0         	 1.23441   	 8.89985   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 113, r2: 113, leftOrthog: 1)                      	 0.0221012 	 100       	 288.876   	 0         	 31.6015   	 9.14121   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 113, r: 113, streamingCols: 0)                                 	 0.0210186 	 100       	 151.878   	 0         	 21.7478   	 6.98359   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 113, n: 50, r: 113, r2: 50)                           	 0.016088  	 100       	 396.849   	 0         	 46.0767   	 8.6128    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5650, r: 50, r2: 50, leftOrthog: 1)                        	 0.0149924 	 100       	 188.429   	 0         	 45.4897   	 4.14223   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 113, r1_: 113, n: 50, r2: 50)                         	 0.0104064 	 100       	 613.518   	 0         	 44.4166   	 13.8128   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 113, r1_: 50, n: 50, r2: 113)                         	 0.00838166	 100       	 761.722   	 0         	 88.4407   	 8.6128    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 113, m: 113, fromLeft: 1)                              	 0.00806193	 800       	 0         	 0         	 20.2735   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 113)                                                                        	 0.00742294	 100       	 0         	 0         	 60.8923   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 113, m: 2500)                                                                                 	 0.00702257	 100       	 0         	 0         	 64.3639   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 113, leftOrthog: 1)                         	 0.00285947	 100       	 19.7589   	 0         	 6.141     	 3.21754   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 113)  	 0.00255527	 100       	 49.9713   	 0         	 7.5355    	 6.63146   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 113, r: 50, streamingCols: 0)                                    	 0.00166241	 100       	 7.51922   	 0         	 3.00769   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 113, r2: 113)                            	 0.00158953	 100       	 80.332    	 0         	 12.1138   	 6.63146   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 113, n: 50, r2new: 1)  	 0.0011022 	 100       	 1.02522   	 0         	 8.20322   	 0.124978  
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000807287	 100       	 0.619358  	 0         	 2.47743   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 113)                            	 0.000783031	 100       	 0         	 0         	 11.5449   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000743102	 100       	 33.6428   	 0         	 8.07426   	 4.16667   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 113)                                                                          	 0.000715786	 100       	 0         	 0         	 12.6295   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 113)                                                                                                         	 0.000523021	 100       	 0         	 0         	 17.2842   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                    	 0.000488203	 100       	 0         	 0         	 8.19331   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 113, n: 50, r: 2, r2: 1)                              	 0.000479009	 100       	 4.71807   	 0         	 28.3118   	 0.166647  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 63)                                                                                                          	 0.000403843	 100       	 0         	 0         	 12.4801   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000360793	 100       	 0.692918  	 0         	 11.0867   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 63, n: 50, r2: 1)                                                                                                          	 0.000340782	 100       	 0         	 0         	 14.7895   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 113, m: 50, fromLeft: 1)                               	 0.000225637	 100       	 0         	 0         	 40.0644   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 5.47629   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 5.47626   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 3.14791   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 3.14666   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 2.88023   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 1.86925   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 1.79819   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 1.17638   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.932211  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.867147  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.432324  	 1000      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.31576   	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.313114  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.310781  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.222955  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.188978  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.156496  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.115991  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0268676 	 1100      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.0134619 	 1800      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00828756	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00621462	 6400      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00112375	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000807287	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000783031	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000360793	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23132652537728 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23132425414656 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23132224088192 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23132022761728 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23131821435264 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23131620108800 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23131418782336 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23131217455872 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23131016129408 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23130814802944 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23130613476480 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23130412150016 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23130210823552 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23130009497088 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23129808170624 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23129606844160 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23129405517696 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23129204191232 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23129002864768 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23128801538304 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23128600211840 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23128398885376 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23128197558912 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23127996232448 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23127794905984 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23127593579520 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23127392253056 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23127190926592 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23126989600128 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23126788273664 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23126586947200 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23126385620736 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23126184290176 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23125982963712 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23125781637248 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23125580310784 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23125378984320 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23125177657856 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23124976331392 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23124775004928 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23124573678464 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23124372352000 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23124171025536 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23123969699072 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23123768372608 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23123567046144 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23123365719680 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23123164393216 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23122963066752 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23122761740288 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23122560413824 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23122359087360 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23122157760896 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23121956434432 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23121755107968 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23121553781504 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23121352455040 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23121151128576 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23120949802112 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23120748475648 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23120547149184 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23120345822720 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23120144496256 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23132546877184 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23132540286720 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5700, cols: 114, reductionFactor: 37, colBlockingSize: 12)                                 	 1.56721   	 1300      	 126.215   	 0         	 4.3983    	 28.6963   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 114, m: 114)                                                                               	 1.11933   	 700       	 8.64751   	 0         	 0.195627  	 44.2041   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 114, n: 50, r2new: 114)	 0.412989  	 700       	 127.451   	 0         	 13.4593   	 9.46941   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 114, m: 114)                                                                                	 0.320279  	 900       	 5.55095   	 0         	 0.879028  	 6.31487   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 114, n: 50, r: 114, r2: 114)                          	 0.302242  	 700       	 343.129   	 0         	 24.32     	 14.1089   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5700, r: 114, r2: 114, leftOrthog: 1)                      	 0.283317  	 600       	 313.756   	 0         	 33.4673   	 9.375     
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 114, reductionFactor: 37, colBlockingSize: 12)                                 	 0.205262  	 200       	 65.0253   	 0         	 2.32285   	 27.9938   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 5700, Xcols: 114, r: 114, streamingCols: 0)                                 	 0.200622  	 700       	 258.466   	 0         	 36.4573   	 7.08955   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 5700, m: 114)                                                                        	 0.169428  	 700       	 0         	 0         	 42.9549   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 114, m: 5700)                                                                                 	 0.163209  	 700       	 0         	 0         	 44.5916   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 114, r1_: 114, n: 50, r2: 114)                        	 0.0999205 	 600       	 889.633   	 0         	 63.0547   	 14.1089   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 114)                                                                                	 0.0575267 	 100       	 4.2531    	 0         	 0.193997  	 21.9235   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                                 	 0.0506285 	 100       	 2.30437   	 0         	 0.1193    	 19.3157   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 114, n: 50, r2new: 50) 	 0.0314307 	 100       	 104.929   	 0         	 15.7935   	 6.64384   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 114, reductionFactor: 37, colBlockingSize: 12)                                   	 0.0287475 	 200       	 9.28585   	 0         	 1.04056   	 8.92386   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5700, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                  	 0.028363  	 100       	 103.199   	 0         	 8.10915   	 12.7262   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 64, n: 50, r2: 64)                                                                                                         	 0.0272804 	 800       	 0         	 0         	 96.0924   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 114, r2: 114, leftOrthog: 1)                      	 0.0230002 	 100       	 282.519   	 0         	 30.6429   	 9.21972   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 114, r: 114, streamingCols: 0)                                 	 0.0210533 	 100       	 154.323   	 0         	 21.9063   	 7.04469   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 114, n: 50, r: 114, r2: 50)                           	 0.0168944 	 100       	 384.624   	 0         	 44.5354   	 8.63636   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5700, r: 50, r2: 50, leftOrthog: 1)                        	 0.0161728 	 100       	 176.222   	 0         	 42.5407   	 4.14244   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 114, r1_: 114, n: 50, r2: 50)                         	 0.0104239 	 100       	 623.374   	 0         	 44.7429   	 13.9323   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 114, r1_: 50, n: 50, r2: 114)                         	 0.00926252	 100       	 701.537   	 0         	 81.2306   	 8.63636   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 114, m: 114, fromLeft: 1)                              	 0.00894589	 800       	 0         	 0         	 18.595    	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 114)                                                                        	 0.00789525	 100       	 0         	 0         	 57.7562   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 114, m: 2500)                                                                                 	 0.00686101	 100       	 0         	 0         	 66.4625   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 114, leftOrthog: 1)                         	 0.00335263	 100       	 17.0016   	 0         	 5.27348   	 3.22398   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 114)  	 0.00227428	 100       	 57.1433   	 0         	 8.58152   	 6.65888   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 114, r: 50, streamingCols: 0)                                    	 0.0015982 	 100       	 7.82129   	 0         	 3.12852   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 114, r2: 114)                            	 0.00133088	 100       	 97.6497   	 0         	 14.6646   	 6.65888   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 114, n: 50, r2new: 1)  	 0.00114097	 100       	 0.999146  	 0         	 7.99457   	 0.124978  
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 114)                            	 0.000792156	 100       	 0         	 0         	 11.5129   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000764778	 100       	 32.6892   	 0         	 7.84541   	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000745597	 100       	 0.670604  	 0         	 2.68241   	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 114, n: 50, r: 2, r2: 1)                              	 0.000524232	 100       	 4.34922   	 0         	 26.0984   	 0.166647  
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 114)                                                                          	 0.000512456	 100       	 0         	 0         	 17.7966   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 114)                                                                                                         	 0.000508477	 100       	 0         	 0         	 17.9359   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                    	 0.00050687	 100       	 0         	 0         	 7.89157   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 64)                                                                                                          	 0.000432415	 100       	 0         	 0         	 11.8405   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.00035827	 100       	 0.697798  	 0         	 11.1648   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 64, n: 50, r2: 1)                                                                                                          	 0.000348788	 100       	 0         	 0         	 14.6794   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 114, m: 50, fromLeft: 1)                               	 0.000258375	 100       	 0         	 0         	 35.2975   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 5.64356   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 5.64353   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 3.27261   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 3.27143   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 2.97294   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 1.90172   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 1.82959   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 1.22749   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.954084  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.876513  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.447835  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.325843  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.320992  	 1000      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.320279  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.223274  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.177836  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.170577  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.120372  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0285701 	 1100      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.0161002 	 1800      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00920427	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00616359	 6400      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.002563  	 4600      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000792156	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000745597	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.00035827	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23067391682432 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23067195598848 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23066994272384 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23066792945920 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23066591619456 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23066390292992 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23066188966528 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23065987640064 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23065786313600 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23065584987136 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23065383660672 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23065182334208 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23064981007744 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23064779681280 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23064578354816 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23064377028352 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23064175701888 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23063974375424 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23063773048960 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23063571722496 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23063370396032 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23063169069568 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23062967743104 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23062766416640 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23062565090176 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23062363763712 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23062162437248 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23061961110784 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23061759784320 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23061558457856 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23061357131392 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23061155804928 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23060954474368 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23060753147904 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23060551821440 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23060350494976 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23060149168512 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23059947842048 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23059746515584 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23059545189120 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23059343862656 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23059142536192 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23058941209728 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23058739883264 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23058538556800 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23058337230336 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23058135903872 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23057934577408 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23057733250944 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23057531924480 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23057330598016 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23057129271552 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23056927945088 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23056726618624 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23056525292160 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23056323965696 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23056122639232 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23055921312768 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23055719986304 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23055518659840 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23055317333376 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23055116006912 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23054914680448 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23067286021888 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23067279431424 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5750, cols: 115, reductionFactor: 37, colBlockingSize: 12)                                 	 1.5899    	 1300      	 127.717   	 0         	 4.41194   	 28.9481   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 115, m: 115)                                                                               	 1.1144    	 700       	 8.91638   	 0         	 0.19995   	 44.593    
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 115, n: 50, r2new: 115)	 0.421132  	 700       	 128.549   	 0         	 13.4401   	 9.56461   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 115, m: 115)                                                                                	 0.32092   	 900       	 5.68693   	 0         	 0.892708  	 6.37042   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 115, n: 50, r: 115, r2: 115)                          	 0.309236  	 700       	 344.272   	 0         	 24.1889   	 14.2327   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5750, r: 115, r2: 115, leftOrthog: 1)                      	 0.282381  	 600       	 323.154   	 0         	 34.17     	 9.45724   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 115, reductionFactor: 37, colBlockingSize: 12)                                 	 0.204476  	 200       	 66.4255   	 0         	 2.35314   	 28.2285   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 5750, m: 115)                                                                        	 0.203924  	 700       	 0         	 0         	 36.3175   	 0         
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 5750, Xcols: 115, r: 115, streamingCols: 0)                                 	 0.201964  	 700       	 263.566   	 0         	 36.8533   	 7.15174   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 115, m: 5750)                                                                                 	 0.154858  	 700       	 0         	 0         	 47.8245   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 115, r1_: 115, n: 50, r2: 115)                        	 0.100131  	 600       	 911.329   	 0         	 64.0307   	 14.2327   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 115)                                                                                	 0.0569955 	 100       	 4.32782   	 0         	 0.197208  	 21.9454   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                                 	 0.0407001 	 100       	 2.86649   	 0         	 0.148402  	 19.3157   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 115, n: 50, r2new: 50) 	 0.0330141 	 100       	 101.851   	 0         	 15.2541   	 6.67693   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5750, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0304489 	 100       	 96.9725   	 0         	 7.61933   	 12.7272   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 65, n: 50, r2: 65)                                                                                                         	 0.0280332 	 800       	 0         	 0         	 96.457    	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 115, reductionFactor: 37, colBlockingSize: 12)                                   	 0.0245367 	 200       	 11.0711   	 0         	 1.23733   	 8.94758   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 115, r2: 115, leftOrthog: 1)                      	 0.0224171 	 100       	 294.976   	 0         	 31.724    	 9.29819   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 115, r: 115, streamingCols: 0)                                 	 0.0213997 	 100       	 154.5     	 0         	 21.7429   	 7.10578   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 115, n: 50, r: 115, r2: 50)                           	 0.0173677 	 100       	 380.735   	 0         	 43.9666   	 8.65964   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5750, r: 50, r2: 50, leftOrthog: 1)                        	 0.0154263 	 100       	 186.371   	 0         	 44.9882   	 4.14265   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 115, r1_: 115, n: 50, r2: 50)                         	 0.0102815 	 100       	 643.143   	 0         	 45.7694   	 14.0518   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 115, r1_: 50, n: 50, r2: 115)                         	 0.00903492	 100       	 731.882   	 0         	 84.5165   	 8.65964   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 115, m: 115, fromLeft: 1)                              	 0.00822191	 800       	 0         	 0         	 20.5889   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 115)                                                                        	 0.00761737	 100       	 0         	 0         	 60.3883   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 115, m: 2500)                                                                                 	 0.00649771	 100       	 0         	 0         	 70.7941   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 115, leftOrthog: 1)                         	 0.002907  	 100       	 19.7798   	 0         	 6.12315   	 3.23034   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 115)  	 0.0025486 	 100       	 51.8912   	 0         	 7.76111   	 6.68605   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 115, r: 50, streamingCols: 0)                                    	 0.00163526	 100       	 7.64407   	 0         	 3.05763   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 115, r2: 115)                            	 0.00162255	 100       	 81.5075   	 0         	 12.1907   	 6.68605   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 115, n: 50, r2new: 1)  	 0.00134782	 100       	 0.85323   	 0         	 6.82702   	 0.124978  
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000966294	 100       	 0.517441  	 0         	 2.06976   	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000818817	 100       	 30.5319   	 0         	 7.32764   	 4.16667   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 115)                            	 0.000777474	 100       	 0         	 0         	 11.8332   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 115, n: 50, r: 2, r2: 1)                              	 0.000597214	 100       	 3.85122   	 0         	 23.11     	 0.166647  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 115)                                                                                                         	 0.000508401	 100       	 0         	 0         	 18.096    	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                    	 0.000485146	 100       	 0         	 0         	 8.24494   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 115)                                                                          	 0.000433159	 100       	 0         	 0         	 21.2393   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 65)                                                                                                          	 0.000395245	 100       	 0         	 0         	 13.1564   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 65, n: 50, r2: 1)                                                                                                          	 0.000343894	 100       	 0         	 0         	 15.1209   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000333464	 100       	 0.749706  	 0         	 11.9953   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 115, m: 50, fromLeft: 1)                               	 0.000221617	 100       	 0         	 0         	 41.5131   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 5.66748   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 5.66744   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 3.24304   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 3.24166   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 2.95917   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 1.9481    	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 1.84936   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 1.21209   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.968281  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.882118  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.458042  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.328823  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.323132  	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.32092   	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.224998  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.211974  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.161841  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.120267  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0292808 	 1100      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.0188801 	 1800      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00844352	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00596074	 6400      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00109733	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000966294	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000777474	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000333464	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23441435178880 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23441260406784 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23441059080320 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23440857753856 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23440656427392 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23440455100928 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23440253774464 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23440052448000 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23439851121536 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23439649795072 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23439448468608 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23439247142144 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23439045815680 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23438844489216 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23438643162752 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23438441836288 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23438240509824 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23438039183360 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23437837856896 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23437636530432 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23437435203968 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23437233877504 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23437032551040 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23436831224576 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23436629898112 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23436428571648 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23436227245184 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23436025918720 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23435824592256 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23435623265792 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23435421939328 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23435220612864 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23435019282304 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23434817955840 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23434616629376 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23434415302912 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23434213976448 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23434012649984 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23433811323520 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23433609997056 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23433408670592 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23433207344128 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23433006017664 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23432804691200 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23432603364736 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23432402038272 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23432200711808 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23431999385344 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23431798058880 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23431596732416 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23431395405952 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23431194079488 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23430992753024 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23430791426560 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23430590100096 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23430388773632 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23430187447168 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23429986120704 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23429784794240 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23429583467776 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23429382141312 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23429180814848 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23428979488384 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23441155544832 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23441150928640 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5800, cols: 116, reductionFactor: 37, colBlockingSize: 12)                                 	 1.60267   	 1300      	 130.034   	 0         	 4.45323   	 29.1998   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 116, m: 116)                                                                               	 1.12996   	 700       	 9.02496   	 0         	 0.200635  	 44.9819   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 116, n: 50, r2new: 116)	 0.418933  	 700       	 132.887   	 0         	 13.7557   	 9.6605    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 116, m: 116)                                                                                	 0.330111  	 900       	 5.67408   	 0         	 0.882991  	 6.42598   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 116, n: 50, r: 116, r2: 116)                          	 0.308927  	 700       	 353.685   	 0         	 24.636    	 14.3564   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5800, r: 116, r2: 116, leftOrthog: 1)                      	 0.286288  	 600       	 327.131   	 0         	 34.2924   	 9.53947   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 116, reductionFactor: 37, colBlockingSize: 12)                                 	 0.206633  	 200       	 66.8802   	 0         	 2.34972   	 28.4631   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 5800, Xcols: 116, r: 116, streamingCols: 0)                                 	 0.202515  	 700       	 269.765   	 0         	 37.395    	 7.21393   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 5800, m: 116)                                                                        	 0.188457  	 700       	 0         	 0         	 39.9845   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 116, m: 5800)                                                                                 	 0.158807  	 700       	 0         	 0         	 47.4499   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 116, r1_: 116, n: 50, r2: 116)                        	 0.100037  	 600       	 936.189   	 0         	 65.2104   	 14.3564   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 116)                                                                                	 0.0579762 	 100       	 4.28912   	 0         	 0.195253  	 21.967    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                                 	 0.0411371 	 100       	 2.83605   	 0         	 0.146826  	 19.3157   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 116, n: 50, r2new: 50) 	 0.0319131 	 100       	 107.417   	 0         	 16.0084   	 6.70999   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 66, n: 50, r2: 66)                                                                                                         	 0.0302143 	 800       	 0         	 0         	 92.2688   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5800, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0302054 	 100       	 98.604    	 0         	 7.74695   	 12.7281   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 116, reductionFactor: 37, colBlockingSize: 12)                                   	 0.0232548 	 200       	 11.8854   	 0         	 1.32487   	 8.97102   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 116, r2: 116, leftOrthog: 1)                      	 0.0229673 	 100       	 292.939   	 0         	 31.2414   	 9.37662   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 116, r: 116, streamingCols: 0)                                 	 0.0213206 	 100       	 157.782   	 0         	 22.0155   	 7.16686   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 116, n: 50, r: 116, r2: 50)                           	 0.017378  	 100       	 387.156   	 0         	 44.5896   	 8.68263   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5800, r: 50, r2: 50, leftOrthog: 1)                        	 0.0159963 	 100       	 181.292   	 0         	 43.7602   	 4.14286   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 116, r1_: 116, n: 50, r2: 50)                         	 0.0107058 	 100       	 628.444   	 0         	 44.3465   	 14.1712   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 116, r1_: 50, n: 50, r2: 116)                         	 0.00973779	 100       	 690.916   	 0         	 79.5745   	 8.68263   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 116, m: 116, fromLeft: 1)                              	 0.00849194	 800       	 0         	 0         	 20.2824   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 116)                                                                        	 0.00772816	 100       	 0         	 0         	 60.0401   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 116, m: 2500)                                                                                 	 0.0076188 	 100       	 0         	 0         	 60.902    	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 116, leftOrthog: 1)                         	 0.00289759	 100       	 20.0166   	 0         	 6.18445   	 3.23661   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 116)  	 0.00231797	 100       	 58.0508   	 0         	 8.64757   	 6.71296   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 116, r: 50, streamingCols: 0)                                    	 0.00165155	 100       	 7.56865   	 0         	 3.02746   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 116, r2: 116)                            	 0.00139771	 100       	 96.272    	 0         	 14.3412   	 6.71296   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 116, n: 50, r2new: 1)  	 0.00133815	 100       	 0.866867  	 0         	 6.93613   	 0.124978  
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000874526	 100       	 0.571738  	 0         	 2.28695   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 116)                            	 0.000764236	 100       	 0         	 0         	 12.1428   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000739341	 100       	 33.8139   	 0         	 8.11534   	 4.16667   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 116, n: 50, r: 2, r2: 1)                              	 0.000616541	 100       	 3.76293   	 0         	 22.5802   	 0.166648  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 116)                                                                                                         	 0.000509122	 100       	 0         	 0         	 18.2275   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                    	 0.000504202	 100       	 0         	 0         	 7.93333   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 116)                                                                          	 0.000460777	 100       	 0         	 0         	 20.1399   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 66)                                                                                                          	 0.000421276	 100       	 0         	 0         	 12.5334   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 66, n: 50, r2: 1)                                                                                                          	 0.000358317	 100       	 0         	 0         	 14.7356   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000323909	 100       	 0.771822  	 0         	 12.3491   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 116, m: 50, fromLeft: 1)                               	 0.000240825	 100       	 0         	 0         	 38.5342   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 5.69387   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 5.69383   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 3.28904   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 3.28776   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 2.99804   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 1.94214   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 1.86276   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 1.22907   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.968095  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.895816  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.454502  	 1000      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.330111  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.328319  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.328149  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.225487  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.196646  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.16693   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.12122   	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.031503  	 1100      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.0167366 	 1800      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00873277	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00565772	 6400      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.0011079 	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000874526	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000764236	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000323909	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23084472129408 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23084241250304 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23084039923840 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23083838597376 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23083637270912 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23083435944448 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23083234617984 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23083033291520 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23082831965056 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23082630638592 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23082429312128 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23082227985664 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23082026659200 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23081825332736 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23081624006272 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23081422679808 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23081221353344 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23081020026880 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23080818700416 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23080617373952 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23080416047488 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23080214721024 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23080013394560 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23079812068096 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23079610741632 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23079409415168 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23079208088704 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23079006762240 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23078805435776 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23078604109312 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23078402782848 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23078201456384 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23078000125824 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23077798799360 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23077597472896 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23077396146432 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23077194819968 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23076993493504 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23076792167040 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23076590840576 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23076389514112 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23076188187648 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23075986861184 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23075785534720 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23075584208256 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23075382881792 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23075181555328 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23074980228864 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23074778902400 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23074577575936 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23074376249472 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23074174923008 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23073973596544 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23073772270080 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23073570943616 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23073369617152 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23073168290688 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23072966964224 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23072765637760 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23072564311296 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23072362984832 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23072161658368 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23071960331904 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23084366468864 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23084359878400 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5850, cols: 117, reductionFactor: 37, colBlockingSize: 12)                                 	 1.63839   	 1300      	 130.517   	 0         	 4.43157   	 29.4515   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 117, m: 117)                                                                               	 1.19211   	 700       	 8.77759   	 0         	 0.193464  	 45.3707   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 117, n: 50, r2new: 117)	 0.420213  	 700       	 136.216   	 0         	 13.9608   	 9.75708   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 117, m: 117)                                                                                	 0.347065  	 900       	 5.53768   	 0         	 0.854378  	 6.48153   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 117, n: 50, r: 117, r2: 117)                          	 0.303521  	 700       	 369.374   	 0         	 25.5089   	 14.4802   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5850, r: 117, r2: 117, leftOrthog: 1)                      	 0.295812  	 600       	 324.857   	 0         	 33.7629   	 9.62171   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 117, reductionFactor: 37, colBlockingSize: 12)                                 	 0.212266  	 200       	 66.2327   	 0         	 2.30796   	 28.6975   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 5850, Xcols: 117, r: 117, streamingCols: 0)                                 	 0.20474   	 700       	 273.793   	 0         	 37.629    	 7.27612   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 5850, m: 117)                                                                        	 0.178299  	 700       	 0         	 0         	 42.9942   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 117, m: 5850)                                                                                 	 0.15917   	 700       	 0         	 0         	 48.1613   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 117, r1_: 117, n: 50, r2: 117)                        	 0.106945  	 600       	 898.562   	 0         	 62.0545   	 14.4802   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 117)                                                                                	 0.0598801 	 100       	 4.18614   	 0         	 0.19038   	 21.9883   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                                 	 0.0418774 	 100       	 2.78591   	 0         	 0.144231  	 19.3157   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 117, n: 50, r2new: 50) 	 0.0331122 	 100       	 105.535   	 0         	 15.651    	 6.74301   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 67, n: 50, r2: 67)                                                                                                         	 0.0299568 	 800       	 0         	 0         	 95.9033   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5850, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0284006 	 100       	 105.774   	 0         	 8.30968   	 12.729    
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 117, reductionFactor: 37, colBlockingSize: 12)                                   	 0.0244253 	 200       	 11.5118   	 0         	 1.27992   	 8.99417   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 117, r2: 117, leftOrthog: 1)                      	 0.0235619 	 100       	 290.49    	 0         	 30.7234   	 9.455     
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 117, r: 117, streamingCols: 0)                                 	 0.0216501 	 100       	 158.071   	 0         	 21.8694   	 7.22793   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 117, n: 50, r: 117, r2: 50)                           	 0.0169343 	 100       	 404.18    	 0         	 46.4289   	 8.70536   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5850, r: 50, r2: 50, leftOrthog: 1)                        	 0.0156996 	 100       	 186.311   	 0         	 44.9694   	 4.14306   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 117, m: 2500)                                                                                 	 0.0108387 	 100       	 0         	 0         	 43.1785   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 117, r1_: 117, n: 50, r2: 50)                         	 0.0105359 	 100       	 649.637   	 0         	 45.459    	 14.2906   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 117, r1_: 50, n: 50, r2: 117)                         	 0.0102165 	 100       	 669.947   	 0         	 76.958    	 8.70536   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 117, m: 117, fromLeft: 1)                              	 0.00871698	 800       	 0         	 0         	 20.1009   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 117)                                                                        	 0.00801912	 100       	 0         	 0         	 58.3605   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 117, leftOrthog: 1)                         	 0.0031131 	 100       	 18.7916   	 0         	 5.79487   	 3.24279   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 117)  	 0.00242984	 100       	 56.337    	 0         	 8.35907   	 6.73963   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 117, r: 50, streamingCols: 0)                                    	 0.00169451	 100       	 7.37676   	 0         	 2.9507    	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 117, r2: 117)                            	 0.00144655	 100       	 94.6322   	 0         	 14.0412   	 6.73963   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 117, n: 50, r2new: 1)  	 0.00114134	 100       	 1.02511   	 0         	 8.20229   	 0.124979  
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000889856	 100       	 0.561889  	 0         	 2.24755   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 117)                            	 0.000836639	 100       	 0         	 0         	 11.1876   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000764234	 100       	 32.7125   	 0         	 7.851     	 4.16667   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 117, n: 50, r: 2, r2: 1)                              	 0.000519654	 100       	 4.503     	 0         	 27.0211   	 0.166648  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 117)                                                                                                         	 0.000507401	 100       	 0         	 0         	 18.4469   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                    	 0.000483794	 100       	 0         	 0         	 8.26798   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 117)                                                                          	 0.000406692	 100       	 0         	 0         	 23.015    	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 67)                                                                                                          	 0.000403525	 100       	 0         	 0         	 13.2829   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 67, n: 50, r2: 1)                                                                                                          	 0.000375386	 100       	 0         	 0         	 14.2786   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000342399	 100       	 0.730142  	 0         	 11.6823   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 117, m: 50, fromLeft: 1)                               	 0.000237137	 100       	 0         	 0         	 39.4709   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 5.8572    	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 5.85716   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 3.40633   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 3.40501   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 3.09236   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 1.98152   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 1.90348   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 1.29387   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 0.998386  	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.906314  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.456897  	 1000      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.347065  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.338187  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.322422  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.228085  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.186725  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.170493  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.128462  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0312432 	 1100      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.0154885 	 1800      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00895412	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00603643	 6400      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00113648	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000889856	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000836639	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000342399	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23387696281472 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23387506206720 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23387304880256 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23387103553792 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23386902227328 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23386700900864 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23386499574400 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23386298247936 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23386096921472 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23385895595008 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23385694268544 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23385492942080 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23385291615616 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23385090289152 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23384888962688 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23384687636224 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23384486309760 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23384284983296 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23384083656832 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23383882330368 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23383681003904 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23383479677440 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23383278350976 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23383077024512 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23382875698048 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23382674371584 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23382473045120 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23382271718656 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23382070392192 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23381869065728 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23381667739264 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23381466412800 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23381265082240 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23381063755776 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23380862429312 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23380661102848 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23380459776384 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23380258449920 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23380057123456 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23379855796992 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23379654470528 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23379453144064 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23379251817600 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23379050491136 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23378849164672 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23378647838208 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23378446511744 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23378245185280 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23378043858816 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23377842532352 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23377641205888 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23377439879424 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23377238552960 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23377037226496 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23376835900032 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23376634573568 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23376433247104 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23376231920640 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23376030594176 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23375829267712 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23375627941248 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23375426614784 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23375225288320 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23387590620928 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23387584030464 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5900, cols: 118, reductionFactor: 37, colBlockingSize: 12)                                 	 1.66061   	 1300      	 132.1     	 0         	 4.44734   	 29.7032   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 118, m: 118)                                                                               	 1.14587   	 700       	 9.36797   	 0         	 0.204721  	 45.7596   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 118, n: 50, r2new: 118)	 0.425947  	 700       	 138.149   	 0         	 14.0191   	 9.85432   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 118, m: 118)                                                                                	 0.349095  	 900       	 5.64785   	 0         	 0.863971  	 6.53709   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 118, n: 50, r: 118, r2: 118)                          	 0.312412  	 700       	 368.143   	 0         	 25.2084   	 14.604    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5900, r: 118, r2: 118, leftOrthog: 1)                      	 0.297501  	 600       	 331.367   	 0         	 34.1476   	 9.70395   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 118, reductionFactor: 37, colBlockingSize: 12)                                 	 0.214688  	 200       	 66.6098   	 0         	 2.30231   	 28.9317   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 5900, Xcols: 118, r: 118, streamingCols: 0)                                 	 0.210005  	 700       	 273.832   	 0         	 37.3154   	 7.33831   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 5900, m: 118)                                                                        	 0.164963  	 700       	 0         	 0         	 47.2677   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 118, m: 5900)                                                                                 	 0.156235  	 700       	 0         	 0         	 49.9083   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 118, r1_: 118, n: 50, r2: 118)                        	 0.10518   	 600       	 937.267   	 0         	 64.1789   	 14.604    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 118)                                                                                	 0.0588942 	 100       	 4.29018   	 0         	 0.194926  	 22.0093   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                                 	 0.0418201 	 100       	 2.78973   	 0         	 0.144428  	 19.3157   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 118, n: 50, r2new: 50) 	 0.0336691 	 100       	 105.794   	 0         	 15.6131   	 6.77599   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5900, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0307842 	 100       	 98.4185   	 0         	 7.73125   	 12.73     
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 68, n: 50, r2: 68)                                                                                                         	 0.0302668 	 800       	 0         	 0         	 97.7759   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 118, reductionFactor: 37, colBlockingSize: 12)                                   	 0.0258508 	 200       	 11.0637   	 0         	 1.22698   	 9.01705   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 118, r2: 118, leftOrthog: 1)                      	 0.0235518 	 100       	 295.603   	 0         	 31.0073   	 9.53335   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 118, r: 118, streamingCols: 0)                                 	 0.0224346 	 100       	 155.162   	 0         	 21.2872   	 7.28899   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5900, r: 50, r2: 50, leftOrthog: 1)                        	 0.0190991 	 100       	 154.458   	 0         	 37.2793   	 4.14326   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 118, n: 50, r: 118, r2: 50)                           	 0.0177381 	 100       	 392.488   	 0         	 44.9698   	 8.72781   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 118, r1_: 50, n: 50, r2: 118)                         	 0.0103247 	 100       	 674.303   	 0         	 77.2592   	 8.72781   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 118, r1_: 118, n: 50, r2: 50)                         	 0.010128  	 100       	 687.402   	 0         	 47.7034   	 14.4099   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 118, m: 118, fromLeft: 1)                              	 0.00938193	 800       	 0         	 0         	 18.9969   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 118)                                                                        	 0.0079133 	 100       	 0         	 0         	 59.6464   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 118, m: 2500)                                                                                 	 0.00742573	 100       	 0         	 0         	 63.5628   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 118, leftOrthog: 1)                         	 0.00301702	 100       	 19.5557   	 0         	 6.01918   	 3.2489    
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 118)  	 0.00235525	 100       	 59.1191   	 0         	 8.7376    	 6.76606   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 118, r: 50, streamingCols: 0)                                    	 0.00165567	 100       	 7.54981   	 0         	 3.01992   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 118, r2: 118)                            	 0.00136354	 100       	 102.117   	 0         	 15.0925   	 6.76606   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 118, n: 50, r2new: 1)  	 0.00117351	 100       	 1.00553   	 0         	 8.04559   	 0.124979  
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000902263	 100       	 0.554162  	 0         	 2.21665   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 118)                            	 0.000817905	 100       	 0         	 0         	 11.5417   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000749669	 100       	 33.3481   	 0         	 8.00353   	 4.16667   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                    	 0.000510977	 100       	 0         	 0         	 7.82814   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 118)                                                                                                         	 0.000486811	 100       	 0         	 0         	 19.3915   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 118, n: 50, r: 2, r2: 1)                              	 0.000479721	 100       	 4.91953   	 0         	 29.5205   	 0.166648  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 68)                                                                                                          	 0.000394863	 100       	 0         	 0         	 13.7769   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 68, n: 50, r2: 1)                                                                                                          	 0.000380607	 100       	 0         	 0         	 14.293    	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 118)                                                                          	 0.000341348	 100       	 0         	 0         	 27.6551   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.0003249 	 100       	 0.769468  	 0         	 12.3115   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 118, m: 50, fromLeft: 1)                               	 0.000248484	 100       	 0         	 0         	 37.9904   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 5.84229   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 5.84225   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 3.3778    	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 3.37649   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 3.07385   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 1.98177   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 1.93193   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 1.24658   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 1.00836   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.924658  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.463145  	 1000      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.349095  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.343169  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.331993  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.234096  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.173218  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.164172  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.126383  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.031529  	 1100      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.0133856 	 1800      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00963042	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00589933	 6400      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00106123	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000902263	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000817905	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.0003249 	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22586954008448 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22586763241472 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22586561915008 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22586360588544 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22586159262080 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22585957935616 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22585756609152 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22585555282688 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22585353956224 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22585152629760 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22584951303296 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22584749976832 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22584548650368 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22584347323904 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22584145997440 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22583944670976 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22583743344512 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22583542018048 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22583340691584 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22583139365120 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22582938038656 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22582736712192 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22582535385728 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22582334059264 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22582132732800 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22581931406336 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22581730079872 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22581528753408 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22581327426944 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22581126100480 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22580924774016 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22580723447552 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22580522116992 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22580320790528 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22580119464064 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22579918137600 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22579716811136 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22579515484672 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22579314158208 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22579112831744 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22578911505280 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22578710178816 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22578508852352 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22578307525888 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22578106199424 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22577904872960 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22577703546496 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22577502220032 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22577300893568 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22577099567104 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22576898240640 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22576696914176 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22576495587712 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22576294261248 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22576092934784 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22575891608320 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22575690281856 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22575488955392 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22575287628928 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22575086302464 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22574884976000 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22574683649536 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22574482323072 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22586848347904 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22586841757440 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5950, cols: 119, reductionFactor: 37, colBlockingSize: 12)                                 	 1.69379   	 1300      	 132.833   	 0         	 4.43443   	 29.955    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 119, m: 119)                                                                               	 1.15747   	 700       	 9.51186   	 0         	 0.206114  	 46.1485   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 119, n: 50, r2new: 119)	 0.432071  	 700       	 139.987   	 0         	 14.0659   	 9.9522    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 119, m: 119)                                                                                	 0.351229  	 900       	 5.75746   	 0         	 0.873316  	 6.59264   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 119, n: 50, r: 119, r2: 119)                          	 0.314327  	 700       	 375.281   	 0         	 25.4813   	 14.7277   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5950, r: 119, r2: 119, leftOrthog: 1)                      	 0.295292  	 600       	 342.406   	 0         	 34.9887   	 9.78618   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 5950, Xcols: 119, r: 119, streamingCols: 0)                                 	 0.241767  	 700       	 243.957   	 0         	 32.9649   	 7.4005    
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 119, reductionFactor: 37, colBlockingSize: 12)                                 	 0.213879  	 200       	 67.9998   	 0         	 2.33149   	 29.1658   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 5950, m: 119)                                                                        	 0.185174  	 700       	 0         	 0         	 42.8254   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 119, m: 5950)                                                                                 	 0.163788  	 700       	 0         	 0         	 48.4172   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 119, r1_: 119, n: 50, r2: 119)                        	 0.116942  	 600       	 864.615   	 0         	 58.7066   	 14.7277   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 119)                                                                                	 0.0603029 	 100       	 4.22313   	 0         	 0.191699  	 22.03     
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                                 	 0.0410566 	 100       	 2.84161   	 0         	 0.147114  	 19.3157   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 119, n: 50, r2new: 50) 	 0.0346729 	 100       	 104.707   	 0         	 15.378    	 6.80889   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 69, n: 50, r2: 69)                                                                                                         	 0.0289799 	 800       	 0         	 0         	 105.143   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 5950, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0288132 	 100       	 106.042   	 0         	 8.32953   	 12.7309   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 119, reductionFactor: 37, colBlockingSize: 12)                                   	 0.0268011 	 200       	 10.8531   	 0         	 1.20061   	 9.03966   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 119, r2: 119, leftOrthog: 1)                      	 0.0237676 	 100       	 297.905   	 0         	 30.9941   	 9.61166   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 119, r: 119, streamingCols: 0)                                 	 0.0222244 	 100       	 159.296   	 0         	 21.6728   	 7.35003   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 119, n: 50, r: 119, r2: 50)                           	 0.0181991 	 100       	 389.058   	 0         	 44.4637   	 8.75      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 5950, r: 50, r2: 50, leftOrthog: 1)                        	 0.0145476 	 100       	 204.501   	 0         	 49.3551   	 4.14345   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 119, r1_: 50, n: 50, r2: 119)                         	 0.0108973 	 100       	 649.746   	 0         	 74.2567   	 8.75      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 119, r1_: 119, n: 50, r2: 50)                         	 0.0105323 	 100       	 672.268   	 0         	 46.2701   	 14.5292   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 119, m: 119, fromLeft: 1)                              	 0.0089586 	 800       	 0         	 0         	 20.2332   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 119)                                                                        	 0.00859732	 100       	 0         	 0         	 55.3661   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 119, m: 2500)                                                                                 	 0.00843732	 100       	 0         	 0         	 56.416    	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 119, n: 50, r2new: 1)  	 0.00557242	 100       	 0.213552  	 0         	 1.7087    	 0.124979  
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 119, leftOrthog: 1)                         	 0.00287866	 100       	 20.6694   	 0         	 6.35019   	 3.25492   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 119)  	 0.00238343	 100       	 59.4144   	 0         	 8.7474    	 6.79224   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 119, r: 50, streamingCols: 0)                                    	 0.00166245	 100       	 7.51901   	 0         	 3.0076    	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 119, r2: 119)                            	 0.00146207	 100       	 96.8556   	 0         	 14.2597   	 6.79224   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000890249	 100       	 0.561641  	 0         	 2.24656   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 119)                            	 0.00077211	 100       	 0         	 0         	 12.3298   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000720628	 100       	 34.692    	 0         	 8.32607   	 4.16667   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 119, n: 50, r: 2, r2: 1)                              	 0.000605016	 100       	 3.93378   	 0         	 23.6053   	 0.166648  
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 119)                                                                          	 0.00055766	 100       	 0         	 0         	 17.0713   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                    	 0.000501533	 100       	 0         	 0         	 7.97555   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 119)                                                                                                         	 0.000493919	 100       	 0         	 0         	 19.2744   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 69)                                                                                                          	 0.000407682	 100       	 0         	 0         	 13.54     	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 69, n: 50, r2: 1)                                                                                                          	 0.000335136	 100       	 0         	 0         	 16.4709   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000326536	 100       	 0.765612  	 0         	 12.2498   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 119, m: 50, fromLeft: 1)                               	 0.000227006	 100       	 0         	 0         	 41.9372   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 5.92457   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 5.92453   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 3.37443   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 3.37313   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 3.09857   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 2.06086   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 1.96328   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 1.25883   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 1.02201   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.942461  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.474699  	 1000      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.351229  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.336485  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.334593  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.265654  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.194329  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.172727  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.139092  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0302166 	 1100      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.0152001 	 1800      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00918561	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00534463	 6400      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00108987	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000890249	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.00077211	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000326536	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22552737118080 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22552537720832 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22552336394368 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22552135067904 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22551933741440 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22551732414976 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22551531088512 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22551329762048 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22551128435584 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22550927109120 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22550725782656 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22550524456192 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22550323129728 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22550121803264 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22549920476800 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22549719150336 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22549517823872 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22549316497408 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22549115170944 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22548913844480 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22548712518016 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22548511191552 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22548309865088 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22548108538624 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22547907212160 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22547705885696 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22547504559232 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22547303232768 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22547101906304 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22546900579840 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22546699253376 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22546497926912 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22546296596352 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22546095269888 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22545893943424 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22545692616960 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22545491290496 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22545289964032 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22545088637568 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22544887311104 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22544685984640 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22544484658176 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22544283331712 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22544082005248 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22543880678784 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22543679352320 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22543478025856 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22543276699392 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22543075372928 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22542874046464 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22542672720000 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22542471393536 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22542270067072 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22542068740608 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22541867414144 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22541666087680 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22541464761216 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22541263434752 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22541062108288 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22540860781824 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22540659455360 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22540458128896 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22540256802432 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22552631457536 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22552624867072 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6000, cols: 120, reductionFactor: 37, colBlockingSize: 12)                                 	 1.73551   	 1300      	 132.936   	 0         	 4.40087   	 30.2067   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 120, m: 120)                                                                               	 1.15409   	 700       	 9.78225   	 0         	 0.210202  	 46.5374   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 120, n: 50, r2new: 120)	 0.451746  	 700       	 137.599   	 0         	 13.6905   	 10.0507   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 120, m: 120)                                                                                	 0.355852  	 900       	 5.82714   	 0         	 0.876499  	 6.6482    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 120, n: 50, r: 120, r2: 120)                          	 0.333058  	 700       	 363.18    	 0         	 24.4541   	 14.8515   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6000, r: 120, r2: 120, leftOrthog: 1)                      	 0.300008  	 600       	 345.591   	 0         	 35.0199   	 9.86842   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 6000, Xcols: 120, r: 120, streamingCols: 0)                                 	 0.228535  	 700       	 264.642   	 0         	 35.4621   	 7.46269   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 120, reductionFactor: 37, colBlockingSize: 12)                                 	 0.219868  	 200       	 67.2638   	 0         	 2.28791   	 29.3996   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 120, m: 6000)                                                                                 	 0.16952   	 700       	 0         	 0         	 47.5696   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 6000, m: 120)                                                                        	 0.144854  	 700       	 0         	 0         	 55.6697   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 120, r1_: 120, n: 50, r2: 120)                        	 0.10614   	 600       	 976.82    	 0         	 65.7726   	 14.8515   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 120)                                                                                	 0.0587947 	 100       	 4.36547   	 0         	 0.197977  	 22.0504   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                                 	 0.0423973 	 100       	 2.75175   	 0         	 0.142462  	 19.3157   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 120, n: 50, r2new: 50) 	 0.035244  	 100       	 104.983   	 0         	 15.3445   	 6.84172   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 70, n: 50, r2: 70)                                                                                                         	 0.0299448 	 800       	 0         	 0         	 104.726   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6000, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0286436 	 100       	 107.566   	 0         	 8.44867   	 12.7317   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 120, reductionFactor: 37, colBlockingSize: 12)                                   	 0.0261956 	 200       	 11.2914   	 0         	 1.24601   	 9.062     
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 120, r2: 120, leftOrthog: 1)                      	 0.0242469 	 100       	 296.945   	 0         	 30.6447   	 9.68992   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 120, r: 120, streamingCols: 0)                                 	 0.0226927 	 100       	 158.642   	 0         	 21.406    	 7.41107   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 120, n: 50, r: 120, r2: 50)                           	 0.0183455 	 100       	 392.466   	 0         	 44.7411   	 8.77193   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6000, r: 50, r2: 50, leftOrthog: 1)                        	 0.0153961 	 100       	 194.854   	 0         	 47.0249   	 4.14365   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 120, r1_: 120, n: 50, r2: 50)                         	 0.010982  	 100       	 655.619   	 0         	 44.7569   	 14.6484   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 120, r1_: 50, n: 50, r2: 120)                         	 0.00964965	 100       	 746.141   	 0         	 85.0601   	 8.77193   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 120, m: 120, fromLeft: 1)                              	 0.00883089	 800       	 0         	 0         	 20.8722   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 120, m: 2500)                                                                                 	 0.00873773	 100       	 0         	 0         	 54.9342   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 120)                                                                        	 0.00772814	 100       	 0         	 0         	 62.1106   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 120, leftOrthog: 1)                         	 0.00300987	 100       	 19.9344   	 0         	 6.11322   	 3.26087   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 120)  	 0.00243677	 100       	 59.0947   	 0         	 8.66722   	 6.81818   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 120, r: 50, streamingCols: 0)                                    	 0.0017783 	 100       	 7.02918   	 0         	 2.81167   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 120, n: 50, r2new: 1)  	 0.00156762	 100       	 0.765493  	 0         	 6.12497   	 0.124979  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 120, r2: 120)                            	 0.00144245	 100       	 99.8305   	 0         	 14.6418   	 6.81818   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 120)                            	 0.000840416	 100       	 0         	 0         	 11.4229   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 120, n: 50, r: 2, r2: 1)                              	 0.000836653	 100       	 2.86857   	 0         	 17.2133   	 0.166648  
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000765946	 100       	 0.652788  	 0         	 2.61115   	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000745533	 100       	 33.5331   	 0         	 8.04793   	 4.16667   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                    	 0.00050853	 100       	 0         	 0         	 7.86581   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 120)                                                                                                         	 0.000501601	 100       	 0         	 0         	 19.1387   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 120)                                                                          	 0.000445096	 100       	 0         	 0         	 21.5684   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 70)                                                                                                          	 0.000404594	 100       	 0         	 0         	 13.841    	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 70, n: 50, r2: 1)                                                                                                          	 0.000354811	 100       	 0         	 0         	 15.7831   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000327651	 100       	 0.763007  	 0         	 12.2081   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 120, m: 50, fromLeft: 1)                               	 0.000231998	 100       	 0         	 0         	 41.3797   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 5.96518   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 5.96514   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 3.40454   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 3.40336   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 3.11827   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 2.05326   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 2.01022   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 1.25528   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 1.05577   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.955594  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.490994  	 1000      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.355852  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.353683  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.342661  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.253006  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.178766  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.153028  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.127517  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0312058 	 1100      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.0106694 	 1800      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.00906288	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00570118	 6400      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.000987804	 4600      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000840416	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000765946	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000327651	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23399246428032 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23399048931328 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23398847604864 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23398646278400 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23398444951936 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23398243625472 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23398042299008 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23397840972544 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23397639646080 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23397438319616 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23397236993152 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23397035666688 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23396834340224 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23396633013760 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23396431687296 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23396230360832 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23396029034368 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23395827707904 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23395626381440 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23395425054976 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23395223728512 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23395022402048 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23394821075584 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23394619749120 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23394418422656 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23394217096192 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23394015769728 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23393814443264 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23393613116800 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23393411790336 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23393210463872 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23393009137408 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23392807806848 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23392606480384 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23392405153920 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23392203827456 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23392002500992 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23391801174528 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23391599848064 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23391398521600 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23391197195136 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23390995868672 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23390794542208 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23390593215744 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23390391889280 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23390190562816 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23389989236352 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23389787909888 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23389586583424 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23389385256960 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23389183930496 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23388982604032 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23388781277568 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23388579951104 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23388378624640 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23388177298176 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23387975971712 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23387774645248 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23387573318784 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23387371992320 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23387170665856 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23386969339392 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23386768012928 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23399140767488 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23399134177024 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6050, cols: 121, reductionFactor: 37, colBlockingSize: 12)                                 	 1.76623   	 1300      	 133.916   	 0         	 4.3967    	 30.4584   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 121, m: 121)                                                                               	 1.23437   	 700       	 9.37659   	 0         	 0.199815  	 46.9263   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 121, n: 50, r2new: 121)	 0.460398  	 700       	 138.733   	 0         	 13.6685   	 10.1498   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 121, m: 121)                                                                                	 0.359348  	 900       	 5.91592   	 0         	 0.882479  	 6.70375   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 121, n: 50, r: 121, r2: 121)                          	 0.338017  	 700       	 366.873   	 0         	 24.4986   	 14.9752   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6050, r: 121, r2: 121, leftOrthog: 1)                      	 0.315564  	 600       	 336.837   	 0         	 33.8507   	 9.95066   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 6050, Xcols: 121, r: 121, streamingCols: 0)                                 	 0.250866  	 700       	 247.162   	 0         	 32.846    	 7.52488   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 121, reductionFactor: 37, colBlockingSize: 12)                                 	 0.226152  	 200       	 66.4894   	 0         	 2.24374   	 29.6333   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 6050, m: 121)                                                                        	 0.158779  	 700       	 0         	 0         	 51.6374   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 121, m: 6050)                                                                                 	 0.143162  	 700       	 0         	 0         	 57.2705   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 121, r1_: 121, n: 50, r2: 121)                        	 0.111156  	 600       	 956.257   	 0         	 63.8558   	 14.9752   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 121)                                                                                	 0.0590624 	 100       	 4.37955   	 0         	 0.198434  	 22.0705   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                                 	 0.0409644 	 100       	 2.848     	 0         	 0.147445  	 19.3157   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 121, n: 50, r2new: 50) 	 0.0353078 	 100       	 106.789   	 0         	 15.5342   	 6.87445   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 71, n: 50, r2: 71)                                                                                                         	 0.0314243 	 800       	 0         	 0         	 102.667   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6050, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0308386 	 100       	 100.743   	 0         	 7.91217   	 12.7326   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 121, reductionFactor: 37, colBlockingSize: 12)                                   	 0.026772  	 200       	 11.2332   	 0         	 1.23658   	 9.08408   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 121, r2: 121, leftOrthog: 1)                      	 0.0245534 	 100       	 298.146   	 0         	 30.5222   	 9.76815   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 121, r: 121, streamingCols: 0)                                 	 0.0227974 	 100       	 160.555   	 0         	 21.4873   	 7.47209   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 121, n: 50, r: 121, r2: 50)                           	 0.019295  	 100       	 379.399   	 0         	 43.1449   	 8.7936    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6050, r: 50, r2: 50, leftOrthog: 1)                        	 0.0158218 	 100       	 191.191   	 0         	 46.1387   	 4.14384   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 121, r1_: 121, n: 50, r2: 50)                         	 0.011733  	 100       	 623.924   	 0         	 42.2495   	 14.7676   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 121, r1_: 50, n: 50, r2: 121)                         	 0.0106758 	 100       	 685.711   	 0         	 77.9784   	 8.7936    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 121, m: 121, fromLeft: 1)                              	 0.00932708	 800       	 0         	 0         	 20.0926   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 121)                                                                        	 0.00835399	 100       	 0         	 0         	 57.9364   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 121, m: 2500)                                                                                 	 0.00731497	 100       	 0         	 0         	 66.1657   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 121, leftOrthog: 1)                         	 0.00292346	 100       	 20.6946   	 0         	 6.33495   	 3.26674   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 121)  	 0.00242555	 100       	 60.3615   	 0         	 8.81977   	 6.84389   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 121, r: 50, streamingCols: 0)                                    	 0.00162476	 100       	 7.69344   	 0         	 3.07738   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 121, r2: 121)                            	 0.00148279	 100       	 98.7399   	 0         	 14.4274   	 6.84389   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 121, n: 50, r2new: 1)  	 0.0012899 	 100       	 0.938061  	 0         	 7.50573   	 0.124979  
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.00079342	 100       	 0.630183  	 0         	 2.52073   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 121)                            	 0.00078405	 100       	 0         	 0         	 12.3462   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000774339	 100       	 32.2856   	 0         	 7.74854   	 4.16667   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 121, n: 50, r: 2, r2: 1)                              	 0.000608509	 100       	 3.97693   	 0         	 23.8642   	 0.166648  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 121)                                                                                                         	 0.000530669	 100       	 0         	 0         	 18.2411   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 121)                                                                          	 0.000506743	 100       	 0         	 0         	 19.1024   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                    	 0.000497166	 100       	 0         	 0         	 8.0456    	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 71)                                                                                                          	 0.000419082	 100       	 0         	 0         	 13.5534   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 71, n: 50, r2: 1)                                                                                                          	 0.000374232	 100       	 0         	 0         	 15.1778   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000323266	 100       	 0.773357  	 0         	 12.3737   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 121, m: 50, fromLeft: 1)                               	 0.000255924	 100       	 0         	 0         	 37.8237   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 6.05306   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 6.05301   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 3.46684   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 3.46564   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 3.25145   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 2.07098   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 2.04999   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 1.3344    	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 1.0676    	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.983454  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.499421  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.359403  	 1000      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.359348  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.358863  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.275288  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.16764   	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.150974  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.134339  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0327483 	 1100      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.009583  	 900       
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.00919531	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00456444	 6400      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00106591	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.00079342	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.00078405	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000323266	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23102552500096 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23102360643584 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23102159317120 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23101957990656 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23101756664192 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23101555337728 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23101354011264 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23101152684800 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23100951358336 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23100750031872 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23100548705408 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23100347378944 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23100146052480 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23099944726016 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23099743399552 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23099542073088 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23099340746624 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23099139420160 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23098938093696 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23098736767232 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23098535440768 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23098334114304 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23098132787840 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23097931461376 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23097730134912 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23097528808448 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23097327481984 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23097126155520 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23096924829056 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23096723502592 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23096522176128 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23096320849664 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23096119519104 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23095918192640 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23095716866176 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23095515539712 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23095314213248 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23095112886784 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23094911560320 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23094710233856 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23094508907392 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23094307580928 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23094106254464 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23093904928000 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23093703601536 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23093502275072 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23093300948608 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23093099622144 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23092898295680 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23092696969216 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23092495642752 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23092294316288 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23092092989824 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23091891663360 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23091690336896 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23091489010432 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23091287683968 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23091086357504 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23090885031040 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23090683704576 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23090482378112 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23090281051648 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23090079725184 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23102446839552 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23102440249088 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6100, cols: 122, reductionFactor: 37, colBlockingSize: 12)                                 	 1.78653   	 1300      	 135.705   	 0         	 4.4189    	 30.7101   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 122, m: 122)                                                                               	 1.24169   	 700       	 9.55437   	 0         	 0.20193   	 47.3152   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 122, n: 50, r2new: 122)	 0.469604  	 700       	 139.738   	 0         	 13.6336   	 10.2495   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 122, m: 122)                                                                                	 0.369256  	 900       	 5.9011    	 0         	 0.873033  	 6.75931   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 122, n: 50, r: 122, r2: 122)                          	 0.349746  	 700       	 363.433   	 0         	 24.07     	 15.099    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6100, r: 122, r2: 122, leftOrthog: 1)                      	 0.311477  	 600       	 349.788   	 0         	 34.8641   	 10.0329   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 6100, Xcols: 122, r: 122, streamingCols: 0)                                 	 0.260229  	 700       	 244.226   	 0         	 32.1898   	 7.58706   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 122, reductionFactor: 37, colBlockingSize: 12)                                 	 0.229538  	 200       	 66.5957   	 0         	 2.22975   	 29.8668   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 6100, m: 122)                                                                        	 0.22375   	 700       	 0         	 0         	 37.2515   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 122, m: 6100)                                                                                 	 0.158362  	 700       	 0         	 0         	 52.6329   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 122, r1_: 122, n: 50, r2: 122)                        	 0.114877  	 600       	 948.416   	 0         	 62.8132   	 15.099    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 122)                                                                                	 0.0587348 	 100       	 4.43803   	 0         	 0.200903  	 22.0904   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                                 	 0.0406342 	 100       	 2.87115   	 0         	 0.148643  	 19.3157   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 122, n: 50, r2new: 50) 	 0.0360224 	 100       	 106.656   	 0         	 15.4415   	 6.90709   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 72, n: 50, r2: 72)                                                                                                         	 0.0315747 	 800       	 0         	 0         	 105.077   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6100, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0302047 	 100       	 103.707   	 0         	 8.14442   	 12.7335   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 122, reductionFactor: 37, colBlockingSize: 12)                                   	 0.0272806 	 200       	 11.2067   	 0         	 1.23071   	 9.10591   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 122, r2: 122, leftOrthog: 1)                      	 0.0253238 	 100       	 293.874   	 0         	 29.846    	 9.84633   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 122, r: 122, streamingCols: 0)                                 	 0.0228784 	 100       	 162.643   	 0         	 21.5904   	 7.5331    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 122, n: 50, r: 122, r2: 50)                           	 0.0190039 	 100       	 391.603   	 0         	 44.4245   	 8.81503   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6100, r: 50, r2: 50, leftOrthog: 1)                        	 0.0159745 	 100       	 190.929   	 0         	 46.0734   	 4.14402   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 122, r1_: 122, n: 50, r2: 50)                         	 0.0116942 	 100       	 636.384   	 0         	 42.7483   	 14.8868   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 122, r1_: 50, n: 50, r2: 122)                         	 0.0106318 	 100       	 699.977   	 0         	 79.4072   	 8.81503   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 122, m: 122, fromLeft: 1)                              	 0.00979306	 800       	 0         	 0         	 19.4541   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 122)                                                                        	 0.00952561	 100       	 0         	 0         	 51.2303   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 122, m: 2500)                                                                                 	 0.00715802	 100       	 0         	 0         	 68.1752   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 122, leftOrthog: 1)                         	 0.00288233	 100       	 21.1634   	 0         	 6.46699   	 3.27253   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 122)  	 0.00248475	 100       	 59.9014   	 0         	 8.72008   	 6.86937   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 122, r: 50, streamingCols: 0)                                    	 0.00161629	 100       	 7.73375   	 0         	 3.0935    	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 122, r2: 122)                            	 0.00150387	 100       	 98.9716   	 0         	 14.4077   	 6.86937   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 122, n: 50, r2new: 1)  	 0.00147612	 100       	 0.826492  	 0         	 6.61302   	 0.12498   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000857938	 100       	 0.582793  	 0         	 2.33117   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 122)                            	 0.000811126	 100       	 0         	 0         	 12.0327   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000774947	 100       	 32.2603   	 0         	 7.74246   	 4.16667   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 122, n: 50, r: 2, r2: 1)                              	 0.000743469	 100       	 3.28191   	 0         	 19.6936   	 0.166648  
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 122)                                                                          	 0.000528095	 100       	 0         	 0         	 18.4815   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                    	 0.000509717	 100       	 0         	 0         	 7.84749   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 122)                                                                                                         	 0.000495542	 100       	 0         	 0         	 19.6956   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 72)                                                                                                          	 0.000401587	 100       	 0         	 0         	 14.3431   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 72, n: 50, r2: 1)                                                                                                          	 0.000368305	 100       	 0         	 0         	 15.6392   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.00032492	 100       	 0.76942   	 0         	 12.3107   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 122, m: 50, fromLeft: 1)                               	 0.000232747	 100       	 0         	 0         	 41.9339   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 6.3077    	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 6.30767   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 3.59033   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 3.58904   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 3.2922    	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 2.19056   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 2.07355   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 1.34106   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 1.08328   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.99133   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.509587  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.370997  	 1000      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.369256  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.355657  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.284724  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.233804  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.16603   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.137978  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0328401 	 1100      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.0143622 	 1800      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0100258 	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00540576	 6400      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00104525	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000857938	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000811126	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.00032492	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22737921628032 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22737691076608 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22737489750144 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22737288423680 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22737087097216 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22736885770752 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22736684444288 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22736483117824 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22736281791360 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22736080464896 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22735879138432 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22735677811968 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22735476485504 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22735275159040 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22735073832576 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22734872506112 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22734671179648 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22734469853184 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22734268526720 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22734067200256 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22733865873792 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22733664547328 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22733463220864 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22733261894400 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22733060567936 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22732859241472 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22732657915008 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22732456588544 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22732255262080 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22732053935616 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22731852609152 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22731651282688 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22731449952128 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22731248625664 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22731047299200 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22730845972736 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22730644646272 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22730443319808 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22730241993344 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22730040666880 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22729839340416 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22729638013952 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22729436687488 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22729235361024 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22729034034560 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22728832708096 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22728631381632 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22728430055168 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22728228728704 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22728027402240 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22727826075776 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22727624749312 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22727423422848 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22727222096384 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22727020769920 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22726819443456 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22726618116992 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22726416790528 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22726215464064 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22726014137600 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22725812811136 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22725611484672 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22725410158208 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22737815967488 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22737809377024 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6150, cols: 123, reductionFactor: 36, colBlockingSize: 12)                                 	 1.78805   	 1300      	 139.052   	 0         	 4.4878    	 30.9845   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 123, m: 123)                                                                               	 1.26832   	 700       	 9.58567   	 0         	 0.20094   	 47.7041   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 123, n: 50, r2new: 123)	 0.466887  	 700       	 144.377   	 0         	 13.9498   	 10.3498   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 123, m: 123)                                                                                	 0.375106  	 900       	 5.95309   	 0         	 0.873545  	 6.81486   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 123, n: 50, r: 123, r2: 123)                          	 0.341073  	 700       	 381.915   	 0         	 25.0884   	 15.2228   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6150, r: 123, r2: 123, leftOrthog: 1)                      	 0.322599  	 600       	 346.101   	 0         	 34.2162   	 10.1151   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 6150, Xcols: 123, r: 123, streamingCols: 0)                                 	 0.261764  	 700       	 248.814   	 0         	 32.5278   	 7.64925   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 123, reductionFactor: 36, colBlockingSize: 12)                                 	 0.2313    	 200       	 67.2256   	 0         	 2.23176   	 30.1222   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 6150, m: 123)                                                                        	 0.191605  	 700       	 0         	 0         	 44.2171   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 123, m: 6150)                                                                                 	 0.171733  	 700       	 0         	 0         	 49.3336   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 123, r1_: 123, n: 50, r2: 123)                        	 0.118676  	 600       	 940.814   	 0         	 61.8031   	 15.2228   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 123)                                                                                	 0.0594691 	 100       	 4.41686   	 0         	 0.199767  	 22.11     
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                                 	 0.0422025 	 100       	 2.76445   	 0         	 0.143119  	 19.3157   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 123, n: 50, r2new: 50) 	 0.0362769 	 100       	 107.906   	 0         	 15.5493   	 6.93962   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 123, r: 123, streamingCols: 0)                                 	 0.0353541 	 100       	 106.982   	 0         	 14.0875   	 7.59409   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 73, n: 50, r2: 73)                                                                                                         	 0.0311518 	 800       	 0         	 0         	 109.482   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 123, reductionFactor: 36, colBlockingSize: 12)                                   	 0.0301077 	 200       	 10.3291   	 0         	 1.13082   	 9.13415   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6150, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0291773 	 100       	 108.238   	 0         	 8.49975   	 12.7343   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 123, r2: 123, leftOrthog: 1)                      	 0.0245482 	 100       	 308.148   	 0         	 31.0493   	 9.92448   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 123, n: 50, r: 123, r2: 50)                           	 0.0193273 	 100       	 391.389   	 0         	 44.2937   	 8.83621   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6150, r: 50, r2: 50, leftOrthog: 1)                        	 0.0192094 	 100       	 160.078   	 0         	 38.6269   	 4.1442    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 123, r1_: 123, n: 50, r2: 50)                         	 0.0116248 	 100       	 650.722   	 0         	 43.3646   	 15.0059   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 123, r1_: 50, n: 50, r2: 123)                         	 0.0109221 	 100       	 692.588   	 0         	 78.3807   	 8.83621   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 123, m: 123, fromLeft: 1)                              	 0.00977804	 800       	 0         	 0         	 19.8047   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 123)                                                                        	 0.00874197	 100       	 0         	 0         	 56.2802   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 123, m: 2500)                                                                                 	 0.00759913	 100       	 0         	 0         	 64.7442   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 123, leftOrthog: 1)                         	 0.00332373	 100       	 18.5033   	 0         	 5.64426   	 3.27825   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 123)  	 0.00263436	 100       	 57.4296   	 0         	 8.32962   	 6.89462   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 123, r: 50, streamingCols: 0)                                    	 0.00158219	 100       	 7.90045   	 0         	 3.16018   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 123, r2: 123)                            	 0.00148856	 100       	 101.635   	 0         	 14.7412   	 6.89462   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 123, n: 50, r2new: 1)  	 0.00127863	 100       	 0.96197   	 0         	 7.69701   	 0.12498   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 123)                            	 0.000991226	 100       	 0         	 0         	 9.9271    	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000763928	 100       	 0.654512  	 0         	 2.61805   	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000759313	 100       	 32.9245   	 0         	 7.90188   	 4.16667   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 123, n: 50, r: 2, r2: 1)                              	 0.000580518	 100       	 4.23759   	 0         	 25.4283   	 0.166649  
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 123)                                                                          	 0.000534472	 100       	 0         	 0         	 18.4107   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 123)                                                                                                         	 0.000527684	 100       	 0         	 0         	 18.6475   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                    	 0.000480412	 100       	 0         	 0         	 8.32619   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 73)                                                                                                          	 0.00040736	 100       	 0         	 0         	 14.3362   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 73, n: 50, r2: 1)                                                                                                          	 0.00036402	 100       	 0         	 0         	 16.0431   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000327346	 100       	 0.763718  	 0         	 12.2195   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 123, m: 50, fromLeft: 1)                               	 0.000242568	 100       	 0         	 0         	 40.5659   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 6.44234   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 6.44231   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 3.7202    	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 3.71903   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 3.36056   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 2.1984    	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 2.07864   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 1.36999   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 1.08929   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 0.990387  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.507077  	 1000      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.375106  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.369681  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.362469  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.2987    	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.200882  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.179813  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.141982  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0324509 	 1100      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.0150239 	 1800      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0100206 	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00635731	 6400      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00104628	 4600      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000991226	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000763928	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000327346	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23375020619648 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23374822631424 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23374621304960 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23374419978496 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23374218652032 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23374017325568 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23373815999104 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23373614672640 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23373413346176 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23373212019712 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23373010693248 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23372809366784 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23372608040320 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23372406713856 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23372205387392 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23372004060928 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23371802734464 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23371601408000 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23371400081536 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23371198755072 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23370997428608 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23370796102144 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23370594775680 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23370393449216 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23370192122752 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23369990796288 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23369789469824 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23369588143360 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23369386816896 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23369185490432 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23368984163968 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23368782837504 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23368581506944 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23368380180480 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23368178854016 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23367977527552 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23367776201088 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23367574874624 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23367373548160 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23367172221696 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23366970895232 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23366769568768 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23366568242304 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23366366915840 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23366165589376 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23365964262912 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23365762936448 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23365561609984 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23365360283520 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23365158957056 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23364957630592 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23364756304128 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23364554977664 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23364353651200 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23364152324736 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23363950998272 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23363749671808 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23363548345344 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23363347018880 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23363145692416 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23362944365952 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23362743039488 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23362541713024 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23374914959104 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23374908368640 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6200, cols: 124, reductionFactor: 36, colBlockingSize: 12)                                 	 1.83234   	 1300      	 139.028   	 0         	 4.45082   	 31.2364   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 124, m: 124)                                                                               	 1.27086   	 700       	 9.80171   	 0         	 0.203808  	 48.0929   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 124, n: 50, r2new: 124)	 0.478151  	 700       	 144.79    	 0         	 13.8548   	 10.4506   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 124, m: 124)                                                                                	 0.377698  	 900       	 6.05762   	 0         	 0.881696  	 6.87042   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 124, n: 50, r: 124, r2: 124)                          	 0.352333  	 700       	 378.8     	 0         	 24.6831   	 15.3465   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6200, r: 124, r2: 124, leftOrthog: 1)                      	 0.325642  	 600       	 351.298   	 0         	 34.4498   	 10.1974   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 6200, Xcols: 124, r: 124, streamingCols: 0)                                 	 0.265985  	 700       	 250.886   	 0         	 32.5343   	 7.71144   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 124, reductionFactor: 36, colBlockingSize: 12)                                 	 0.232673  	 200       	 67.9198   	 0         	 2.23748   	 30.3555   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 124, m: 6200)                                                                                 	 0.182149  	 700       	 0         	 0         	 47.2722   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 6200, m: 124)                                                                        	 0.153208  	 700       	 0         	 0         	 56.2016   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 124, r1_: 124, n: 50, r2: 124)                        	 0.118142  	 600       	 968.303   	 0         	 63.0958   	 15.3465   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 124)                                                                                	 0.0597506 	 100       	 4.42952   	 0         	 0.200165  	 22.1293   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                                 	 0.041245  	 100       	 2.82862   	 0         	 0.146442  	 19.3157   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 124, n: 50, r2new: 50) 	 0.0377654 	 100       	 105.599   	 0         	 15.1461   	 6.97203   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 74, n: 50, r2: 74)                                                                                                         	 0.0324093 	 800       	 0         	 0         	 108.137   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 124, reductionFactor: 36, colBlockingSize: 12)                                   	 0.0293053 	 200       	 10.7852   	 0         	 1.178     	 9.15549   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6200, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0287013 	 100       	 110.928   	 0         	 8.7104    	 12.7351   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 124, r2: 124, leftOrthog: 1)                      	 0.0248183 	 100       	 309.771   	 0         	 30.9691   	 10.0026   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 124, r: 124, streamingCols: 0)                                 	 0.0236911 	 100       	 162.255   	 0         	 21.1958   	 7.65508   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 124, n: 50, r: 124, r2: 50)                           	 0.0197579 	 100       	 389.11    	 0         	 43.9318   	 8.85714   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6200, r: 50, r2: 50, leftOrthog: 1)                        	 0.0168489 	 100       	 183.988   	 0         	 44.3946   	 4.14439   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 124, r1_: 124, n: 50, r2: 50)                         	 0.0116248 	 100       	 661.346   	 0         	 43.7256   	 15.1249   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 124, r1_: 50, n: 50, r2: 124)                         	 0.011205  	 100       	 686.12    	 0         	 77.4652   	 8.85714   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 124, m: 124, fromLeft: 1)                              	 0.00983433	 800       	 0         	 0         	 20.0128   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 124, m: 2500)                                                                                 	 0.00888476	 100       	 0         	 0         	 55.8259   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 124)                                                                        	 0.00818776	 100       	 0         	 0         	 60.5782   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 124, leftOrthog: 1)                         	 0.00300091	 100       	 20.6604   	 0         	 6.29142   	 3.2839    
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 124)  	 0.0024609 	 100       	 62.4813   	 0         	 9.02955   	 6.91964   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 124, r: 50, streamingCols: 0)                                    	 0.00163015	 100       	 7.66799   	 0         	 3.06719   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 124, n: 50, r2new: 1)  	 0.00158372	 100       	 0.782965  	 0         	 6.26473   	 0.12498   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 124, r2: 124)                            	 0.00152219	 100       	 101.012   	 0         	 14.5979   	 6.91964   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 124)                                                                          	 0.000954825	 100       	 0         	 0         	 10.3893   	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000795103	 100       	 0.628849  	 0         	 2.5154    	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 124)                            	 0.000788248	 100       	 0         	 0         	 12.5849   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 124, n: 50, r: 2, r2: 1)                              	 0.000762735	 100       	 3.25146   	 0         	 19.5108   	 0.166649  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000754698	 100       	 33.1258   	 0         	 7.9502    	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 124)                                                                                                         	 0.00051444	 100       	 0         	 0         	 19.2831   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                    	 0.000505085	 100       	 0         	 0         	 7.91946   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 74)                                                                                                          	 0.000425918	 100       	 0         	 0         	 13.8994   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000357951	 100       	 0.69842   	 0         	 11.1747   	 0.0625    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 74, n: 50, r2: 1)                                                                                                          	 0.000357947	 100       	 0         	 0         	 16.5388   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 124, m: 50, fromLeft: 1)                               	 0.000243713	 100       	 0         	 0         	 40.7036   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 6.47338   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 6.47334   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 3.73824   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 3.73701   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 3.39517   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 2.19566   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 2.12302   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 1.37186   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 1.10849   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 1.01576   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.519961  	 1000      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.377698  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.374376  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.370311  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.291306  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.191539  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.162351  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.141727  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0337076 	 1100      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.0118817 	 1800      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.010078  	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00643412	 6400      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00108137	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000795103	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000788248	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000357951	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22462150494080 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22461940754432 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22461739427968 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22461538101504 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22461336775040 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22461135448576 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22460934122112 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22460732795648 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22460531469184 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22460330142720 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22460128816256 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22459927489792 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22459726163328 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22459524836864 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22459323510400 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22459122183936 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22458920857472 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22458719531008 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22458518204544 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22458316878080 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22458115551616 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22457914225152 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22457712898688 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22457511572224 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22457310245760 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22457108919296 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22456907592832 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22456706266368 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22456504939904 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22456303613440 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22456102286976 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22455900960512 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22455699629952 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22455498303488 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22455296977024 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22455095650560 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22454894324096 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22454692997632 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22454491671168 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22454290344704 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22454089018240 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22453887691776 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22453686365312 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22453485038848 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22453283712384 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22453082385920 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22452881059456 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22452679732992 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22452478406528 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22452277080064 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22452075753600 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22451874427136 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22451673100672 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22451471774208 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22451270447744 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22451069121280 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22450867794816 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22450666468352 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22450465141888 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22450263815424 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22450062488960 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22449861162496 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22449659836032 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22462044833536 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22462038243072 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6250, cols: 125, reductionFactor: 36, colBlockingSize: 12)                                 	 1.83344   	 1300      	 142.333   	 0         	 4.52019   	 31.4883   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 125, m: 125)                                                                               	 1.31377   	 700       	 9.71283   	 0         	 0.20034   	 48.4818   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 125, n: 50, r2new: 125)	 0.477789  	 700       	 148.797   	 0         	 14.1014   	 10.5519   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 125, m: 125)                                                                                	 0.392416  	 900       	 5.97262   	 0         	 0.862351  	 6.92597   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 125, n: 50, r: 125, r2: 125)                          	 0.352207  	 700       	 388.177   	 0         	 25.0918   	 15.4703   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6250, r: 125, r2: 125, leftOrthog: 1)                      	 0.319679  	 600       	 366.579   	 0         	 35.6608   	 10.2796   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 6250, Xcols: 125, r: 125, streamingCols: 0)                                 	 0.278213  	 700       	 245.709   	 0         	 31.608    	 7.77363   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 125, reductionFactor: 36, colBlockingSize: 12)                                 	 0.235045  	 200       	 68.3232   	 0         	 2.23361   	 30.5886   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 125, m: 6250)                                                                                 	 0.1635    	 700       	 0         	 0         	 53.5168   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 6250, m: 125)                                                                        	 0.156336  	 700       	 0         	 0         	 55.9691   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 125, r1_: 125, n: 50, r2: 125)                        	 0.130023  	 600       	 901.283   	 0         	 58.2589   	 15.4703   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 125)                                                                                	 0.0611869 	 100       	 4.35823   	 0         	 0.196774  	 22.1484   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                                 	 0.0414008 	 100       	 2.81798   	 0         	 0.145891  	 19.3157   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 125, n: 50, r2new: 50) 	 0.0360052 	 100       	 112.831   	 0         	 16.1088   	 7.00431   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 75, n: 50, r2: 75)                                                                                                         	 0.031928  	 800       	 0         	 0         	 112.754   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6250, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0301501 	 100       	 106.449   	 0         	 8.35818   	 12.736    
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 125, reductionFactor: 36, colBlockingSize: 12)                                   	 0.0290405 	 200       	 11.0597   	 0         	 1.20521   	 9.17659   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 125, r2: 125, leftOrthog: 1)                      	 0.02583   	 100       	 302.459   	 0         	 30.0039   	 10.0806   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 125, r: 125, streamingCols: 0)                                 	 0.0236075 	 100       	 165.467   	 0         	 21.4445   	 7.71605   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 125, n: 50, r: 125, r2: 50)                           	 0.0200292 	 100       	 390.055   	 0         	 43.9358   	 8.87784   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6250, r: 50, r2: 50, leftOrthog: 1)                        	 0.0146856 	 100       	 212.793   	 0         	 51.3428   	 4.14456   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 125, r1_: 125, n: 50, r2: 50)                         	 0.0130386 	 100       	 599.182   	 0         	 39.3064   	 15.2439   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 125, r1_: 50, n: 50, r2: 125)                         	 0.0103354 	 100       	 755.898   	 0         	 85.1444   	 8.87784   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 125, m: 125, fromLeft: 1)                              	 0.0100696 	 800       	 0         	 0         	 19.8618   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 125)                                                                        	 0.00797179	 100       	 0         	 0         	 62.7212   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 125, m: 2500)                                                                                 	 0.00757817	 100       	 0         	 0         	 65.979    	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 125, n: 50, r2new: 1)  	 0.00395697	 100       	 0.315898  	 0         	 2.52759   	 0.12498   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 125, leftOrthog: 1)                         	 0.00346015	 100       	 18.0628   	 0         	 5.4911    	 3.28947   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 125)  	 0.00258791	 100       	 60.377    	 0         	 8.69428   	 6.94444   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 125, r2: 125)                            	 0.00159598	 100       	 97.902    	 0         	 14.0979   	 6.94444   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 125, r: 50, streamingCols: 0)                                    	 0.001498  	 100       	 8.34445   	 0         	 3.33778   	 2.5       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 125)                            	 0.000844587	 100       	 0         	 0         	 11.8401   	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000802374	 100       	 0.623151  	 0         	 2.4926    	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000758421	 100       	 32.9632   	 0         	 7.91117   	 4.16667   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 125, n: 50, r: 2, r2: 1)                              	 0.00062554	 100       	 3.99655   	 0         	 23.9818   	 0.166649  
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 125)                                                                          	 0.000531035	 100       	 0         	 0         	 18.8312   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 125)                                                                                                         	 0.000522341	 100       	 0         	 0         	 19.1446   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                    	 0.000494346	 100       	 0         	 0         	 8.0915    	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 75)                                                                                                          	 0.000447179	 100       	 0         	 0         	 13.4174   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 75, n: 50, r2: 1)                                                                                                          	 0.00035981	 100       	 0         	 0         	 16.6755   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.00032588	 100       	 0.767154  	 0         	 12.2745   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 125, m: 50, fromLeft: 1)                               	 0.000242521	 100       	 0         	 0         	 41.2335   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 6.49302   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 6.49298   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 3.74278   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 3.74157   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 3.43321   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 2.20106   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 2.12768   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 1.41636   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 1.1156    	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 1.01318   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.520339  	 1000      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.392416  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.374458  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.363655  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.303319  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.171572  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.164839  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.154155  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0332573 	 1100      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.0119017 	 1800      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0103121 	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00572931	 6400      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00116918	 4600      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000844587	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000802374	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.00032588	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23392288880512 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23392069609472 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23391868283008 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23391666956544 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23391465630080 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23391264303616 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23391062977152 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23390861650688 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23390660324224 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23390458997760 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23390257671296 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23390056344832 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23389855018368 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23389653691904 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23389452365440 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23389251038976 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23389049712512 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23388848386048 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23388647059584 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23388445733120 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23388244406656 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23388043080192 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23387841753728 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23387640427264 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23387439100800 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23387237774336 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23387036447872 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23386835121408 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23386633794944 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23386432468480 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23386231142016 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23386029815552 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23385828484992 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23385627158528 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23385425832064 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23385224505600 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23385023179136 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23384821852672 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23384620526208 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23384419199744 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23384217873280 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23384016546816 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23383815220352 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23383613893888 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23383412567424 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23383211240960 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23383009914496 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23382808588032 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23382607261568 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23382405935104 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23382204608640 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23382003282176 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23381801955712 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23381600629248 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23381399302784 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23381197976320 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23380996649856 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23380795323392 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23380593996928 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23380392670464 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23380191344000 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23379990017536 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23379788691072 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23392183219968 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23392176629504 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6300, cols: 126, reductionFactor: 36, colBlockingSize: 12)                                 	 1.85396   	 1300      	 144.163   	 0         	 4.54198   	 31.7402   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 126, m: 126)                                                                               	 1.30061   	 700       	 10.0484   	 0         	 0.205612  	 48.8707   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 126, n: 50, r2new: 126)	 0.48679   	 700       	 149.95    	 0         	 14.0748   	 10.6538   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 126, m: 126)                                                                                	 0.392355  	 900       	 6.11807   	 0         	 0.876322  	 6.98153   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 126, n: 50, r: 126, r2: 126)                          	 0.358917  	 700       	 390.135   	 0         	 25.0182   	 15.5941   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6300, r: 126, r2: 126, leftOrthog: 1)                      	 0.331346  	 600       	 362.227   	 0         	 34.9578   	 10.3618   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 6300, Xcols: 126, r: 126, streamingCols: 0)                                 	 0.283451  	 700       	 247.003   	 0         	 31.5222   	 7.83582   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 126, reductionFactor: 36, colBlockingSize: 12)                                 	 0.239256  	 200       	 68.1988   	 0         	 2.2127    	 30.8216   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 6300, m: 126)                                                                        	 0.180456  	 700       	 0         	 0         	 49.2672   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 126, m: 6300)                                                                                 	 0.169337  	 700       	 0         	 0         	 52.5021   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 126, r1_: 126, n: 50, r2: 126)                        	 0.125949  	 600       	 952.945   	 0         	 61.1095   	 15.5941   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 126)                                                                                	 0.0630218 	 100       	 4.26308   	 0         	 0.192314  	 22.1672   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                                 	 0.0420931 	 100       	 2.77164   	 0         	 0.143492  	 19.3157   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 126, n: 50, r2new: 50) 	 0.0393041 	 100       	 105.282   	 0         	 14.9623   	 7.03646   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 76, n: 50, r2: 76)                                                                                                         	 0.0336907 	 800       	 0         	 0         	 109.723   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6300, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0286603 	 100       	 112.878   	 0         	 8.86242   	 12.7368   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 126, reductionFactor: 36, colBlockingSize: 12)                                   	 0.0281595 	 200       	 11.589    	 0         	 1.26002   	 9.19744   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 126, r2: 126, leftOrthog: 1)                      	 0.0260727 	 100       	 304.456   	 0         	 29.9701   	 10.1587   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 126, r: 126, streamingCols: 0)                                 	 0.0244115 	 100       	 162.587   	 0         	 20.9061   	 7.77701   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 126, n: 50, r: 126, r2: 50)                           	 0.0209787 	 100       	 378.383   	 0         	 42.523    	 8.89831   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6300, r: 50, r2: 50, leftOrthog: 1)                        	 0.0166067 	 100       	 189.683   	 0         	 45.7647   	 4.14474   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 126, r1_: 126, n: 50, r2: 50)                         	 0.0126089 	 100       	 629.557   	 0         	 40.9792   	 15.3629   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 126, r1_: 50, n: 50, r2: 126)                         	 0.0113984 	 100       	 696.416   	 0         	 78.2639   	 8.89831   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 126, m: 126, fromLeft: 1)                              	 0.010039  	 800       	 0         	 0         	 20.2424   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 126)                                                                        	 0.00831161	 100       	 0         	 0         	 60.638    	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 126, m: 2500)                                                                                 	 0.00765859	 100       	 0         	 0         	 65.8085   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 126, leftOrthog: 1)                         	 0.00286665	 100       	 21.9769   	 0         	 6.66981   	 3.29498   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 126)  	 0.00253197	 100       	 62.7022   	 0         	 8.99727   	 6.96903   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 126, r: 50, streamingCols: 0)                                    	 0.00161135	 100       	 7.75748   	 0         	 3.10299   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 126, r2: 126)                            	 0.00154531	 100       	 102.737   	 0         	 14.7419   	 6.96903   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 126, n: 50, r2new: 1)  	 0.0014927 	 100       	 0.844108  	 0         	 6.75394   	 0.12498   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 126)                            	 0.00083205	 100       	 0         	 0         	 12.1147   	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000803543	 100       	 0.622244  	 0         	 2.48898   	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000762124	 100       	 32.8031   	 0         	 7.87273   	 4.16667   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 126, n: 50, r: 2, r2: 1)                              	 0.000709851	 100       	 3.55004   	 0         	 21.3025   	 0.166649  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 126)                                                                                                         	 0.000513907	 100       	 0         	 0         	 19.6144   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                    	 0.000503983	 100       	 0         	 0         	 7.93678   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 126)                                                                          	 0.000480578	 100       	 0         	 0         	 20.9747   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 76)                                                                                                          	 0.000437957	 100       	 0         	 0         	 13.8826   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 76, n: 50, r2: 1)                                                                                                          	 0.000371044	 100       	 0         	 0         	 16.3862   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000344269	 100       	 0.726176  	 0         	 11.6188   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 126, m: 50, fromLeft: 1)                               	 0.000241122	 100       	 0         	 0         	 41.8046   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 6.61771   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 6.61768   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 3.8193    	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 3.81808   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 3.46803   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 2.25184   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 2.15003   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 1.40573   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 1.11935   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 1.03171   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.530118  	 1000      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.392355  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.382151  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.376892  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.309474  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.189248  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.1775    	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.150718  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0350136 	 1100      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.015776  	 1800      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0102801 	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00608811	 6400      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00109208	 4600      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.00083205	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000803543	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000344269	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23119840446336 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23119607621632 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23119406295168 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23119204968704 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23119003642240 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23118802315776 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23118600989312 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23118399662848 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23118198336384 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23117997009920 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23117795683456 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23117594356992 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23117393030528 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23117191704064 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23116990377600 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23116789051136 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23116587724672 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23116386398208 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23116185071744 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23115983745280 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23115782418816 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23115581092352 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23115379765888 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23115178439424 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23114977112960 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23114775786496 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23114574460032 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23114373133568 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23114171807104 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23113970480640 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23113769154176 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23113567827712 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23113366497152 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23113165170688 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23112963844224 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23112762517760 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23112561191296 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23112359864832 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23112158538368 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23111957211904 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23111755885440 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23111554558976 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23111353232512 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23111151906048 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23110950579584 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23110749253120 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23110547926656 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23110346600192 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23110145273728 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23109943947264 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23109742620800 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23109541294336 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23109339967872 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23109138641408 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23108937314944 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23108735988480 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23108534662016 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23108333335552 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23108132009088 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23107930682624 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23107729356160 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23107528029696 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23107326703232 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23119734785792 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23119728195328 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6350, cols: 127, reductionFactor: 35, colBlockingSize: 12)                                 	 1.88545   	 1300      	 145.27    	 0         	 4.5373    	 32.0168   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 127, m: 127)                                                                               	 1.31334   	 700       	 10.1899   	 0         	 0.206861  	 49.2596   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 127, n: 50, r2new: 127)	 0.492142  	 700       	 152.261   	 0         	 14.1556   	 10.7562   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 127, m: 127)                                                                                	 0.395942  	 900       	 6.20812   	 0         	 0.882201  	 7.03708   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 127, n: 50, r: 127, r2: 127)                          	 0.361015  	 700       	 397.177   	 0         	 25.2692   	 15.7178   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6350, r: 127, r2: 127, leftOrthog: 1)                      	 0.332963  	 600       	 369.119   	 0         	 35.3424   	 10.4441   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 6350, Xcols: 127, r: 127, streamingCols: 0)                                 	 0.274675  	 700       	 261.012   	 0         	 33.0478   	 7.89801   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 127, reductionFactor: 35, colBlockingSize: 12)                                 	 0.238268  	 200       	 69.6266   	 0         	 2.24036   	 31.0784   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 6350, m: 127)                                                                        	 0.199763  	 700       	 0         	 0         	 45.2147   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 127, m: 6350)                                                                                 	 0.159527  	 700       	 0         	 0         	 56.6189   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 127, r1_: 127, n: 50, r2: 127)                        	 0.128235  	 600       	 958.421   	 0         	 60.9767   	 15.7178   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 127)                                                                                	 0.0625729 	 100       	 4.32562   	 0         	 0.194973  	 22.1858   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                                 	 0.0422856 	 100       	 2.75902   	 0         	 0.142838  	 19.3157   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 127, n: 50, r2new: 50) 	 0.0368082 	 100       	 114.499   	 0         	 16.1986   	 7.06846   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 77, n: 50, r2: 77)                                                                                                         	 0.0327869 	 800       	 0         	 0         	 115.734   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6350, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0303874 	 100       	 107.308   	 0         	 8.42453   	 12.7375   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 127, reductionFactor: 35, colBlockingSize: 12)                                   	 0.0293787 	 200       	 11.2938   	 0         	 1.22423   	 9.22518   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 127, r2: 127, leftOrthog: 1)                      	 0.0263174 	 100       	 306.432   	 0         	 29.9348   	 10.2367   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 127, r: 127, streamingCols: 0)                                 	 0.0245211 	 100       	 164.44    	 0         	 20.98     	 7.83796   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 127, n: 50, r: 127, r2: 50)                           	 0.0200844 	 100       	 401.532   	 0         	 45.0221   	 8.91854   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6350, r: 50, r2: 50, leftOrthog: 1)                        	 0.0161369 	 100       	 196.755   	 0         	 47.469    	 4.14491   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 127, r1_: 127, n: 50, r2: 50)                         	 0.0122159 	 100       	 660.162   	 0         	 42.6413   	 15.4818   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 127, r1_: 50, n: 50, r2: 127)                         	 0.0120052 	 100       	 671.75    	 0         	 75.3207   	 8.91854   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 127, m: 127, fromLeft: 1)                              	 0.0105841 	 800       	 0         	 0         	 19.5057   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 127)                                                                        	 0.00902951	 100       	 0         	 0         	 56.26     	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 127, m: 2500)                                                                                 	 0.00788068	 100       	 0         	 0         	 64.4615   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 127, leftOrthog: 1)                         	 0.00352887	 100       	 17.9944   	 0         	 5.45217   	 3.30042   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 127)  	 0.00255909	 100       	 63.0262   	 0         	 9.01225   	 6.99339   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 127, r: 50, streamingCols: 0)                                    	 0.00160705	 100       	 7.7782    	 0         	 3.11128   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 127, r2: 127)                            	 0.00154824	 100       	 104.176   	 0         	 14.8964   	 6.99339   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 127, n: 50, r2new: 1)  	 0.00136504	 100       	 0.930376  	 0         	 7.44418   	 0.12498   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000886297	 100       	 0.564145  	 0         	 2.25658   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 127)                            	 0.000846735	 100       	 0         	 0         	 11.999    	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000813063	 100       	 30.7479   	 0         	 7.3795    	 4.16667   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 127, n: 50, r: 2, r2: 1)                              	 0.000664225	 100       	 3.82401   	 0         	 22.9464   	 0.166649  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 127)                                                                                                         	 0.00054136	 100       	 0         	 0         	 18.7675   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 127)                                                                          	 0.000511866	 100       	 0         	 0         	 19.8489   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                    	 0.000493632	 100       	 0         	 0         	 8.1032    	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 77)                                                                                                          	 0.000411092	 100       	 0         	 0         	 14.9845   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 77, n: 50, r2: 1)                                                                                                          	 0.000378479	 100       	 0         	 0         	 16.2757   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000316649	 100       	 0.789518  	 0         	 12.6323   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 127, m: 50, fromLeft: 1)                               	 0.000257158	 100       	 0         	 0         	 39.5088   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 6.67633   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 6.67629   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 3.81789   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 3.81661   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 3.48929   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 2.28968   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 2.18348   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 1.4182    	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 1.14646   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 1.03833   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.532874  	 1000      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.395942  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.383312  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.378946  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.300803  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.209305  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.167901  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.153269  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0341178 	 1100      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.0206746 	 1800      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0108413 	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.0055252 	 6400      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.0011315 	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000886297	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000846735	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000316649	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22830238750592 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22830032873472 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22829831547008 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22829630220544 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22829428894080 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22829227567616 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22829026241152 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22828824914688 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22828623588224 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22828422261760 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22828220935296 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22828019608832 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22827818282368 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22827616955904 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22827415629440 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22827214302976 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22827012976512 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22826811650048 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22826610323584 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22826408997120 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22826207670656 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22826006344192 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22825805017728 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22825603691264 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22825402364800 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22825201038336 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22824999711872 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22824798385408 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22824597058944 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22824395732480 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22824194406016 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22823993079552 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22823791748992 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22823590422528 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22823389096064 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22823187769600 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22822986443136 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22822785116672 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22822583790208 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22822382463744 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22822181137280 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22821979810816 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22821778484352 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22821577157888 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22821375831424 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22821174504960 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22820973178496 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22820771852032 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22820570525568 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22820369199104 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22820167872640 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22819966546176 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22819765219712 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22819563893248 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22819362566784 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22819161240320 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22818959913856 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22818758587392 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22818557260928 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22818355934464 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22818154608000 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22817953281536 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22817751955072 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22830133090048 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22830126499584 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6400, cols: 128, reductionFactor: 35, colBlockingSize: 12)                                 	 1.87715   	 1300      	 149.385   	 0         	 4.62939   	 32.2689   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 128, m: 128)                                                                               	 1.36812   	 700       	 10.0148   	 0         	 0.201714  	 49.6485   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 128, n: 50, r2new: 128)	 0.549077  	 700       	 140.076   	 0         	 12.8994   	 10.8591   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 128, n: 50, r: 128, r2: 128)                          	 0.409727  	 700       	 358.289   	 0         	 22.617    	 15.8416   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 128, m: 128)                                                                                	 0.40847   	 900       	 6.161     	 0         	 0.868647  	 7.09264   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6400, r: 128, r2: 128, leftOrthog: 1)                      	 0.371334  	 600       	 338.857   	 0         	 32.1914   	 10.5263   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 6400, Xcols: 128, r: 128, streamingCols: 0)                                 	 0.273623  	 700       	 268.253   	 0         	 33.6993   	 7.9602    
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 128, reductionFactor: 35, colBlockingSize: 12)                                 	 0.239562  	 200       	 70.3456   	 0         	 2.24666   	 31.3112   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 128, m: 6400)                                                                                 	 0.193952  	 700       	 0         	 0         	 47.3058   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 6400, m: 128)                                                                        	 0.172187  	 700       	 0         	 0         	 53.2852   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 128, r1_: 128, n: 50, r2: 128)                        	 0.134908  	 600       	 932.706   	 0         	 58.8771   	 15.8416   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 128)                                                                                	 0.0634765 	 100       	 4.29556   	 0         	 0.193458  	 22.2041   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 128, m: 128, fromLeft: 1)                              	 0.0476309 	 800       	 0         	 0         	 4.40292   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                                 	 0.0461009 	 100       	 2.53068   	 0         	 0.131017  	 19.3157   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 128, n: 50, r2new: 50) 	 0.0417584 	 100       	 102.782   	 0         	 14.4757   	 7.10032   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 78, n: 50, r2: 78)                                                                                                         	 0.0345323 	 800       	 0         	 0         	 112.757   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 128, reductionFactor: 35, colBlockingSize: 12)                                   	 0.0287399 	 200       	 11.7273   	 0         	 1.26843   	 9.24559   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6400, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0282877 	 100       	 116.181   	 0         	 9.12056   	 12.7383   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 128, r2: 128, leftOrthog: 1)                      	 0.0282541 	 100       	 289.941   	 0         	 28.1097   	 10.3146   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 128, r: 128, streamingCols: 0)                                 	 0.0246741 	 100       	 166.004   	 0         	 21.0162   	 7.89889   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 128, n: 50, r: 128, r2: 50)                           	 0.0225378 	 100       	 363.479   	 0         	 40.6642   	 8.93855   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6400, r: 50, r2: 50, leftOrthog: 1)                        	 0.0181302 	 100       	 176.501   	 0         	 42.5808   	 4.14508   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 128, r1_: 128, n: 50, r2: 50)                         	 0.0126853 	 100       	 645.788   	 0         	 41.395    	 15.6006   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 128, r1_: 50, n: 50, r2: 128)                         	 0.0119825 	 100       	 683.664   	 0         	 76.4849   	 8.93855   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 128, m: 2500)                                                                                 	 0.00944388	 100       	 0         	 0         	 54.215    	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 128)                                                                        	 0.00938064	 100       	 0         	 0         	 54.5805   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 128, n: 50, r2new: 1)  	 0.00603033	 100       	 0.21226   	 0         	 1.69835   	 0.12498   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 128, leftOrthog: 1)                         	 0.00345954	 100       	 18.4996   	 0         	 5.59612   	 3.30579   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 128)  	 0.0025047 	 100       	 65.4129   	 0         	 9.32134   	 7.01754   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 128, r: 50, streamingCols: 0)                                    	 0.00161085	 100       	 7.7599    	 0         	 3.10396   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 128, r2: 128)                            	 0.00154413	 100       	 106.105   	 0         	 15.12     	 7.01754   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 128, m: 50, fromLeft: 1)                               	 0.000919781	 100       	 0         	 0         	 11.1331   	 0         
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 128)                            	 0.000815777	 100       	 0         	 0         	 12.5524   	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000802608	 100       	 0.622969  	 0         	 2.49188   	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000790706	 100       	 31.6173   	 0         	 7.58816   	 4.16667   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 128, n: 50, r: 2, r2: 1)                              	 0.000669957	 100       	 3.82114   	 0         	 22.9292   	 0.166649  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 128)                                                                                                         	 0.00053967	 100       	 0         	 0         	 18.9746   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 128)                                                                          	 0.00051395	 100       	 0         	 0         	 19.9241   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                    	 0.000509676	 100       	 0         	 0         	 7.84812   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 78)                                                                                                          	 0.000419856	 100       	 0         	 0         	 14.8622   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 78, n: 50, r2: 1)                                                                                                          	 0.000381815	 100       	 0         	 0         	 16.343    	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000332856	 100       	 0.751076  	 0         	 12.0172   	 0.0625    
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 6.89844   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 6.89841   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 3.94707   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 3.94585   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 3.60613   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 2.33915   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 2.17374   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 1.47769   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 1.13614   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 1.03873   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.599371  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.434479  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.421178  	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.40847   	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.299908  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.203905  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.182082  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.160366  	 900       
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0485507 	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0358737 	 1100      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.0135399 	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00575465	 6400      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00115711	 4600      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000815777	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000802608	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000332856	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22829826176896 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22829630220288 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22829428893824 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22829227567360 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22829026240896 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22828824914432 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22828623587968 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22828422261504 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22828220935040 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22828019608576 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22827818282112 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22827616955648 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22827415629184 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22827214302720 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22827012976256 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22826811649792 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22826610323328 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22826408996864 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22826207670400 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22826006343936 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22825805017472 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22825603691008 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22825402364544 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22825201038080 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22824999711616 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22824798385152 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22824597058688 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22824395732224 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22824194405760 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22823993079296 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22823791752832 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22823590426368 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22823389095808 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22823187769344 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22822986442880 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22822785116416 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22822583789952 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22822382463488 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22822181137024 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22821979810560 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22821778484096 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22821577157632 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22821375831168 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22821174504704 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22820973178240 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22820771851776 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22820570525312 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22820369198848 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22820167872384 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22819966545920 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22819765219456 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22819563892992 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22819362566528 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22819161240064 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22818959913600 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22818758587136 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22818557260672 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22818355934208 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22818154607744 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22817953281280 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22817751954816 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22817550628352 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22817349301888 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22829720516352 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22829713925888 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6450, cols: 129, reductionFactor: 35, colBlockingSize: 12)                                 	 1.9063    	 1300      	 150.576   	 0         	 4.63011   	 32.521    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 129, m: 129)                                                                               	 1.41259   	 700       	 9.92862   	 0         	 0.198424  	 50.0374   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 129, n: 50, r2new: 129)	 0.540507  	 700       	 146.032   	 0         	 13.3211   	 10.9624   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 129, m: 129)                                                                                	 0.415155  	 900       	 6.20498   	 0         	 0.868049  	 7.1482    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 129, n: 50, r: 129, r2: 129)                          	 0.387355  	 700       	 387.934   	 0         	 24.2985   	 15.9653   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6450, r: 129, r2: 129, leftOrthog: 1)                      	 0.338984  	 600       	 379.963   	 0         	 35.8167   	 10.6086   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 6450, Xcols: 129, r: 129, streamingCols: 0)                                 	 0.288628  	 700       	 260.315   	 0         	 32.4485   	 8.02239   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 129, reductionFactor: 35, colBlockingSize: 12)                                 	 0.244249  	 200       	 70.0779   	 0         	 2.22161   	 31.5438   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 6450, m: 129)                                                                        	 0.191975  	 700       	 0         	 0         	 48.5425   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 129, m: 6450)                                                                                 	 0.164531  	 700       	 0         	 0         	 56.6396   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 129, r1_: 129, n: 50, r2: 129)                        	 0.13278   	 600       	 970.033   	 0         	 60.7586   	 15.9653   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 129)                                                                                	 0.0650562 	 100       	 4.22199   	 0         	 0.189989  	 22.2222   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                                 	 0.0407975 	 100       	 2.85965   	 0         	 0.148048  	 19.3157   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 129, n: 50, r2new: 50) 	 0.0401001 	 100       	 108.99    	 0         	 15.2817   	 7.13202   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 79, n: 50, r2: 79)                                                                                                         	 0.0349679 	 800       	 0         	 0         	 114.226   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 129, reductionFactor: 35, colBlockingSize: 12)                                   	 0.0302685 	 200       	 11.3098   	 0         	 1.2206    	 9.26576   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6450, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0301508 	 100       	 109.853   	 0         	 8.62331   	 12.7391   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 129, r2: 129, leftOrthog: 1)                      	 0.0255752 	 100       	 325.334   	 0         	 31.3047   	 10.3925   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 129, r: 129, streamingCols: 0)                                 	 0.0247065 	 100       	 168.387   	 0         	 21.1547   	 7.95982   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 129, n: 50, r: 129, r2: 50)                           	 0.0207096 	 100       	 401.77    	 0         	 44.8487   	 8.95833   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6450, r: 50, r2: 50, leftOrthog: 1)                        	 0.0168331 	 100       	 191.587   	 0         	 46.2185   	 4.14524   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 129, r1_: 129, n: 50, r2: 50)                         	 0.0134736 	 100       	 617.543   	 0         	 39.2853   	 15.7194   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 129, r1_: 50, n: 50, r2: 129)                         	 0.0122495 	 100       	 679.25    	 0         	 75.8233   	 8.95833   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 129, m: 129, fromLeft: 1)                              	 0.0106939 	 800       	 0         	 0         	 19.9184   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 129)                                                                        	 0.008872  	 100       	 0         	 0         	 58.1605   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 129, m: 2500)                                                                                 	 0.00795975	 100       	 0         	 0         	 64.8262   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 129, leftOrthog: 1)                         	 0.00292619	 100       	 22.0423   	 0         	 6.65712   	 3.31109   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 129, n: 50, r2new: 1)  	 0.00284554	 100       	 0.453341  	 0         	 3.62729   	 0.124981  
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 129)  	 0.00259921	 100       	 64.0233   	 0         	 9.0923    	 7.04148   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 129, r: 50, streamingCols: 0)                                    	 0.00163919	 100       	 7.62569   	 0         	 3.05028   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 129, r2: 129)                            	 0.00160434	 100       	 103.725   	 0         	 14.7305   	 7.04148   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.00089501	 100       	 0.558653  	 0         	 2.23461   	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000869779	 100       	 28.7429   	 0         	 6.8983    	 4.16667   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 129)                            	 0.000838822	 100       	 0         	 0         	 12.303    	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 129, n: 50, r: 2, r2: 1)                              	 0.000705823	 100       	 3.65531   	 0         	 21.9341   	 0.166649  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 129)                                                                                                         	 0.000566166	 100       	 0         	 0         	 18.2279   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 129)                                                                          	 0.00053967	 100       	 0         	 0         	 19.1228   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                    	 0.000510454	 100       	 0         	 0         	 7.83616   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 79)                                                                                                          	 0.000423778	 100       	 0         	 0         	 14.9135   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 79, n: 50, r2: 1)                                                                                                          	 0.000362334	 100       	 0         	 0         	 17.4425   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000326187	 100       	 0.766432  	 0         	 12.2629   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 129, m: 50, fromLeft: 1)                               	 0.000245946	 100       	 0         	 0         	 41.9604   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 6.84839   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 6.84836   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 3.925     	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 3.9237    	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 3.63096   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 2.31906   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 2.21097   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 1.51844   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 1.15135   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 1.06077   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.586052  	 1000      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.415155  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.410375  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.384318  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.314974  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.201387  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.173001  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.159373  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0363202 	 1100      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.0162047 	 1800      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0109398 	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00517226	 6400      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00302893	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.00089501	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000838822	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000326187	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23124755568512 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23124573677568 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23124372351104 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23124171024640 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23123969698176 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23123768371712 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23123567045248 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23123365718784 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23123164392320 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23122963065856 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23122761739392 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23122560412928 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23122359086464 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23122157760000 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23121956433536 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23121755107072 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23121553780608 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23121352454144 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23121151127680 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23120949801216 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23120748474752 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23120547148288 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23120345821824 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23120144495360 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23119943168896 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23119741842432 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23119540515968 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23119339189504 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23119137863040 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23118936536576 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23118735210112 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23118533883648 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23118332553088 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23118131226624 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23117929900160 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23117728573696 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23117527247232 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23117325920768 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23117124594304 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23116923267840 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23116721941376 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23116520614912 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23116319288448 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23116117961984 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23115916635520 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23115715309056 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23115513982592 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23115312656128 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23115111329664 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23114910003200 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23114708676736 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23114507350272 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23114306023808 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23114104697344 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23113903370880 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23113702044416 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23113500717952 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23113299391488 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23113098065024 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23112896738560 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23112695412096 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23112494085632 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23112292759168 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23124649907968 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23124643317504 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6500, cols: 130, reductionFactor: 34, colBlockingSize: 12)                                 	 1.89085   	 1300      	 155.491   	 0         	 4.7406    	 32.7999   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 130, m: 130)                                                                               	 1.40609   	 700       	 10.2083   	 0         	 0.202439  	 50.4263   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 130, n: 50, r2new: 130)	 0.526786  	 700       	 153.744   	 0         	 13.893    	 11.0663   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 130, m: 130)                                                                                	 0.416788  	 900       	 6.32552   	 0         	 0.878087  	 7.20375   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 130, n: 50, r: 130, r2: 130)                          	 0.389497  	 700       	 394.843   	 0         	 24.541    	 16.0891   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6500, r: 130, r2: 130, leftOrthog: 1)                      	 0.371233  	 600       	 355.087   	 0         	 33.2143   	 10.6908   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 6500, Xcols: 130, r: 130, streamingCols: 0)                                 	 0.29612   	 700       	 259.675   	 0         	 32.1198   	 8.08458   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 130, reductionFactor: 34, colBlockingSize: 12)                                 	 0.243836  	 200       	 71.3473   	 0         	 2.24347   	 31.8022   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 130, m: 6500)                                                                                 	 0.197808  	 700       	 0         	 0         	 47.8443   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 6500, m: 130)                                                                        	 0.167541  	 700       	 0         	 0         	 56.4876   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 130, r1_: 130, n: 50, r2: 130)                        	 0.137209  	 600       	 960.721   	 0         	 59.7125   	 16.0891   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 130)                                                                                	 0.0650176 	 100       	 4.25526   	 0         	 0.191333  	 22.2401   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 130, n: 50, r2new: 50) 	 0.041228  	 100       	 107.936   	 0         	 15.0674   	 7.16355   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                                 	 0.0411592 	 100       	 2.83452   	 0         	 0.146747  	 19.3157   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 80, n: 50, r2: 80)                                                                                                         	 0.0377567 	 800       	 0         	 0         	 108.484   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 130, reductionFactor: 34, colBlockingSize: 12)                                   	 0.0320653 	 200       	 10.851    	 0         	 1.16762   	 9.2933    
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6500, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0300349 	 100       	 111.132   	 0         	 8.72319   	 12.7398   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 130, r2: 130, leftOrthog: 1)                      	 0.027251  	 100       	 310.081   	 0         	 29.6151   	 10.4704   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 130, r: 130, streamingCols: 0)                                 	 0.025199  	 100       	 167.665   	 0         	 20.904    	 8.02073   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 130, n: 50, r: 130, r2: 50)                           	 0.0207238 	 100       	 407.744   	 0         	 45.4164   	 8.9779    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6500, r: 50, r2: 50, leftOrthog: 1)                        	 0.0178224 	 100       	 182.355   	 0         	 43.9896   	 4.14541   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 130, r1_: 130, n: 50, r2: 50)                         	 0.0137286 	 100       	 615.501   	 0         	 38.8618   	 15.8382   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 130, r1_: 50, n: 50, r2: 130)                         	 0.0127245 	 100       	 664.073   	 0         	 73.9675   	 8.9779    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 130, m: 130, fromLeft: 1)                              	 0.0109139 	 800       	 0         	 0         	 19.8205   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 130)                                                                        	 0.00924737	 100       	 0         	 0         	 56.2322   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 130, m: 2500)                                                                                 	 0.00818938	 100       	 0         	 0         	 63.4969   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 130, leftOrthog: 1)                         	 0.00307947	 100       	 21.1075   	 0         	 6.36473   	 3.31633   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 130)  	 0.00261739	 100       	 64.5681   	 0         	 9.13887   	 7.06522   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 130, r: 50, streamingCols: 0)                                    	 0.00165983	 100       	 7.53091   	 0         	 3.01236   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 130, r2: 130)                            	 0.00164461	 100       	 102.76    	 0         	 14.5445   	 7.06522   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 130, n: 50, r2new: 1)  	 0.001593  	 100       	 0.816069  	 0         	 6.52956   	 0.124981  
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000900084	 100       	 0.555504  	 0         	 2.22201   	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 130, n: 50, r: 2, r2: 1)                              	 0.000819998	 100       	 3.17074   	 0         	 19.0264   	 0.16665   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 130)                            	 0.000801567	 100       	 0         	 0         	 12.9746   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000772956	 100       	 32.3434   	 0         	 7.76241   	 4.16667   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 130)                                                                          	 0.00053552	 100       	 0         	 0         	 19.4204   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 130)                                                                                                         	 0.00053031	 100       	 0         	 0         	 19.6112   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                    	 0.000509119	 100       	 0         	 0         	 7.85671   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 80)                                                                                                          	 0.000429643	 100       	 0         	 0         	 14.8961   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 80, n: 50, r2: 1)                                                                                                          	 0.000383832	 100       	 0         	 0         	 16.674    	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000333552	 100       	 0.749508  	 0         	 11.9921   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 130, m: 50, fromLeft: 1)                               	 0.000249177	 100       	 0         	 0         	 41.7374   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 6.99272   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 6.99268   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 4.07225   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 4.07093   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 3.64929   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 2.32783   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 2.19679   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 1.51227   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 1.14577   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 1.05247   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.572224  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.419386  	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.416788  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.412685  	 1000      
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.322979  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.206507  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.177324  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.164436  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0391005 	 1100      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.0119765 	 1800      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0111631 	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00631403	 6400      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00112467	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000900084	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000801567	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000333552	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22522418591616 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22522204514304 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22522003187840 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22521801861376 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22521600534912 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22521399208448 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22521197881984 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22520996555520 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22520795229056 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22520593902592 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22520392576128 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22520191249664 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22519989923200 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22519788596736 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22519587270272 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22519385943808 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22519184617344 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22518983290880 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22518781964416 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22518580637952 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22518379311488 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22518177985024 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22517976658560 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22517775332096 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22517574005632 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22517372679168 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22517171352704 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22516970026240 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22516768699776 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22516567373312 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22516366046848 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22516164720384 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22515963389824 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22515762063360 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22515560736896 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22515359410432 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22515158083968 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22514956757504 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22514755431040 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22514554104576 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22514352778112 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22514151451648 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22513950125184 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22513748798720 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22513547472256 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22513346145792 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22513144819328 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22512943492864 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22512742166400 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22512540839936 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22512339513472 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22512138187008 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22511936860544 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22511735534080 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22511534207616 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22511332881152 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22511131554688 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22510930228224 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22510728901760 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22510527575296 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22510326248832 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22510124922368 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22509923595904 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22522312931072 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22522306340608 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6550, cols: 131, reductionFactor: 34, colBlockingSize: 12)                                 	 1.94295   	 1300      	 154.841   	 0         	 4.68474   	 33.0522   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 131, m: 131)                                                                               	 1.44091   	 700       	 10.1932   	 0         	 0.200594  	 50.8151   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 131, n: 50, r2new: 131)	 0.522018  	 700       	 159.17    	 0         	 14.2491   	 11.1705   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 131, m: 131)                                                                                	 0.424268  	 900       	 6.3585    	 0         	 0.87591   	 7.2593    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 131, n: 50, r: 131, r2: 131)                          	 0.396068  	 700       	 397.321   	 0         	 24.5065   	 16.2129   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6550, r: 131, r2: 131, leftOrthog: 1)                      	 0.36054   	 600       	 374.12    	 0         	 34.7275   	 10.773    
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 6550, Xcols: 131, r: 131, streamingCols: 0)                                 	 0.298203  	 700       	 263.858   	 0         	 32.3881   	 8.14677   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 131, reductionFactor: 34, colBlockingSize: 12)                                 	 0.247335  	 200       	 71.4243   	 0         	 2.2296    	 32.0346   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 6550, m: 131)                                                                        	 0.194604  	 700       	 0         	 0         	 49.3831   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 131, m: 6550)                                                                                 	 0.174739  	 700       	 0         	 0         	 54.9974   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 131, r1_: 131, n: 50, r2: 131)                        	 0.144024  	 600       	 936.549   	 0         	 57.7658   	 16.2129   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 131)                                                                                	 0.0636324 	 100       	 4.37932   	 0         	 0.196755  	 22.2577   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 81, n: 50, r2: 81)                                                                                                         	 0.0443203 	 800       	 0         	 0         	 94.7431   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                                 	 0.0421184 	 100       	 2.76997   	 0         	 0.143405  	 19.3157   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 131, n: 50, r2new: 50) 	 0.0389701 	 100       	 116.256   	 0         	 16.158    	 7.19492   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 131, reductionFactor: 34, colBlockingSize: 12)                                   	 0.0311803 	 200       	 11.3313   	 0         	 1.21672   	 9.31305   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6550, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0308874 	 100       	 108.896   	 0         	 8.54717   	 12.7406   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 131, r2: 131, leftOrthog: 1)                      	 0.0297249 	 100       	 288.664   	 0         	 27.3662   	 10.5482   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 131, r: 131, streamingCols: 0)                                 	 0.0253366 	 100       	 169.33    	 0         	 20.9525   	 8.08163   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 131, n: 50, r: 131, r2: 50)                           	 0.0209793 	 100       	 408.999   	 0         	 45.4582   	 8.99725   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6550, r: 50, r2: 50, leftOrthog: 1)                        	 0.0161187 	 100       	 203.18    	 0         	 49.0113   	 4.14557   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 131, r1_: 131, n: 50, r2: 50)                         	 0.0139937 	 100       	 613.169   	 0         	 38.4265   	 15.9569   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 131, r1_: 50, n: 50, r2: 131)                         	 0.0124397 	 100       	 689.77    	 0         	 76.6645   	 8.99725   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 131, m: 131, fromLeft: 1)                              	 0.0113892 	 800       	 0         	 0         	 19.2868   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 131)                                                                        	 0.00786682	 100       	 0         	 0         	 66.6089   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 131, m: 2500)                                                                                 	 0.00742481	 100       	 0         	 0         	 70.5742   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 131, n: 50, r2new: 1)  	 0.00727044	 100       	 0.180182  	 0         	 1.44167   	 0.124981  
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 131, leftOrthog: 1)                         	 0.00327136	 100       	 20.0222   	 0         	 6.02807   	 3.3215    
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 131)  	 0.00259707	 100       	 66.0783   	 0         	 9.32157   	 7.08874   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 131, r2: 131)                            	 0.00160594	 100       	 106.86    	 0         	 15.0746   	 7.08874   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 131, r: 50, streamingCols: 0)                                    	 0.00141398	 100       	 8.84029   	 0         	 3.53612   	 2.5       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 131)                            	 0.000846591	 100       	 0         	 0         	 12.3791   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000788638	 100       	 31.7002   	 0         	 7.60805   	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000786436	 100       	 0.63578   	 0         	 2.54312   	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 131, n: 50, r: 2, r2: 1)                              	 0.000732471	 100       	 3.57693   	 0         	 21.4638   	 0.16665   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 131)                                                                                                         	 0.000538279	 100       	 0         	 0         	 19.4695   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                    	 0.000519937	 100       	 0         	 0         	 7.69324   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 131)                                                                          	 0.000489942	 100       	 0         	 0         	 21.3903   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 81)                                                                                                          	 0.000447606	 100       	 0         	 0         	 14.477    	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 81, n: 50, r2: 1)                                                                                                          	 0.000371357	 100       	 0         	 0         	 17.4495   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000323591	 100       	 0.77258   	 0         	 12.3613   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 131, m: 50, fromLeft: 1)                               	 0.000247799	 100       	 0         	 0         	 42.2923   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 7.0082    	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 7.00815   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 4.05424   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 4.05305   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 3.71354   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 2.36387   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 2.25235   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 1.54666   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 1.16951   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 1.0839    	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.570855  	 1000      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.424268  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.419386  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.409655  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.324953  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.202961  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.182683  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.171246  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0456775 	 1100      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.0159774 	 4600      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.0158035 	 1800      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.011637  	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.0104616 	 6400      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000846591	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000786436	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000323591	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22807449253760 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22807215859712 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22807014533248 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22806813206784 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22806611880320 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22806410553856 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22806209227392 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22806007900928 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22805806574464 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22805605248000 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22805403921536 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22805202595072 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22805001268608 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22804799942144 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22804598615680 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22804397289216 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22804195962752 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22803994636288 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22803793309824 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22803591983360 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22803390656896 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22803189330432 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22802988003968 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22802786677504 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22802585351040 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22802384024576 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22802182698112 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22801981371648 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22801780045184 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22801578718720 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22801377392256 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22801176065792 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22800974735232 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22800773408768 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22800572082304 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22800370755840 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22800169429376 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22799968102912 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22799766776448 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22799565449984 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22799364123520 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22799162797056 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22798961470592 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22798760144128 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22798558817664 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22798357491200 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22798156164736 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22797954838272 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22797753511808 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22797552185344 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22797350858880 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22797149532416 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22796948205952 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22796746879488 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22796545553024 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22796344226560 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22796142900096 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22795941573632 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22795740247168 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22795538920704 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22795337594240 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22795136267776 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22794934941312 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22807343593216 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22807337002752 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6600, cols: 132, reductionFactor: 34, colBlockingSize: 12)                                 	 1.99947   	 1300      	 153.936   	 0         	 4.62208   	 33.3045   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 132, m: 132)                                                                               	 1.42384   	 700       	 10.5535   	 0         	 0.206107  	 51.204    
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 132, n: 50, r2new: 132)	 0.544009  	 700       	 156.67    	 0         	 13.895    	 11.2752   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 132, m: 132)                                                                                	 0.419973  	 900       	 6.57176   	 0         	 0.898411  	 7.31486   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 132, n: 50, r: 132, r2: 132)                          	 0.401747  	 700       	 400.744   	 0         	 24.5304   	 16.3366   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6600, r: 132, r2: 132, leftOrthog: 1)                      	 0.367258  	 600       	 375.752   	 0         	 34.6148   	 10.8553   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 6600, Xcols: 132, r: 132, streamingCols: 0)                                 	 0.307419  	 700       	 261.854   	 0         	 31.8985   	 8.20896   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 6600, m: 132)                                                                        	 0.260634  	 700       	 0         	 0         	 37.4373   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 132, reductionFactor: 34, colBlockingSize: 12)                                 	 0.253863  	 200       	 70.6541   	 0         	 2.18968   	 32.2669   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 132, m: 6600)                                                                                 	 0.179859  	 700       	 0         	 0         	 54.2505   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 132, r1_: 132, n: 50, r2: 132)                        	 0.141894  	 600       	 972.544   	 0         	 59.5315   	 16.3366   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 132)                                                                                	 0.0627402 	 100       	 4.47348   	 0         	 0.200828  	 22.2751   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 82, n: 50, r2: 82)                                                                                                         	 0.0451432 	 800       	 0         	 0         	 95.3269   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                                 	 0.0408948 	 100       	 2.85285   	 0         	 0.147696  	 19.3157   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 132, n: 50, r2new: 50) 	 0.0395401 	 100       	 116.641   	 0         	 16.1416   	 7.22612   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 132, reductionFactor: 34, colBlockingSize: 12)                                   	 0.0314122 	 200       	 11.4201   	 0         	 1.22368   	 9.33258   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6600, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0310213 	 100       	 109.254   	 0         	 8.57475   	 12.7413   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 132, r2: 132, leftOrthog: 1)                      	 0.0274347 	 100       	 317.554   	 0         	 29.8847   	 10.626    
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 132, r: 132, streamingCols: 0)                                 	 0.0256595 	 100       	 169.762   	 0         	 20.8488   	 8.14252   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 132, n: 50, r: 132, r2: 50)                           	 0.0216246 	 100       	 402.875   	 0         	 44.6825   	 9.01639   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6600, r: 50, r2: 50, leftOrthog: 1)                        	 0.0170241 	 100       	 193.842   	 0         	 46.7571   	 4.14573   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 132, r1_: 132, n: 50, r2: 50)                         	 0.0141271 	 100       	 616.687   	 0         	 38.3617   	 16.0756   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 132, r1_: 50, n: 50, r2: 132)                         	 0.0132009 	 100       	 659.955   	 0         	 73.195    	 9.01639   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 132, m: 132, fromLeft: 1)                              	 0.0112108 	 800       	 0         	 0         	 19.8939   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 132, m: 2500)                                                                                 	 0.00859168	 100       	 0         	 0         	 61.4548   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 132)                                                                        	 0.00852847	 100       	 0         	 0         	 61.9103   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 132, n: 50, r2new: 1)  	 0.00533907	 100       	 0.247234  	 0         	 1.97817   	 0.124981  
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 132, leftOrthog: 1)                         	 0.00335629	 100       	 19.6645   	 0         	 5.91128   	 3.32661   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 132)  	 0.00265163	 100       	 65.7106   	 0         	 9.23931   	 7.11207   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 132, r: 50, streamingCols: 0)                                    	 0.00166991	 100       	 7.48543   	 0         	 2.99417   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 132, r2: 132)                            	 0.0016632 	 100       	 104.762   	 0         	 14.7301   	 7.11207   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000914363	 100       	 0.546829  	 0         	 2.18732   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 132)                            	 0.000830292	 100       	 0         	 0         	 12.7184   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000775458	 100       	 32.239    	 0         	 7.73736   	 4.16667   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 132, n: 50, r: 2, r2: 1)                              	 0.000726226	 100       	 3.63523   	 0         	 21.8136   	 0.16665   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 132)                                                                          	 0.000608114	 100       	 0         	 0         	 17.3652   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 132)                                                                                                         	 0.000549714	 100       	 0         	 0         	 19.21     	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                    	 0.000509971	 100       	 0         	 0         	 7.84358   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 82)                                                                                                          	 0.000432803	 100       	 0         	 0         	 15.157    	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 82, n: 50, r2: 1)                                                                                                          	 0.000369558	 100       	 0         	 0         	 17.7509   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000333376	 100       	 0.749904  	 0         	 11.9985   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 132, m: 50, fromLeft: 1)                               	 0.000250089	 100       	 0         	 0         	 42.225    	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 7.20559   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 7.20556   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 4.09214   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 4.09082   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 3.7269    	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 2.50242   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 2.31576   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 1.52747   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 1.21445   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 1.10244   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.59154   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.425761  	 1000      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.419973  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.415073  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.334749  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.269771  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.188961  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.169997  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0464953 	 1100      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.0224281 	 1800      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0114609 	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00552763	 6400      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00129737	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000914363	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000830292	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000333376	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22676487513984 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22676286466048 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22676085139584 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22675883813120 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22675682486656 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22675481160192 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22675279833728 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22675078507264 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22674877180800 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22674675854336 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22674474527872 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22674273201408 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22674071874944 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22673870548480 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22673669222016 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22673467895552 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22673266569088 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22673065242624 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22672863916160 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22672662589696 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22672461263232 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22672259936768 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22672058610304 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22671857283840 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22671655957376 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22671454630912 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22671253304448 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22671051977984 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22670850651520 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22670649325056 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22670447998592 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22670246672128 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22670045341568 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22669844015104 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22669642688640 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22669441362176 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22669240035712 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22669038709248 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22668837382784 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22668636056320 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22668434729856 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22668233403392 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22668032076928 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22667830750464 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22667629424000 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22667428097536 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22667226771072 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22667025444608 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22666824118144 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22666622791680 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22666421465216 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22666220138752 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22666018812288 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22665817485824 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22665616159360 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22665414832896 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22665213506432 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22665012179968 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22664810853504 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22664609527040 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22664408200576 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22664206874112 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22664005547648 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22676381853440 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22676375262976 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6650, cols: 133, reductionFactor: 34, colBlockingSize: 12)                                 	 2.03153   	 1300      	 154.976   	 0         	 4.61831   	 33.5568   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 133, m: 133)                                                                               	 1.47053   	 700       	 10.4524   	 0         	 0.202594  	 51.5929   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 133, n: 50, r2new: 133)	 0.522247  	 700       	 167.376   	 0         	 14.7074   	 11.3804   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 133, m: 133)                                                                                	 0.43512   	 900       	 6.48825   	 0         	 0.88031   	 7.37041   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 133, n: 50, r: 133, r2: 133)                          	 0.396098  	 700       	 415.767   	 0         	 25.2586   	 16.4604   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6650, r: 133, r2: 133, leftOrthog: 1)                      	 0.361938  	 600       	 390.007   	 0         	 35.6578   	 10.9375   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 6650, Xcols: 133, r: 133, streamingCols: 0)                                 	 0.314463  	 700       	 261.85    	 0         	 31.6583   	 8.27114   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 133, reductionFactor: 34, colBlockingSize: 12)                                 	 0.263206  	 200       	 69.1824   	 0         	 2.12876   	 32.499    
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 6650, m: 133)                                                                        	 0.226093  	 700       	 0         	 0         	 43.813    	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 133, m: 6650)                                                                                 	 0.184034  	 700       	 0         	 0         	 53.826    	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 133, r1_: 133, n: 50, r2: 133)                        	 0.143888  	 600       	 981.028   	 0         	 59.5993   	 16.4604   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 133)                                                                                	 0.0675045 	 100       	 4.18737   	 0         	 0.187839  	 22.2923   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 83, n: 50, r2: 83)                                                                                                         	 0.0508026 	 800       	 0         	 0         	 86.7861   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 133, n: 50, r2new: 50) 	 0.0446361 	 100       	 105.173   	 0         	 14.4923   	 7.25714   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                                 	 0.0423234 	 100       	 2.75655   	 0         	 0.142711  	 19.3157   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6650, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0346475 	 100       	 98.5601   	 0         	 7.73504   	 12.742    
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 133, reductionFactor: 34, colBlockingSize: 12)                                   	 0.032463  	 200       	 11.2185   	 0         	 1.19959   	 9.3519    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 133, r2: 133, leftOrthog: 1)                      	 0.0269725 	 100       	 327.908   	 0         	 30.635    	 10.7037   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 133, r: 133, streamingCols: 0)                                 	 0.026183  	 100       	 168.898   	 0         	 20.5888   	 8.20339   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 133, n: 50, r: 133, r2: 50)                           	 0.02093   	 100       	 422.575   	 0         	 46.7691   	 9.03533   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6650, r: 50, r2: 50, leftOrthog: 1)                        	 0.0187249 	 100       	 177.571   	 0         	 42.8306   	 4.14589   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 133, r1_: 133, n: 50, r2: 50)                         	 0.0142104 	 100       	 622.396   	 0         	 38.4332   	 16.1942   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 133, r1_: 50, n: 50, r2: 133)                         	 0.0122294 	 100       	 723.213   	 0         	 80.0429   	 9.03533   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 133, m: 133, fromLeft: 1)                              	 0.0119669 	 800       	 0         	 0         	 18.9204   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 133, m: 2500)                                                                                 	 0.00777183	 100       	 0         	 0         	 68.4523   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 133)                                                                        	 0.00755275	 100       	 0         	 0         	 70.438    	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 133, n: 50, r2new: 1)  	 0.00361178	 100       	 0.368239  	 0         	 2.94636   	 0.124981  
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 133, leftOrthog: 1)                         	 0.00326958	 100       	 20.339    	 0         	 6.10477   	 3.33166   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 133)  	 0.00261327	 100       	 67.6891   	 0         	 9.48665   	 7.13519   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 133, r: 50, streamingCols: 0)                                    	 0.00204882	 100       	 6.10106   	 0         	 2.44042   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 133, r2: 133)                            	 0.0016499 	 100       	 107.212   	 0         	 15.0258   	 7.13519   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000891118	 100       	 0.561093  	 0         	 2.24437   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 133)                            	 0.00082083	 100       	 0         	 0         	 12.9625   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000768166	 100       	 32.545    	 0         	 7.81081   	 4.16667   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 133, n: 50, r: 2, r2: 1)                              	 0.000753948	 100       	 3.52809   	 0         	 21.1707   	 0.16665   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 133)                                                                          	 0.000694602	 100       	 0         	 0         	 15.3181   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 133)                                                                                                         	 0.000525407	 100       	 0         	 0         	 20.251    	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                    	 0.000492319	 100       	 0         	 0         	 8.12481   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 83)                                                                                                          	 0.000425937	 100       	 0         	 0         	 15.5892   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 83, n: 50, r2: 1)                                                                                                          	 0.000367527	 100       	 0         	 0         	 18.0667   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000338179	 100       	 0.739253  	 0         	 11.8281   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 133, m: 50, fromLeft: 1)                               	 0.00027683	 100       	 0         	 0         	 38.4351   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 7.32362   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 7.3236    	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 4.24276   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 4.24144   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 3.83118   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 2.49618   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 2.36185   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 1.58036   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 1.22847   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 1.13458   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.573109  	 1000      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.43512   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.419432  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.410905  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.342695  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.234341  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.192299  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.171096  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0521214 	 1100      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.0184392 	 1800      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0122437 	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00616548	 4600      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00603515	 6400      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000891118	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.00082083	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000338179	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23007880001408 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23007670036480 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23007468710016 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23007267383552 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23007066057088 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23006864730624 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23006663404160 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23006462077696 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23006260751232 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23006059424768 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23005858098304 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23005656771840 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23005455445376 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23005254118912 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23005052792448 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23004851465984 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23004650139520 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23004448813056 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23004247486592 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23004046160128 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23003844833664 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23003643507200 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23003442180736 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23003240854272 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23003039527808 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23002838201344 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23002636874880 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23002435548416 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23002234221952 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23002032895488 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23001831569024 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23001630242560 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23001428912000 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23001227585536 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23001026259072 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23000824932608 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23000623606144 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23000422279680 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23000220953216 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23000019626752 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22999818300288 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22999616973824 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22999415647360 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22999214320896 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22999012994432 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22998811667968 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22998610341504 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22998409015040 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22998207688576 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22998006362112 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22997805035648 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22997603709184 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22997402382720 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22997201056256 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22996999729792 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22996798403328 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22996597076864 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22996395750400 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22996194423936 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22995993097472 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22995791771008 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22995590444544 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22995389118080 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23007774340864 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23007767750400 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6700, cols: 134, reductionFactor: 33, colBlockingSize: 12)                                 	 2.0072    	 1300      	 160.558   	 0         	 4.74484   	 33.8384   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 134, m: 134)                                                                               	 1.47502   	 700       	 10.6574   	 0         	 0.205022  	 51.9818   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 134, n: 50, r2new: 134)	 0.544649  	 700       	 164.574   	 0         	 14.3283   	 11.4859   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 134, m: 134)                                                                                	 0.438896  	 900       	 6.57861   	 0         	 0.885892  	 7.42597   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 134, n: 50, r: 134, r2: 134)                          	 0.419337  	 700       	 401.651   	 0         	 24.219    	 16.5842   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6700, r: 134, r2: 134, leftOrthog: 1)                      	 0.38149   	 600       	 378.427   	 0         	 34.3409   	 11.0197   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 6700, Xcols: 134, r: 134, streamingCols: 0)                                 	 0.326585  	 700       	 257.861   	 0         	 30.9433   	 8.33333   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 134, reductionFactor: 33, colBlockingSize: 12)                                 	 0.2581    	 200       	 71.6782   	 0         	 2.18803   	 32.7593   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 134, m: 6700)                                                                                 	 0.1952    	 700       	 0         	 0         	 51.513    	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 6700, m: 134)                                                                        	 0.182981  	 700       	 0         	 0         	 54.9531   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 134, r1_: 134, n: 50, r2: 134)                        	 0.149183  	 600       	 967.712   	 0         	 58.3516   	 16.5842   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 134)                                                                                	 0.0655588 	 100       	 4.34216   	 0         	 0.194634  	 22.3093   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 84, n: 50, r2: 84)                                                                                                         	 0.0435008 	 800       	 0         	 0         	 103.811   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                                 	 0.0422154 	 100       	 2.7636    	 0         	 0.143076  	 19.3157   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 134, n: 50, r2new: 50) 	 0.0421883 	 100       	 113.254   	 0         	 15.5398   	 7.28798   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 134, reductionFactor: 33, colBlockingSize: 12)                                   	 0.0321415 	 200       	 11.5117   	 0         	 1.22737   	 9.37912   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6700, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0293197 	 100       	 117.346   	 0         	 9.20882   	 12.7427   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 134, r2: 134, leftOrthog: 1)                      	 0.0280893 	 100       	 319.624   	 0         	 29.6458   	 10.7814   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 134, r: 134, streamingCols: 0)                                 	 0.0265183 	 100       	 169.279   	 0         	 20.4833   	 8.26426   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 134, n: 50, r: 134, r2: 50)                           	 0.0224834 	 100       	 399.317   	 0         	 44.1037   	 9.05405   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6700, r: 50, r2: 50, leftOrthog: 1)                        	 0.0174011 	 100       	 192.517   	 0         	 46.434    	 4.14604   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 134, r1_: 134, n: 50, r2: 50)                         	 0.0141863 	 100       	 632.862   	 0         	 38.7954   	 16.3128   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 134, r1_: 50, n: 50, r2: 134)                         	 0.0129856 	 100       	 691.38    	 0         	 76.3613   	 9.05405   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 134, m: 134, fromLeft: 1)                              	 0.0117216 	 800       	 0         	 0         	 19.608    	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 134, m: 2500)                                                                                 	 0.00796428	 100       	 0         	 0         	 67.3005   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 134)                                                                        	 0.00775872	 100       	 0         	 0         	 69.0835   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 134, leftOrthog: 1)                         	 0.00311054	 100       	 21.5397   	 0         	 6.45548   	 3.33665   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 134)  	 0.00281901	 100       	 63.696    	 0         	 8.89843   	 7.15812   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 134, r2: 134)                            	 0.0017319 	 100       	 103.678   	 0         	 14.4839   	 7.15812   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 134, r: 50, streamingCols: 0)                                    	 0.00161532	 100       	 7.7384    	 0         	 3.09536   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 134, n: 50, r2new: 1)  	 0.00155395	 100       	 0.862321  	 0         	 6.8996    	 0.124981  
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 134)                            	 0.00091296	 100       	 0         	 0         	 11.742    	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000897776	 100       	 0.556932  	 0         	 2.22773   	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000779635	 100       	 32.0663   	 0         	 7.69591   	 4.16667   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 134, n: 50, r: 2, r2: 1)                              	 0.000703794	 100       	 3.80793   	 0         	 22.8499   	 0.16665   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 134)                                                                          	 0.000686246	 100       	 0         	 0         	 15.6212   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 134)                                                                                                         	 0.000554489	 100       	 0         	 0         	 19.3331   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                    	 0.000527758	 100       	 0         	 0         	 7.57923   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 84, n: 50, r2: 1)                                                                                                          	 0.00045979	 100       	 0         	 0         	 14.6154   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 84)                                                                                                          	 0.000423518	 100       	 0         	 0         	 15.8671   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000319533	 100       	 0.782392  	 0         	 12.5183   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 134, m: 50, fromLeft: 1)                               	 0.00025644	 100       	 0         	 0         	 41.8032   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 7.35377   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 7.35373   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 4.27705   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 4.27575   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 3.84023   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 2.46704   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 2.32676   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 1.5828    	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 1.21056   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 1.11733   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.59121   	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.444256  	 1000      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.438896  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.430091  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.354719  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.203693  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.191426  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.177135  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0449386 	 1100      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.01469   	 1800      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.011978  	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00669923	 6400      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.0012235 	 4600      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.00091296	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000897776	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000319533	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23213117314944 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23212888942592 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23212687616128 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23212486289664 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23212284963200 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23212083636736 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23211882310272 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23211680983808 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23211479657344 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23211278330880 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23211077004416 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23210875677952 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23210674351488 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23210473025024 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23210271698560 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23210070372096 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23209869045632 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23209667719168 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23209466392704 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23209265066240 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23209063739776 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23208862413312 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23208661086848 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23208459760384 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23208258433920 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23208057107456 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23207855780992 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23207654454528 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23207453128064 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23207251801600 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23207050475136 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23206849148672 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23206647818112 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23206446491648 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23206245165184 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23206043838720 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23205842512256 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23205641185792 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23205439859328 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23205238532864 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23205037206400 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23204835879936 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23204634553472 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23204433227008 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23204231900544 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23204030574080 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23203829247616 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23203627921152 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23203426594688 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23203225268224 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23203023941760 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23202822615296 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23202621288832 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23202419962368 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23202218635904 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23202017309440 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23201815982976 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23201614656512 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23201413330048 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23201212003584 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23201010677120 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23200809350656 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23200608024192 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23213011654400 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23213005063936 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6750, cols: 135, reductionFactor: 33, colBlockingSize: 12)                                 	 2.04922   	 1300      	 160.813   	 0         	 4.71717   	 34.0909   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 135, m: 135)                                                                               	 1.50522   	 700       	 10.6791   	 0         	 0.203914  	 52.3707   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 135, n: 50, r2new: 135)	 0.536721  	 700       	 171.227   	 0         	 14.7713   	 11.5919   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 135, m: 135)                                                                                	 0.441979  	 900       	 6.68007   	 0         	 0.892875  	 7.48153   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 135, n: 50, r: 135, r2: 135)                          	 0.409355  	 700       	 420.726   	 0         	 25.1812   	 16.7079   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6750, r: 135, r2: 135, leftOrthog: 1)                      	 0.373008  	 600       	 395.762   	 0         	 35.6479   	 11.102    
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 6750, Xcols: 135, r: 135, streamingCols: 0)                                 	 0.333315  	 700       	 258.353   	 0         	 30.7728   	 8.39552   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 135, reductionFactor: 33, colBlockingSize: 12)                                 	 0.272736  	 200       	 68.8477   	 0         	 2.08685   	 32.9912   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 6750, m: 135)                                                                        	 0.224391  	 700       	 0         	 0         	 45.4832   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 135, m: 6750)                                                                                 	 0.170081  	 700       	 0         	 0         	 60.0069   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 135, r1_: 135, n: 50, r2: 135)                        	 0.152587  	 600       	 967.463   	 0         	 57.9044   	 16.7079   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 135)                                                                                	 0.0663512 	 100       	 4.32044   	 0         	 0.193516  	 22.3261   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 85, n: 50, r2: 85)                                                                                                         	 0.0472728 	 800       	 0         	 0         	 97.8152   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                                 	 0.0427046 	 100       	 2.73195   	 0         	 0.141437  	 19.3157   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 135, n: 50, r2new: 50) 	 0.0414396 	 100       	 117.34    	 0         	 16.033    	 7.31863   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 135, reductionFactor: 33, colBlockingSize: 12)                                   	 0.0325726 	 200       	 11.5295   	 0         	 1.2268    	 9.39803   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6750, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0303004 	 100       	 114.395   	 0         	 8.97678   	 12.7434   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 135, r2: 135, leftOrthog: 1)                      	 0.0278443 	 100       	 327.266   	 0         	 30.1376   	 10.8591   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 135, r: 135, streamingCols: 0)                                 	 0.0264564 	 100       	 172.217   	 0         	 20.6865   	 8.32511   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 135, n: 50, r: 135, r2: 50)                           	 0.0216409 	 100       	 421.077   	 0         	 46.412    	 9.07258   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6750, r: 50, r2: 50, leftOrthog: 1)                        	 0.0162731 	 100       	 207.398   	 0         	 50.0212   	 4.14619   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 135, r1_: 135, n: 50, r2: 50)                         	 0.0148513 	 100       	 613.583   	 0         	 37.3422   	 16.4314   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 135, r1_: 50, n: 50, r2: 135)                         	 0.0130358 	 100       	 699.038   	 0         	 77.0496   	 9.07258   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 135, m: 135, fromLeft: 1)                              	 0.0120014 	 800       	 0         	 0         	 19.4378   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 135, m: 2500)                                                                                 	 0.00821002	 100       	 0         	 0         	 65.7733   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 135)                                                                        	 0.0077228 	 100       	 0         	 0         	 69.9228   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 135, n: 50, r2new: 1)  	 0.00441457	 100       	 0.305806  	 0         	 2.44681   	 0.124981  
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 135, leftOrthog: 1)                         	 0.00345936	 100       	 19.5123   	 0         	 5.83923   	 3.34158   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 135)  	 0.00274175	 100       	 66.4722   	 0         	 9.25686   	 7.18085   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 135, r2: 135)                            	 0.00174581	 100       	 104.393   	 0         	 14.5376   	 7.18085   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 135, r: 50, streamingCols: 0)                                    	 0.00171615	 100       	 7.28374   	 0         	 2.9135    	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 135, n: 50, r: 2, r2: 1)                              	 0.00103385	 100       	 2.6116    	 0         	 15.6712   	 0.16665   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 135)                            	 0.000841901	 100       	 0         	 0         	 12.8281   	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000813497	 100       	 0.61463   	 0         	 2.45852   	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000796586	 100       	 31.3839   	 0         	 7.53214   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 135)                                                                                                         	 0.00051577	 100       	 0         	 0         	 20.9396   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                    	 0.000507041	 100       	 0         	 0         	 7.88891   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 85)                                                                                                          	 0.000433603	 100       	 0         	 0         	 15.6825   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 135)                                                                          	 0.000408261	 100       	 0         	 0         	 26.4537   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 85, n: 50, r2: 1)                                                                                                          	 0.00040534	 100       	 0         	 0         	 16.776    	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000325983	 100       	 0.766911  	 0         	 12.2706   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 135, m: 50, fromLeft: 1)                               	 0.000258027	 100       	 0         	 0         	 41.8561   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 7.41307   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 7.41304   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 4.2652    	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 4.26397   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 3.91351   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 2.52737   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 2.38483   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 1.61428   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 1.23514   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 1.15082   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.585317  	 1000      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.441979  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.433775  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.420585  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.361488  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.232522  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.181271  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.178798  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0486275 	 1100      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.0227257 	 1800      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0122594 	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00640772	 4600      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00548376	 6400      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000841901	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000813497	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000325983	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22901459634048 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22901235378176 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22901034051712 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22900832725248 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22900631398784 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22900430072320 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22900228745856 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22900027419392 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22899826092928 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22899624766464 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22899423440000 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22899222113536 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22899020787072 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22898819460608 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22898618134144 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22898416807680 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22898215481216 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22898014154752 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22897812828288 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22897611501824 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22897410175360 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22897208848896 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22897007522432 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22896806195968 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22896604869504 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22896403543040 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22896202216576 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22896000890112 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22895799563648 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22895598237184 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22895396910720 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22895195584256 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22894994253696 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22894792927232 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22894591600768 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22894390274304 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22894188947840 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22893987621376 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22893786294912 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22893584968448 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22893383641984 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22893182315520 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22892980989056 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22892779662592 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22892578336128 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22892377009664 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22892175683200 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22891974356736 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22891773030272 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22891571703808 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22891370377344 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22891169050880 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22890967724416 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22890766397952 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22890565071488 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22890363745024 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22890162418560 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22889961092096 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22889759765632 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22889558439168 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22889357112704 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22889155786240 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22888954459776 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22901353973504 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22901347383040 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6800, cols: 136, reductionFactor: 33, colBlockingSize: 12)                                 	 2.10125   	 1300      	 160.342   	 0         	 4.66879   	 34.3434   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 136, m: 136)                                                                               	 1.51532   	 700       	 10.8455   	 0         	 0.205564  	 52.7596   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 136, n: 50, r2new: 136)	 0.555294  	 700       	 169.658   	 0         	 14.5028   	 11.6982   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 136, m: 136)                                                                                	 0.442225  	 900       	 6.82581   	 0         	 0.905631  	 7.53708   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 136, n: 50, r: 136, r2: 136)                          	 0.423979  	 700       	 415.308   	 0         	 24.6742   	 16.8317   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6800, r: 136, r2: 136, leftOrthog: 1)                      	 0.387762  	 600       	 389.226   	 0         	 34.8014   	 11.1842   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 6800, Xcols: 136, r: 136, streamingCols: 0)                                 	 0.33638   	 700       	 261.73    	 0         	 30.9458   	 8.45771   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 136, reductionFactor: 33, colBlockingSize: 12)                                 	 0.264535  	 200       	 72.0376   	 0         	 2.16831   	 33.223    
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 136, m: 6800)                                                                                 	 0.206866  	 700       	 0         	 0         	 50.07     	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 136, r1_: 136, n: 50, r2: 136)                        	 0.154938  	 600       	 974.114   	 0         	 57.8739   	 16.8317   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 6800, m: 136)                                                                        	 0.146284  	 700       	 0         	 0         	 70.8057   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 136)                                                                                	 0.0654299 	 100       	 4.41185   	 0         	 0.197463  	 22.3426   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 86, n: 50, r2: 86)                                                                                                         	 0.0455078 	 800       	 0         	 0         	 104.014   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                                 	 0.0418028 	 100       	 2.79088   	 0         	 0.144488  	 19.3157   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 136, n: 50, r2new: 50) 	 0.0416106 	 100       	 118.912   	 0         	 16.1805   	 7.3491    
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 136, reductionFactor: 33, colBlockingSize: 12)                                   	 0.0347711 	 200       	 10.9611   	 0         	 1.164     	 9.41675   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6800, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0289104 	 100       	 120.783   	 0         	 9.47757   	 12.7441   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 136, r2: 136, leftOrthog: 1)                      	 0.02845   	 100       	 325.062   	 0         	 29.7221   	 10.9367   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 136, r: 136, streamingCols: 0)                                 	 0.0270779 	 100       	 170.767   	 0         	 20.3634   	 8.38595   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 136, n: 50, r: 136, r2: 50)                           	 0.0229433 	 100       	 403.08    	 0         	 44.3388   	 9.09091   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6800, r: 50, r2: 50, leftOrthog: 1)                        	 0.0158284 	 100       	 214.804   	 0         	 51.8056   	 4.14634   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 136, r1_: 136, n: 50, r2: 50)                         	 0.0147507 	 100       	 626.952   	 0         	 37.8826   	 16.5498   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 136, r1_: 50, n: 50, r2: 136)                         	 0.0125906 	 100       	 734.519   	 0         	 80.797    	 9.09091   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 136, m: 136, fromLeft: 1)                              	 0.0124611 	 800       	 0         	 0         	 18.9991   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 136, m: 2500)                                                                                 	 0.00924717	 100       	 0         	 0         	 58.8288   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 136)                                                                        	 0.00755966	 100       	 0         	 0         	 71.9609   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 136, leftOrthog: 1)                         	 0.00377864	 100       	 17.9959   	 0         	 5.3776    	 3.34646   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 136)  	 0.00276663	 100       	 66.854    	 0         	 9.28091   	 7.20339   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 136, n: 50, r2new: 1)  	 0.00183987	 100       	 0.739182  	 0         	 5.91433   	 0.124982  
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 136, r: 50, streamingCols: 0)                                    	 0.00178222	 100       	 7.01374   	 0         	 2.8055    	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 136, r2: 136)                            	 0.00172997	 100       	 106.915   	 0         	 14.8424   	 7.20339   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 136, n: 50, r: 2, r2: 1)                              	 0.00109098	 100       	 2.49318   	 0         	 14.9605   	 0.16665   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 136)                            	 0.000845556	 100       	 0         	 0         	 12.8673   	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000815806	 100       	 0.612891  	 0         	 2.45156   	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000811533	 100       	 30.8059   	 0         	 7.39341   	 4.16667   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 136)                                                                          	 0.000795858	 100       	 0         	 0         	 13.6708   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 136)                                                                                                         	 0.000527816	 100       	 0         	 0         	 20.6132   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                    	 0.000500252	 100       	 0         	 0         	 7.99597   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 86, n: 50, r2: 1)                                                                                                          	 0.00045406	 100       	 0         	 0         	 15.1522   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 86)                                                                                                          	 0.000442662	 100       	 0         	 0         	 15.5423   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000352874	 100       	 0.708468  	 0         	 11.3355   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 136, m: 50, fromLeft: 1)                               	 0.000268729	 100       	 0         	 0         	 40.4869   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 7.58094   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 7.58091   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 4.48049   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 4.47924   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 3.9987    	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 2.49154   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 2.42947   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 1.62255   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 1.25337   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 1.17737   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.601511  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.449743  	 1000      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.442225  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.435819  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.36524   	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.216613  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.183091  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.15464   	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0469324 	 1100      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0127298 	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00713548	 6400      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.00710209	 1800      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00116853	 4600      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000845556	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000815806	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000352874	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22672932636544 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22672729696256 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22672528369792 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22672327043328 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22672125716864 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22671924390400 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22671723063936 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22671521737472 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22671320411008 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22671119084544 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22670917758080 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22670716431616 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22670515105152 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22670313778688 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22670112452224 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22669911125760 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22669709799296 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22669508472832 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22669307146368 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22669105819904 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22668904493440 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22668703166976 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22668501840512 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22668300514048 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22668099187584 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22667897861120 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22667696534656 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22667495208192 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22667293881728 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22667092555264 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22666891228800 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22666689902336 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22666488571776 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22666287245312 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22666085918848 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22665884592384 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22665683265920 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22665481939456 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22665280612992 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22665079286528 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22664877960064 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22664676633600 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22664475307136 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22664273980672 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22664072654208 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22663871327744 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22663670001280 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22663468674816 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22663267348352 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22663066021888 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22662864695424 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22662663368960 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22662462042496 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22662260716032 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22662059389568 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22661858063104 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22661656736640 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22661455410176 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22661254083712 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22661052757248 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22660851430784 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22660650104320 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22660448777856 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22672826976000 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22672820385536 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6850, cols: 137, reductionFactor: 33, colBlockingSize: 12)                                 	 2.14151   	 1300      	 160.824   	 0         	 4.64862   	 34.596    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 137, m: 137)                                                                               	 1.5823    	 700       	 10.6172   	 0         	 0.199764  	 53.1485   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 137, n: 50, r2new: 137)	 0.575992  	 700       	 167.644   	 0         	 14.2011   	 11.805    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 137, m: 137)                                                                                	 0.458635  	 900       	 6.72784   	 0         	 0.886101  	 7.59264   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 137, n: 50, r: 137, r2: 137)                          	 0.447418  	 700       	 402.297   	 0         	 23.7267   	 16.9554   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6850, r: 137, r2: 137, leftOrthog: 1)                      	 0.401242  	 600       	 384.509   	 0         	 34.1287   	 11.2664   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 6850, Xcols: 137, r: 137, streamingCols: 0)                                 	 0.345957  	 700       	 260.14    	 0         	 30.5332   	 8.5199    
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 137, reductionFactor: 33, colBlockingSize: 12)                                 	 0.28336   	 200       	 68.2446   	 0         	 2.03992   	 33.4546   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 6850, m: 137)                                                                        	 0.227398  	 700       	 0         	 0         	 46.2213   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 137, m: 6850)                                                                                 	 0.185862  	 700       	 0         	 0         	 56.5507   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 137, r1_: 137, n: 50, r2: 137)                        	 0.159988  	 600       	 964.327   	 0         	 56.8742   	 16.9554   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 137)                                                                                	 0.0665229 	 100       	 4.36942   	 0         	 0.195422  	 22.359    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 87, n: 50, r2: 87)                                                                                                         	 0.0530899 	 800       	 0         	 0         	 91.2446   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 137, n: 50, r2new: 50) 	 0.0442355 	 100       	 113.811   	 0         	 15.4229   	 7.37937   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                                 	 0.0442295 	 100       	 2.63776   	 0         	 0.13656   	 19.3157   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 137, reductionFactor: 33, colBlockingSize: 12)                                   	 0.0350294 	 200       	 11.0409   	 0         	 1.17017   	 9.43526   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6850, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0298255 	 100       	 117.938   	 0         	 9.25381   	 12.7448   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 137, r2: 137, leftOrthog: 1)                      	 0.0288217 	 100       	 325.605   	 0         	 29.5621   	 11.0143   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 137, r: 137, streamingCols: 0)                                 	 0.0266983 	 100       	 175.751   	 0         	 20.8069   	 8.44678   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 137, n: 50, r: 137, r2: 50)                           	 0.0232746 	 100       	 403.208   	 0         	 44.2646   	 9.10904   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6850, r: 50, r2: 50, leftOrthog: 1)                        	 0.0168404 	 100       	 203.38    	 0         	 49.0488   	 4.14649   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 137, r1_: 137, n: 50, r2: 50)                         	 0.0150711 	 100       	 622.684   	 0         	 37.3574   	 16.6683   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 137, r1_: 50, n: 50, r2: 137)                         	 0.013854  	 100       	 677.388   	 0         	 74.3643   	 9.10904   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 137, m: 137, fromLeft: 1)                              	 0.0125142 	 800       	 0         	 0         	 19.1976   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 137)                                                                        	 0.00865086	 100       	 0         	 0         	 63.3463   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 137, m: 2500)                                                                                 	 0.00773244	 100       	 0         	 0         	 70.8703   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 137, n: 50, r2new: 1)  	 0.00336321	 100       	 0.407349  	 0         	 3.25927   	 0.124982  
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 137, leftOrthog: 1)                         	 0.00330352	 100       	 20.7355   	 0         	 6.18734   	 3.35127   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 137)  	 0.00266787	 100       	 70.3521   	 0         	 9.73632   	 7.22574   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 137, r: 50, streamingCols: 0)                                    	 0.00174886	 100       	 7.14753   	 0         	 2.85901   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 137, r2: 137)                            	 0.0016787 	 100       	 111.807   	 0         	 15.4734   	 7.22574   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 137, n: 50, r: 2, r2: 1)                              	 0.000971651	 100       	 2.81994   	 0         	 16.9213   	 0.16665   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000896822	 100       	 0.557524  	 0         	 2.2301    	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 137)                            	 0.00083218	 100       	 0         	 0         	 13.1702   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 137)                                                                          	 0.000803862	 100       	 0         	 0         	 13.6342   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000779406	 100       	 32.0757   	 0         	 7.69817   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 137)                                                                                                         	 0.000529062	 100       	 0         	 0         	 20.7159   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                    	 0.00051487	 100       	 0         	 0         	 7.76895   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 87)                                                                                                          	 0.000430906	 100       	 0         	 0         	 16.152    	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 87, n: 50, r2: 1)                                                                                                          	 0.000364609	 100       	 0         	 0         	 19.0889   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000331145	 100       	 0.754956  	 0         	 12.0793   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 137, m: 50, fromLeft: 1)                               	 0.000258798	 100       	 0         	 0         	 42.3496   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 7.75581   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 7.75578   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 4.47026   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 4.46895   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 4.08808   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 2.63173   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 2.48973   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 1.69305   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 1.28787   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 1.20309   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.626259  	 1000      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.473343  	 1000      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.458635  	 900       
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.450208  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.374404  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.236853  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.194109  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.189693  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0544144 	 1100      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.0236799 	 4600      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.0220744 	 1800      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.012773  	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00575344	 6400      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000896822	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.00083218	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000331145	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22616509953920 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22616291141632 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22616089815168 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22615888488704 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22615687162240 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22615485835776 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22615284509312 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22615083182848 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22614881856384 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22614680529920 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22614479203456 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22614277876992 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22614076550528 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22613875224064 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22613673897600 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22613472571136 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22613271244672 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22613069918208 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22612868591744 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22612667265280 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22612465938816 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22612264612352 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22612063285888 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22611861959424 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22611660632960 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22611459306496 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22611257980032 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22611056653568 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22610855327104 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22610654000640 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22610452674176 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22610251347712 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22610050017152 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22609848690688 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22609647364224 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22609446037760 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22609244711296 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22609043384832 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22608842058368 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22608640731904 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22608439405440 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22608238078976 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22608036752512 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22607835426048 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22607634099584 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22607432773120 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22607231446656 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22607030120192 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22606828793728 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22606627467264 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22606426140800 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22606224814336 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22606023487872 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22605822161408 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22605620834944 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22605419508480 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22605218182016 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22605016855552 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22604815529088 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22604614202624 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22604412876160 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22604211549696 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22604010223232 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22616404293376 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22616397702912 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6900, cols: 138, reductionFactor: 32, colBlockingSize: 12)                                 	 2.15551   	 1300      	 163.454   	 0         	 4.68611   	 34.8805   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 138, m: 138)                                                                               	 1.57885   	 700       	 10.8751   	 0         	 0.20313   	 53.5373   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 138, n: 50, r2new: 138)	 0.566206  	 700       	 174.772   	 0         	 14.6719   	 11.9121   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 138, m: 138)                                                                                	 0.543704  	 900       	 5.80038   	 0         	 0.758399  	 7.64819   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 138, n: 50, r: 138, r2: 138)                          	 0.438797  	 700       	 419.249   	 0         	 24.5473   	 17.0792   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6900, r: 138, r2: 138, leftOrthog: 1)                      	 0.391719  	 600       	 402.544   	 0         	 35.4706   	 11.3487   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 6900, Xcols: 138, r: 138, streamingCols: 0)                                 	 0.357293  	 700       	 257.443   	 0         	 29.9977   	 8.58209   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 138, reductionFactor: 32, colBlockingSize: 12)                                 	 0.271196  	 200       	 72.4166   	 0         	 2.14778   	 33.7169   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 138, m: 6900)                                                                                 	 0.212949  	 700       	 0         	 0         	 50.0806   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 6900, m: 138)                                                                        	 0.195196  	 700       	 0         	 0         	 54.6356   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 138, r1_: 138, n: 50, r2: 138)                        	 0.163185  	 600       	 966.289   	 0         	 56.5769   	 17.0792   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 138)                                                                                	 0.0672619 	 100       	 4.35115   	 0         	 0.194464  	 22.3751   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 88, n: 50, r2: 88)                                                                                                         	 0.0540657 	 800       	 0         	 0         	 91.6693   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 138, n: 50, r2new: 50) 	 0.0434614 	 100       	 117.852   	 0         	 15.9056   	 7.40944   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                                 	 0.0424382 	 100       	 2.7491    	 0         	 0.142325  	 19.3157   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 138, reductionFactor: 32, colBlockingSize: 12)                                   	 0.0387342 	 200       	 10.1405   	 0         	 1.07167   	 9.46227   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6900, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0296572 	 100       	 119.473   	 0         	 9.37379   	 12.7455   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 138, r2: 138, leftOrthog: 1)                      	 0.0286552 	 100       	 332.295   	 0         	 29.9586   	 11.0918   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 138, r: 138, streamingCols: 0)                                 	 0.0271215 	 100       	 175.544   	 0         	 20.6337   	 8.5076    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 138, n: 50, r: 138, r2: 50)                           	 0.0237957 	 100       	 400.156   	 0         	 43.8431   	 9.12698   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6900, r: 50, r2: 50, leftOrthog: 1)                        	 0.0178217 	 100       	 193.584   	 0         	 46.6846   	 4.14663   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 138, r1_: 138, n: 50, r2: 50)                         	 0.0162059 	 100       	 587.565   	 0         	 35.0018   	 16.7867   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 138, r1_: 50, n: 50, r2: 138)                         	 0.0137805 	 100       	 690.974   	 0         	 75.7067   	 9.12698   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 138, m: 138, fromLeft: 1)                              	 0.013171  	 800       	 0         	 0         	 18.5076   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 138)                                                                        	 0.00818361	 100       	 0         	 0         	 67.4519   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 138, m: 2500)                                                                                 	 0.00806016	 100       	 0         	 0         	 68.485    	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 138, leftOrthog: 1)                         	 0.00409383	 100       	 16.8546   	 0         	 5.02219   	 3.35603   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 138)  	 0.00268888	 100       	 70.825    	 0         	 9.77179   	 7.2479    
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 138, r: 50, streamingCols: 0)                                    	 0.00181762	 100       	 6.87713   	 0         	 2.75085   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 138, r2: 138)                            	 0.00168999	 100       	 112.687   	 0         	 15.5475   	 7.2479    
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 138, n: 50, r2new: 1)  	 0.00142696	 100       	 0.967093  	 0         	 7.73786   	 0.124982  
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000889608	 100       	 0.562045  	 0         	 2.24818   	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000846741	 100       	 29.525    	 0         	 7.08599   	 4.16667   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 138)                            	 0.000843424	 100       	 0         	 0         	 13.0895   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 138, n: 50, r: 2, r2: 1)                              	 0.000715131	 100       	 3.85943   	 0         	 23.1588   	 0.166651  
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 138)                                                                          	 0.000671754	 100       	 0         	 0         	 16.4346   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 138)                                                                                                         	 0.000555166	 100       	 0         	 0         	 19.8859   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                    	 0.000545406	 100       	 0         	 0         	 7.33399   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 88)                                                                                                          	 0.00041737	 100       	 0         	 0         	 16.8675   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 88, n: 50, r2: 1)                                                                                                          	 0.000377871	 100       	 0         	 0         	 18.6307   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000330459	 100       	 0.756524  	 0         	 12.1044   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 138, m: 50, fromLeft: 1)                               	 0.000271707	 100       	 0         	 0         	 40.632    	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 7.95103   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 7.95099   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 4.61473   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 4.61342   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 4.12439   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 2.71369   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 2.49509   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 1.68855   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 1.284     	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 1.21224   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.613783  	 1000      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.543704  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.464998  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.44229   	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.386232  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.221555  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.204051  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.194019  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0554161 	 1100      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.0175905 	 4600      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.0142644 	 1800      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0134427 	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00703358	 6400      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000889608	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000843424	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000330459	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23083538843520 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23083301726208 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23083100399744 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23082899073280 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23082697746816 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23082496420352 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23082295093888 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23082093767424 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23081892440960 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23081691114496 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23081489788032 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23081288461568 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23081087135104 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23080885808640 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23080684482176 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23080483155712 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23080281829248 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23080080502784 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23079879176320 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23079677849856 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23079476523392 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23079275196928 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23079073870464 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23078872544000 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23078671217536 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23078469891072 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23078268564608 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23078067238144 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23077865911680 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23077664585216 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23077463258752 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23077261932288 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23077060601728 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23076859275264 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23076657948800 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23076456622336 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23076255295872 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23076053969408 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23075852642944 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23075651316480 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23075449990016 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23075248663552 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23075047337088 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23074846010624 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23074644684160 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23074443357696 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23074242031232 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23074040704768 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23073839378304 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23073638051840 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23073436725376 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23073235398912 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23073034072448 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23072832745984 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23072631419520 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23072430093056 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23072228766592 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23072027440128 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23071826113664 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23071624787200 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23071423460736 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23071222134272 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23071020807808 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23083433182976 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23083426592512 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6950, cols: 139, reductionFactor: 32, colBlockingSize: 12)                                 	 2.15165   	 1300      	 167.332   	 0         	 4.76279   	 35.1333   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 139, m: 139)                                                                               	 1.60339   	 700       	 10.9431   	 0         	 0.202927  	 53.9262   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 139, n: 50, r2new: 139)	 0.56478   	 700       	 179.532   	 0         	 14.9367   	 12.0195   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 139, m: 139)                                                                                	 0.552243  	 900       	 5.83573   	 0         	 0.757519  	 7.70375   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 139, n: 50, r: 139, r2: 139)                          	 0.438228  	 700       	 428.985   	 0         	 24.9367   	 17.203    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6950, r: 139, r2: 139, leftOrthog: 1)                      	 0.398209  	 600       	 404.655   	 0         	 35.4      	 11.4309   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 6950, Xcols: 139, r: 139, streamingCols: 0)                                 	 0.362225  	 700       	 259.498   	 0         	 30.0197   	 8.64428   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 139, reductionFactor: 32, colBlockingSize: 12)                                 	 0.272596  	 200       	 73.0928   	 0         	 2.15306   	 33.9484   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 6950, m: 139)                                                                        	 0.21433   	 700       	 0         	 0         	 50.4819   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 139, m: 6950)                                                                                 	 0.203526  	 700       	 0         	 0         	 53.1615   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 139, r1_: 139, n: 50, r2: 139)                        	 0.170192  	 600       	 946.794   	 0         	 55.0366   	 17.203    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 139)                                                                                	 0.0688008 	 100       	 4.2829    	 0         	 0.191277  	 22.3911   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 89, n: 50, r2: 89)                                                                                                         	 0.0536183 	 800       	 0         	 0         	 94.5468   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 139, n: 50, r2new: 50) 	 0.0444752 	 100       	 117.155   	 0         	 15.7481   	 7.43932   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                                 	 0.0429353 	 100       	 2.71727   	 0         	 0.140677  	 19.3157   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 139, reductionFactor: 32, colBlockingSize: 12)                                   	 0.0325727 	 200       	 12.234    	 0         	 1.29045   	 9.48041   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 6950, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0297807 	 100       	 119.84    	 0         	 9.40206   	 12.7461   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 139, r2: 139, leftOrthog: 1)                      	 0.028682  	 100       	 336.815   	 0         	 30.1553   	 11.1693   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 139, r: 139, streamingCols: 0)                                 	 0.0273032 	 100       	 176.912   	 0         	 20.647    	 8.5684    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 139, n: 50, r: 139, r2: 50)                           	 0.0240875 	 100       	 401.058   	 0         	 43.8567   	 9.14474   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 6950, r: 50, r2: 50, leftOrthog: 1)                        	 0.0178248 	 100       	 194.953   	 0         	 47.013    	 4.14678   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 139, r1_: 139, n: 50, r2: 50)                         	 0.0159728 	 100       	 604.81    	 0         	 35.7769   	 16.905    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 139, r1_: 50, n: 50, r2: 139)                         	 0.0143504 	 100       	 673.186   	 0         	 73.6146   	 9.14474   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 139, m: 139, fromLeft: 1)                              	 0.0130948 	 800       	 0         	 0         	 18.8861   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 139)                                                                        	 0.00842593	 100       	 0         	 0         	 65.9868   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 139, m: 2500)                                                                                 	 0.00827252	 100       	 0         	 0         	 67.2105   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 139, leftOrthog: 1)                         	 0.00328953	 100       	 21.1276   	 0         	 6.28661   	 3.36074   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 139)  	 0.00280988	 100       	 68.7609   	 0         	 9.45834   	 7.26987   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 139, r2: 139)                            	 0.00175647	 100       	 109.999   	 0         	 15.1308   	 7.26987   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 139, r: 50, streamingCols: 0)                                    	 0.00168143	 100       	 7.43415   	 0         	 2.97366   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 139, n: 50, r2new: 1)  	 0.00148374	 100       	 0.936819  	 0         	 7.49563   	 0.124982  
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 139)                            	 0.000878373	 100       	 0         	 0         	 12.6598   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000818246	 100       	 30.5532   	 0         	 7.33276   	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000798782	 100       	 0.625953  	 0         	 2.50381   	 0.25      
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 139)                                                                          	 0.000773812	 100       	 0         	 0         	 14.3704   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 139, n: 50, r: 2, r2: 1)                              	 0.000661133	 100       	 4.2049    	 0         	 25.2318   	 0.166651  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 139)                                                                                                         	 0.000602261	 100       	 0         	 0         	 18.4638   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                    	 0.000500141	 100       	 0         	 0         	 7.99774   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 89)                                                                                                          	 0.00045511	 100       	 0         	 0         	 15.6446   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 89, n: 50, r2: 1)                                                                                                          	 0.000365169	 100       	 0         	 0         	 19.4978   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.00034889	 100       	 0.716558  	 0         	 11.4649   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 139, m: 50, fromLeft: 1)                               	 0.000291762	 100       	 0         	 0         	 38.1133   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 8.051     	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 8.05096   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 4.66358   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 4.66233   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 4.1771    	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 2.74165   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 2.4866    	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 1.71513   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 1.27843   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 1.20925   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.613549  	 1000      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.552243  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.464733  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.448005  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.391209  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.223529  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.212299  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.201334  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0550409 	 1100      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.0212172 	 1800      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0133865 	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00804478	 4600      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00655866	 6400      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000878373	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000798782	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.00034889	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23340352411520 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23340127348736 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23339926022272 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23339724695808 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23339523369344 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23339322042880 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23339120716416 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23338919389952 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23338718063488 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23338516737024 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23338315410560 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23338114084096 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23337912757632 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23337711431168 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23337510104704 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23337308778240 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23337107451776 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23336906125312 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23336704798848 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23336503472384 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23336302145920 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23336100819456 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23335899492992 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23335698166528 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23335496840064 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23335295513600 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23335094187136 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23334892860672 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23334691534208 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23334490207744 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23334288881280 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23334087554816 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23333886224256 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23333684897792 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23333483571328 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23333282244864 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23333080918400 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23332879591936 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23332678265472 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23332476939008 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23332275612544 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23332074286080 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23331872959616 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23331671633152 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23331470306688 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23331268980224 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23331067653760 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23330866327296 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23330665000832 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23330463674368 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23330262347904 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23330061021440 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23329859694976 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23329658368512 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23329457042048 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23329255715584 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23329054389120 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23328853062656 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23328651736192 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23328450409728 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23328249083264 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23328047756800 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23327846430336 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23340246750976 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23340240160512 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 7000, cols: 140, reductionFactor: 32, colBlockingSize: 12)                                 	 2.19127   	 1300      	 167.879   	 0         	 4.74421   	 35.386    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 140, m: 140)                                                                               	 1.57304   	 700       	 11.3967   	 0         	 0.209825  	 54.3151   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 140, n: 50, r2new: 140)	 0.590239  	 700       	 175.996   	 0         	 14.5124   	 12.1274   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 140, m: 140)                                                                                	 0.549979  	 900       	 5.98714   	 0         	 0.771608  	 7.7593    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 140, n: 50, r: 140, r2: 140)                          	 0.45276   	 700       	 424.242   	 0         	 24.4848   	 17.3267   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 7000, r: 140, r2: 140, leftOrthog: 1)                      	 0.403043  	 600       	 408.492   	 0         	 35.4804   	 11.5132   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 7000, Xcols: 140, r: 140, streamingCols: 0)                                 	 0.370144  	 700       	 259.467   	 0         	 29.8016   	 8.70647   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 140, reductionFactor: 32, colBlockingSize: 12)                                 	 0.277629  	 200       	 72.8041   	 0         	 2.13004   	 34.1797   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 140, m: 7000)                                                                                 	 0.215831  	 700       	 0         	 0         	 50.8546   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 7000, m: 140)                                                                        	 0.207526  	 700       	 0         	 0         	 52.8898   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 140, r1_: 140, n: 50, r2: 140)                        	 0.169542  	 600       	 971.088   	 0         	 56.0457   	 17.3267   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 140)                                                                                	 0.0724721 	 100       	 4.09353   	 0         	 0.182691  	 22.4068   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 140, n: 50, r2new: 50) 	 0.0544341 	 100       	 97.3654   	 0         	 13.0359   	 7.469     
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 90, n: 50, r2: 90)                                                                                                         	 0.0490244 	 800       	 0         	 0         	 105.743   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                                 	 0.043893  	 100       	 2.65798   	 0         	 0.137608  	 19.3157   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 140, reductionFactor: 32, colBlockingSize: 12)                                   	 0.0360543 	 200       	 11.2122   	 0         	 1.18044   	 9.49836   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 7000, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0297983 	 100       	 120.631   	 0         	 9.46364   	 12.7468   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 140, r2: 140, leftOrthog: 1)                      	 0.0295172 	 100       	 332.009   	 0         	 29.5204   	 11.2468   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 140, r: 140, streamingCols: 0)                                 	 0.0277898 	 100       	 176.323   	 0         	 20.4334   	 8.62919   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 140, n: 50, r: 140, r2: 50)                           	 0.0235123 	 100       	 416.803   	 0         	 45.491    	 9.1623    
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 140)                                                                        	 0.0215581 	 100       	 0         	 0         	 25.9763   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 7000, r: 50, r2: 50, leftOrthog: 1)                        	 0.0162461 	 100       	 215.437   	 0         	 51.951    	 4.14692   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 140, r1_: 140, n: 50, r2: 50)                         	 0.0154231 	 100       	 635.41    	 0         	 37.3258   	 17.0233   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 140, r1_: 50, n: 50, r2: 140)                         	 0.014595  	 100       	 671.463   	 0         	 73.2854   	 9.1623    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 140, m: 140, fromLeft: 1)                              	 0.0133164 	 800       	 0         	 0         	 18.8399   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 140, m: 2500)                                                                                 	 0.00917903	 100       	 0         	 0         	 61.0086   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 140, leftOrthog: 1)                         	 0.00321008	 100       	 21.8063   	 0         	 6.47959   	 3.36538   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 140)  	 0.00268463	 100       	 73.0081   	 0         	 10.0125   	 7.29167   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 140, r: 50, streamingCols: 0)                                    	 0.00177429	 100       	 7.04506   	 0         	 2.81803   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 140, r2: 140)                            	 0.00170663	 100       	 114.846   	 0         	 15.7503   	 7.29167   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 140, n: 50, r2new: 1)  	 0.0015342 	 100       	 0.912526  	 0         	 7.30125   	 0.124982  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000962313	 100       	 25.9791   	 0         	 6.23498   	 4.16667   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 140)                            	 0.0008137 	 100       	 0         	 0         	 13.7643   	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000810211	 100       	 0.617123  	 0         	 2.46849   	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 140, n: 50, r: 2, r2: 1)                              	 0.00079049	 100       	 3.54211   	 0         	 21.2547   	 0.166651  
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 140)                                                                                                         	 0.000528959	 100       	 0         	 0         	 21.1737   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 140)                                                                          	 0.00052374	 100       	 0         	 0         	 21.3847   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                    	 0.000498686	 100       	 0         	 0         	 8.02108   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 90)                                                                                                          	 0.000430067	 100       	 0         	 0         	 16.7416   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 90, n: 50, r2: 1)                                                                                                          	 0.000393144	 100       	 0         	 0         	 18.3139   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000323009	 100       	 0.773972  	 0         	 12.3836   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 140, m: 50, fromLeft: 1)                               	 0.000281415	 100       	 0         	 0         	 39.7989   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 8.11562   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 8.11558   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 4.63596   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 4.63474   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 4.1667    	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 2.78774   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 2.53475   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 1.68941   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 1.31466   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 1.22115   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.648892  	 1000      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.549979  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.47877   	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.452017  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.399708  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.229608  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.225509  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.200522  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0503766 	 1100      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.01943   	 1800      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0135978 	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00675105	 6400      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00152931	 4600      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.0008137 	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000810211	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000323009	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23077554939776 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23077329037312 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23077127710848 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23076926384384 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23076725057920 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23076523731456 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23076322404992 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23076121078528 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23075919752064 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23075718425600 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23075517099136 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23075315772672 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23075114446208 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23074913119744 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23074711793280 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23074510466816 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23074309140352 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23074107813888 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23073906487424 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23073705160960 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23073503834496 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23073302508032 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23073101181568 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23072899855104 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23072698528640 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23072497202176 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23072295875712 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23072094549248 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23071893222784 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23071691896320 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23071490569856 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23071289243392 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23071087912832 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23070886586368 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23070685259904 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23070483933440 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23070282606976 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23070081280512 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23069879954048 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23069678627584 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23069477301120 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23069275974656 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23069074648192 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23068873321728 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23068671995264 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23068470668800 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23068269342336 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23068068015872 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23067866689408 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23067665362944 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23067464036480 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23067262710016 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23067061383552 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23066860057088 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23066658730624 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23066457404160 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23066256077696 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23066054751232 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23065853424768 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23065652098304 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23065450771840 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23065249445376 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23065048118912 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23077449279232 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23077442688768 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 7050, cols: 141, reductionFactor: 32, colBlockingSize: 12)                                 	 2.22338   	 1300      	 169.025   	 0         	 4.74272   	 35.6388   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 141, m: 141)                                                                               	 1.65591   	 700       	 11.06     	 0         	 0.202179  	 54.704    
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 141, n: 50, r2new: 141)	 0.588649  	 700       	 180.767   	 0         	 14.774    	 12.2355   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 141, m: 141)                                                                                	 0.568946  	 900       	 5.91245   	 0         	 0.756566  	 7.81486   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 141, n: 50, r: 141, r2: 141)                          	 0.448384  	 700       	 437.628   	 0         	 25.0783   	 17.4505   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 7050, r: 141, r2: 141, leftOrthog: 1)                      	 0.413639  	 600       	 406.619   	 0         	 35.0673   	 11.5954   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 7050, Xcols: 141, r: 141, streamingCols: 0)                                 	 0.374657  	 700       	 261.874   	 0         	 29.8647   	 8.76866   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 141, reductionFactor: 32, colBlockingSize: 12)                                 	 0.277674  	 200       	 73.8358   	 0         	 2.14572   	 34.4108   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 7050, m: 141)                                                                        	 0.226371  	 700       	 0         	 0         	 49.1819   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 141, m: 7050)                                                                                 	 0.189071  	 700       	 0         	 0         	 58.8845   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 141, r1_: 141, n: 50, r2: 141)                        	 0.17104   	 600       	 983.354   	 0         	 56.3511   	 17.4505   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 141)                                                                                	 0.0716637 	 100       	 4.16761   	 0         	 0.185868  	 22.4224   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 91, n: 50, r2: 91)                                                                                                         	 0.057462  	 800       	 0         	 0         	 92.2321   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 141, n: 50, r2new: 50) 	 0.0448509 	 100       	 120.187   	 0         	 16.0282   	 7.49847   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                                 	 0.0431483 	 100       	 2.70386   	 0         	 0.139982  	 19.3157   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 141, reductionFactor: 32, colBlockingSize: 12)                                   	 0.0357981 	 200       	 11.4544   	 0         	 1.20368   	 9.51612   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 7050, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0304546 	 100       	 118.875   	 0         	 9.32537   	 12.7474   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 141, r2: 141, leftOrthog: 1)                      	 0.0291221 	 100       	 341.339   	 0         	 30.1424   	 11.3242   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 141, r: 141, streamingCols: 0)                                 	 0.0272348 	 100       	 182.496   	 0         	 21.0008   	 8.68997   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 141, n: 50, r: 141, r2: 50)                           	 0.0238782 	 100       	 416.301   	 0         	 45.3502   	 9.17969   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 7050, r: 50, r2: 50, leftOrthog: 1)                        	 0.0176995 	 100       	 199.158   	 0         	 48.024    	 4.14706   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 141, r1_: 141, n: 50, r2: 50)                         	 0.0158194 	 100       	 628.376   	 0         	 36.6579   	 17.1416   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 141, r1_: 50, n: 50, r2: 141)                         	 0.0151997 	 100       	 653.995   	 0         	 71.2437   	 9.17969   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 141, m: 141, fromLeft: 1)                              	 0.0137753 	 800       	 0         	 0         	 18.4734   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 141)                                                                        	 0.00832825	 100       	 0         	 0         	 67.7213   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 141, m: 2500)                                                                                 	 0.00781018	 100       	 0         	 0         	 72.2135   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 141, leftOrthog: 1)                         	 0.00702804	 100       	 10.0313   	 0         	 2.97665   	 3.36998   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 141)  	 0.00277375	 100       	 71.6755   	 0         	 9.80074   	 7.31328   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 141, r2: 141)                            	 0.00179248	 100       	 110.913   	 0         	 15.166    	 7.31328   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 141, n: 50, r2new: 1)  	 0.00164222	 100       	 0.858592  	 0         	 6.86971   	 0.124982  
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 141, r: 50, streamingCols: 0)                                    	 0.00151958	 100       	 8.22596   	 0         	 3.29039   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 141, n: 50, r: 2, r2: 1)                              	 0.000859063	 100       	 3.28265   	 0         	 19.6977   	 0.166651  
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 141)                            	 0.000826253	 100       	 0         	 0         	 13.652    	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.00079942	 100       	 0.625453  	 0         	 2.50181   	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000776318	 100       	 32.2033   	 0         	 7.72879   	 4.16667   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 141)                                                                          	 0.000679563	 100       	 0         	 0         	 16.5989   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                    	 0.000540302	 100       	 0         	 0         	 7.40327   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 141)                                                                                                         	 0.000530858	 100       	 0         	 0         	 21.2486   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 91)                                                                                                          	 0.000484709	 100       	 0         	 0         	 15.0193   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 91, n: 50, r2: 1)                                                                                                          	 0.000370625	 100       	 0         	 0         	 19.6425   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000330841	 100       	 0.75565   	 0         	 12.0904   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 141, m: 50, fromLeft: 1)                               	 0.000281597	 100       	 0         	 0         	 40.0572   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 8.18264   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 8.1826    	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 4.70506   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 4.70384   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 4.26924   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 2.81286   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 2.56731   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 1.77072   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 1.32143   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 1.24696   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.637916  	 1000      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.568946  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.474914  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.467488  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.403411  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.235379  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.202836  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.197422  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0588482 	 1100      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.0222221 	 1800      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0140569 	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00558376	 6400      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00528845	 4600      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000826253	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.00079942	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000330841	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22978120431488 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22977940809728 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22977739483264 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22977538156800 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22977336830336 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22977135503872 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22976934177408 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22976732850944 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22976531524480 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22976330198016 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22976128871552 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22975927545088 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22975726218624 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22975524892160 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22975323565696 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22975122239232 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22974920912768 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22974719586304 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22974518259840 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22974316933376 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22974115606912 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22973914280448 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22973712953984 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22973511627520 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22973310301056 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22973108974592 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22972907648128 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22972706321664 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22972504995200 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22972303668736 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22972102342272 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22971901015808 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22971699685248 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22971498358784 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22971297032320 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22971095705856 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22970894379392 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22970693052928 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22970491726464 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22970290400000 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22970089073536 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22969887747072 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22969686420608 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22969485094144 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22969283767680 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22969082441216 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22968881114752 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22968679788288 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22968478461824 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22968277135360 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22968075808896 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22967874482432 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22967673155968 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22967471829504 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22967270503040 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22967069176576 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22966867850112 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22966666523648 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22966465197184 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22966263870720 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22966062544256 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22965861217792 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22965659891328 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22978014770944 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22977835947776 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 7100, cols: 142, reductionFactor: 32, colBlockingSize: 12)                                 	 2.26881   	 1300      	 169.19    	 0         	 4.71393   	 35.8915   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 142, m: 142)                                                                               	 1.65069   	 700       	 11.3327   	 0         	 0.205702  	 55.0929   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 142, n: 50, r2new: 142)	 0.603369  	 700       	 180.623   	 0         	 14.6324   	 12.344    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 142, m: 142)                                                                                	 0.574488  	 900       	 5.98088   	 0         	 0.75992   	 7.87041   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 142, n: 50, r: 142, r2: 142)                          	 0.461529  	 700       	 434.274   	 0         	 24.7108   	 17.5743   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 7100, r: 142, r2: 142, leftOrthog: 1)                      	 0.418591  	 600       	 410.418   	 0         	 35.1457   	 11.6776   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 7100, Xcols: 142, r: 142, streamingCols: 0)                                 	 0.383159  	 700       	 261.549   	 0         	 29.6177   	 8.83085   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 142, reductionFactor: 32, colBlockingSize: 12)                                 	 0.28281   	 200       	 73.5268   	 0         	 2.12249   	 34.6417   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 142, r1_: 142, n: 50, r2: 142)                        	 0.172675  	 600       	 994.916   	 0         	 56.6121   	 17.5743   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 142, m: 7100)                                                                                 	 0.155039  	 700       	 0         	 0         	 72.8322   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 7100, m: 142)                                                                        	 0.151772  	 700       	 0         	 0         	 74.3998   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 142)                                                                                	 0.0685062 	 100       	 4.3889    	 0         	 0.195603  	 22.4378   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 92, n: 50, r2: 92)                                                                                                         	 0.05733   	 800       	 0         	 0         	 94.4873   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 142, n: 50, r2new: 50) 	 0.0467233 	 100       	 117.329   	 0         	 15.5862   	 7.52774   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                                 	 0.0435686 	 100       	 2.67777   	 0         	 0.138632  	 19.3157   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 142, reductionFactor: 32, colBlockingSize: 12)                                   	 0.0363126 	 200       	 11.4528   	 0         	 1.2013    	 9.53369   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 142, r2: 142, leftOrthog: 1)                      	 0.0318179 	 100       	 316.865   	 0         	 27.7913   	 11.4016   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 7100, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0298503 	 100       	 122.141   	 0         	 9.58115   	 12.7481   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 142, r: 142, streamingCols: 0)                                 	 0.0281911 	 100       	 178.815   	 0         	 20.4343   	 8.75074   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 142, n: 50, r: 142, r2: 50)                           	 0.0259924 	 100       	 387.883   	 0         	 42.1754   	 9.19689   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 7100, r: 50, r2: 50, leftOrthog: 1)                        	 0.0180825 	 100       	 196.322   	 0         	 47.3385   	 4.1472    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 142, r1_: 142, n: 50, r2: 50)                         	 0.0156481 	 100       	 644.295   	 0         	 37.3292   	 17.2598   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 142, r1_: 50, n: 50, r2: 142)                         	 0.0146987 	 100       	 685.912   	 0         	 74.5809   	 9.19689   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 142, m: 142, fromLeft: 1)                              	 0.0143239 	 800       	 0         	 0         	 18.0188   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 142)                                                                        	 0.00941161	 100       	 0         	 0         	 60.351    	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 142, m: 2500)                                                                                 	 0.00807445	 100       	 0         	 0         	 70.3453   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 142, leftOrthog: 1)                         	 0.00380214	 100       	 18.6737   	 0         	 5.53373   	 3.37452   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 142)  	 0.0028946 	 100       	 69.6608   	 0         	 9.49742   	 7.33471   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 142, r: 50, streamingCols: 0)                                    	 0.00209845	 100       	 5.95677   	 0         	 2.38271   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 142, r2: 142)                            	 0.00186698	 100       	 108.003   	 0         	 14.725    	 7.33471   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 142, n: 50, r2new: 1)  	 0.00168419	 100       	 0.843135  	 0         	 6.74603   	 0.124982  
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000877535	 100       	 0.569778  	 0         	 2.27911   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 142)                            	 0.0008722 	 100       	 0         	 0         	 13.0245   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 142, n: 50, r: 2, r2: 1)                              	 0.000868252	 100       	 3.27094   	 0         	 19.6275   	 0.166651  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000803688	 100       	 31.1066   	 0         	 7.46558   	 4.16667   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 142)                                                                          	 0.000600937	 100       	 0         	 0         	 18.9038   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 142)                                                                                                         	 0.000542504	 100       	 0         	 0         	 20.9399   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                    	 0.000499271	 100       	 0         	 0         	 8.01168   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 92)                                                                                                          	 0.000453001	 100       	 0         	 0         	 16.2472   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 92, n: 50, r2: 1)                                                                                                          	 0.00037425	 100       	 0         	 0         	 19.666    	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000348226	 100       	 0.717925  	 0         	 11.4868   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 142, m: 50, fromLeft: 1)                               	 0.000306725	 100       	 0         	 0         	 37.0364   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 7.92354   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 7.92351   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 4.53851   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 4.5372    	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 4.29004   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 2.71318   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 2.61778   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 1.76277   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 1.34345   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 1.27541   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.654671  	 1000      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.574488  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.490257  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.472293  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.413449  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.203826  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.163613  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.161785  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0586998 	 1100      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0146306 	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00736095	 4600      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.00457297	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00404342	 6400      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000877535	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.0008722 	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000348226	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22947733641088 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22947540494336 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22947339167872 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22947137841408 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22946936514944 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22946735188480 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22946533862016 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22946332535552 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22946131209088 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22945929882624 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22945728556160 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22945527229696 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22945325903232 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22945124576768 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22944923250304 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22944721923840 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22944520597376 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22944319270912 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22944117944448 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22943916617984 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22943715291520 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22943513965056 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22943312638592 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22943111312128 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22942909985664 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22942708659200 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22942507332736 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22942306006272 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22942104679808 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22941903353344 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22941702026880 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22941500700416 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22941299369856 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22941098043392 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22940896716928 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22940695390464 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22940494064000 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22940292737536 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22940091411072 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22939890084608 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22939688758144 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22939487431680 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22939286105216 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22939084778752 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22938883452288 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22938682125824 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22938480799360 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22938279472896 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22938078146432 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22937876819968 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22937675493504 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22937474167040 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22937272840576 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22937071514112 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22936870187648 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22936668861184 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22936467534720 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22936266208256 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22936064881792 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22935863555328 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22935662228864 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22935460902400 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22935259575936 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22947627980544 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22947621390080 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 7150, cols: 143, reductionFactor: 31, colBlockingSize: 12)                                 	 2.2415    	 1300      	 175.066   	 0         	 4.8388    	 36.1796   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 143, m: 143)                                                                               	 1.72721   	 700       	 11.0611   	 0         	 0.199364  	 55.4818   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 143, n: 50, r2new: 143)	 0.580228  	 700       	 192.341   	 0         	 15.4456   	 12.4528   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 143, m: 143)                                                                                	 0.566197  	 900       	 6.19757   	 0         	 0.781933  	 7.92597   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 143, n: 50, r: 143, r2: 143)                          	 0.443828  	 700       	 461.203   	 0         	 26.0596   	 17.698    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 7150, r: 143, r2: 143, leftOrthog: 1)                      	 0.403764  	 600       	 434.542   	 0         	 36.9512   	 11.7599   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 7150, Xcols: 143, r: 143, streamingCols: 0)                                 	 0.390999  	 700       	 261.759   	 0         	 29.4341   	 8.89303   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 143, reductionFactor: 31, colBlockingSize: 12)                                 	 0.284841  	 200       	 74.1068   	 0         	 2.12301   	 34.9066   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 7150, m: 143)                                                                        	 0.208283  	 700       	 0         	 0         	 54.9801   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 143, m: 7150)                                                                                 	 0.193316  	 700       	 0         	 0         	 59.237    	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 143, r1_: 143, n: 50, r2: 143)                        	 0.175671  	 600       	 998.758   	 0         	 56.4333   	 17.698    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 143)                                                                                	 0.0673868 	 100       	 4.49149   	 0         	 0.200039  	 22.453    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 93, n: 50, r2: 93)                                                                                                         	 0.0592049 	 800       	 0         	 0         	 93.495    	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                                 	 0.0428303 	 100       	 2.72393   	 0         	 0.141022  	 19.3157   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 143, reductionFactor: 31, colBlockingSize: 12)                                   	 0.0371607 	 200       	 11.3607   	 0         	 1.18831   	 9.56042   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 143, n: 50, r2new: 50) 	 0.036724  	 100       	 151.794   	 0         	 20.0871   	 7.5568    
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 7150, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0305512 	 100       	 120.179   	 0         	 9.42679   	 12.7487   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 143, r2: 143, leftOrthog: 1)                      	 0.0294542 	 100       	 347.132   	 0         	 30.2408   	 11.4789   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 143, n: 50, r: 143, r2: 50)                           	 0.0284346 	 100       	 359.58    	 0         	 39.0257   	 9.21392   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 143, r: 143, streamingCols: 0)                                 	 0.0274723 	 100       	 186.088   	 0         	 21.1187   	 8.8115    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 143, m: 143, fromLeft: 1)                              	 0.0187738 	 800       	 0         	 0         	 13.9421   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 143, r1_: 143, n: 50, r2: 50)                         	 0.0157296 	 100       	 650.017   	 0         	 37.4046   	 17.378    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 7150, r: 50, r2: 50, leftOrthog: 1)                        	 0.0151924 	 100       	 235.314   	 0         	 56.7387   	 4.14733   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 143, r1_: 50, n: 50, r2: 143)                         	 0.0139532 	 100       	 732.772   	 0         	 79.5288   	 9.21392   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 143)                                                                        	 0.0079133 	 100       	 0         	 0         	 72.2834   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 143, m: 2500)                                                                                 	 0.00780638	 100       	 0         	 0         	 73.2734   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 143, leftOrthog: 1)                         	 0.00373113	 100       	 19.1631   	 0         	 5.67121   	 3.37902   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 143)  	 0.00285375	 100       	 71.6565   	 0         	 9.74127   	 7.35597   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 143, r: 50, streamingCols: 0)                                    	 0.00186041	 100       	 6.71896   	 0         	 2.68758   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 143, r2: 143)                            	 0.00180164	 100       	 113.502   	 0         	 15.4299   	 7.35597   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 143, n: 50, r2new: 1)  	 0.00157265	 100       	 0.909291  	 0         	 7.27534   	 0.124983  
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 143)                            	 0.000895998	 100       	 0         	 0         	 12.7679   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 143, n: 50, r: 2, r2: 1)                              	 0.00084048	 100       	 3.40282   	 0         	 20.4188   	 0.166651  
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000817499	 100       	 0.611622  	 0         	 2.44649   	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000785596	 100       	 31.823    	 0         	 7.63751   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 143)                                                                                                         	 0.000572791	 100       	 0         	 0         	 19.9724   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 143)                                                                          	 0.000563024	 100       	 0         	 0         	 20.3188   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                    	 0.000520039	 100       	 0         	 0         	 7.69173   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 93)                                                                                                          	 0.00043344	 100       	 0         	 0         	 17.165    	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 93, n: 50, r2: 1)                                                                                                          	 0.000378948	 100       	 0         	 0         	 19.6333   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000330246	 100       	 0.757011  	 0         	 12.1122   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 143, m: 50, fromLeft: 1)                               	 0.000329614	 100       	 0         	 0         	 34.7073   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 8.30876   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 8.30873   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 4.8135    	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 4.81227   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 4.35215   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 2.82342   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 2.59405   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 1.83743   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 1.33967   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 1.25545   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.621379  	 1000      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.566197  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.474904  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.452142  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.420331  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.21676   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.206139  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.201642  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.06059   	 1100      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0191035 	 900       
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.0150085 	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00678747	 6400      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00116181	 4600      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000895998	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000817499	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000330246	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22599816546176 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22599581034496 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22599379708032 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22599178381568 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22598977055104 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22598775728640 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22598574402176 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22598373075712 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22598171749248 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22597970422784 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22597769096320 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22597567769856 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22597366443392 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22597165116928 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22596963790464 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22596762464000 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22596561137536 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22596359811072 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22596158484608 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22595957158144 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22595755831680 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22595554505216 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22595353178752 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22595151852288 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22594950525824 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22594749199360 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22594547872896 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22594346546432 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22594145219968 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22593943893504 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22593742567040 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22593541240576 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22593339910016 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22593138583552 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22592937257088 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22592735930624 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22592534604160 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22592333277696 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22592131951232 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22591930624768 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22591729298304 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22591527971840 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22591326645376 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22591125318912 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22590923992448 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22590722665984 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22590521339520 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22590320013056 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22590118686592 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22589917360128 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22589716033664 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22589514707200 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22589313380736 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22589112054272 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22588910727808 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22588709401344 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22588508074880 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22588306748416 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22588105421952 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22587904095488 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22587702769024 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22587501442560 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22587300116096 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22599710885632 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22599704295168 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 7200, cols: 144, reductionFactor: 31, colBlockingSize: 12)                                 	 2.28919   	 1300      	 175.04    	 0         	 4.80447   	 36.4326   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 144, m: 144)                                                                               	 1.67109   	 700       	 11.6741   	 0         	 0.208948  	 55.8707   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 144, n: 50, r2new: 144)	 0.695853  	 700       	 164.211   	 0         	 13.0721   	 12.5619   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 144, m: 144)                                                                                	 0.579329  	 900       	 6.18506   	 0         	 0.774922  	 7.98152   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 144, n: 50, r: 144, r2: 144)                          	 0.459819  	 700       	 454.568   	 0         	 25.5063   	 17.8218   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 7200, r: 144, r2: 144, leftOrthog: 1)                      	 0.424325  	 600       	 422.221   	 0         	 35.6542   	 11.8421   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 7200, Xcols: 144, r: 144, streamingCols: 0)                                 	 0.394295  	 700       	 265.054   	 0         	 29.5977   	 8.95522   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 144, reductionFactor: 31, colBlockingSize: 12)                                 	 0.292258  	 200       	 73.2398   	 0         	 2.08438   	 35.1374   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 144, m: 7200)                                                                                 	 0.182564  	 700       	 0         	 0         	 63.6059   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 144, r1_: 144, n: 50, r2: 144)                        	 0.172943  	 600       	 1035.94   	 0         	 58.128    	 17.8218   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 7200, m: 144)                                                                        	 0.0801977 	 700       	 0         	 0         	 144.794   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 144)                                                                                	 0.0685008 	 100       	 4.44763   	 0         	 0.197954  	 22.468    
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 94, n: 50, r2: 94)                                                                                                         	 0.059598  	 800       	 0         	 0         	 94.8863   	 0         
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 144, reductionFactor: 31, colBlockingSize: 12)                                   	 0.0482689 	 200       	 8.86903   	 0         	 0.926013  	 9.57765   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 144, n: 50, r2new: 50) 	 0.0436187 	 100       	 129.944   	 0         	 17.1303   	 7.58565   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                                 	 0.0427483 	 100       	 2.72915   	 0         	 0.141292  	 19.3157   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 7200, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0304666 	 100       	 121.356   	 0         	 9.51864   	 12.7493   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 144, r2: 144, leftOrthog: 1)                      	 0.0303726 	 100       	 341.361   	 0         	 29.5391   	 11.5562   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 144, r: 144, streamingCols: 0)                                 	 0.0282539 	 100       	 183.479   	 0         	 20.6801   	 8.87224   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 144, n: 50, r: 144, r2: 50)                           	 0.027612  	 100       	 375.489   	 0         	 40.6779   	 9.23077   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 7200, r: 50, r2: 50, leftOrthog: 1)                        	 0.020107  	 100       	 179.042   	 0         	 43.1691   	 4.14747   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 144, m: 144, fromLeft: 1)                              	 0.0166613 	 800       	 0         	 0         	 15.9304   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 144, r1_: 144, n: 50, r2: 50)                         	 0.0165795 	 100       	 625.35    	 0         	 35.7422   	 17.4961   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 144, r1_: 50, n: 50, r2: 144)                         	 0.0154736 	 100       	 670.044   	 0         	 72.5881   	 9.23077   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 144)                                                                        	 0.0101736 	 100       	 0         	 0         	 56.6172   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 144, m: 2500)                                                                                 	 0.00974197	 100       	 0         	 0         	 59.1256   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 144, leftOrthog: 1)                         	 0.00319873	 100       	 22.5089   	 0         	 6.65263   	 3.38346   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 144)  	 0.00287008	 100       	 72.2489   	 0         	 9.79374   	 7.37705   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 144, n: 50, r2new: 1)  	 0.0020498 	 100       	 0.702508  	 0         	 5.62085   	 0.124983  
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 144, r: 50, streamingCols: 0)                                    	 0.00202868	 100       	 6.16165   	 0         	 2.46466   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 144, r2: 144)                            	 0.00179773	 100       	 115.345   	 0         	 15.6357   	 7.37705   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 144, n: 50, r: 2, r2: 1)                              	 0.00115392	 100       	 2.49584   	 0         	 14.9764   	 0.166651  
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 144)                            	 0.000902428	 100       	 0         	 0         	 12.7656   	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000896539	 100       	 0.5577    	 0         	 2.2308    	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000823623	 100       	 30.3537   	 0         	 7.28489   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 144)                                                                                                         	 0.000544681	 100       	 0         	 0         	 21.15     	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 144)                                                                          	 0.000541846	 100       	 0         	 0         	 21.2607   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                    	 0.000515299	 100       	 0         	 0         	 7.76248   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 94)                                                                                                          	 0.000429272	 100       	 0         	 0         	 17.518    	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 94, n: 50, r2: 1)                                                                                                          	 0.000368519	 100       	 0         	 0         	 20.406    	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.00032634	 100       	 0.766072  	 0         	 12.2572   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 144, m: 50, fromLeft: 1)                               	 0.000319782	 100       	 0         	 0         	 36.0245   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 8.50929   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 8.50925   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 5.02824   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 5.02693   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 4.3775    	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 2.73419   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 2.66019   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 1.78234   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 1.38612   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 1.27532   	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.744392  	 1000      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.579329  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.490383  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.478003  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.424577  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.205819  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.192821  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.0909131 	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0609405 	 1100      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.016981  	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00466592	 4600      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00448442	 6400      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.00377446	 1800      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000902428	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000896539	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.00032634	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22566086903680 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22565892384768 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22565691058304 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22565489731840 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22565288405376 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22565087078912 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22564885752448 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22564684425984 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22564483099520 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22564281773056 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22564080446592 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22563879120128 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22563677793664 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22563476467200 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22563275140736 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22563073814272 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22562872487808 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22562671161344 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22562469834880 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22562268508416 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22562067181952 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22561865855488 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22561664529024 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22561463202560 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22561261876096 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22561060549632 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22560859223168 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22560657896704 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22560456570240 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22560255243776 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22560053917312 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22559852590848 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22559651260288 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22559449933824 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22559248607360 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22559047280896 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22558845954432 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22558644627968 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22558443301504 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22558241975040 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22558040648576 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22557839322112 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22557637995648 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22557436669184 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22557235342720 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22557034016256 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22556832689792 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22556631363328 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22556430036864 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22556228710400 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22556027383936 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22555826057472 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22555624731008 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22555423404544 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22555222078080 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22555020751616 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22554819425152 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22554618098688 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22554416772224 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22554215445760 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22554014119296 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22553812792832 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22553611466368 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22565981243136 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22565974652672 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 7250, cols: 145, reductionFactor: 31, colBlockingSize: 12)                                 	 2.35797   	 1300      	 173.499   	 0         	 4.72935   	 36.6856   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 145, m: 145)                                                                               	 1.76632   	 700       	 11.2764   	 0         	 0.200435  	 56.2596   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 145, m: 145)                                                                                	 0.577188  	 900       	 6.33822   	 0         	 0.788623  	 8.03708   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 145, n: 50, r2new: 145)	 0.445958  	 700       	 262.309   	 0         	 20.7009   	 12.6714   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 7250, r: 145, r2: 145, leftOrthog: 1)                      	 0.419768  	 600       	 435.758   	 0         	 36.5436   	 11.9243   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 7250, Xcols: 145, r: 145, streamingCols: 0)                                 	 0.394136  	 700       	 270.724   	 0         	 30.0223   	 9.01741   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 145, reductionFactor: 31, colBlockingSize: 12)                                 	 0.308241  	 200       	 70.4099   	 0         	 1.99078   	 35.368    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 145, n: 50, r: 145, r2: 145)                          	 0.304921  	 700       	 699.865   	 0         	 38.9993   	 17.9455   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 7250, m: 145)                                                                        	 0.246907  	 700       	 0         	 0         	 47.686    	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 145, m: 7250)                                                                                 	 0.205866  	 700       	 0         	 0         	 57.1926   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 145, r1_: 145, n: 50, r2: 145)                        	 0.179169  	 600       	 1020.92   	 0         	 56.89     	 17.9455   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 145)                                                                                	 0.0779899 	 100       	 3.93213   	 0         	 0.174895  	 22.4829   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 95, n: 50, r2: 95)                                                                                                         	 0.063698  	 800       	 0         	 0         	 90.6779   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 145, n: 50, r2new: 50) 	 0.0471384 	 100       	 122.246   	 0         	 16.0548   	 7.6143    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                                 	 0.0440922 	 100       	 2.64597   	 0         	 0.136986  	 19.3157   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 145, reductionFactor: 31, colBlockingSize: 12)                                   	 0.0378659 	 200       	 11.4632   	 0         	 1.19474   	 9.59471   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 7250, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0309485 	 100       	 120.296   	 0         	 9.43504   	 12.7499   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 145, r2: 145, leftOrthog: 1)                      	 0.0296329 	 100       	 354.757   	 0         	 30.4945   	 11.6335   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 145, r: 145, streamingCols: 0)                                 	 0.0287368 	 100       	 182.91    	 0         	 20.4758   	 8.93297   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 145, n: 50, r: 145, r2: 50)                           	 0.0271878 	 100       	 386.663   	 0         	 41.8129   	 9.24745   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 7250, r: 50, r2: 50, leftOrthog: 1)                        	 0.0173053 	 100       	 209.473   	 0         	 50.5047   	 4.1476    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 145, r1_: 145, n: 50, r2: 50)                         	 0.0167959 	 100       	 625.896   	 0         	 35.5336   	 17.6142   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 145, m: 145, fromLeft: 1)                              	 0.0159772 	 800       	 0         	 0         	 16.844    	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 145, r1_: 50, n: 50, r2: 145)                         	 0.0137569 	 100       	 764.162   	 0         	 82.6349   	 9.24745   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 145, m: 2500)                                                                                 	 0.00814136	 100       	 0         	 0         	 71.2412   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 145)                                                                        	 0.00705923	 100       	 0         	 0         	 82.1619   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 145, leftOrthog: 1)                         	 0.0036416 	 100       	 19.9088   	 0         	 5.87654   	 3.38785   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 145)  	 0.00283286	 100       	 74.2183   	 0         	 10.0323   	 7.39796   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 145, r2: 145)                            	 0.00181946	 100       	 115.556   	 0         	 15.62     	 7.39796   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 145, r: 50, streamingCols: 0)                                    	 0.00180507	 100       	 6.92495   	 0         	 2.76998   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 145, n: 50, r2new: 1)  	 0.00167443	 100       	 0.865967  	 0         	 6.92869   	 0.124983  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 145, n: 50, r: 2, r2: 1)                              	 0.000967387	 100       	 2.99777   	 0         	 17.9883   	 0.166651  
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000882356	 100       	 0.566665  	 0         	 2.26666   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 145)                            	 0.000846132	 100       	 0         	 0         	 13.7094   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.00081498	 100       	 30.6756   	 0         	 7.36214   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 145)                                                                                                         	 0.000730774	 100       	 0         	 0         	 15.8736   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 145)                                                                          	 0.000660729	 100       	 0         	 0         	 17.5564   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                    	 0.000508113	 100       	 0         	 0         	 7.87226   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 95)                                                                                                          	 0.000436301	 100       	 0         	 0         	 17.4192   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 95, n: 50, r2: 1)                                                                                                          	 0.000373243	 100       	 0         	 0         	 20.3621   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000322311	 100       	 0.775648  	 0         	 12.4104   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 145, m: 50, fromLeft: 1)                               	 0.000305052	 100       	 0         	 0         	 38.0263   	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 8.52549   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 8.52546   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 5.01403   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 5.01274   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 4.52051   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 2.96395   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 2.73503   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 1.8884    	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 1.41241   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 1.32423   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.577188  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.497603  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.470348  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.424678  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.334896  	 1000      
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.254627  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.214515  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.210537  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0652383 	 1100      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.0203952 	 1800      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0162822 	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00640124	 6400      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00123638	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000882356	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000846132	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000322311	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22818600630144 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22818423040000 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22818221713536 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22818020387072 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22817819060608 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22817617734144 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22817416407680 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22817215081216 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22817013754752 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22816812428288 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22816611101824 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22816409775360 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22816208448896 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22816007122432 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22815805795968 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22815604469504 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22815403143040 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22815201816576 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22815000490112 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22814799163648 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22814597837184 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22814396510720 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22814195184256 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22813993857792 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22813792531328 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22813591204864 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22813389878400 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22813188551936 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22812987225472 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22812785899008 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22812584572544 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22812383246080 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22812181915520 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22811980589056 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22811779262592 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22811577936128 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22811376609664 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22811175283200 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22810973956736 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22810772630272 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22810571303808 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22810369977344 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22810168650880 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22809967324416 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22809765997952 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22809564671488 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22809363345024 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22809162018560 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22808960692096 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22808759365632 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22808558039168 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22808356712704 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22808155386240 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22807954059776 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22807752733312 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22807551406848 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22807350080384 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22807148753920 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22806947427456 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22806746100992 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22806544774528 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22806343448064 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22806142121600 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22818494969600 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22818316404480 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 7300, cols: 146, reductionFactor: 31, colBlockingSize: 12)                                 	 2.41194   	 1300      	 173.15    	 0         	 4.68751   	 36.9386   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 146, m: 146)                                                                               	 1.76328   	 700       	 11.5311   	 0         	 0.203556  	 56.6484   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 146, m: 146)                                                                                	 0.583219  	 900       	 6.40336   	 0         	 0.791258  	 8.09263   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 146, n: 50, r2new: 146)	 0.436723  	 700       	 274.173   	 0         	 21.4514   	 12.7811   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 7300, r: 146, r2: 146, leftOrthog: 1)                      	 0.406352  	 600       	 459.523   	 0         	 38.2726   	 12.0066   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 7300, Xcols: 146, r: 146, streamingCols: 0)                                 	 0.397657  	 700       	 273.917   	 0         	 30.1683   	 9.0796    
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 146, reductionFactor: 31, colBlockingSize: 12)                                 	 0.306204  	 200       	 71.8594   	 0         	 2.01861   	 35.5985   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 146, m: 7300)                                                                                 	 0.300137  	 700       	 0         	 0         	 39.7718   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 146, n: 50, r: 146, r2: 146)                          	 0.297328  	 700       	 732.691   	 0         	 40.5489   	 18.0693   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 7300, m: 146)                                                                        	 0.185751  	 700       	 0         	 0         	 64.2634   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 146, r1_: 146, n: 50, r2: 146)                        	 0.18185   	 600       	 1026.83   	 0         	 56.8272   	 18.0693   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 146)                                                                                	 0.0782088 	 100       	 3.9467    	 0         	 0.175428  	 22.4976   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 96, n: 50, r2: 96)                                                                                                         	 0.0650726 	 800       	 0         	 0         	 90.6409   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 146, n: 50, r2new: 50) 	 0.0475875 	 100       	 123.1     	 0         	 16.1068   	 7.64273   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                                 	 0.0423098 	 100       	 2.75744   	 0         	 0.142757  	 19.3157   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 146, reductionFactor: 31, colBlockingSize: 12)                                   	 0.041605  	 200       	 10.5774   	 0         	 1.10048   	 9.61159   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 146, r2: 146, leftOrthog: 1)                      	 0.0340003 	 100       	 313.468   	 0         	 26.7676   	 11.7107   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 7300, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0310057 	 100       	 120.902   	 0         	 9.48214   	 12.7505   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 146, r: 146, streamingCols: 0)                                 	 0.0286867 	 100       	 185.766   	 0         	 20.6551   	 8.99369   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 146, n: 50, r: 146, r2: 50)                           	 0.0253171 	 100       	 420.98    	 0         	 45.4427   	 9.26396   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 7300, r: 50, r2: 50, leftOrthog: 1)                        	 0.0182293 	 100       	 200.227   	 0         	 48.2738   	 4.14773   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 146, m: 146, fromLeft: 1)                              	 0.0171718 	 800       	 0         	 0         	 15.8891   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 146, r1_: 146, n: 50, r2: 50)                         	 0.0165031 	 100       	 645.819   	 0         	 36.4207   	 17.7322   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 146, r1_: 50, n: 50, r2: 146)                         	 0.0147305 	 100       	 723.535   	 0         	 78.1021   	 9.26396   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 146, m: 2500)                                                                                 	 0.00872735	 100       	 0         	 0         	 66.916    	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 146)                                                                        	 0.00834716	 100       	 0         	 0         	 69.9639   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 146, leftOrthog: 1)                         	 0.0032593 	 100       	 22.3974   	 0         	 6.60264   	 3.39219   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 146)  	 0.00297565	 100       	 71.6349   	 0         	 9.65599   	 7.4187    
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 146, r: 50, streamingCols: 0)                                    	 0.00232818	 100       	 5.36899   	 0         	 2.1476    	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 146, n: 50, r2new: 1)  	 0.00202404	 100       	 0.72133   	 0         	 5.77143   	 0.124983  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 146, r2: 146)                            	 0.00194925	 100       	 109.355   	 0         	 14.7404   	 7.4187    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 146, n: 50, r: 2, r2: 1)                              	 0.00123284	 100       	 2.36852   	 0         	 14.2124   	 0.166651  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000895326	 100       	 27.9228   	 0         	 6.70147   	 4.16667   
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000877294	 100       	 0.569934  	 0         	 2.27974   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 146)                            	 0.000854389	 100       	 0         	 0         	 13.6706   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 146)                                                                          	 0.000592055	 100       	 0         	 0         	 19.7279   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 146)                                                                                                         	 0.000529545	 100       	 0         	 0         	 22.0567   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                    	 0.000521529	 100       	 0         	 0         	 7.66976   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 96)                                                                                                          	 0.000447608	 100       	 0         	 0         	 17.1579   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 96, n: 50, r2: 1)                                                                                                          	 0.00040646	 100       	 0         	 0         	 18.8948   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 146, m: 50, fromLeft: 1)                               	 0.00033175	 100       	 0         	 0         	 35.2072   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.00033085	 100       	 0.755629  	 0         	 12.0901   	 0.0625    
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 8.79491   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 8.79488   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 5.28225   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 5.28094   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 4.56138   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 3.02085   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 2.79076   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 1.8838    	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 1.43601   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 1.35586   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.583219  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.48931   	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.461841  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.428672  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.325827  	 1000      
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.309385  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.213978  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.19469   	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0664562 	 1100      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0175036 	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.0130659 	 6400      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.00509731	 1800      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00123713	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000877294	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000854389	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.00033085	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22644091352960 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22643872884736 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22643671558272 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22643470231808 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22643268905344 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22643067578880 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22642866252416 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22642664925952 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22642463599488 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22642262273024 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22642060946560 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22641859620096 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22641658293632 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22641456967168 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22641255640704 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22641054314240 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22640852987776 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22640651661312 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22640450334848 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22640249008384 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22640047681920 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22639846355456 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22639645028992 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22639443702528 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22639242376064 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22639041049600 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22638839723136 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22638638396672 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22638437070208 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22638235743744 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22638034417280 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22637833090816 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22637631760256 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22637430433792 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22637229107328 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22637027780864 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22636826454400 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22636625127936 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22636423801472 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22636222475008 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22636021148544 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22635819822080 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22635618495616 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22635417169152 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22635215842688 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22635014516224 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22634813189760 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22634611863296 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22634410536832 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22634209210368 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22634007883904 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22633806557440 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22633605230976 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22633403904512 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22633202578048 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22633001251584 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22632799925120 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22632598598656 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22632397272192 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22632195945728 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22631994619264 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22631793292800 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22631591966336 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22643985692416 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22643979101952 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 7350, cols: 147, reductionFactor: 30, colBlockingSize: 12)                                 	 2.44678   	 1300      	 174.398   	 0         	 4.68428   	 37.2304   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 147, m: 147)                                                                               	 1.84174   	 700       	 11.2683   	 0         	 0.19756   	 57.0373   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 147, m: 147)                                                                                	 0.594521  	 900       	 6.41159   	 0         	 0.786873  	 8.14819   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 147, n: 50, r2new: 147)	 0.469017  	 700       	 261.277   	 0         	 20.268    	 12.8911   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 7350, r: 147, r2: 147, leftOrthog: 1)                      	 0.440218  	 600       	 432.948   	 0         	 35.8139   	 12.0888   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 7350, Xcols: 147, r: 147, streamingCols: 0)                                 	 0.405528  	 700       	 274.157   	 0         	 29.9894   	 9.14179   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 147, n: 50, r: 147, r2: 147)                          	 0.322185  	 700       	 690.153   	 0         	 37.9349   	 18.1931   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 147, reductionFactor: 30, colBlockingSize: 12)                                 	 0.306104  	 200       	 72.9468   	 0         	 2.03387   	 35.8661   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 7350, m: 147)                                                                        	 0.240984  	 700       	 0         	 0         	 50.2152   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 147, m: 7350)                                                                                 	 0.202764  	 700       	 0         	 0         	 59.6805   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 147, r1_: 147, n: 50, r2: 147)                        	 0.190811  	 600       	 998.85    	 0         	 54.9028   	 18.1931   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 147)                                                                                	 0.07854   	 100       	 3.95552   	 0         	 0.175707  	 22.5121   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 97, n: 50, r2: 97)                                                                                                         	 0.0709304 	 800       	 0         	 0         	 84.8967   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                                 	 0.044291  	 100       	 2.6341    	 0         	 0.136371  	 19.3157   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 147, reductionFactor: 30, colBlockingSize: 12)                                   	 0.0418308 	 200       	 10.676    	 0         	 1.10766   	 9.63832   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 147, n: 50, r2new: 50) 	 0.0412986 	 100       	 144.182   	 0         	 18.7958   	 7.67095   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 7350, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0314746 	 100       	 119.917   	 0         	 9.40442   	 12.7511   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 147, r2: 147, leftOrthog: 1)                      	 0.031177  	 100       	 346.554   	 0         	 29.3991   	 11.7879   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 147, r: 147, streamingCols: 0)                                 	 0.0289676 	 100       	 186.493   	 0         	 20.5969   	 9.0544    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 147, n: 50, r: 147, r2: 50)                           	 0.0285998 	 100       	 377.782   	 0         	 40.708    	 9.2803    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 147, m: 147, fromLeft: 1)                              	 0.0176479 	 800       	 0         	 0         	 15.673    	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 7350, r: 50, r2: 50, leftOrthog: 1)                        	 0.0174255 	 100       	 210.898   	 0         	 50.8451   	 4.14786   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 147, r1_: 147, n: 50, r2: 50)                         	 0.0172148 	 100       	 627.629   	 0         	 35.1609   	 17.8502   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 147, r1_: 50, n: 50, r2: 147)                         	 0.0161837 	 100       	 667.618   	 0         	 71.9392   	 9.2803    
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 147)                                                                        	 0.00938667	 100       	 0         	 0         	 62.642    	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 147, m: 2500)                                                                                 	 0.00886905	 100       	 0         	 0         	 66.298    	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 147, n: 50, r2new: 1)  	 0.00361711	 100       	 0.406402  	 0         	 3.25165   	 0.124983  
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 147, leftOrthog: 1)                         	 0.00333822	 100       	 22.0177   	 0         	 6.48249   	 3.39649   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 147)  	 0.00301468	 100       	 71.6792   	 0         	 9.63525   	 7.43927   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 147, r: 50, streamingCols: 0)                                    	 0.0019995 	 100       	 6.25155   	 0         	 2.50062   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 147, r2: 147)                            	 0.0018663 	 100       	 115.785   	 0         	 15.5641   	 7.43927   
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 147)                            	 0.000944847	 100       	 0         	 0         	 12.4465   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 147, n: 50, r: 2, r2: 1)                              	 0.000941727	 100       	 3.12192   	 0         	 18.7332   	 0.166652  
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000879244	 100       	 0.56867   	 0         	 2.27468   	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000748763	 100       	 33.3884   	 0         	 8.01322   	 4.16667   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 147)                                                                          	 0.000595155	 100       	 0         	 0         	 19.7596   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 147)                                                                                                         	 0.000535776	 100       	 0         	 0         	 21.9495   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                    	 0.000504996	 100       	 0         	 0         	 7.92085   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 97)                                                                                                          	 0.000476706	 100       	 0         	 0         	 16.2784   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 97, n: 50, r2: 1)                                                                                                          	 0.000397854	 100       	 0         	 0         	 19.5046   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000365215	 100       	 0.684528  	 0         	 10.9525   	 0.0625    
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 147, m: 50, fromLeft: 1)                               	 0.000357577	 100       	 0         	 0         	 32.888    	 0         
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 8.73107   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 8.73104   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 5.17094   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 5.1696    	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 4.69241   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 3.00981   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 2.82619   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 1.96457   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 1.44007   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 1.38758   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.594521  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.516948  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.492159  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.436495  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.353592  	 1000      
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.250966  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.224958  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.212138  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0723408 	 1100      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0180055 	 900       
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.0168521 	 1800      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00613706	 6400      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00124363	 4600      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000944847	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000879244	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000365215	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 23040965105536 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 23040754706432 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 23040553379968 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 23040352053504 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 23040150727040 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 23039949400576 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 23039748074112 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 23039546747648 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 23039345421184 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 23039144094720 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 23038942768256 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 23038741441792 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 23038540115328 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 23038338788864 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 23038137462400 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 23037936135936 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 23037734809472 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 23037533483008 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 23037332156544 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 23037130830080 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 23036929503616 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 23036728177152 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 23036526850688 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 23036325524224 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 23036124197760 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 23035922871296 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 23035721544832 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 23035520218368 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 23035318891904 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 23035117565440 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 23034916238976 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 23034714912512 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 23034513581952 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 23034312255488 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 23034110929024 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 23033909602560 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 23033708276096 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 23033506949632 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 23033305623168 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 23033104296704 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 23032902970240 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 23032701643776 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 23032500317312 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 23032298990848 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 23032097664384 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 23031896337920 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 23031695011456 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 23031493684992 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 23031292358528 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 23031091032064 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 23030889705600 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 23030688379136 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 23030487052672 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 23030285726208 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 23030084399744 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 23029883073280 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 23029681746816 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 23029480420352 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 23029279093888 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 23029077767424 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 23028876440960 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 23028675114496 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 23028473788032 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 23040859444992 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 23040852854528 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 7400, cols: 148, reductionFactor: 30, colBlockingSize: 12)                                 	 2.44427   	 1300      	 178.164   	 0         	 4.75312   	 37.4837   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 148, m: 148)                                                                               	 1.80941   	 700       	 11.7053   	 0         	 0.203833  	 57.4262   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 148, m: 148)                                                                                	 0.589677  	 900       	 6.59709   	 0         	 0.804156  	 8.20374   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 148, n: 50, r2new: 148)	 0.485785  	 700       	 258.134   	 0         	 19.8543   	 13.0014   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 7400, r: 148, r2: 148, leftOrthog: 1)                      	 0.443836  	 600       	 438.242   	 0         	 36.0069   	 12.1711   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 7400, Xcols: 148, r: 148, streamingCols: 0)                                 	 0.407266  	 700       	 278.596   	 0         	 30.2691   	 9.20398   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 148, n: 50, r: 148, r2: 148)                          	 0.329142  	 700       	 689.446   	 0         	 37.64     	 18.3168   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 148, reductionFactor: 30, colBlockingSize: 12)                                 	 0.322618  	 200       	 70.1577   	 0         	 1.94362   	 36.0964   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 7400, m: 148)                                                                        	 0.266924  	 700       	 0         	 0         	 45.9541   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 148, m: 7400)                                                                                 	 0.233132  	 700       	 0         	 0         	 52.6149   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 148, r1_: 148, n: 50, r2: 148)                        	 0.187689  	 600       	 1036.33   	 0         	 56.578    	 18.3168   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 148)                                                                                	 0.0777957 	 100       	 4.01908   	 0         	 0.178416  	 22.5264   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 98, n: 50, r2: 98)                                                                                                         	 0.0676178 	 800       	 0         	 0         	 90.9015   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 148, n: 50, r2new: 50) 	 0.0510228 	 100       	 118.614   	 0         	 15.4064   	 7.69896   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                                 	 0.0437292 	 100       	 2.66793   	 0         	 0.138123  	 19.3157   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 148, reductionFactor: 30, colBlockingSize: 12)                                   	 0.0414367 	 200       	 10.9247   	 0         	 1.13152   	 9.65488   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 7400, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0314587 	 100       	 120.793   	 0         	 9.47273   	 12.7517   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 148, r2: 148, leftOrthog: 1)                      	 0.0312189 	 100       	 350.813   	 0         	 29.5669   	 11.8651   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 148, r: 148, streamingCols: 0)                                 	 0.0294417 	 100       	 185.995   	 0         	 20.4052   	 9.1151    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 148, n: 50, r: 148, r2: 50)                           	 0.0275819 	 100       	 397.073   	 0         	 42.7121   	 9.29648   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 7400, r: 50, r2: 50, leftOrthog: 1)                        	 0.0179174 	 100       	 206.503   	 0         	 49.7839   	 4.14798   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 148, m: 148, fromLeft: 1)                              	 0.0174435 	 800       	 0         	 0         	 16.0731   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 148, r1_: 148, n: 50, r2: 50)                         	 0.0161615 	 100       	 677.66    	 0         	 37.7145   	 17.9681   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 148, r1_: 50, n: 50, r2: 148)                         	 0.0141374 	 100       	 774.683   	 0         	 83.3308   	 9.29648   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 148, m: 2500)                                                                                 	 0.00927313	 100       	 0         	 0         	 63.8404   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 148)                                                                        	 0.00827049	 100       	 0         	 0         	 71.5798   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 148, leftOrthog: 1)                         	 0.00379168	 100       	 19.5164   	 0         	 5.73889   	 3.40074   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 148)  	 0.00295093	 100       	 74.2275   	 0         	 9.9505    	 7.45968   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 148, r: 50, streamingCols: 0)                                    	 0.00200254	 100       	 6.24207   	 0         	 2.49683   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 148, r2: 148)                            	 0.00195356	 100       	 112.124   	 0         	 15.0306   	 7.45968   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 148, n: 50, r2new: 1)  	 0.00165438	 100       	 0.894595  	 0         	 7.15773   	 0.124983  
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 148, n: 50, r: 2, r2: 1)                              	 0.000964406	 100       	 3.06925   	 0         	 18.4171   	 0.166652  
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 148)                            	 0.000838285	 100       	 0         	 0         	 14.1241   	 0         
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000798988	 100       	 0.625792  	 0         	 2.50317   	 0.25      
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000735464	 100       	 33.9921   	 0         	 8.15812   	 4.16667   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 148)                                                                                                         	 0.000735018	 100       	 0         	 0         	 16.1084   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                    	 0.000497491	 100       	 0         	 0         	 8.04035   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 148)                                                                          	 0.000469426	 100       	 0         	 0         	 25.2223   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 98)                                                                                                          	 0.000441534	 100       	 0         	 0         	 17.7563   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 98, n: 50, r2: 1)                                                                                                          	 0.0004001 	 100       	 0         	 0         	 19.5951   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 148, m: 50, fromLeft: 1)                               	 0.000340743	 100       	 0         	 0         	 34.7476   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000329192	 100       	 0.759435  	 0         	 12.151    	 0.0625    
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 8.86081   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 8.86078   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 5.17324   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 5.17202   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 4.67853   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 3.10405   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 2.83978   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 1.93093   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 1.46433   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 1.37658   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.589677  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.541413  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.496764  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.438711  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.359642  	 1000      
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.275664  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.242903  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.218723  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0691944 	 1100      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.0227008 	 1800      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0177842 	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00596293	 6400      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00120409	 4600      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000838285	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000798988	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000329192	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22623632832384 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22623404681216 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22623203354752 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22623002028288 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22622800701824 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22622599375360 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22622398048896 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22622196722432 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22621995395968 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22621794069504 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22621592743040 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22621391416576 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22621190090112 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22620988763648 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22620787437184 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22620586110720 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22620384784256 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22620183457792 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22619982131328 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22619780804864 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22619579478400 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22619378151936 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22619176825472 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22618975499008 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22618774172544 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22618572846080 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22618371519616 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22618170193152 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22617968866688 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22617767540224 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22617566213760 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22617364887296 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22617163556736 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22616962230272 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22616760903808 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22616559577344 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22616358250880 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22616156924416 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22615955597952 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22615754271488 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22615552945024 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22615351618560 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22615150292096 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22614948965632 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22614747639168 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22614546312704 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22614344986240 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22614143659776 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22613942333312 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22613741006848 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22613539680384 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22613338353920 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22613137027456 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22612935700992 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22612734374528 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22612533048064 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22612331721600 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22612130395136 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22611929068672 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22611727742208 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22611526415744 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22611325089280 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22611123762816 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22623527171840 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22623520581376 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 7450, cols: 149, reductionFactor: 30, colBlockingSize: 12)                                 	 2.47032   	 1300      	 179.882   	 0         	 4.76675   	 37.7369   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 149, m: 149)                                                                               	 1.88327   	 700       	 11.4757   	 0         	 0.19849   	 57.8151   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 149, m: 149)                                                                                	 0.619374  	 900       	 6.40895   	 0         	 0.775967  	 8.2593    
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 149, n: 50, r2new: 149)	 0.477126  	 700       	 268.901   	 0         	 20.508    	 13.112    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 7450, r: 149, r2: 149, leftOrthog: 1)                      	 0.457067  	 600       	 434.24    	 0         	 35.4386   	 12.2533   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 7450, Xcols: 149, r: 149, streamingCols: 0)                                 	 0.406735  	 700       	 284.653   	 0         	 30.7196   	 9.26617   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 149, n: 50, r: 149, r2: 149)                          	 0.321053  	 700       	 721.24    	 0         	 39.1115   	 18.4406   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 149, reductionFactor: 30, colBlockingSize: 12)                                 	 0.316026  	 200       	 72.5923   	 0         	 1.99832   	 36.3266   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 7450, m: 149)                                                                        	 0.286165  	 700       	 0         	 0         	 43.4454   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 149, m: 7450)                                                                                 	 0.224186  	 700       	 0         	 0         	 55.4563   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 149, r1_: 149, n: 50, r2: 149)                        	 0.197106  	 600       	 1006.96   	 0         	 54.6054   	 18.4406   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 149)                                                                                	 0.0791455 	 100       	 3.9758    	 0         	 0.176384  	 22.5406   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 99, n: 50, r2: 99)                                                                                                         	 0.0699335 	 800       	 0         	 0         	 89.6943   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 149, n: 50, r2new: 50) 	 0.0499103 	 100       	 123.231   	 0         	 15.9486   	 7.72676   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                                 	 0.0439094 	 100       	 2.65699   	 0         	 0.137556  	 19.3157   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 149, reductionFactor: 30, colBlockingSize: 12)                                   	 0.0433348 	 200       	 10.5878   	 0         	 1.09477   	 9.67127   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 7450, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0315837 	 100       	 121.128   	 0         	 9.49856   	 12.7523   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 149, r2: 149, leftOrthog: 1)                      	 0.031133  	 100       	 356.551   	 0         	 29.8565   	 11.9422   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 149, r: 149, streamingCols: 0)                                 	 0.028712  	 100       	 193.308   	 0         	 21.0672   	 9.17578   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 149, n: 50, r: 149, r2: 50)                           	 0.026319  	 100       	 421.768   	 0         	 45.2905   	 9.3125    
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 7450, r: 50, r2: 50, leftOrthog: 1)                        	 0.0193362 	 100       	 192.644   	 0         	 46.4415   	 4.14811   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 149, m: 149, fromLeft: 1)                              	 0.018318  	 800       	 0         	 0         	 15.5133   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 149, r1_: 149, n: 50, r2: 50)                         	 0.017291  	 100       	 641.98    	 0         	 35.4959   	 18.086    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 149, r1_: 50, n: 50, r2: 149)                         	 0.0156681 	 100       	 708.476   	 0         	 76.0779   	 9.3125    
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 149)                                                                        	 0.00868288	 100       	 0         	 0         	 68.6408   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 149, m: 2500)                                                                                 	 0.00858889	 100       	 0         	 0         	 69.392    	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 149, leftOrthog: 1)                         	 0.00354862	 100       	 20.9941   	 0         	 6.16578   	 3.40494   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 149)  	 0.00286273	 100       	 77.5519   	 0         	 10.368    	 7.47992   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 149, n: 50, r2new: 1)  	 0.00203177	 100       	 0.733351  	 0         	 5.8676    	 0.124983  
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 149, r: 50, streamingCols: 0)                                    	 0.00200689	 100       	 6.22855   	 0         	 2.49142   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 149, r2: 149)                            	 0.00189519	 100       	 117.144   	 0         	 15.6611   	 7.47992   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 149, n: 50, r: 2, r2: 1)                              	 0.00116529	 100       	 2.55731   	 0         	 15.3452   	 0.166652  
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000860386	 100       	 0.581135  	 0         	 2.32454   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 149)                            	 0.000807996	 100       	 0         	 0         	 14.7525   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000742713	 100       	 33.6604   	 0         	 8.07849   	 4.16667   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 149)                                                                          	 0.000604708	 100       	 0         	 0         	 19.712    	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 149)                                                                                                         	 0.000543336	 100       	 0         	 0         	 21.9385   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                    	 0.000528195	 100       	 0         	 0         	 7.57296   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 99)                                                                                                          	 0.000448199	 100       	 0         	 0         	 17.6707   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 99, n: 50, r2: 1)                                                                                                          	 0.000406056	 100       	 0         	 0         	 19.5047   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 149, m: 50, fromLeft: 1)                               	 0.000338555	 100       	 0         	 0         	 35.2085   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000329423	 100       	 0.758903  	 0         	 12.1424   	 0.0625    
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 9.04683   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 9.0468    	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 5.33506   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 5.33379   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 4.80322   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 3.14828   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 2.86127   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 2.00633   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 1.46924   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 1.39314   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.619374  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.531931  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.511085  	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.437454  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.350433  	 1000      
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.295453  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.233304  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.230808  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.0713311 	 1100      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.0285796 	 1800      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0186565 	 900       
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00644426	 4600      
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00613088	 6400      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000860386	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000807996	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000329423	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
[1;34m[pthread wrapper] 
[0m[1;34m[pthread wrapper] MAIN -> 0
[0m[1;34m[pthread wrapper] PIN_MASK: [0m[1;34m0->1  [0m[1;34m1->2  [0m[1;34m2->3  [0m[1;34m3->4  [0m[1;34m4->5  [0m[1;34m5->6  [0m[1;34m6->7  [0m[1;34m7->8  [0m[1;34m8->9  [0m[1;34m9->10  [0m[1;34m10->11  [0m[1;34m11->12  [0m[1;34m12->13  [0m[1;34m13->14  [0m[1;34m14->15  [0m[1;34m15->16  [0m[1;34m16->17  [0m[1;34m17->18  [0m[1;34m18->19  [0m[1;34m19->20  [0m[1;34m20->21  [0m[1;34m21->22  [0m[1;34m22->23  [0m[1;34m23->24  [0m[1;34m24->25  [0m[1;34m25->26  [0m[1;34m26->27  [0m[1;34m27->28  [0m[1;34m28->29  [0m[1;34m29->30  [0m[1;34m30->31  [0m[1;34m31->32  [0m[1;34m32->33  [0m[1;34m33->34  [0m[1;34m34->35  [0m[1;34m35->36  [0m[1;34m36->37  [0m[1;34m37->38  [0m[1;34m38->39  [0m[1;34m39->40  [0m[1;34m40->41  [0m[1;34m41->42  [0m[1;34m42->43  [0m[1;34m43->44  [0m[1;34m44->45  [0m[1;34m45->46  [0m[1;34m46->47  [0m[1;34m47->48  [0m[1;34m48->49  [0m[1;34m49->50  [0m[1;34m50->51  [0m[1;34m51->52  [0m[1;34m52->53  [0m[1;34m53->54  [0m[1;34m54->55  [0m[1;34m55->56  [0m[1;34m56->57  [0m[1;34m57->58  [0m[1;34m58->59  [0m[1;34m59->60  [0m[1;34m60->61  [0m[1;34m61->62  [0m[1;34m62->63  [0m[1;34m
[pthread wrapper] SKIP MASK: 0x0
[0m[1;34m	threadid 22649115907968 -> hwthread 1 - OK[0m[1;34m
[0m[1;34m	threadid 22648906049536 -> hwthread 2 - OK[0m[1;34m
[0m[1;34m	threadid 22648704723072 -> hwthread 3 - OK[0m[1;34m
[0m[1;34m	threadid 22648503396608 -> hwthread 4 - OK[0m[1;34m
[0m[1;34m	threadid 22648302070144 -> hwthread 5 - OK[0m[1;34m
[0m[1;34m	threadid 22648100743680 -> hwthread 6 - OK[0m[1;34m
[0m[1;34m	threadid 22647899417216 -> hwthread 7 - OK[0m[1;34m
[0m[1;34m	threadid 22647698090752 -> hwthread 8 - OK[0m[1;34m
[0m[1;34m	threadid 22647496764288 -> hwthread 9 - OK[0m[1;34m
[0m[1;34m	threadid 22647295437824 -> hwthread 10 - OK[0m[1;34m
[0m[1;34m	threadid 22647094111360 -> hwthread 11 - OK[0m[1;34m
[0m[1;34m	threadid 22646892784896 -> hwthread 12 - OK[0m[1;34m
[0m[1;34m	threadid 22646691458432 -> hwthread 13 - OK[0m[1;34m
[0m[1;34m	threadid 22646490131968 -> hwthread 14 - OK[0m[1;34m
[0m[1;34m	threadid 22646288805504 -> hwthread 15 - OK[0m[1;34m
[0m[1;34m	threadid 22646087479040 -> hwthread 16 - OK[0m[1;34m
[0m[1;34m	threadid 22645886152576 -> hwthread 17 - OK[0m[1;34m
[0m[1;34m	threadid 22645684826112 -> hwthread 18 - OK[0m[1;34m
[0m[1;34m	threadid 22645483499648 -> hwthread 19 - OK[0m[1;34m
[0m[1;34m	threadid 22645282173184 -> hwthread 20 - OK[0m[1;34m
[0m[1;34m	threadid 22645080846720 -> hwthread 21 - OK[0m[1;34m
[0m[1;34m	threadid 22644879520256 -> hwthread 22 - OK[0m[1;34m
[0m[1;34m	threadid 22644678193792 -> hwthread 23 - OK[0m[1;34m
[0m[1;34m	threadid 22644476867328 -> hwthread 24 - OK[0m[1;34m
[0m[1;34m	threadid 22644275540864 -> hwthread 25 - OK[0m[1;34m
[0m[1;34m	threadid 22644074214400 -> hwthread 26 - OK[0m[1;34m
[0m[1;34m	threadid 22643872887936 -> hwthread 27 - OK[0m[1;34m
[0m[1;34m	threadid 22643671561472 -> hwthread 28 - OK[0m[1;34m
[0m[1;34m	threadid 22643470235008 -> hwthread 29 - OK[0m[1;34m
[0m[1;34m	threadid 22643268908544 -> hwthread 30 - OK[0m[1;34m
[0m[1;34m	threadid 22643067582080 -> hwthread 31 - OK[0m[1;34m
[0m[1;34m	threadid 22642866255616 -> hwthread 32 - OK[0m[1;34m
[0m[1;34m	threadid 22642664925056 -> hwthread 33 - OK[0m[1;34m
[0m[1;34m	threadid 22642463598592 -> hwthread 34 - OK[0m[1;34m
[0m[1;34m	threadid 22642262272128 -> hwthread 35 - OK[0m[1;34m
[0m[1;34m	threadid 22642060945664 -> hwthread 36 - OK[0m[1;34m
[0m[1;34m	threadid 22641859619200 -> hwthread 37 - OK[0m[1;34m
[0m[1;34m	threadid 22641658292736 -> hwthread 38 - OK[0m[1;34m
[0m[1;34m	threadid 22641456966272 -> hwthread 39 - OK[0m[1;34m
[0m[1;34m	threadid 22641255639808 -> hwthread 40 - OK[0m[1;34m
[0m[1;34m	threadid 22641054313344 -> hwthread 41 - OK[0m[1;34m
[0m[1;34m	threadid 22640852986880 -> hwthread 42 - OK[0m[1;34m
[0m[1;34m	threadid 22640651660416 -> hwthread 43 - OK[0m[1;34m
[0m[1;34m	threadid 22640450333952 -> hwthread 44 - OK[0m[1;34m
[0m[1;34m	threadid 22640249007488 -> hwthread 45 - OK[0m[1;34m
[0m[1;34m	threadid 22640047681024 -> hwthread 46 - OK[0m[1;34m
[0m[1;34m	threadid 22639846354560 -> hwthread 47 - OK[0m[1;34m
[0m[1;34m	threadid 22639645028096 -> hwthread 48 - OK[0m[1;34m
[0m[1;34m	threadid 22639443701632 -> hwthread 49 - OK[0m[1;34m
[0m[1;34m	threadid 22639242375168 -> hwthread 50 - OK[0m[1;34m
[0m[1;34m	threadid 22639041048704 -> hwthread 51 - OK[0m[1;34m
[0m[1;34m	threadid 22638839722240 -> hwthread 52 - OK[0m[1;34m
[0m[1;34m	threadid 22638638395776 -> hwthread 53 - OK[0m[1;34m
[0m[1;34m	threadid 22638437069312 -> hwthread 54 - OK[0m[1;34m
[0m[1;34m	threadid 22638235742848 -> hwthread 55 - OK[0m[1;34m
[0m[1;34m	threadid 22638034416384 -> hwthread 56 - OK[0m[1;34m
[0m[1;34m	threadid 22637833089920 -> hwthread 57 - OK[0m[1;34m
[0m[1;34m	threadid 22637631763456 -> hwthread 58 - OK[0m[1;34m
[0m[1;34m	threadid 22637430436992 -> hwthread 59 - OK[0m[1;34m
[0m[1;34m	threadid 22637229110528 -> hwthread 60 - OK[0m[1;34m
[0m[1;34m	threadid 22637027784064 -> hwthread 61 - OK[0m[1;34m
[0m[1;34m	threadid 22636826457600 -> hwthread 62 - OK[0m[1;34m
[0m[1;34m	threadid 22636625131136 -> hwthread 63 - OK[0m[1;34m
[0m[1;34mRoundrobin placement triggered
	threadid 22649010247424 -> hwthread 0 - OK[0m[1;34m
[0m[1;34m	threadid 22649003656960 -> hwthread 1 - OK[0m[1;34m
[0mPITTS: version v0.9.5-108-g17d8d92
PITTS: MPI #procs: 1
PITTS: OpenMP #threads: 64
PITTS: SIMD implementation: avx2
PITTS: Eigen SIMD implementation: AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2
PITTS: cache sizes (L1/core, L2/core, L3/accessible) [byte]: (32768, 524288, 805306368)
PITTS: preprocessor definitions: PITTS_TENSORTRAIN_PLAIN_AXPBY PITTS_DIRECT_MKL_GEMM
Performance statistics:
function                                                                                                                                                                                                                      	 time [s]  	 #calls    	 GFlop/s DP	 GFlop/s SP	 GByte/s   	Flops/Byte
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 7500, cols: 150, reductionFactor: 30, colBlockingSize: 12)                                 	 2.47797   	 1300      	 182.962   	 0         	 4.81604   	 37.9902   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 150, m: 150)                                                                               	 1.89254   	 700       	 11.651    	 0         	 0.200175  	 58.204    
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 150, m: 150)                                                                                	 0.611394  	 900       	 6.6242    	 0         	 0.796671  	 8.31486   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 150, n: 50, r2new: 150)	 0.504497  	 700       	 260.16    	 0         	 19.675    	 13.2228   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 7500, r: 150, r2: 150, leftOrthog: 1)                      	 0.444855  	 600       	 455.204   	 0         	 36.9019   	 12.3355   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 7500, Xcols: 150, r: 150, streamingCols: 0)                                 	 0.418134  	 700       	 282.505   	 0         	 30.2846   	 9.32836   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 150, n: 50, r: 150, r2: 150)                          	 0.338984  	 700       	 696.935   	 0         	 37.5415   	 18.5644   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 2500, cols: 150, reductionFactor: 30, colBlockingSize: 12)                                 	 0.322506  	 200       	 72.0917   	 0         	 1.97206   	 36.5566   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 150, m: 7500)                                                                                 	 0.235824  	 700       	 0         	 0         	 53.4298   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 150, r1_: 150, n: 50, r2: 150)                        	 0.197658  	 600       	 1024.5    	 0         	 55.1862   	 18.5644   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 7500, m: 150)                                                                        	 0.191853  	 700       	 0         	 0         	 65.6752   	 0         
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 150)                                                                                	 0.0800889 	 100       	 3.95394   	 0         	 0.175305  	 22.5546   
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 100, n: 50, r2: 100)                                                                                                       	 0.0638269 	 800       	 0         	 0         	 100.271   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 150, n: 50, r2new: 50) 	 0.0458793 	 100       	 136.227   	 0         	 17.5678   	 7.75434   
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double](n: 50, m: 50)                                                                                 	 0.0441233 	 100       	 2.64411   	 0         	 0.136889  	 19.3157   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 50, cols: 150, reductionFactor: 30, colBlockingSize: 12)                                   	 0.0409265 	 200       	 11.3618   	 0         	 1.17283   	 9.6875    
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 150, n: 50, r: 150, r2: 50)                           	 0.0352124 	 100       	 319.49    	 0         	 34.2493   	 9.32836   
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double](rows: 7500, cols: 50, reductionFactor: 37, colBlockingSize: 12)                                  	 0.0327124 	 100       	 117.734   	 0         	 9.23197   	 12.7528   
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 2500, r: 150, r2: 150, leftOrthog: 1)                      	 0.0312208 	 100       	 360.337   	 0         	 29.9801   	 12.0192   
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 2500, Xcols: 150, r: 150, streamingCols: 0)                                 	 0.0297746 	 100       	 188.919   	 0         	 20.4537   	 9.23645   
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 150, m: 150, fromLeft: 1)                              	 0.0188207 	 800       	 0         	 0         	 15.3023   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 7500, r: 50, r2: 50, leftOrthog: 1)                        	 0.0179434 	 100       	 208.991   	 0         	 50.3806   	 4.14823   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 150, r1_: 150, n: 50, r2: 50)                         	 0.0159645 	 100       	 704.69    	 0         	 38.711    	 18.2039   
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 150, r1_: 50, n: 50, r2: 150)                         	 0.0144384 	 100       	 779.17    	 0         	 83.527    	 9.32836   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 2500, m: 150)                                                                        	 0.00692296	 100       	 0         	 0         	 86.6681   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 150, m: 2500)                                                                                 	 0.00659015	 100       	 0         	 0         	 91.0449   	 0         
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>(r1: 50, r: 50, r2: 150, leftOrthog: 1)                         	 0.00389124	 100       	 19.2741   	 0         	 5.65373   	 3.40909   
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 1, n: 50, r2new: 150)  	 0.00296646	 100       	 75.848    	 0         	 10.1131   	 7.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 1, n: 50, r: 150, r2: 150)                            	 0.00198337	 100       	 113.443   	 0         	 15.1258   	 7.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double](r1sum: 150, n: 50, r2new: 1)  	 0.00180165	 100       	 0.83257   	 0         	 6.66145   	 0.124983  
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double](Xrows: 50, Xcols: 150, r: 50, streamingCols: 0)                                    	 0.00162453	 100       	 7.69454   	 0         	 3.07782   	 2.5       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 150, n: 50, r: 2, r2: 1)                              	 0.000946719	 100       	 3.16884   	 0         	 19.0147   	 0.166652  
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                   	 0.000844754	 100       	 0.591888  	 0         	 2.36755   	 0.25      
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double](r1: 50, r2: 150)                            	 0.000822784	 100       	 0         	 0         	 14.5846   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double](r1: 50, r1_: 50, n: 50, r2: 1)                            	 0.000754854	 100       	 33.119    	 0         	 7.94856   	 4.16667   
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double](n: 50, m: 150)                                                                          	 0.000598694	 100       	 0         	 0         	 20.0436   	 0         
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double](n: 50, m: 50)                                                                                    	 0.000574177	 100       	 0         	 0         	 6.96649   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 150)                                                                                                         	 0.000547869	 100       	 0         	 0         	 21.903    	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 1, n: 50, r2: 100)                                                                                                         	 0.000471625	 100       	 0         	 0         	 16.9626   	 0         
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double](r1: 100, n: 50, r2: 1)                                                                                                         	 0.000413601	 100       	 0         	 0         	 19.3423   	 0         
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>](n: 150, m: 50, fromLeft: 1)                               	 0.000357416	 100       	 0         	 0         	 33.5743   	 0         
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double](r1: 50, n: 50, r2: 1)                                                                                                 	 0.000328478	 100       	 0.761086  	 0         	 12.1774   	 0.0625    
Timing statistics:
function                                                                                                                                                                                       	 time [s]  	 #calls    
<PITTS::TensorTrain<double>> :: T PITTS::axpby(T, const TensorTrain<T>&, T, TensorTrain<T>&, T, int) [with T = double]                                                                         	 9.0019    	 100       
<PITTS::TensorTrain<double>> :: T PITTS::internal::axpby_plain(T, const PITTS::TensorTrain<T>&, T, PITTS::TensorTrain<T>&, T, int) [with T = double]                                           	 9.00187   	 100       
<PITTS::TensorTrain<double>> :: T PITTS::leftNormalize(TensorTrain<T>&, T, int) [with T = double]                                                                                              	 5.38049   	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::leftNormalize_range(PITTS::TensorTrain<T>&, int, int, T, int) [with T = double]                                                          	 5.37924   	 100       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_svd(const PITTS::ConstTensor2View<T>&, bool, T, int, bool, bool, T*) [with T = double] 	 4.79877   	 900       
<PITTS::Tensor2<double>> :: std::pair<PITTS::Tensor2<T>, PITTS::Tensor2<T> > PITTS::internal::normalize_qb(const PITTS::ConstTensor2View<T>&, bool, T, int, bool) [with T = double]            	 3.06381   	 900       
<PITTS::MultiVector<double>> :: void PITTS::block_TSQR(const MultiVector<T>&, Tensor2<T>&, int, bool, int) [with T = double]                                                                   	 2.87412   	 1800      
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_svd_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                	 2.01676   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_qb_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                              	 1.47698   	 900       
<PITTS::MultiVector<double>> :: void PITTS::internal::normalize_svd_block_TSQR(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                             	 1.39831   	 900       
<PITTS::Tensor2<double>> :: auto PITTS::internal::normalize_qr_only(const PITTS::ConstTensor2View<T>&, bool) [with T = double]                                                                 	 0.611394  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::axpby_contract1(const PITTS::Tensor3<T>&, const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&, bool) [with T = double]	 0.555145  	 1000      
<PITTS::Tensor2<double>> :: PITTS::internal::normalize_svd<double>(const PITTS::ConstTensor2View<double>&, bool, double, int, bool, bool, double*)::<lambda()>                                 	 0.49791   	 900       
<PITTS::MultiVector<double>> :: void PITTS::triangularSolve(MultiVector<T>&, const Tensor2<T>&, const std::vector<int>&) [with T = double]                                                     	 0.449533  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract2(const PITTS::Tensor3<T>&, const PITTS::Tensor2<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.377127  	 1000      
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::MultiVector<T>&, PITTS::Tensor2<T>&) [with T = double]                                                                   	 0.242988  	 900       
<PITTS::TensorTrain<double>> :: void PITTS::internal::normalize_contract1(const PITTS::Tensor2<T>&, const PITTS::Tensor3<T>&, PITTS::Tensor3<T>&) [with T = double]                            	 0.228816  	 900       
<double> :: void PITTS::internal::normalize_qb_transpose(const PITTS::ConstTensor2View<T>&, PITTS::MultiVector<T>&) [with T = double]                                                          	 0.199375  	 900       
<PITTS::Tensor3<double>> :: void PITTS::copy(const Tensor3<T>&, Tensor3<T>&) [with T = double]                                                                                                 	 0.06526   	 1100      
<double> :: void PITTS::internal::normalize_qb_reorder(const auto:51&, bool, PITTS::Tensor2<T>&) [with T = double; auto:51 = Eigen::PermutationMatrix<-1, -1, int>]                            	 0.0191781 	 900       
<PITTS::Tensor2<double>> :: void PITTS::Tensor2<T>::resize(long long int, long long int, bool) [with T = double]                                                                               	 0.00770485	 6400      
<PITTS::MultiVector<double>> :: void PITTS::MultiVector<T>::resize(long long int, long long int, bool, bool) [with T = double]                                                                 	 0.00380992	 1800      
<PITTS::Tensor3<double>> :: void PITTS::Tensor3<T>::resize(long long int, long long int, long long int, bool, bool) [with T = double]                                                          	 0.00124947	 4600      
<PITTS::TensorTrain<double>> :: T PITTS::internal::t3_nrm(const PITTS::Tensor3<T>&) [with T = double]                                                                                          	 0.000844754	 100       
<PITTS::Tensor2<double>> :: void PITTS::concatLeftRight(const std::optional<ConstTensor2View<T> >&, const std::optional<ConstTensor2View<T> >&, Tensor2View<T>) [with T = double]              	 0.000822784	 100       
<PITTS::TensorTrain<double>> :: void PITTS::internal::t3_scale(T, PITTS::Tensor3<T>&) [with T = double]                                                                                        	 0.000328478	 100       
INFO: You are running LIKWID in a cpuset with 64 CPUs. Taking given IDs as logical ID in cpuset
